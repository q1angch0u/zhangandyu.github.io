<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怪兽宇的小站</title>
  
  <subtitle>脚踏实地，仰望星空!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangandyu.github.io/"/>
  <updated>2019-12-15T07:29:02.447Z</updated>
  <id>https://zhangandyu.github.io/</id>
  
  <author>
    <name>怪兽宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hive 进阶查询</title>
    <link href="https://zhangandyu.github.io/2019/05/07/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-Hive%E8%BF%9B%E9%98%B6%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zhangandyu.github.io/2019/05/07/数据分析技能-Hive进阶查询/</id>
    <published>2019-05-06T16:00:00.000Z</published>
    <updated>2019-12-15T07:29:02.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hive查询性能优化"><a href="#Hive查询性能优化" class="headerlink" title="Hive查询性能优化"></a>Hive查询性能优化</h1><h2 id="什么是数据倾斜"><a href="#什么是数据倾斜" class="headerlink" title="什么是数据倾斜"></a>什么是数据倾斜</h2><p>当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</p><h2 id="数据倾斜的表现"><a href="#数据倾斜的表现" class="headerlink" title="数据倾斜的表现"></a>数据倾斜的表现</h2><p>任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</p><p>##如何避免数据倾斜</p><blockquote><ul><li>sql优化</li><li>业务逻辑优化</li></ul></blockquote><h3 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h3><ul><li>在查询中， 避免使用 select *, 使用条件限制取需要的列</li></ul><h3 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h3><ul><li><strong>当数据量特别大时，用 group by 代替 count(distinct)</strong></li></ul><blockquote><p>count(distinct ),在数据量特别大的情况下，效率较低, 可以用先 group by 再 count 的方式进行代替。<br>因为count(distinct)是按group by 字段分组，按distinct字段排序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-02'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>可以转换成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-02'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date, user_account) a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><h3 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h3><ul><li><strong>join 优化</strong></li></ul><blockquote><p> 在使用 Join 进行外关联时， 将副表的过滤条件写在 where 后面，会先全表关联， 再进行过滤， 这样会耗费资源。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><p>正确的写法是将 where 条件写在 on 后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> ( b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol <span class="keyword">and</span> s.symbol = <span class="string">'APPLE'</span>)</span><br></pre></td></tr></table></figure><h3 id="方法4："><a href="#方法4：" class="headerlink" title="方法4："></a>方法4：</h3><ul><li><strong>避免 union all 子查询中使用 group by</strong> 【替换 count(distinct) 除外】、<strong>count(distinct)、max、min等。</strong> </li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><h3 id="方法5："><a href="#方法5：" class="headerlink" title="方法5："></a>方法5：</h3><ul><li><strong>避免不同数据类型进行关联</strong></li></ul><blockquote><p>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    a.price_close,</span><br><span class="line">    b.price_close</span><br><span class="line">from</span><br><span class="line">    a join b  on a.user_id = cast(b.user_id as string)</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-11-01&apos; and &apos;2018-11-02&apos;</span><br><span class="line">    and </span><br><span class="line">    a.symbol = &apos;apple&apos;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="方法6："><a href="#方法6：" class="headerlink" title="方法6："></a>方法6：</h3><ul><li><strong>无效ID在关联时的数据倾斜问题</strong></li></ul><blockquote><p>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。<br>需要用到Case When … Else…End语法</p></blockquote><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    a <span class="keyword">Join</span>  b</span><br><span class="line"><span class="keyword">On</span></span><br><span class="line">     a.user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">And</span> </span><br><span class="line">    a.user_id = b.user_id</span><br><span class="line"><span class="keyword">Union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.user_id <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">From</span></span><br><span class="line">    a <span class="keyword">left</span> <span class="keyword">out</span> <span class="keyword">Join</span> b</span><br><span class="line"><span class="keyword">On</span> </span><br><span class="line"><span class="keyword">Case</span> <span class="keyword">when</span> </span><br><span class="line">    a.user_id <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">concat</span>(‘dp_hive’,<span class="keyword">rand</span>() ) </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    a.user_id = b.user_id <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></p><hr><ul><li>Hive的查询注意事项以及优化总结：<blockquote><ol><li><p>尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段</p></li><li><p>对历史库的计算经验</p></li><li><p>尽量原子化操作，尽量避免一个SQL包含复杂逻辑<br>可以使用中间表来完成复杂的逻辑</p></li><li><p>join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗</p></li><li><p>如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50%</p></li></ol></blockquote></li></ul><hr><p><strong>让服务器尽量少做事情，走最优的路径，以资源消耗最少为目标</strong></p><hr><p>参考资料：<br><!-- **Hive优化**1.我们知道大数据场景下不害怕数据量大，害怕的是数据倾斜，怎样避免数据倾斜，找到可能产生数据倾斜的函数尤为关键，数据量较大的情况下，慎用count(distinct), count(distinct)容易产生倾斜问题。2.设置合理的map  reduce的task数量 --></p><blockquote><p><a href="https://blog.csdn.net/yu0_zhang0/article/details/81776459" target="_blank" rel="noopener">https://blog.csdn.net/yu0_zhang0/article/details/81776459</a></p><p><a href="https://blog.csdn.net/young_0609/article/details/84593316" target="_blank" rel="noopener">https://blog.csdn.net/young_0609/article/details/84593316</a></p><p><a href="https://blog.csdn.net/qq_29232943/article/details/79644614" target="_blank" rel="noopener">https://blog.csdn.net/qq_29232943/article/details/79644614</a></p><p><a href="http://lxw1234.com/archives/2015/06/317.htm" target="_blank" rel="noopener">http://lxw1234.com/archives/2015/06/317.htm</a></p><p><a href="https://zenoh.iteye.com/blog/1748592" target="_blank" rel="noopener">https://zenoh.iteye.com/blog/1748592</a></p><p><a href="http://www.lwyyyyyy.cn/getArticleDetailInfo?articleId=89" target="_blank" rel="noopener">http://www.lwyyyyyy.cn/getArticleDetailInfo?articleId=89</a></p></blockquote><hr><h1 id="求两组数据的交集，-并集，-差集"><a href="#求两组数据的交集，-并集，-差集" class="headerlink" title="求两组数据的交集， 并集， 差集"></a>求两组数据的交集， 并集， 差集</h1><h2 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h2><p>union 与 union all </p><blockquote><p>union, 结果包含所有行， 并删除重复行<br>unoin all, 结果包含所有行， 但不删除重复行</p></blockquote><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><blockquote><p>点击支付宝或者手淘活动的人数总共有 435499 人</p></blockquote><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><blockquote><p>点击支付宝或者手淘活动的次数为 665935</p></blockquote><hr><h2 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h2><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">intersect</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><blockquote><p> 点击支付宝又点击手淘活动的人数为 66174</p></blockquote><hr><h2 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h2><blockquote><p>(except 函数 与 join写法)</p></blockquote><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-20'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> a2 </span><br><span class="line">    <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line">    <span class="keyword">and</span> a2.user_account <span class="keyword">is</span>  <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><blockquote><p>只参加支付宝活动， 没有参加手淘活动的人数为 369325<br>在求差集时， 需要注意前后顺序， 否则会出现逻辑错误<br>可以发现， 差集 + 交集 =并集， 369325 +  66174 = 435499</p></blockquote><p>写法3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--详细列出差集的版本号</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">distinct</span> two <span class="keyword">as</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.data_csv</span><br><span class="line"><span class="keyword">except</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-03'</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-03'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">   a2.six ,</span><br><span class="line">   <span class="keyword">COUNT</span>(a2.two) <span class="keyword">as</span> uv,</span><br><span class="line">   <span class="keyword">count</span>(a1.user_account) <span class="keyword">as</span> uv_1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1, test.data_csv <span class="keyword">as</span> a2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a1.user_account = a2.two</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a2.six</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h1 id="业务问题"><a href="#业务问题" class="headerlink" title="业务问题"></a>业务问题</h1><h2 id="计算留存率"><a href="#计算留存率" class="headerlink" title="计算留存率"></a>计算留存率</h2><blockquote><p>求11月10-15号每天的1、3、7日留存率</p></blockquote><ul><li>方法1： 一次性求次1日，次3日， 次7日留存</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li>方法2：<blockquote><ol><li>统计每天的uv</li><li>使用date_add 函数， 一次性求出10-15号每一天的次1、3、7日留存</li><li>算出留存率</li></ol></blockquote></li></ul><p>步骤1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天uv</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> </span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span> </span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>步骤2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-25'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.hit_date =  <span class="keyword">date_add</span>(a1.hit_date, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.hit_date</span><br></pre></td></tr></table></figure></p><ul><li>拓展方法：(迷神)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 留存sql优化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> userid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> t1.userid,</span><br><span class="line">                t1.statdate</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            table1 t1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.statdate &gt;= $&#123;上<span class="number">30</span>天日期&#125;</span><br><span class="line">            <span class="keyword">and</span> t1.statdate &lt;= $&#123;上一天日期&#125;</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            t1.userid,</span><br><span class="line">            t1.statdate</span><br><span class="line">        ) s1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        userid</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>) &gt; <span class="number">2</span></span><br><span class="line">    ) R1</span><br></pre></td></tr></table></figure><blockquote><p>此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=${上一天日期}。<br>另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</p></blockquote><blockquote><p>这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</p></blockquote><hr><h2 id="计算上一步"><a href="#计算上一步" class="headerlink" title="计算上一步"></a>计算上一步</h2><ul><li>求点击【确认充值】按钮的上一步点击的名称</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">with</span> a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    btn_name,</span><br><span class="line">    lag(btn_name, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> create_timestamp) <span class="keyword">as</span> previous_btn_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-01'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    btn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    btn_name <span class="keyword">like</span> <span class="string">'确认支付'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    previous_btn_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    previous_btn_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    c <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">    <span class="number">1000</span></span><br></pre></td></tr></table></figure><ul><li>上一步点击的名称我已经知道了， 现在要想 之前通过上一步点击这些条件之后， 再点击【确认支付】按钮的 去重uv</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">with</span> a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    btn_name,</span><br><span class="line">    lag(btn_name, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> create_timestamp) <span class="keyword">as</span> previous_btn_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-01'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    btn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    btn_name <span class="keyword">like</span> <span class="string">'确认支付'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    (previous_btn_name <span class="keyword">like</span> <span class="string">"%10元%"</span> <span class="keyword">or</span> </span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%30元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%50元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%10元%"</span> <span class="keyword">or</span> </span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%30元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%50元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%100元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%200元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%300元%"</span> )</span><br></pre></td></tr></table></figure><blockquote><p>125752</p></blockquote><hr><h2 id="创建临时表"><a href="#创建临时表" class="headerlink" title="创建临时表"></a>创建临时表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.nine_android_user_version_10</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    user_account <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    app_version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br></pre></td></tr></table></figure><h2 id="原始日志中取数"><a href="#原始日志中取数" class="headerlink" title="原始日志中取数"></a>原始日志中取数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.nine_user_version_10</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>) <span class="keyword">as</span> user_account,</span><br><span class="line">    <span class="keyword">split</span>(url_par(url_query,<span class="string">'AppID'</span>),<span class="string">' '</span>)[<span class="number">1</span>] <span class="keyword">as</span> app_version</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    apache_log.client_ios_sensor</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-20'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    url_par(url_query,<span class="string">'AppID'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>),</span><br><span class="line">    <span class="keyword">split</span>(url_par(url_query,<span class="string">'AppID'</span>),<span class="string">' '</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="取-pv-gt-1-的用户量"><a href="#取-pv-gt-1-的用户量" class="headerlink" title="取 pv &gt;1 的用户量"></a>取 pv &gt;1 的用户量</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">computer_view.data</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;&#125;'</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">computer_view.data</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;&#125;'</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">SELECT</span></span><br><span class="line"> user_account,</span><br><span class="line"><span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line"><span class="keyword">count</span>(user_account) &gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br></pre></td></tr></table></figure><h2 id="求连续4个月活跃的用户数"><a href="#求连续4个月活跃的用户数" class="headerlink" title="求连续4个月活跃的用户数"></a>求连续4个月活跃的用户数</h2><blockquote><p>1月活跃的用户数， 在2月、3月、4月一直活跃的用户有多少？</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  user_account , <span class="keyword">month</span>(hit_date) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> compu_view.ios_log_view</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_account, <span class="keyword">month</span>(hit_date) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    user_account,a1.month,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  user_account <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> px</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.px = <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><p><a href="https://wing324.github.io/2017/10/20/Hive%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/" target="_blank" rel="noopener">https://wing324.github.io/2017/10/20/Hive%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/</a></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>count(distinct  )</td><td>统计去重之后的个数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>sum(distinct )</td><td>去重之后的和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>avg(distinct)</td><td>去重之后的平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>stddev_pop()</td><td>标准偏差</td></tr><tr><td>stddev_samp()</td><td>标准样本偏差</td></tr><tr><td>covar_pop(A, B)</td><td>协方差</td></tr><tr><td>covar_samp(A, B)</td><td>样本协方差</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>NOW ( )</td><td>当前时间</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>dateadd()</td><td>时间相加</td></tr><tr><td>date_sub()</td><td>时间相减</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td></tr><tr><td>datename()</td><td>返回日期部分的参数</td></tr><tr><td>datepart()</td><td>返回日期、时间的单独部分</td></tr></tbody></table><hr><ul><li><strong>sql 中的时间处理函数</strong></li></ul><ol><li>now()<blockquote><p>返回当前时间</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select now()</span><br></pre></td></tr></table></figure><ol start="2"><li><p>date()</p><blockquote><p>输出为日期,没有具体时间</p></blockquote></li><li><p>date_add()</p><blockquote><p>时间相加<br>date_add(dt,interval 1 day ) 在dt的基础上加上一天</p></blockquote></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">date_add(hit_date, interval 1 day)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给hit_date 添加一天</span></span><br></pre></td></tr></table></figure><ol start="4"><li><p>date_sub()</p><blockquote><p>时间相减</p></blockquote></li><li><p>datediff()</p><blockquote><p>时间的差值</p></blockquote></li></ol><ol start="4"><li>date_format()<blockquote><p>输出指定格式<br>对时间的格式进行改变<br>date_format(dt, “%Y-%m-%d”)</p></blockquote></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date_format(hit_date, "%Y-%m-%d)</span><br></pre></td></tr></table></figure><hr><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><p><a href="http://www.pianshen.com/article/856315136/" target="_blank" rel="noopener">窗口函数</a></p><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>rank()</td><td>排名相等的会留下空位</td></tr><tr><td>dense_rank()</td><td>排名相等的不会留下空位</td></tr><tr><td>row_number()</td><td>排名不管数据是否相等</td></tr><tr><td>lag()</td><td>访问相同结果集的先前行中的数据</td></tr><tr><td>lead()</td><td>访问相同结果集的后续行中的数据</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr><tr><td>if()</td><td>条件判断函数</td></tr><tr><td>case…when…else…end</td><td>判断各个元素是否满足了某种条件的集合</td></tr><tr><td>over()</td><td>与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能</td></tr><tr><td>split()</td><td>hive字符串分割函数</td></tr><tr><td>intersect</td><td>交集</td></tr><tr><td>except</td><td>差集</td></tr><tr><td>union all</td><td>并集</td></tr><tr><td>round</td><td>把数值字段舍入为指定的小数位数</td></tr><tr><td>difference</td><td>衡量两个值之间的差异</td></tr><tr><td>coalesce</td><td>1、将控制替换成其他值；2、返回第一个非空值</td></tr><tr><td>pivot</td><td>行转换列</td></tr></tbody></table><hr><ul><li><strong>over 函数</strong></li></ul><blockquote><p>语法： over(partition by ….)<br>作用： 与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据日期 和 mac_id 进行分组求每组的数量和， 并按日期排序</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date, </span><br><span class="line">    mac_id,</span><br><span class="line">    mac_color,</span><br><span class="line">    day_num,</span><br><span class="line">    <span class="keyword">sum</span>(day_num) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> hit_date, mac_id <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> sum_num</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.datas</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>hit_date</th><th>mac_id</th><th>mac_color</th><th>day_num</th><th>sum_num</th></tr></thead><tbody><tr><td>20171011</td><td>1292</td><td>金色</td><td>11</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>黑色</td><td>19</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>粉金</td><td>58</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>金色</td><td>1</td><td>89</td></tr><tr><td>20171011</td><td>2013</td><td>金色</td><td>9</td><td>22</td></tr><tr><td>20171011</td><td>2013</td><td>金色</td><td>3</td><td>22</td></tr><tr><td>20171012</td><td>1292</td><td>金色</td><td>5</td><td>18</td></tr><tr><td>20171012</td><td>1292</td><td>粉金</td><td>1</td><td>18</td></tr><tr><td>20171012</td><td>2013</td><td>粉金</td><td>1</td><td>7</td></tr><tr><td>20171012</td><td>2013</td><td>金色</td><td>6</td><td>7</td></tr><tr><td>20171013</td><td>1292</td><td>黑色</td><td>1</td><td>1</td></tr><tr><td>20171013</td><td>2013</td><td>粉金</td><td>2</td><td>2</td></tr></tbody></table><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group by 语句</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    mac_id,</span><br><span class="line">    <span class="keyword">sum</span>(day_num) </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.data</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date,</span><br><span class="line">    mac_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>day_id</th><th>mac_id</th><th>sum_num</th></tr></thead><tbody><tr><td>20171011</td><td>124609</td><td>1</td></tr><tr><td>20171011</td><td>20130</td><td>22</td></tr><tr><td>20171011</td><td>12922</td><td>89</td></tr><tr><td>20171012</td><td>12922</td><td>18</td></tr><tr><td>20171012</td><td>20130</td><td>7</td></tr><tr><td>20171013</td><td>12922</td><td>1</td></tr><tr><td>20171013</td><td>20130</td><td>2</td></tr></tbody></table><blockquote><p>over(partition by)  与 group by 的区别<br>grou by 字段只能显示与分组聚合相关的字段， 而 over(partition by)<br>可以显示所有字段</p></blockquote><hr><ul><li><strong>LAG 和 LEAD 函数</strong></li></ul><blockquote><p>语法： LAG(col,n,DEFAULT) 用于统计窗口内往上第n行值;<br>LEAD(col,n,DEFAULT) 用于统计窗口内往下第n行值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算11月1-10号， 不同日期同一用户登陆客户端 pv 量对比</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv,</span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account, hit_date)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.pv,</span><br><span class="line">    lag(a1.pv, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv1,</span><br><span class="line">    <span class="keyword">lead</span>(a1.pv, <span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account  <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><ul><li><strong>first_value() 和 last_value() 函数</strong></li></ul><blockquote><p>语法:first_value() ：比较每个用户浏览次数与第一天浏览次数进行比较，查询返回当前浏览次数以及第一天浏览次数<br>last_value() ： 比较每个用户浏览次数与最新一天浏览次数进行比较，查询返回当前浏览次数以及最新一天浏览次数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv,</span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account, hit_date)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.pv,</span><br><span class="line">    <span class="keyword">first_value</span>(a1.pv) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv1,</span><br><span class="line">    <span class="keyword">last_value</span>(a1.pv) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account  <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ul><li><strong>rank、dense_rank、 row_number  排序函数</strong></li></ul><p><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/row-number-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">row_number函数说明</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ROW_NUMBER ( )   </span><br><span class="line">    OVER ( [ PARTITION BY value_expression , ... [ n ] ] order_by_clause )</span><br></pre></td></tr></table></figure><blockquote><p>说明： rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位， 如1、2、2、4<br>dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位， 如1、2、2、3<br>row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等， 如1、2、3、4</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) row_number,</span><br><span class="line">    <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) <span class="keyword">rank</span>,</span><br><span class="line">    <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) <span class="keyword">dense_rank</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    lijie.test_rank</span><br></pre></td></tr></table></figure><table><thead><tr><th>a</th><th>row_number</th><th>rank</th><th>dense_rank</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>1</td><td>1</td></tr><tr><td>C</td><td>2</td><td>2</td><td>2</td></tr><tr><td>D</td><td>3</td><td>3</td><td>3</td></tr><tr><td>B</td><td>4</td><td>3</td><td>3</td></tr><tr><td>E</td><td>5</td><td>5</td><td>4</td></tr><tr><td>F</td><td>6</td><td>6</td><td>5</td></tr><tr><td>G</td><td>7</td><td>7</td><td>6</td></tr></tbody></table><ul><li><strong>if 函数</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">city, count(distinct user_account) as uv </span><br><span class="line">from </span><br><span class="line">an_log_view</span><br><span class="line">where </span><br><span class="line">hit_date = &apos;2019-06-10&apos;</span><br><span class="line">group by </span><br><span class="line">city</span><br><span class="line">having</span><br><span class="line">count(if( nbtn_name like &quot;发现&quot;, 1, null)) &gt;= 20</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">city,</span><br><span class="line">count(1),</span><br><span class="line">count(if( nbtn_name like &quot;发现&quot;, 1, null)),</span><br><span class="line">count(if(nbtn_name like &quot;发现&quot;， 1， null)) / count(1)</span><br><span class="line">from</span><br><span class="line">a1</span><br><span class="line">group by </span><br><span class="line">city</span><br></pre></td></tr></table></figure><hr><ul><li><strong>lateral view 函数</strong></li></ul><p>描述：<br>    &gt; lateral view 用于和 split、explode、collect_set 函数 等一起使用， 能够将一行数据拆成多行数据，在此基础上对拆分后的数据进行聚合。 </p><p>举例： </p><p> 表： table</p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><p>将 表 table 中的 <code>adid_list</code> 转换为单独的行。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable  <span class="keyword">as</span> adid</span><br></pre></td></tr></table></figure><p>输出结果为：<br>|pageid  |adid_list|<br>|—|—|<br>|front_page|1|<br>|front_page|2|<br>|front_page|3|<br>|contact_page|3|<br>|contact_page|4|</p><p>要求：  计算特定广告的展现次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></table></figure><p>输出结果为： </p><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><ol start="2"><li>多个 lateral view 查询</li></ol><p>表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br></pre></td></tr></table></figure><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><hr><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat()</td><td>拼接字符串</td></tr><tr><td>length()</td><td>计算字符串的长度，一个汉字算三个字符</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr><tr><td>lcase()</td><td>转换成小写</td></tr><tr><td>left(string2 ,length )</td><td>从string2中的左边起取length个字符</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>replace()</td><td>替换字符</td></tr><tr><td>substr()</td><td>返回字符串A从start位置开始，长度为len的字符串</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substring_index()</td><td>通过截取获取不同索引位的字符</td></tr><tr><td>LTRIM (string2 )</td><td>去除前端空格</td></tr><tr><td>RTRIM (string2 )</td><td>去除后端空格</td></tr></tbody></table><ul><li><strong>字符串截取函数：substr,substring, substring_index</strong></li></ul><p>语法: substr(string A, int start, int len),substring(string A, int start, int len)</p><p>返回值: string</p><p>说明：返回字符串A从start位置开始，长度为len的字符串</p><p>举例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">substring</span>(charge_products,<span class="number">2</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    <span class="keyword">data</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-05'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    charge_products</span><br><span class="line"><span class="keyword">limit</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>举例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">     a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lookup.products_lookup <span class="keyword">as</span>  a1    <span class="keyword">join</span>    computer_view.data   <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span></span><br><span class="line">    a1.product =  <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-07'</span> <span class="keyword">and</span> <span class="string">'2018-10-13'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    mall_events <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">    a1.name</span><br></pre></td></tr></table></figure></p><p>举例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--打断</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">substring_index(page_url, <span class="string">'?'</span>, <span class="number">1</span>),</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> user_tracking_id) <span class="keyword">as</span> uv,</span><br><span class="line"><span class="keyword">count</span>(page_url) <span class="keyword">as</span> pv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-04-09'</span> <span class="keyword">and</span> <span class="string">'2019-04-09'</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">campaign <span class="keyword">like</span> <span class="string">"%scjh-scep-tcnr-9yuanka%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">substring_index(page_url, <span class="string">'?'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    uv <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><hr><h1 id="CASE-表达式"><a href="#CASE-表达式" class="headerlink" title="CASE 表达式"></a>CASE 表达式</h1><h2 id="case-when-的简单用法"><a href="#case-when-的简单用法" class="headerlink" title="case when 的简单用法"></a>case when 的简单用法</h2><ol><li>语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">case when  sex = &apos;1&apos; then &apos;男&apos;</span><br><span class="line">     when  sex = &apos;2&apos; then &apos;女&apos;</span><br><span class="line">else &apos;其他&apos; end</span><br></pre></td></tr></table></figure><p>注意：</p><blockquote><p> 必须写 end, else 部分默认为  null</p></blockquote><!-- #### 2. 作用：* 等值转换* 范围转换* 列转行 --><ol start="2"><li>等值转换</li></ol><ul><li>有这么一张表 pop ：</li></ul><table><thead><tr><th>area(地区)</th><th>population(万)</th></tr></thead><tbody><tr><td>渭南市</td><td>538</td></tr><tr><td>延安市</td><td>226</td></tr><tr><td>商洛市</td><td>238</td></tr><tr><td>昆明市</td><td>673</td></tr><tr><td>曲靖市</td><td>650</td></tr><tr><td>青岛市</td><td>769</td></tr></tbody></table><ul><li>需要得出如下表的结果：</li></ul><table><thead><tr><th>省</th><th>人口（万）</th></tr></thead><tbody><tr><td>陕西</td><td>1002</td></tr><tr><td>云南</td><td>1326</td></tr><tr><td>其他</td><td>769</td></tr></tbody></table><ul><li>sql如下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将地名转换成省</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">case</span>  area</span><br><span class="line">        <span class="keyword">when</span> <span class="string">"渭南市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"延安市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"商洛市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"昆明市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"曲靖市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">"其他"</span> <span class="keyword">end</span> <span class="keyword">as</span> district,</span><br><span class="line">    <span class="keyword">sum</span>(population)</span><br><span class="line"><span class="keyword">from</span> pop</span><br><span class="line"><span class="comment">-- group by </span></span><br><span class="line"><span class="comment">--     case area</span></span><br><span class="line"><span class="comment">--            when "渭南市" then "陕西"</span></span><br><span class="line"><span class="comment">--             when "延安市" then "陕西"</span></span><br><span class="line"><span class="comment">--             when "商洛市" then "陕西"</span></span><br><span class="line"><span class="comment">--             when "昆明市" then "云南"</span></span><br><span class="line"><span class="comment">--             when "曲靖市" then "云南"</span></span><br><span class="line"><span class="comment">--     else "其他" end</span></span><br></pre></td></tr></table></figure></li></ul><!-- <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将地名转换成省</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">case</span>  area</span><br><span class="line">        <span class="keyword">when</span> <span class="string">"渭南市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"延安市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"商洛市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"昆明市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"曲靖市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">"其他"</span> <span class="keyword">end</span> <span class="keyword">as</span> district,</span><br><span class="line">    <span class="keyword">sum</span>(population)</span><br><span class="line"><span class="keyword">from</span> pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    district</span><br><span class="line"><span class="string">``</span><span class="string">` --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 4. 范围转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* 按人口数量等级划分</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> population &lt; <span class="number">250</span> <span class="keyword">then</span> <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">when</span> population &gt;= <span class="number">250</span> <span class="keyword">and</span> population &lt; <span class="number">500</span> <span class="keyword">then</span> <span class="string">'2'</span></span><br><span class="line">            <span class="keyword">when</span> population &gt;= <span class="number">500</span> <span class="keyword">and</span> population &lt; <span class="number">750</span> <span class="keyword">then</span> <span class="string">'3'</span></span><br><span class="line">            <span class="keyword">when</span> population &gt;= <span class="number">750</span> <span class="keyword">then</span> <span class="string">'4'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> <span class="keyword">as</span> pop_classs,</span><br><span class="line">        <span class="keyword">count</span>(*) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    district;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 省略写法</span><br><span class="line">&gt; select 子句 与group by 子句 两处写法一样，后期修改比较麻烦，可以下下面这样： --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*  其他例子</span><br><span class="line"></span><br><span class="line">|area(地区)|population(人口)|sex(性别)|</span><br><span class="line">|<span class="comment">--|--|--|</span></span><br><span class="line">|渭南市|5286077|1|</span><br><span class="line">|渭南市|3286077|2|</span><br><span class="line">|延安市|2187009|1|</span><br><span class="line">|延安市|1187009|2|</span><br><span class="line">|商洛市|3351436|1|</span><br><span class="line">|商洛市|2351436|2|</span><br><span class="line"></span><br><span class="line">按照性别对每个县进行汇总：</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sex = <span class="string">'1'</span> <span class="keyword">then</span> population <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> cnt_m,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> sex = <span class="string">'2'</span> <span class="keyword">then</span> population <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> cnt_f</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area</span><br></pre></td></tr></table></figure><hr><h1 id="group-by-升级版"><a href="#group-by-升级版" class="headerlink" title="group by 升级版"></a>group by 升级版</h1><h4 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h4><p>通过 a1 明细表，获得每个店铺，每个城市，每个省份，每个大区以及全国5月的份的成交量情况。</p><table><thead><tr><th>order_id</th><th>shop</th><th>city</th><th>province</th><th>area</th><th>hit_date</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>西安</td><td>陕西</td><td>西北大区</td><td>2019-05-04</td></tr><tr><td>2</td><td>B</td><td>上海</td><td>上海</td><td>华东大区</td><td>2019-05-01</td></tr><tr><td>3</td><td>C</td><td>安康</td><td>陕西</td><td>西北大区</td><td>2019-05-02</td></tr><tr><td>4</td><td>D</td><td>北京</td><td>北京</td><td>华中大区</td><td>2019-05-21</td></tr><tr><td>5</td><td>E</td><td>延安</td><td>陕西</td><td>西北大区</td><td>2019-05-03</td></tr><tr><td>6</td><td>F</td><td>成都</td><td>四川</td><td>西南大区</td><td>2019-05-19</td></tr><tr><td>7</td><td>G</td><td>汉中</td><td>陕西</td><td>西北大区</td><td>2019-06-04</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>10000</td><td>H</td><td>郑州</td><td>河南</td><td>西北大区</td><td>2019-05-29</td></tr></tbody></table><h2 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h2><p> 分别写5个sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全国成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 大区成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 省成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 城市成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 店铺成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop</span><br></pre></td></tr></table></figure><p>这种方法太低效了， 还需要在excel中进行合并，比较麻烦。</p><h2 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h2><p>通过 union 和 union all 对查询结果进行纵向合并</p><blockquote><p>union: 对合并后的结果进行去重处理<br>union all : 返回合并后的所有数据</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, <span class="literal">null</span> , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,shop, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city, shop</span><br></pre></td></tr></table></figure><blockquote><p>上述式中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p></blockquote><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt=""></p><h2 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h2><p>利用 <code>union all</code> 比写出5个sql 再在 Excel 中处理简单很多，但是代码比较冗余。可以用<code>grouping sets</code>来进行优化。 此函数可以根据不同维度组合进行聚合。</p><p>将<code>union all</code> 语句用<code>grouping sets</code> 进行改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop</span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span></span><br><span class="line">    (<span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    (area,province),</span><br><span class="line">    (area,province,city),</span><br><span class="line">    (area,province,city,shop)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。</p><p><code>grouping_id</code>表示每个分组的序号。 1 表示第一个分组、2表示第二个分组。我们可以根据<code>grouping_id</code> 选取我们需要的组合。如果我们需要全国的成交量，则让 <code>grouping_id = 1</code>, 需要每个省的成交量，让 <code>grouping_id = 3</code>。</p><h2 id="解法4："><a href="#解法4：" class="headerlink" title="解法4："></a>解法4：</h2><p><code>cube</code>函数， 对<code>group by</code>的维度的所有组合进行聚合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">cube</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe78ba58dfb91072.png" alt=""></p><p>以上代码对区域和省份进行了聚合， <code>cube</code> 会先对全部数据进行聚合，即 <code>null, null</code>， 再对<code>area,null</code>进行聚合，然后再对<code>null, province</code>进行聚合，最后再对<code>area,province</code>进行聚合。</p><h2 id="解法5："><a href="#解法5：" class="headerlink" title="解法5："></a>解法5：</h2><p><code>rollup</code>函数， 和<code>cube</code>类似，是针对 <code>group by</code>所有维度的部分组合。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">rollup</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe79320dfb423235.png" alt=""></p><p>对比<code>cube</code>和<code>rollup</code>得到的结果，我们发现<code>rollup</code>少了<code>null province</code> 这个组合，<code>rollup</code> 是以最左侧指标为主进行组合聚合。</p><p>参考资料：<a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g">讲讲 group 的plus版-张俊红</a></p><hr><!-- # sql 自定义函数### 自定义标量函数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Creat function 函数名（参数）</span><br><span class="line">Return 返回值数据类型</span><br><span class="line">[<span class="keyword">with</span> &#123;Encryption | Schemabinding 「将函数绑定到它引用的对象上」&#125;]</span><br><span class="line">[<span class="keyword">as</span>]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">Return</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Creat FUNCTION</span><br><span class="line">     getNthHighestSalary(N INT)</span><br><span class="line">Returns INT</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span></span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1</span>), </span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> getNthHighestSalary(N)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` --&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 多个 like"%%" 语句， 运行比较慢， 有什么优化方法吗？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">答案：</span></span><br><span class="line"><span class="string">1. 建立索引</span></span><br><span class="line"><span class="string">2. 使用函数来替代 like</span></span><br><span class="line"><span class="string">    &gt; mysql： 考虑 locate, position, instr, find_in_set</span></span><br><span class="line"><span class="string">    &gt; sql server: charindex, patindex </span></span><br><span class="line"><span class="string">    &gt; https://blog.csdn.net/lly983909814/article/details/71642814</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 在 spark 中写 hive 循环, 工具 zeppelim</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>s</span><br><span class="line">%spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( a &lt;- <span class="number">0</span> <span class="keyword">until</span> <span class="number">30</span>)&#123;</span><br><span class="line">        // val <span class="keyword">sql</span>= s<span class="string">"""use default"""</span></span><br><span class="line">    // spark.sql(<span class="keyword">sql</span>)</span><br><span class="line">    val <span class="keyword">sql</span> = s<span class="string">"""</span></span><br><span class="line"><span class="string">    with a1 as (</span></span><br><span class="line"><span class="string">    select</span></span><br><span class="line"><span class="string">        user_account</span></span><br><span class="line"><span class="string">    from</span></span><br><span class="line"><span class="string">        computer_view.data</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">         hit_date between "</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">" and date_add("</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">",$&#123;a&#125;)</span></span><br><span class="line"><span class="string">    union all </span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        user_account</span></span><br><span class="line"><span class="string">    from</span></span><br><span class="line"><span class="string">        computer_view.data</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">         hit_date between "</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">" and date_add("</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">",$&#123;a&#125;))</span></span><br><span class="line"><span class="string">    select</span></span><br><span class="line"><span class="string">        count(distinct user_account) as uv</span></span><br><span class="line"><span class="string">    from</span></span><br><span class="line"><span class="string">        a1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    val <span class="keyword">data</span> = spark.sql(<span class="keyword">sql</span>)</span><br><span class="line">    println(<span class="string">"day:"</span>, a, <span class="string">"uv:"</span>, data.show())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.docs4dev.com/docs/zh/apache-hive/3.1.1/reference/LanguageManual_LateralView.html">Hive中文手册</a></p>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hive查询性能优化&quot;&gt;&lt;a href=&quot;#Hive查询性能优化&quot; class=&quot;headerlink&quot; title=&quot;Hive查询性能优化&quot;&gt;&lt;/a&gt;Hive查询性能优化&lt;/h1&gt;&lt;h2 id=&quot;什么是数据倾斜&quot;&gt;&lt;a href=&quot;#什么是数据倾斜&quot; class
      
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Hive" scheme="https://zhangandyu.github.io/tags/Hive/"/>
    
      <category term="sql" scheme="https://zhangandyu.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>音乐</title>
    <link href="https://zhangandyu.github.io/2019/04/23/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99-%E9%9F%B3%E4%B9%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhangandyu.github.io/2019/04/23/生活资料-音乐系统/</id>
    <published>2019-04-22T16:00:00.000Z</published>
    <updated>2019-12-15T07:33:24.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="李志-回答"><a href="#李志-回答" class="headerlink" title="李志-回答"></a>李志-回答</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/Xys5wvaDUnQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>卑鄙是卑鄙者的通行证，<br>高尚是高尚者的墓志铭。<br>看吧，在那镀金的天空中，<br>飘满了死者弯曲的倒影。<br>冰川季过去了，<br>为什么到处都是冰棱？<br>好望角发现了，<br>为什么死海里千帆向竞？</p><p>我来到这个世界上，<br>只带着纸、绳索和背影，<br>为了在审判之前，<br>宣读那些被判决了的声音：<br>告诉你吧，世界，<br>我不相信！<br>纵使你脚下有一千名挑战者，<br>那就把我算作那第一千零一名。</p><p>我不相信天是蓝的，<br>我不相信雷的回声；<br>我不相信梦是假的，<br>我不相信死无报应。<br>如果海洋注定要决堤，<br>就让所有的苦水都注入我心中；<br>如果陆地注定要上升，<br>就让人类重新选择生存的峰顶。<br>新的转机和闪闪的星斗，<br>正在缀满没有遮拦的天空，<br>那是五千年的象形文字，<br>那是未来人们凝视的眼睛。</p><h1 id="李志-忽然"><a href="#李志-忽然" class="headerlink" title="李志-忽然"></a>李志-忽然</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/5lcAFJ7iUV0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-这个世界会好吗？"><a href="#李志-这个世界会好吗？" class="headerlink" title="李志-这个世界会好吗？"></a>李志-这个世界会好吗？</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/zFhMB-kc5Q4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-热河"><a href="#李志-热河" class="headerlink" title="李志-热河"></a>李志-热河</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/l74opoCRxqc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-黑色信封"><a href="#李志-黑色信封" class="headerlink" title="李志-黑色信封"></a>李志-黑色信封</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/FG8mD7HIJn0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/1Pv8SNZh1uI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-梵高先生"><a href="#李志-梵高先生" class="headerlink" title="李志-梵高先生"></a>李志-梵高先生</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/gciZl8TC2TE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-关于郑州的回忆"><a href="#李志-关于郑州的回忆" class="headerlink" title="李志-关于郑州的回忆"></a>李志-关于郑州的回忆</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/eNQxLud6WNw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-人民不需要自由"><a href="#李志-人民不需要自由" class="headerlink" title="李志-人民不需要自由"></a>李志-人民不需要自由</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/fKYfH3N9KzA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-墙上的向日葵"><a href="#李志-墙上的向日葵" class="headerlink" title="李志-墙上的向日葵"></a>李志-墙上的向日葵</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/iEasfCQVjVE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/KA2AIuwydqE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-光阴路的夏天"><a href="#李志-光阴路的夏天" class="headerlink" title="李志-光阴路的夏天"></a>李志-光阴路的夏天</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/px39IB42q-k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-动静"><a href="#李志-动静" class="headerlink" title="李志-动静"></a>李志-动静</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/TXuLHJm9wsU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-看见"><a href="#李志-看见" class="headerlink" title="李志-看见"></a>李志-看见</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/fK6--sNLE-s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-14跨年演唱会"><a href="#李志-14跨年演唱会" class="headerlink" title="李志-14跨年演唱会"></a>李志-14跨年演唱会</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/rkM-dTr89kQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="左小祖咒-陈升-爱情的枪"><a href="#左小祖咒-陈升-爱情的枪" class="headerlink" title="左小祖咒/陈升-爱情的枪"></a>左小祖咒/陈升-爱情的枪</h1> <iframe width="560" height="315" src="https://www.youtube.com/embed/Lzc2rHbmymM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="Pink-Floyd-Wish-You-Were-Here"><a href="#Pink-Floyd-Wish-You-Were-Here" class="headerlink" title="Pink Floyd - Wish You Were Here"></a>Pink Floyd - Wish You Were Here</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/IXdNnw99-Ic" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/EodytPmki5s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="Queen-Love-Of-My-Life"><a href="#Queen-Love-Of-My-Life" class="headerlink" title="Queen - Love Of My Life"></a>Queen - Love Of My Life</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/sUJkCXE4sAA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/v3xwCkhmies" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="轻音乐-Cello-Collection-with-Calcifer"><a href="#轻音乐-Cello-Collection-with-Calcifer" class="headerlink" title="轻音乐-Cello Collection with Calcifer"></a>轻音乐-Cello Collection with Calcifer</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/JpnpZH_IY8I" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;李志-回答&quot;&gt;&lt;a href=&quot;#李志-回答&quot; class=&quot;headerlink&quot; title=&quot;李志-回答&quot;&gt;&lt;/a&gt;李志-回答&lt;/h1&gt;&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com
      
    
    </summary>
    
      <category term="生活资料" scheme="https://zhangandyu.github.io/categories/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99/"/>
    
    
      <category term="音乐" scheme="https://zhangandyu.github.io/tags/%E9%9F%B3%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Hive 基础查询</title>
    <link href="https://zhangandyu.github.io/2019/04/18/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-Hive%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zhangandyu.github.io/2019/04/18/数据分析技能-Hive基础查询/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2019-12-15T05:27:53.554Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Hive"><a href="#什么是-Hive" class="headerlink" title="什么是 Hive"></a>什么是 Hive</h1><p>Hive 是一种建立在Hadoop文件系统上的数据仓库架构, 并对存储的数据进行分析和管理，可以将 SQL 语句转换为 MapReduce 任务进行运行，这样就使得数据开发和分析人员很方便的使用 SQL 来完成海量数据的统计和分析。</p><a id="more"></a><p>Hive 擅长的是非实时的、离线的、对响应及时性要求不高的海量数据批量计算，统计分析。</p><p>Hive 不适用于在线交易处理</p><h1 id="Hive-的常见查询语句"><a href="#Hive-的常见查询语句" class="headerlink" title="Hive 的常见查询语句"></a>Hive 的常见查询语句</h1><blockquote><p>Hive 中的 SELECT 基础语法和标准 SQL 语法基本一致，支持 WHERE、DISTINCT、GROUP BY、ORDER BY、HAVING、LIMIT、子查询等</p></blockquote><h3 id="1-Hive-脚本如何注释"><a href="#1-Hive-脚本如何注释" class="headerlink" title="1.  Hive 脚本如何注释"></a>1.  <strong>Hive 脚本如何注释</strong></h3><p>可以用 - - 开头的字符串来表示注释， 也可以将需要注释的 sql 选中， 然后用 ctrl + ? 快捷键来进行注释。 </p><hr><h3 id="2-切换数据库"><a href="#2-切换数据库" class="headerlink" title="2.  切换数据库"></a>2.  <strong>切换数据库</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前数据库</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    current_database()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置默认数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="3-查看表"><a href="#3-查看表" class="headerlink" title="3. 查看表"></a>3. <strong>查看表</strong></h3><ul><li>查看当前使用的数据库中有哪些表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><ul><li>查看非当前使用的数据库中有哪些表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">in</span> myhive;</span><br></pre></td></tr></table></figure><ul><li>查看数据库中以 android 开头的表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">'android*'</span></span><br></pre></td></tr></table></figure><ul><li>查看表的详细信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted android</span><br></pre></td></tr></table></figure><hr><h3 id="4-select…from-语句"><a href="#4-select…from-语句" class="headerlink" title="4. select…from 语句"></a>4. <strong>select…from 语句</strong></h3><ul><li>基本查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 employee 表中的 name 和 salary。</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, salary <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><ul><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, subord[<span class="number">0</span>] <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><ul><li>使用键值进行索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, deductions[<span class="string">"state taxes"</span>] <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 "点" 符号， 类似：表的别名 . 列名 这样的用法</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">name</span>, address.city </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure><ul><li>使用列值进行计算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">upper</span>(<span class="keyword">name</span>), salary, deductions[<span class="string">"Federal Taxes"</span>], </span><br><span class="line">    rount(salary * (<span class="number">1</span> - salary, deductions[<span class="string">"Federal Taxes"</span>]))</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZHANGYU   100000.0     0.2      80000</span></span><br></pre></td></tr></table></figure><ul><li>使用正则表达式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选出所有列名以 price 作为前缀的列</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="string">'price.*'</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks;</span><br></pre></td></tr></table></figure><ul><li>常用的关系运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 等值比较: =</span><br><span class="line"> 等值比较:&lt;=&gt;</span><br><span class="line"> 不等值比较: &lt;&gt;和!=</span><br><span class="line"> 小于比较: &lt;</span><br><span class="line">小于等于比较: &lt;=</span><br><span class="line"> 大于比较: &gt;</span><br><span class="line"> 大于等于比较: &gt;=</span><br><span class="line"> 区间比较</span><br><span class="line"> 空值判断: IS NULL</span><br><span class="line"> 非空判断: IS NOT NULL</span><br><span class="line"> LIKE比较: LIKE</span><br><span class="line"> JAVA的LIKE操作: RLIKE</span><br><span class="line"> REGEXP操作: REGEXP</span><br></pre></td></tr></table></figure><ul><li>数学运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">加法操作: +</span><br><span class="line">减法操作: –</span><br><span class="line">乘法操作: *</span><br><span class="line">除法操作: /</span><br><span class="line">取余操作: %</span><br><span class="line">与操作: &amp;</span><br><span class="line">或操作: |</span><br><span class="line">异或操作: ^</span><br><span class="line">取反操作: ~</span><br></pre></td></tr></table></figure><ul><li>常用的聚合函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count(*)          # 个数统计函数</span><br><span class="line">count(distinct  col) <span class="comment">#  统计去重之后的个数</span></span><br><span class="line">sum(col)          <span class="comment"># 求和</span></span><br><span class="line">sum(distinct col) <span class="comment">#去重之后的和</span></span><br><span class="line">avg(col)          <span class="comment"># 平均值</span></span><br><span class="line">avg(distinct col) <span class="comment"># 去重之后的平均值</span></span><br><span class="line">min(col)          <span class="comment"># 最小值</span></span><br><span class="line">max(col)          <span class="comment"># 最大值</span></span><br><span class="line">corr(col1, col2)  <span class="comment"># 相关系数</span></span><br><span class="line">var_pop(clo)      <span class="comment"># 方差</span></span><br><span class="line">var_samp(col)     <span class="comment"># 样本方差</span></span><br><span class="line">stddev_pop(col)   <span class="comment"># 标准偏差</span></span><br><span class="line">stddev_samp(col)  <span class="comment"># 标准样本偏差</span></span><br><span class="line">covar_pop(col1, col2) <span class="comment"># 协方差</span></span><br><span class="line">covar_samp(col1, col2) <span class="comment"># 样本协方差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>), <span class="keyword">avg</span>(salary) <span class="keyword">form</span> employees;</span><br></pre></td></tr></table></figure><ul><li>使用别名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> acount) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure><ul><li>使用limit语句限制返回的行数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  只显示 10 行</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">form</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>嵌套 select 语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    e.name, e.salary</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">upper</span>(<span class="keyword">name</span>)</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        employees</span><br><span class="line">) <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     e.salary &gt; <span class="number">500</span>;</span><br></pre></td></tr></table></figure><ul><li>case…when..then句式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> , salary,</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> salary &lt; <span class="number">5000</span> <span class="keyword">then</span> <span class="string">'low'</span></span><br><span class="line">        <span class="keyword">when</span> salary &gt; = <span class="number">5000</span> <span class="keyword">and</span> salary &lt; <span class="number">70000</span> <span class="keyword">then</span> <span class="string">'middle'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">'high'</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> bracket <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h3 id="5-where-语句-添加条件"><a href="#5-where-语句-添加条件" class="headerlink" title="5. where 语句, 添加条件"></a>5. <strong>where 语句, 添加条件</strong></h3><ul><li>常见用法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country = <span class="string">'us'</span> <span class="keyword">and</span> state = <span class="string">'ca'</span>;</span><br></pre></td></tr></table></figure><ul><li>可以在where条件下计算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span> , salary, deductions[<span class="string">'first taxes'</span>], salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>])</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">round</span>(salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>]) ) &gt; <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># zhangyu 100000.0 0.2 80000</span></span><br></pre></td></tr></table></figure><ul><li>对上式进行优化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     e.* </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span> , salary, deductions[<span class="string">'first taxes'</span>], salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>])</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">     employees</span><br><span class="line">    ) e</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">round</span>(salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>]) ) &gt; <span class="number">70000</span>;</span><br></pre></td></tr></table></figure><ul><li>条件中有浮点数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对浮点数进行比较</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span>, salary, duductions[<span class="string">'first taxes'</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     duductions[<span class="string">'first taxes'</span>] &gt; <span class="number">0.2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>出现的结果中会有 0.2， 因为 DOUBL 和 FLOAT 类型不同</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">name</span>, salary, duductions[<span class="string">'first taxes'</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     duductions[<span class="string">'first taxes'</span>]  &gt; <span class="keyword">cast</span> (<span class="number">0.2</span> <span class="keyword">as</span> <span class="built_in">float</span>);</span><br></pre></td></tr></table></figure><blockquote><p>出现的结果中不会有0.2</p></blockquote><ul><li>like 和 rlike</li></ul><blockquote><p>rlike 子句是Hive功能的一个扩展， 可以通过Java的正则表达式来指定匹配条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">where</span> address.street rlikt <span class="string">'.*(beijing|shanghai).*'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用like</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">like</span> <span class="string">'%beijing%'</span> <span class="keyword">or</span> address.street <span class="keyword">like</span> <span class="string">'%shanghai%'</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="6-group-by-语句-order-by-与-having"><a href="#6-group-by-语句-order-by-与-having" class="headerlink" title="6. group by 语句, order by, 与 having"></a>6. group by 语句, order by, 与 having</h3><ul><li>分类并排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ul><li>having 子句来限制输出结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) <span class="keyword">from</span> stocks</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">     <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">     <span class="keyword">avg</span>(price_close) &gt; <span class="number">50.0</span> ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子2</span></span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    col1</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    <span class="keyword">sum</span>(col2) &gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 如果没有having， 将要使用嵌套select子查询</span></span><br><span class="line"><span class="comment"># 例子1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    s2.year, s2.avg <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">year</span>(ymd) <span class="keyword">as</span> <span class="keyword">year</span>, <span class="keyword">avg</span>(price_close) <span class="keyword">as</span> <span class="keyword">avg</span> <span class="keyword">from</span> stocks</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">year</span>(ymd)</span><br><span class="line">) s2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    s2.avg &gt; <span class="number">50.0</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子2</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    col1 </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        col1,</span><br><span class="line">        <span class="keyword">sum</span>(col2) <span class="keyword">as</span> col2sum</span><br><span class="line">    <span class="keyword">from</span>    </span><br><span class="line">        t1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        col1 )  <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span>   </span><br><span class="line">     t2.col2sum &gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>having 与 where 的区别</li></ul><blockquote><ul><li>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。</li></ul></blockquote><blockquote><ul><li>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找平均工资大于3000的部门</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">avg</span>(salary) <span class="keyword">as</span> average </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    average &gt; <span class="number">3000</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询每个部门工资大于3000的员工个数</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">count</span>(*) <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    salary &gt; <span class="number">3000</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment</span><br></pre></td></tr></table></figure><h3 id="7-join-语句"><a href="#7-join-语句" class="headerlink" title="7. join 语句"></a>7. join 语句</h3><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt></p><blockquote><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定</p></blockquote><ul><li>内连接 </li></ul><blockquote><p>只有进行连接的两个表中都存在与连接标准相匹配的数据才会被保留下来。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     a <span class="keyword">JOIN</span>  b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span> <span class="keyword">and</span> b.symbol = <span class="string">'Ibm'</span></span><br></pre></td></tr></table></figure><blockquote><p>ON 子句指定了两个表间数据进行连接的条件。</p></blockquote><ul><li>对于多张表进行连接查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close, c.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line">      <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.ymd = c.ymd</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a. symbol = <span class="string">'Apple'</span>  <span class="keyword">AND</span> b.symbol = <span class="string">'Ibm'</span> <span class="keyword">AND</span> c.symbol = <span class="string">'Google'</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么条件内不加表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</p></blockquote><ul><li>Join 优化</li></ul><blockquote><ul><li>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。</li></ul></blockquote><blockquote><ul><li>因此， 我们在查询时， 要保证连续查询中的表的大小从左到右依次是增加的。  </li></ul></blockquote><blockquote><p>假如，在 a, b 两个表中，b表最小， 则 sql 需要修改为：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><ul><li>使用 “标记” 来指定哪张表是大表， 不需要排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">/*+Streamtable(a)*/</span> a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> B <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><ul><li>左外连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><blockquote><p>左边表符合 WHERE 条件的全部返回，右表不符合 ON 条件的返回 NULL</p></blockquote><ul><li>完全外链接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><blockquote><p>返回所有表中符合 WHERE 语句条件的所有记录<br>    Hive 不支持右半开连接</p></blockquote><h3 id="8-排序-ORDER-BY"><a href="#8-排序-ORDER-BY" class="headerlink" title="8. 排序 ORDER BY"></a>8. 排序 ORDER BY</h3><ul><li>Order by   对查询的所有结果进行排序</li></ul><blockquote><p>可在字段加 DESC 关键字， 进行降序排序。 （默认 ASC， 升序）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a.price_close</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    A.PRICE_close <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="9-子查询"><a href="#9-子查询" class="headerlink" title="9. 子查询"></a>9. 子查询</h3><blockquote><p>Hive中如果是从一个子查询进行SELECT查询，那么子查询必须设置一个别名</p></blockquote><ul><li>From 子句进行子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    dt,     </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"> (<span class="keyword">select</span></span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">    client.android_log_view</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">    client.ios_log_view  </span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    dt</span><br></pre></td></tr></table></figure><ul><li>Hive 0.13 开始， Where 子句也支持子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">WHERE</span> A.a <span class="keyword">IN</span> (<span class="keyword">SELECT</span> foo <span class="keyword">FROM</span> B);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> A</span><br><span class="line"><span class="keyword">FROM</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> B <span class="keyword">FROM</span> T2 <span class="keyword">WHERE</span> T1.X = T2.Y)</span><br></pre></td></tr></table></figure><ul><li>将子查询作为一个表的语法，叫做Common Table Expression（CTE）</li></ul><blockquote><p><strong>如果用 distinct, select 后面必须直接跟 distinct</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">        province</span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    computer_viedata</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">       hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    province</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    uv <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><hr><h3 id="刷新数据表"><a href="#刷新数据表" class="headerlink" title="刷新数据表"></a>刷新数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh table computer_log.client_ios_log</span><br></pre></td></tr></table></figure><h1 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h1><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。 </p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。</p><ol><li>首先， 用Python连接数据库</li></ol><blockquote><p>对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">conn = hive.Connection(host=<span class="string">'ip地址'</span>, port=<span class="number">10000</span>, username=<span class="string">'用户名'</span>, database = <span class="string">'default'</span>, auth=<span class="string">'NOSASL'</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 获得连接的游标</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置开始和结束时间</li></ol><blockquote><p>可以用python中的time函数设置时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startdate = <span class="string">'2018-09-01'</span></span><br><span class="line">enddate   = <span class="string">'2018-09-19'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>用Python中的format函数将日期传入{}中</li></ol><blockquote><ul><li>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。</li></ul><ul><li>日期用两个{}来代替， 用format函数将开始日期与结束日期传入</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 提取积分类uv,pv数据</span><br><span class="line"></span><br><span class="line">sql_jifenxinxi_an = &quot;&quot;&quot;select </span><br><span class="line">    count(distinct user_account) as uv, </span><br><span class="line">    count(1) as pv </span><br><span class="line">from </span><br><span class="line">    computer_view.data </span><br><span class="line">where </span><br><span class="line">    hit_date between &quot;&#123;&#125;&quot; and &quot;&#123;&#125;&quot; </span><br><span class="line">    and </span><br><span class="line">    (btn_position like &quot;服务-查询-积分信息%&quot; </span><br><span class="line">    or </span><br><span class="line">    btn_home = &quot;积分-扇形左&quot; </span><br><span class="line">    ) </span><br><span class="line">limit 1000&quot;&quot;&quot;.format(startdate,enddate)</span><br><span class="line"># format 插入时间</span><br><span class="line"></span><br><span class="line">cursor.execute(sql_jifenxinxi_an)</span><br><span class="line"># 运行此语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line">#fetchall():接收全部的返回结果行.</span><br></pre></td></tr></table></figure><p>我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 </p><hr><p>参考资料：<br><a href="https://book.douban.com/subject/25791255/" target="_blank" rel="noopener">Hive 编程指南</a><br><a href="https://www.iteblog.com/archives/tag/hive-technology/" target="_blank" rel="noopener">Hive的那些事</a><br><a href="https://hive.apache.org/" target="_blank" rel="noopener">Hive 官网</a><br><a href="http://lxw1234.com/archives/2015/06/317.htm" target="_blank" rel="noopener">一起学Hive</a><br><a href="https://blog.csdn.net/MrLevo520/article/details/76339075" target="_blank" rel="noopener">Hive性能优化上的一些总结</a><br><a href="https://www.iteblog.com/archives/category/hive/" target="_blank" rel="noopener">过往记忆——hive</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是-Hive&quot;&gt;&lt;a href=&quot;#什么是-Hive&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hive&quot;&gt;&lt;/a&gt;什么是 Hive&lt;/h1&gt;&lt;p&gt;Hive 是一种建立在Hadoop文件系统上的数据仓库架构, 并对存储的数据进行分析和管理，可以将 SQL 语句转换为 MapReduce 任务进行运行，这样就使得数据开发和分析人员很方便的使用 SQL 来完成海量数据的统计和分析。&lt;/p&gt;
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Hive" scheme="https://zhangandyu.github.io/tags/Hive/"/>
    
      <category term="sql" scheme="https://zhangandyu.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>类比汇总</title>
    <link href="https://zhangandyu.github.io/2019/03/30/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F-%E7%B1%BB%E6%AF%94%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhangandyu.github.io/2019/03/30/个人系统-类比系统/</id>
    <published>2019-03-29T16:00:00.000Z</published>
    <updated>2019-12-15T07:31:43.622Z</updated>
    
    <content type="html"><![CDATA[<ol><li>学习一门技能，你需要知道最少必要知识。 这就好像你拿着一张地图，不可能一下子掌握其中所有的细节，但花几分钟搞清楚 “图例”（Legend）部分总是可以的，知道什么样的线标示的是公交车，什么样的线标示的是地铁，什么样的线标示的是桥梁，然后知道上北下南左西右东 —— 这之后，就可以开始慢慢研究地图了……</li></ol><a id="more"></a><hr><ol start="2"><li>在我们使用函数的过程中，我们常常有意忽略它的内部如何完成从输入到输出之间的处理过程 —— 这就好像我们平日里用灯泡一样，大多数情况下，我们只要知道开关的使用方法就够了 —— 至于为什么按到这个方向上灯会亮，为什么按到另外一个方向上灯会灭，并不是我们作为用户必须关心的事情……   当然，如果你是设计开关的人就不一样了，你必须知道其中的运作原理；但是，最终，你还是希望你的用户用最简单方便的操作界面，而不是必须搞懂所有原理才能够使用你所设计的产品……</li></ol><hr><ol start="3"><li>在任何一本编程书籍之中，关于字符串的内容总是很长 —— 就好像每本英语语法书中，关于动词的内容总是占全部内容的至少三分之二。</li></ol><hr><ol start="4"><li>教育就像一副眼镜。戴上眼镜之前和之后，我们看到的其实是同样的世界；但是戴上眼镜之后，我们就看得更清楚。</li></ol><hr><ol start="5"><li>我们是这样一台计算机，厂商（我们的父母）并没有为我们提供详尽的说明书，也不负责定期升级我们的操作系统——即使他们并非故意。</li></ol><hr><ol start="6"><li>人与人之间很不一样，就好像计算机和计算机之间也很不一样，有些中央处理器（头脑）更强大一些，有些人的内存容量（记忆力）更大一些，有些人的硬盘空间（笔记与藏书）更大一些，有些人显示器（外表）更漂亮一些。</li></ol><hr><ol start="7"><li>很多人的处理器是落伍的，输入和输出设备常常残缺不全，内存小到没法用的底部，硬盘甚至根本就没有……至于连网设备么，真的很差，甚至真的还不如没有，因为即使连着网也因为缺乏通讯协议而完全无法使用…</li></ol><hr><ol start="8"><li>科学是由信息构成的，正如房子是用砖头盖的一样，可问题在于，正如仅仅一堆砖头放在那里的时候，我们不能称其为房子一样，一堆信息放在一块就叫科学，有点不像话……</li></ol><hr><ol start="9"><li>学习电脑编程的函数时，我把函数想象成铅笔刀，钝铅笔进去，锐利的铅笔出来，这个模型不依赖于图像，但是过程类似。</li></ol><hr><ol start="10"><li>两个自我： 大象和骑象人<blockquote><p>人的感性面就是一头大象，而理智面就是一个骑象人。<br>骑象人骑在大象背上，手里握着缰绳，好像是他在指挥大象，但实际上，他的力量微不足道。一旦和大象发生冲突，他想往左，而大象想往右。那他通常是拗不过大象的。 </p></blockquote></li></ol><hr><ol start="11"><li>就像人有一套生理免疫系统来排斥不属于身体的微生物一样，人的心理也有一套免疫系统，它会排斥我们采取新的行为方式，以此来维持心理结构的平衡和稳定。 </li></ol><hr><ol start="12"><li>我们要验证这些假设对不对，什么时候成立，什么时候不成立。 这就像学习游泳，我们既不能只在岸上熟读《怎么学游泳》的书，也不能一下子要求自己跳到深水区，这样就被淹死了。 </li></ol><hr><ol start="13"><li>同一辆车， 在公路上开， 和在泥地上开， 要达到相同的速度， 付出的努力是不同的。 同理， 不同的工作环境和内容， 带来不同的难度， 对采用的技术和努力程度也有不同的要求。 所以只衡量结果却不考虑过程， 有失公平。 考虑过程， 就包括了对工作暖色、环境因素带来的工作复杂度的度量， 也体现了对个人技能、态度的衡量。 </li></ol><hr><ol start="14"><li>中国人是椰子文化，擅长熟人社会的交往规则，不擅长与陌生人打交道。西方人是桃子文化， 擅长与陌生人打交道。 </li></ol><hr><ol start="15"><li>闭环原则是工作中最常用也是最有效的原则，但很少有人能够一直做到。这就像“运动和良好的饮食可以帮助我们保持健康和身材”一样，几乎所有人都知道， 但很少有人能够做到。</li></ol><hr><ol start="16"><li>“回音壁”效应： 基于数据算法的产品就像是一个回音壁，你发出声音后，应用反馈给你的是与你自己声音相似的回音。你认为自己的“声音”得到了印证，所以你会对自己“声音”的正确性更加坚定不移。由此，你的信息、知识圈层只会更加固话，视野越发狭窄。</li></ol><hr><ol start="17"><li>爱因斯坦：事情不会在出现问题的那个层面得到解决，只有上升到更高的层面才会得到解决。这就像你家的羊被狼叼走了一只，你往里面补了一只羊，表面上看这个问题解决了。过些天，又有羊被叼走了，你又得不断的补羊。可出是有一天你登高望远，发现原来是羊圈出现了破损，那么你只要把破损的地方补好就可以了。<br>用大海捞针的方式穷举各种可能进行试验，这其实是一种受限于无法利用更高潜能的“笨方法”。如果人自己可以提升视野和维度，去“补羊圈”，问题往往迎刃而解，并不需要无穷次的实验。</li></ol><hr><ol start="18"><li>只要改变的策略和知识得当，以前看似不可能的事情会变得完全可能，而且简单明了，这就好比要打开一扇锁着的门一样–只有拿对钥匙才能轻松打开。 </li></ol><hr><ol start="19"><li>建立习惯就好像骑自行车上陡坡： 爬坡，到顶，下坡。 刚开始，你必须用双腿的最大力量蹬自行车，之后会渐渐变得轻松，但是你必须一直蹬到山顶，否则就会倒退回原地，让之前所有的进步付诸东流。 </li></ol><hr><ol start="20"><li>你有没有开过不带转向助力装置的汽车？ 方向盘转了好几圈，车的反应却很小。 大脑对改变的反应就像不带转向装置的汽车一样。 每次重复产生的作用可以忽略不计，可是如果不断重复下去，这些微小的变化会给大脑和生活带来巨大的改变。 </li></ol><hr><ol start="21"><li>任何事物能成为基础的第一原则就是它必须牢固可靠，而“激发动力”侧率就像是在液体上盖房子。</li></ol><hr><ol start="22"><li>我不喜欢动力不是因为它不好。例如，为了写出这些文字，我需要最基本的动力，但动力论到处都是， 人们将其伪装成个人成长的秘方，虽然这不是它本身的错。 这就好像我告诉你胡萝卜能治愈癌症一样，胡萝卜的确对你有益，但它不可能治好任何得癌症的人，于是这个好东西-胡萝卜，已经被塑造成了真理的敌人，在导出招摇撞骗。这么看来，动力是一根邪恶的胡萝卜。</li></ol><hr><ol start="23"><li>动力偶尔才会产生效果，所以很难评估，对动力策略的长远结果做一番审视，你可能会发现它并不是每次都会奏效。动力也不会轻易改善，因为如果你的狗病死了，你会情绪崩溃，或者你累了或者情绪很差时也会不想锻炼。与此相反的是， 你却能提高克服可能来自感情创伤、缺乏自信、情绪糟糕或者精力不足的抵触情绪，进而采取行动的能力，这种能力就是意志力。</li></ol><hr><ol start="24"><li>相反，他在脑中植入了一个观点，有点像你在DVD播放器里插入了一张DVD.</li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;学习一门技能，你需要知道最少必要知识。 这就好像你拿着一张地图，不可能一下子掌握其中所有的细节，但花几分钟搞清楚 “图例”（Legend）部分总是可以的，知道什么样的线标示的是公交车，什么样的线标示的是地铁，什么样的线标示的是桥梁，然后知道上北下南左西右东 —— 这之后，就可以开始慢慢研究地图了……&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="类比" scheme="https://zhangandyu.github.io/tags/%E7%B1%BB%E6%AF%94/"/>
    
  </entry>
  
  <entry>
    <title>SQL面试题</title>
    <link href="https://zhangandyu.github.io/2019/03/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-Hive%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://zhangandyu.github.io/2019/03/24/数据分析技能-Hive面试题/</id>
    <published>2019-03-23T16:00:00.000Z</published>
    <updated>2019-12-15T07:29:13.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结合两个表"><a href="#结合两个表" class="headerlink" title="结合两个表"></a>结合两个表</h1><ol><li><strong>问题描述：</strong></li></ol><p>表1：Preson</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PersonId</td><td>int</td></tr><tr><td>FirstName</td><td>varchar</td></tr><tr><td>LastName</td><td>varchar</td></tr></tbody></table><p>表2： Address</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>AddressId</td><td>int</td></tr><tr><td>PersonId</td><td>int</td></tr><tr><td>City</td><td>varchar</td></tr><tr><td>State</td><td>varchar</td></tr></tbody></table><p>要求： 为Person表中的每个人提供以下信息，无论每个人都有一个地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>答案：</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Person.FirstName,</span><br><span class="line">    Person.LastName,</span><br><span class="line">    Address.City,</span><br><span class="line">    Address.State</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Person <span class="keyword">LEFT</span> <span class="keyword">join</span> Address </span><br><span class="line">    <span class="keyword">on</span> Person.PersonId = Address.PersonId;</span><br></pre></td></tr></table></figure><p>考查点： 使用 <code>join</code> 对两表进行连接查询。</p><hr><h1 id="取出排名第-2-高的数据"><a href="#取出排名第-2-高的数据" class="headerlink" title="取出排名第 2 高的数据"></a>取出排名第 2 高的数据</h1><ol><li><strong>问题描述</strong></li></ol><p>表： Employee</p><table><thead><tr><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>300</td></tr></tbody></table><p>要求： 根据上面的 Employee 表，查询返回 薪水工资第二高的数据：<code>200</code>, 如果没有第二高的薪水， 返回<code>Null</code>。</p><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1</li></ul><p>解法： 在除过第一名薪水中，找出最高的薪水，也就是第二名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">MAX</span>(Salary) <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    Salary &lt; (<span class="keyword">SELECT</span>  <span class="keyword">MAX</span>(Salary)   <span class="keyword">FROM</span>   Employee);</span><br></pre></td></tr></table></figure><ul><li>答案2</li></ul><p>解法： 跳过排名第一的数据， 并取出1条数据，即读取第2条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   <span class="keyword">DISTINCT</span>  Salary <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"> <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可缩写为limit 1,1</span></span><br></pre></td></tr></table></figure><p><strong>但上式写法错误， 因为如果表中没有第二薪水的话，那<code>sql</code>运行报错，而不是返回<code>Null</code>。</strong></p><p>我们将其作为临时表可解决此问题：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><p>或者使用 <code>IFNULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>), </span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><ol start="3"><li>延伸</li></ol><p>找出排名第三的薪水</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1</span>), </span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><hr><h1 id="对数据进行排序"><a href="#对数据进行排序" class="headerlink" title="对数据进行排序"></a>对数据进行排序</h1><ol><li><strong>问题：</strong></li></ol><p>表： Scores</p><table><thead><tr><th>Id</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>3.50</td></tr><tr><td>2</td><td>3.65</td></tr><tr><td>3</td><td>4.00</td></tr><tr><td>4</td><td>3.85</td></tr><tr><td>5</td><td>4.00</td></tr><tr><td>6</td><td>3.65</td></tr></tbody></table><p>要求： 对以下 Scores 表中的分数进行排名，如果两数相同，则有相同的排名， 排名相等的不会留下空位。</p><p>输出结果为： </p><table><thead><tr><th>Score</th><th>Rank</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><ol start="2"><li>答案 </li></ol><ul><li>答案1：</li></ul><p>步骤1：  返回不同的成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Distinct</span> Score <span class="keyword">from</span> Scores</span><br></pre></td></tr></table></figure><p>步骤2： 统计并计算排名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Count</span>(<span class="number">1</span>) + <span class="number">1</span> <span class="keyword">From</span> (<span class="keyword">Select</span> <span class="keyword">Distinct</span> Score <span class="keyword">from</span> Scores) <span class="keyword">as</span> uniqeScores <span class="keyword">where</span> Score &gt; sc.Score</span><br></pre></td></tr></table></figure><p>步骤3： 汇总</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> </span><br><span class="line">    sc.Score,</span><br><span class="line">    (<span class="keyword">Select</span> <span class="keyword">Count</span>(<span class="number">1</span>) + <span class="number">1</span> </span><br><span class="line"><span class="keyword">From</span> (</span><br><span class="line">        <span class="keyword">Select</span> </span><br><span class="line">            <span class="keyword">Distinct</span> Score </span><br><span class="line">        <span class="keyword">from</span>  Scores) <span class="keyword">as</span> uniqeScores </span><br><span class="line"> <span class="keyword">where</span> Score &gt; sc.Score) <span class="keyword">as</span> <span class="keyword">rank</span> </span><br><span class="line"><span class="keyword">From</span> Scores sc </span><br><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> sc.Score <span class="keyword">Desc</span>;</span><br></pre></td></tr></table></figure><ul><li><p>答案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s1.Score,</span><br><span class="line"> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> s2.Score) <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">from</span> Scores s1</span><br><span class="line">       <span class="keyword">inner</span> <span class="keyword">join</span> Scores s2 <span class="keyword">on</span> s1.Score &lt;= s2.Score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s1.Id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s1.Score <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>答案3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    Score,</span><br><span class="line">    dense_rank() over(order by Score)  as Rank</span><br><span class="line">from </span><br><span class="line">    Scores</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>延伸</li></ol><p>rank、dense_rank、 row_number 的区别</p><ul><li>rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位。<blockquote><p> 如1、2、2、4</p></blockquote></li><li>dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位。<blockquote><p> 如1、2、2、3</p></blockquote></li><li>row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等。<blockquote><p> 如1、2、3、4</p></blockquote></li></ul><hr><h1 id="留存率"><a href="#留存率" class="headerlink" title="留存率"></a>留存率</h1><ol><li>问题：<br> 写出6月5-10号每日客户端活跃用户的次1日、次3日、次7日留存</li></ol><ol start="2"><li>答案</li></ol><ul><li>答案1：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    dt,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    dt,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.dt,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.dt, a1.dt) = <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.dt, a1.dt) = <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.dt, a1.dt) = <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.dt</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果为： </p><table><thead><tr><th>日期</th><th>uv</th><th>次1日</th><th>次3日</th><th>次7日</th></tr></thead><tbody><tr><td>2019/6/1</td><td>50231</td><td>6578</td><td>6642</td><td>5154</td></tr><tr><td>2019/6/2</td><td>42000</td><td>6293</td><td>5027</td><td>4304</td></tr><tr><td>2019/6/3</td><td>44312</td><td>6760</td><td>8331</td><td>5042</td></tr><tr><td>2019/6/4</td><td>37852</td><td>5298</td><td>7133</td><td>0</td></tr><tr><td>2019/6/5</td><td>30678</td><td>6082</td><td>4648</td><td>0</td></tr><tr><td>2019/6/6</td><td>39405</td><td>8173</td><td>4972</td><td>0</td></tr><tr><td>2019/6/7</td><td>31267</td><td>5352</td><td>4920</td><td>0</td></tr><tr><td>2019/6/8</td><td>25614</td><td>4451</td><td>0</td><td>0</td></tr><tr><td>2019/6/9</td><td>24113</td><td>4568</td><td>0</td><td>0</td></tr><tr><td>2019/6/10</td><td>26242</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>答案2：<br>步骤1：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> </span><br><span class="line">    dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span> </span><br><span class="line">    dt</span><br></pre></td></tr></table></figure></li></ul><p>步骤2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        dt</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        dt</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.dt =  <span class="keyword">date_add</span>(a1.dt, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.dt</span><br></pre></td></tr></table></figure></p><p>步骤3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">留存率 = 用步骤2结果/ 步骤1 结果</span><br></pre></td></tr></table></figure></p><hr><h1 id="连续出现三次的数字"><a href="#连续出现三次的数字" class="headerlink" title="连续出现三次的数字"></a>连续出现三次的数字</h1><ol><li>问题： </li></ol><p>查找出连续出现至少三次的所有数字</p><p>表 Logs 如下：</p><table><thead><tr><th>Id</th><th>Num</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>1</td></tr><tr><td>6</td><td>2</td></tr><tr><td>7</td><td>2</td></tr></tbody></table><p>得到如下结果：</p><table><thead><tr><th>ConsecutiveNums</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span>  a1.Num <span class="keyword">as</span>  ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Logs</span> <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    <span class="keyword">Logs</span> <span class="keyword">as</span> a2 <span class="keyword">on</span> a1.Id = a2.Id<span class="number">-1</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    <span class="keyword">Logs</span> <span class="keyword">as</span> a3 <span class="keyword">on</span> a1.Id = a3.Id <span class="number">-2</span></span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.Num = a2.Num <span class="keyword">and</span> a2.Num = a3.Num</span><br></pre></td></tr></table></figure><ul><li>答案2：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">distinct</span> a1.Num <span class="keyword">as</span>  ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Logs</span> a1,</span><br><span class="line">    <span class="keyword">Logs</span> a2,</span><br><span class="line">    <span class="keyword">Logs</span> a3</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a1.Id = a2.Id <span class="number">-1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a2.Id = a3.Id <span class="number">-1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Num = a2.Num</span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a2.Num = a3.Num</span><br></pre></td></tr></table></figure><ul><li>答案3：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---连续 N 次出现， 则将 3 改为 N 即可。</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">distinct</span> <span class="keyword">num</span> <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">id</span>, <span class="keyword">num</span>, </span><br><span class="line">    @pre := @cur,</span><br><span class="line">    @cur := <span class="keyword">num</span>,</span><br><span class="line">    @rep_ct := <span class="keyword">IF</span>(@pre = @cur, @rep_ct + <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">as</span> rep_ct</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="string">`Logs`</span> l, </span><br><span class="line">    (<span class="keyword">SELECT</span> @pre := <span class="literal">null</span>, @cur := <span class="number">0</span>, @rep_ct := <span class="number">1</span>) init</span><br><span class="line">)   temp </span><br><span class="line"><span class="keyword">WHERE</span> rep_ct &gt;= <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="连续-4-个月活跃的用户明细"><a href="#连续-4-个月活跃的用户明细" class="headerlink" title="连续 4 个月活跃的用户明细"></a>连续 4 个月活跃的用户明细</h1><ol><li><p>问题：<br>求出 1-4 月每月连续登陆客户端的用户数</p></li><li><p>思路</p></li></ol><p>将用户登录的月份按从小到大排序， 找出排序等于 4 的用户</p><ol start="3"><li>答案</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    <span class="keyword">id</span>, </span><br><span class="line">    <span class="keyword">month</span>(dt) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">data</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>, <span class="keyword">month</span>(dt) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    a1.month,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">id</span>) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.num= <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><h1 id="查询比经理薪资高的员工姓名"><a href="#查询比经理薪资高的员工姓名" class="headerlink" title="查询比经理薪资高的员工姓名"></a>查询比经理薪资高的员工姓名</h1><ol><li>问题</li></ol><p>表：Employee </p><blockquote><p>包含员工和经理的Id 与薪水</p></blockquote><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>NULL</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>NULL</td></tr></tbody></table><p>要求： 查找收入高于经理的员工，得到如下结果：</p><table><thead><tr><th>Employee</th></tr></thead><tbody><tr><td>Joe</td></tr></tbody></table><blockquote><p>前3列 来自a1, 后两列来自a2</p></blockquote><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><blockquote><p>利用 join 对表进行合并<br>前3列 来自a1, 后两列来自a2</p></blockquote><table><thead><tr><th>Name</th><th>Salary</th><th>ManagerId</th><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>Joe</td><td>70000</td><td>3</td><td>3</td><td>60000</td></tr><tr><td>Henry</td><td>80000</td><td>4</td><td>4</td><td>90000</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    a1.name as Employee</span><br><span class="line">from    </span><br><span class="line">    Employee as a1 join employee as a2</span><br><span class="line">    on  a1.ManagerId = a2.Id</span><br><span class="line">where </span><br><span class="line">a1.Salary &gt; a2.Salary</span><br></pre></td></tr></table></figure><ul><li><p>答案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">name</span>,salary, ManagerId</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">    Employee),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        managerid,</span><br><span class="line">        <span class="keyword">Id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Employee</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.ManagerId = a2.Id</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.Salary &gt; a2.Salary</span><br></pre></td></tr></table></figure></li><li><p>答案3：</p></li></ul><blockquote><p>步骤1：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> a1, Employee <span class="keyword">AS</span> a2</span><br></pre></td></tr></table></figure><p>此步骤输出结果为：</p><p>结果将获得这两个标的笛卡尔积，输出结果将使 4*4 = 16条记录， 我们对输出结果进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.Name <span class="keyword">AS</span> <span class="string">'Employee'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee <span class="keyword">AS</span> a,</span><br><span class="line">    Employee <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.ManagerId = b.Id</span><br><span class="line">        <span class="keyword">AND</span> a.Salary &gt; b.Salary</span><br></pre></td></tr></table></figure><hr><h1 id="找出重复邮件"><a href="#找出重复邮件" class="headerlink" title="找出重复邮件"></a>找出重复邮件</h1><ol><li>问题</li></ol><p>表： Person</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr><tr><td>2</td><td><a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a></td></tr><tr><td>3</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><p>要求： 找出Person 表中所有重复电子邮件，得到如下结果：</p><table><thead><tr><th>Email</th></tr></thead><tbody><tr><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li><p>答案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.Email</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    Email,</span><br><span class="line">    <span class="keyword">count</span>(Email) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    Email) <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.num !=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>答案2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    Email</span><br><span class="line">from</span><br><span class="line">    Person</span><br><span class="line">group by </span><br><span class="line">    Email</span><br><span class="line">having </span><br><span class="line">    count(Email) !=1</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="5月中连续7天登陆的用户数"><a href="#5月中连续7天登陆的用户数" class="headerlink" title="5月中连续7天登陆的用户数"></a>5月中连续7天登陆的用户数</h1><ol><li>问题:<br>根据用户登录表 data，取出连续登录了K天的用户uid</li></ol><table><thead><tr><th>id</th><th>dt</th></tr></thead><tbody><tr><td>A</td><td>2019-06-01</td></tr><tr><td>B</td><td>2019-06-03</td></tr><tr><td>B</td><td>2019-06-04</td></tr><tr><td>B</td><td>2019-06-05</td></tr><tr><td>B</td><td>2019-06-06</td></tr><tr><td>C</td><td>2019-06-05</td></tr><tr><td>C</td><td>2019-06-06</td></tr><tr><td>C</td><td>2019-06-07</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><ol><li>将用户按照电话号进行排序</li></ol><table><thead><tr><th>id</th><th>dt</th><th>num</th></tr></thead><tbody><tr><td>A</td><td>2019-05-01</td><td>1</td></tr><tr><td>B</td><td>2019-05-03</td><td>1</td></tr><tr><td>B</td><td>2019-05-04</td><td>2</td></tr><tr><td>B</td><td>2019-05-05</td><td>3</td></tr><tr><td>B</td><td>2019-05-06</td><td>4</td></tr><tr><td>C</td><td>2019-05-05</td><td>1</td></tr><tr><td>C</td><td>2019-05-06</td><td>2</td></tr><tr><td>C</td><td>2019-05-07</td><td>3</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Data</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-07'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt</span><br></pre></td></tr></table></figure><ol start="2"><li>将日期与排序进行相减</li></ol><table><thead><tr><th>id</th><th>dt</th><th>num</th><th>diff</th></tr></thead><tbody><tr><td>A</td><td>2019-05-01</td><td>1</td><td>2019-04-30</td></tr><tr><td>B</td><td>2019-05-03</td><td>1</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-04</td><td>2</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-05</td><td>3</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-06</td><td>4</td><td>2019-05-02</td></tr><tr><td>C</td><td>2019-05-05</td><td>1</td><td>2019-05-04</td></tr><tr><td>C</td><td>2019-05-06</td><td>2</td><td>2019-05-04</td></tr><tr><td>C</td><td>2019-05-07</td><td>3</td><td>2019-05-04</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-03'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span>,</span><br><span class="line">    (<span class="keyword">DATE_SUB</span>(dt, <span class="keyword">num</span> )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="3"><li>统计差值相同的数字个数，并大于等于3</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user_account,</span><br><span class="line">         hit_date,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-05'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">num</span>,</span><br><span class="line">    (<span class="keyword">DATE_SUB</span>(hit_date, <span class="keyword">num</span> )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    user_account,</span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">num</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    diff,</span><br><span class="line">    <span class="keyword">max</span>(<span class="keyword">num</span>),</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    diff</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">max</span>(<span class="keyword">num</span>)  &gt;= <span class="number">1</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="4"><li>找出连续登录4天以上的用户数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-05'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span>,</span><br><span class="line">    (<span class="keyword">DATE_SUB</span>(dt, <span class="keyword">num</span> )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    diff,</span><br><span class="line">    <span class="keyword">count</span>(diff) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    diff </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">count</span>(diff)  &gt;= <span class="number">4</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><!-- sd --><table><thead><tr><th>id</th><th>diff</th><th>count(diff)</th></tr></thead><tbody><tr><td>B</td><td>2019-05-02</td><td>4</td></tr><tr><td>C</td><td>2019-05-04</td><td>3</td></tr></tbody></table><hr><h1 id="求连续任意天数的用户数"><a href="#求连续任意天数的用户数" class="headerlink" title="求连续任意天数的用户数"></a>求连续任意天数的用户数</h1><blockquote><p>sql分三层<br>第一层：根据条件查询一个时间区间的数据<br>     cha_day 统一计算出一个时间差，然后和当前行数相减。连续的天数和行数相减，结果是一样的<br>第二层：分组求出每个用户的连续天数，<br>     rows:排序找出一个用户最大连续天数<br>第三层：连续天数分组，求出人数。<br>     分组天数总人数，应该等于总人数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    lx_day,</span><br><span class="line">    <span class="keyword">count</span>(user_account)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user_account,</span><br><span class="line">        cha_day,</span><br><span class="line">        <span class="keyword">count</span>(cha_day) <span class="keyword">as</span> lx_day,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(cha_day) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rows</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            <span class="keyword">datediff</span>(hit_date,<span class="string">'2000-01-01'</span>)-row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> cha_day,</span><br><span class="line">            hit_date,</span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            apache_computer_view.client_ios_log</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2019-10-15'</span> <span class="keyword">and</span> <span class="string">'2019-10-20'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name = <span class="string">'签到有礼'</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            hit_date,</span><br><span class="line">            user_account</span><br><span class="line">    )v</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        user_account,</span><br><span class="line">        cha_day</span><br><span class="line">)v</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="keyword">rows</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    lx_day</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    lx_day</span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">    <span class="number">1000</span></span><br></pre></td></tr></table></figure><hr><h1 id="找出未订购任何内容的用户"><a href="#找出未订购任何内容的用户" class="headerlink" title="找出未订购任何内容的用户"></a>找出未订购任何内容的用户</h1><ol><li>问题：</li></ol><p>表： Customers</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Joe</td></tr><tr><td>2</td><td>Henry</td></tr><tr><td>3</td><td>Sam</td></tr><tr><td>4</td><td>Max</td></tr></tbody></table><p>表： Orders</p><table><thead><tr><th>Id</th><th>CustomerId</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>要求： 根据上面两个表，找出从未订购任何内容的所有客户。输出结果如下：</p><table><thead><tr><th>Customers</th></tr></thead><tbody><tr><td>Henry</td></tr><tr><td>Max</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">Name</span> <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     Customers <span class="keyword">left</span> <span class="keyword">JOIN</span> Orders <span class="keyword">on</span> Customers.Id = Orders.CustomerId</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    Orders.CustomerId <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><ul><li>答案2：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    customers.name <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customers</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    customers.Id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        CustomerId</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Orders)</span><br></pre></td></tr></table></figure><hr><h1 id="找出各部门薪水最高的员工"><a href="#找出各部门薪水最高的员工" class="headerlink" title="找出各部门薪水最高的员工"></a>找出各部门薪水最高的员工</h1><ol><li>问题：</li></ol><p>表： Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>DepartmentId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>1</td></tr><tr><td>2</td><td>Jim</td><td>90000</td><td>1</td></tr><tr><td>3</td><td>Henry</td><td>80000</td><td>2</td></tr><tr><td>4</td><td>Sam</td><td>60000</td><td>2</td></tr><tr><td>5</td><td>Max</td><td>90000</td><td>1</td></tr></tbody></table><p>表： Department</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>IT</td></tr><tr><td>2</td><td>Sales</td></tr></tbody></table><p> 要求：找出各部门薪水最高的员工</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Jim</td><td>90000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr></tbody></table><ol start="2"><li>答案</li></ol><p>步骤1： 查出各部门最高薪水</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="keyword">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    DepartmentId</span><br></pre></td></tr></table></figure><p>步骤2： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">Employee.Name <span class="keyword">as</span> Department,</span><br><span class="line">Department.Name <span class="keyword">as</span> Employee,</span><br><span class="line">Salary </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">join</span> Department <span class="keyword">on</span> Employee.DepartmentId= Department.Id</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    ((Employee.DepartmentId, Salary) <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="keyword">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    DepartmentId))</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">Department,</span><br><span class="line">Employee,</span><br><span class="line">Salary</span><br></pre></td></tr></table></figure><hr><h1 id="获取每个部门中薪水前三名的员工"><a href="#获取每个部门中薪水前三名的员工" class="headerlink" title="获取每个部门中薪水前三名的员工"></a>获取每个部门中薪水前三名的员工</h1><ol><li>问题：</li></ol><p>表：Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>DepartmentId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>85000</td><td>1</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>2</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>2</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>1</td></tr><tr><td>5</td><td>Janet</td><td>69000</td><td>1</td></tr><tr><td>6</td><td>Randy</td><td>85000</td><td>1</td></tr><tr><td>7</td><td>Will</td><td>70000</td><td>1</td></tr></tbody></table><p>表： Department</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>IT</td></tr><tr><td>2</td><td>Sales</td></tr></tbody></table><p>要求： 找出各部门薪水前三的员工， 输出结果如下：</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Randy</td><td>85000</td></tr><tr><td>IT</td><td>Joe</td><td>85000</td></tr><tr><td>IT</td><td>Will</td><td>70000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr><tr><td>Sales</td><td>Sam</td><td>60000</td></tr></tbody></table><ol start="2"><li>答案</li></ol><p>步骤1：对各部门薪水进行排序</p><ul><li>合并<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       Employee.Name <span class="keyword">AS</span> Employee,</span><br><span class="line">        Employee.Salary <span class="keyword">AS</span> Salary,</span><br><span class="line">        Department.Name <span class="keyword">AS</span> Department </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Employee <span class="keyword">join</span> Department <span class="keyword">on</span> Employee.DepartmentId = Department.Id </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">           Employee,</span><br><span class="line">        Salary,</span><br><span class="line">        Department</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>Employee</th><th>Salary</th><th>Department</th></tr></thead><tbody><tr><td>Joe</td><td>85000</td><td>IT</td></tr><tr><td>Henry</td><td>80000</td><td>Sales</td></tr><tr><td>Sam</td><td>60000</td><td>Sales</td></tr><tr><td>Max</td><td>90000</td><td>IT</td></tr><tr><td>Janet</td><td>69000</td><td>IT</td></tr><tr><td>Randy</td><td>85000</td><td>IT</td></tr><tr><td>Will</td><td>70000</td><td>IT</td></tr></tbody></table><p>步骤2 ： 找出排名前三的</p><blockquote><p>思路：</p><ul><li>再添加一张Employee 表，与步骤1中的 A 表进行对比， 令 B 表中的 salary 大于 A 表中的 salary</li><li>条件限制：B表中 salary 大于 A 表中salary 的个数小于3</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       A.Name <span class="keyword">AS</span> Employee,</span><br><span class="line">        A.Salary <span class="keyword">AS</span> Salary,</span><br><span class="line">        Department.Name <span class="keyword">AS</span> Department </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Employee <span class="keyword">as</span> A <span class="keyword">join</span> Department <span class="keyword">on</span> A.DepartmentId = Department.Id </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> B.Salary)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Employee <span class="keyword">as</span> B</span><br><span class="line">    <span class="keyword">WHERE</span> </span><br><span class="line">        B.Salary &gt; A.Salary</span><br><span class="line">        <span class="keyword">and</span> </span><br><span class="line">        B.DepartmentId = A.DepartmentId) &lt;<span class="number">3</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://www.yanxurui.cc/posts/mysql/2016-11-10-10-sql-interview-questions/" target="_blank" rel="noopener">sql题</a></p><h1 id="学生-课程-成绩案例"><a href="#学生-课程-成绩案例" class="headerlink" title="学生-课程-成绩案例"></a>学生-课程-成绩案例</h1><ol><li>内容：<br>表： student</li></ol><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>zy</td></tr><tr><td>2</td><td>hz</td></tr><tr><td>3</td><td>zy</td></tr><tr><td>4</td><td>lx</td></tr><tr><td>5</td><td>lx</td></tr></tbody></table><p>表： course</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>match</td></tr><tr><td>2</td><td>python</td></tr><tr><td>3</td><td>java</td></tr></tbody></table><p>表: student_course</p><table><thead><tr><th>sid</th><th>cid</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>60</td></tr><tr><td>1</td><td>2</td><td>50</td></tr><tr><td>2</td><td>2</td><td>80</td></tr><tr><td>4</td><td>3</td><td>90</td></tr><tr><td>2</td><td>2</td><td>80</td></tr><tr><td>3</td><td>3</td><td>50</td></tr></tbody></table><ol start="2"><li>问题</li></ol><ul><li><p>问题1：</p><p>查询 student表中重名的学生， 结果包含id 和name, 按 name 升序</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">name</span>,</span><br><span class="line">    <span class="keyword">id</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">name</span>) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">name</span></span><br></pre></td></tr></table></figure><ul><li>问题2：</li></ul><p>查询 student_course 表中的平均份不及格的学生， 列出学生的 id 和平均分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    sid,</span><br><span class="line">    avg(score) as avg_score</span><br><span class="line">from </span><br><span class="line">    student_course</span><br><span class="line">group by </span><br><span class="line">    sid</span><br><span class="line">having</span><br><span class="line">    avg_score &lt; 60</span><br></pre></td></tr></table></figure><ul><li>问题3：</li></ul><p>查询每门课成绩都不低于80的学生id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> <span class="keyword">sid</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student_course</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">sid</span> <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">        (<span class="keyword">select</span></span><br><span class="line">            score</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            student_course</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">            score &lt;<span class="number">80</span>)</span><br></pre></td></tr></table></figure><ul><li>问题4：</li></ul><p>查询每个学生的总成绩，列出学生名称和总成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    student.name,</span><br><span class="line">    <span class="keyword">sum</span>(student_course.score)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student  <span class="keyword">left</span> <span class="keyword">join</span> student_course <span class="keyword">on</span> student.id = student_course.sid</span><br></pre></td></tr></table></figure><ul><li>问题5：查出总成绩最高的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">sid</span>, <span class="keyword">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student_course</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">sid</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">sum</span>(score) <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>问题6：  查询课程1,成绩第二高的学生</li></ul><p>方法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---在除过第一高的成绩中，找出最高的成绩</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    cid,</span><br><span class="line">    <span class="keyword">max</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stuent_score</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    cid =<span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line">    score &lt;</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">max</span>(score)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        student_score)</span><br></pre></td></tr></table></figure></p><p>方法2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---跳过排名第一的数据， 取1条数据</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">max</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stuent_score</span><br><span class="line"><span class="keyword">where</span>   </span><br><span class="line">    cid = <span class="number">1</span> </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        score</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">        score <span class="keyword">desc</span> </span><br><span class="line">    <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span> </span><br><span class="line">    <span class="comment">--limit 1,1</span></span><br></pre></td></tr></table></figure><ul><li>问题7： 查看各科成绩最高的学生id与课程id </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    cid,</span><br><span class="line">    sid,</span><br><span class="line">    score</span><br><span class="line">from </span><br><span class="line">    student_course as a1</span><br><span class="line">where </span><br><span class="line">    score &gt;=</span><br><span class="line">    (select</span><br><span class="line">        max(score)</span><br><span class="line">    from</span><br><span class="line">        stuent_score as a2</span><br><span class="line">    where  </span><br><span class="line">        a1.id = ax.id)</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sid,</span><br><span class="line">    cid,</span><br><span class="line">    max(score)</span><br><span class="line">from </span><br><span class="line">    student_score</span><br><span class="line">group by </span><br><span class="line">    cid</span><br></pre></td></tr></table></figure><ul><li>问题8： 在student_course 表中查询每门课的前2名，结果按照课程id 升序， 同一课程按照成绩降序。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    *</span><br><span class="line">from </span><br><span class="line">    student_course x</span><br><span class="line">where </span><br><span class="line">    2 &gt;(</span><br><span class="line">        select</span><br><span class="line">            count(*)</span><br><span class="line">        from</span><br><span class="line">            student_course y</span><br><span class="line">        where </span><br><span class="line">            y.cid = x.cid and y.score &gt; x.score)</span><br><span class="line">order by </span><br><span class="line">    cid,</span><br><span class="line">    score DESC</span><br></pre></td></tr></table></figure><hr><h1 id="对每季度数据进行汇总"><a href="#对每季度数据进行汇总" class="headerlink" title="对每季度数据进行汇总"></a>对每季度数据进行汇总</h1><ol><li>问题：</li></ol><p>表： sales</p><table><thead><tr><th>年</th><th>季度</th><th>销售</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table><p>要求： 通过 SQL 语句显示以下结果：</p><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 年, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">1</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 一季度, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">2</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 二季度, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">3</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 三季度, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">4</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 四季度 </span><br><span class="line"><span class="keyword">from</span> sales <span class="keyword">group</span> <span class="keyword">by</span> 年</span><br></pre></td></tr></table></figure><hr><h1 id="解释-lateral-view-函数"><a href="#解释-lateral-view-函数" class="headerlink" title="解释 lateral view 函数"></a>解释 lateral view 函数</h1><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><ul><li>描述： <blockquote><p>lateral view 用于和 split、explode、collect_set 函数 等一起使用， 能够将一行数据拆成多行数据，在此基础上对拆分后的数据进行聚合。 </p></blockquote></li></ul><h3 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h3><ol><li>问题</li></ol><p>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</p><p>表： table</p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable  <span class="keyword">as</span> adid</span><br></pre></td></tr></table></figure><p>输出结果为：<br>|pageid  |adid_list|<br>|—|—|<br>|front_page|1|<br>|front_page|2|<br>|front_page|3|<br>|contact_page|3|<br>|contact_page|4|</p><hr><h3 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h3><ol><li><p>问题：<br>要求：  计算特定广告的展现次数</p></li><li><p>答案：</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></table></figure><p>输出结果为： </p><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><h3 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h3><ol><li><p>问题：</p><p>多个 lateral view 查询</p></li></ol><p>表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br></pre></td></tr></table></figure><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h1 id="删除重复的电子邮箱"><a href="#删除重复的电子邮箱" class="headerlink" title="删除重复的电子邮箱"></a>删除重复的电子邮箱</h1><ol><li>问题</li></ol><p>表：Person</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:zhang@qq.com" target="_blank" rel="noopener">zhang@qq.com</a></td></tr><tr><td>2</td><td><a href="mailto:yu@gmailc.om" target="_blank" rel="noopener">yu@gmailc.om</a></td></tr><tr><td>3</td><td><a href="mailto:zhang@qq.com" target="_blank" rel="noopener">zhang@qq.com</a></td></tr></tbody></table><p>要求: 删除 Person 表中所有重复的电子邮箱，只保留 Id 最小的那个。 </p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:zhang@qq.com" target="_blank" rel="noopener">zhang@qq.com</a></td></tr><tr><td>2</td><td><a href="mailto:yu@gmailc.om" target="_blank" rel="noopener">yu@gmailc.om</a></td></tr></tbody></table><ol start="2"><li>答案：</li></ol><ul><li>答案1：</li></ul><p>步骤1：找出 Id 大的重复邮箱</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.*</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Person a1 <span class="keyword">join</span> Person a2 </span><br><span class="line">    <span class="keyword">on</span> a1.Email = a2. Email</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1. <span class="keyword">Id</span> &gt; a2.Id</span><br></pre></td></tr></table></figure><p>步骤2： 删除 Id 较大的重复邮箱。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a1</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Person a1 <span class="keyword">join</span> Person a2 </span><br><span class="line">    <span class="keyword">on</span> a1.Email = a2. Email</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1. <span class="keyword">Id</span> &gt; a2.Id</span><br></pre></td></tr></table></figure><p>答案2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE a1</span><br><span class="line">FROM </span><br><span class="line">    Person a1,</span><br><span class="line">     Person a2 </span><br><span class="line">where </span><br><span class="line">   a1.Email = a2. Email and  a1. Id &gt; a2.Id</span><br></pre></td></tr></table></figure><h1 id="上升的温度"><a href="#上升的温度" class="headerlink" title="上升的温度"></a>上升的温度</h1><ol><li><a href="https://leetcode-cn.com/problems/rising-temperature/" target="_blank" rel="noopener">问题</a></li></ol><p>表： Weather</p><table><thead><tr><th>Id(INT)</th><th>RecordDate(DATE)</th><th>Temperature(INT)</th></tr></thead><tbody><tr><td>1</td><td>2015-01-01</td><td>10</td></tr><tr><td>2</td><td>2015-01-02</td><td>25</td></tr><tr><td>3</td><td>2015-01-03</td><td>20</td></tr><tr><td>4</td><td>2015-01-04</td><td>30</td></tr></tbody></table><p>要求：查找与昨天日期相比温度更高的所有日期的 Id, 返回结果如下：</p><table><thead><tr><th>Id</th></tr></thead><tbody><tr><td>2</td></tr><tr><td>4</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><p>答案1： datediff 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Weather a1  <span class="keyword">join</span> Weather a2 <span class="keyword">on</span>  <span class="keyword">datediff</span>(a1.RecordDate, a2.RecordDate) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Temperature &gt; a2.Temperature</span><br></pre></td></tr></table></figure><p>答案2： ADDDATE 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Weather a1  <span class="keyword">join</span> Weather a2 <span class="keyword">on</span>   a1.RecordDate=    <span class="keyword">date_add</span>(a2.RecordDate,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Temperature &gt; a2.Temperature</span><br></pre></td></tr></table></figure><hr><h1 id="游戏玩家分析1"><a href="#游戏玩家分析1" class="headerlink" title="游戏玩家分析1"></a>游戏玩家分析1</h1><p>此表显示某些游戏玩家的活动。每一行都是某天用某些设备登陆并玩多个游戏的玩家记录。 </p><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 显示每个玩家的第一次登陆日期， 输出如下结果</p><table><thead><tr><th>player_id</th><th>first_login</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td></tr><tr><td>2</td><td>2017-06-25</td></tr><tr><td>3</td><td>2016-03-02</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a1.player_id, a1.event_date <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">FROM</span> activity a1 <span class="keyword">left</span> <span class="keyword">join</span> activity a2 <span class="keyword">on</span> a1.player_id=a2.player_id <span class="keyword">and</span> a1.event_date&gt;a2.event_date</span><br><span class="line"><span class="keyword">WHERE</span> a2.event_date <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">to_char(event_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">event_date,</span><br><span class="line">row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date <span class="keyword">asc</span>) rn</span><br><span class="line"><span class="keyword">from</span> Activity)</span><br><span class="line"><span class="keyword">where</span> rn = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://codeday.me/bug/20190309/737795.html" target="_blank" rel="noopener">https://codeday.me/bug/20190309/737795.html</a></p><hr><h1 id="游戏玩家分析2"><a href="#游戏玩家分析2" class="headerlink" title="游戏玩家分析2"></a>游戏玩家分析2</h1><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 写取出每个玩家第一次玩游戏的设备号</p><p>输出结果如下： </p><table><thead><tr><th>player_id</th><th>device_id</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.player_id, </span><br><span class="line">    a1.device_id</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    activity a1 </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> activity a2 <span class="keyword">on</span> a1.player_id=a2.player_id <span class="keyword">and</span> a1.event_date&gt;a2.event_date</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a2.event_date <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id, device_id</span><br><span class="line"> <span class="keyword">from</span> </span><br><span class="line"> (</span><br><span class="line">     <span class="keyword">select</span> * <span class="keyword">from</span> Activity <span class="keyword">where</span> (player_id,event_date) </span><br><span class="line"> <span class="keyword">in</span> </span><br><span class="line"> (<span class="keyword">select</span> player_id, <span class="keyword">min</span>(event_date) </span><br><span class="line"> <span class="keyword">from</span> Activity <span class="keyword">group</span> <span class="keyword">by</span> player_id) </span><br><span class="line"> ) <span class="keyword">as</span> t</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">player_id, device_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">device_id,</span><br><span class="line">row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date <span class="keyword">asc</span>) rn</span><br><span class="line"><span class="keyword">from</span> Activity)</span><br><span class="line"><span class="keyword">where</span> rn = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h1 id="游戏分析3"><a href="#游戏分析3" class="headerlink" title="游戏分析3"></a>游戏分析3</h1><p>表：Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>1</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 取出每个玩家在不同日期下的累积玩游戏次数。</p><blockquote><p>例如： 玩家 id 为 1 的玩家， 在 2016-05-02 时，玩游戏的总次数为 5+6=11， 在2017-06-25 时，玩游戏的总次数为 5+6+1=12。</p></blockquote><p>输出结果如下：</p><table><thead><tr><th>player_id</th><th>event_date</th><th>games_played_so_far</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2016-05-02</td><td>11</td></tr><tr><td>1</td><td>2017-06-25</td><td>12</td></tr><tr><td>3</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>答案： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    player_id,</span><br><span class="line">    to_char(event_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> event_date,</span><br><span class="line">    <span class="keyword">sum</span>(games_played) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date) games_played_so_far</span><br><span class="line"><span class="keyword">from</span> activity</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.player_id ,a.event_date,(<span class="keyword">case</span> <span class="keyword">when</span> @player_id=a.player_id <span class="keyword">then</span> @<span class="keyword">value</span>:=@<span class="keyword">value</span>+a.games_played <span class="keyword">when</span> @player_id:=a.player_id <span class="keyword">then</span> @<span class="keyword">value</span>:=a.games_played <span class="keyword">end</span> ) <span class="keyword">as</span> games_played_so_far <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> Activity <span class="keyword">order</span> <span class="keyword">by</span> player_id,event_date) a, (<span class="keyword">select</span> @player_id:=<span class="literal">Null</span>,@<span class="keyword">value</span>:=<span class="number">0</span>)s</span><br></pre></td></tr></table></figure><hr><h3 id="游戏分析4"><a href="#游戏分析4" class="headerlink" title="游戏分析4"></a>游戏分析4</h3><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-03-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 查询在首次登陆后第二天再次登陆的玩家比例， 四舍五入到小数点后两位。 换句话说： 你需要计算从首次登陆日期开始至少连续两天登陆的玩家数量， 然后将该数量除以玩家总数。</p><p>输出结果如下：<br>| fraction  |<br>|———–|<br>| 0.33      |</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 错误</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  <span class="keyword">CAST</span>( <span class="keyword">count</span>(b.player_id) / <span class="keyword">count</span>(<span class="keyword">distinct</span> a.player_id)  <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">38</span>, <span class="number">2</span>))  <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Activity <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    Activity <span class="keyword">as</span> b</span><br><span class="line">    <span class="keyword">on</span> a.player_id = b.player_id <span class="keyword">and</span> a.event_date = b.event_date+<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">round</span>(<span class="keyword">count</span>(<span class="keyword">if</span>(<span class="keyword">datediff</span>(a2.event_date ,a1.event_date )=<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>))/<span class="keyword">count</span>(<span class="keyword">distinct</span> a1.player_id ),<span class="number">2</span>)  <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Activity a1, Activity a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.player_id =a2.player_id </span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    (a1.player_id,a1.event_date) <span class="keyword">in</span> (</span><br><span class="line">            <span class="keyword">select</span> </span><br><span class="line">                player_id ,</span><br><span class="line">                <span class="keyword">min</span>(event_date) event_date </span><br><span class="line">            <span class="keyword">from</span> </span><br><span class="line">                Activity a3</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">                player_id )</span><br></pre></td></tr></table></figure><hr><h1 id="求中位数"><a href="#求中位数" class="headerlink" title="求中位数"></a>求中位数</h1><p>表： Employee </p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>2341</td></tr><tr><td>2</td><td>A</td><td>341</td></tr><tr><td>3</td><td>A</td><td>15</td></tr><tr><td>4</td><td>A</td><td>15314</td></tr><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>7</td><td>B</td><td>15</td></tr><tr><td>8</td><td>B</td><td>13</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>10</td><td>B</td><td>1345</td></tr><tr><td>11</td><td>B</td><td>1221</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>13</td><td>C</td><td>2345</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr><tr><td>15</td><td>C</td><td>2645</td></tr><tr><td>16</td><td>C</td><td>2652</td></tr><tr><td>17</td><td>C</td><td>65</td></tr></tbody></table><p>要求：查找每个公司的薪水中位数</p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr></tbody></table><p>答案：<br><a href="https://www.cnblogs.com/jxlwqq/p/5868206.html" target="_blank" rel="noopener">https://www.cnblogs.com/jxlwqq/p/5868206.html</a><br><a href="https://www.oschina.net/translate/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query" target="_blank" rel="noopener">https://www.oschina.net/translate/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query</a></p><ol><li>进行排序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">Id</span>,</span><br><span class="line">    Company,</span><br><span class="line">    Salary,</span><br><span class="line">    ROW_NUMBER ( ) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> Company  <span class="keyword">order</span> <span class="keyword">by</span>  Salary) <span class="keyword">as</span> rank_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th><th>rank_name</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>A</td><td>15</td><td>1</td><td>6</td></tr><tr><td>2</td><td>A</td><td>341</td><td>2</td><td>6</td></tr><tr><td>5</td><td>A</td><td>451</td><td>3</td><td>6</td></tr><tr><td>6</td><td>A</td><td>513</td><td>4</td><td>6</td></tr><tr><td>1</td><td>A</td><td>2341</td><td>5</td><td>6</td></tr><tr><td>4</td><td>A</td><td>15314</td><td>6</td><td>6</td></tr><tr><td>8</td><td>B</td><td>13</td><td>1</td><td>6</td></tr><tr><td>7</td><td>B</td><td>15</td><td>2</td><td>6</td></tr><tr><td>12</td><td>B</td><td>234</td><td>3</td><td>6</td></tr><tr><td>9</td><td>B</td><td>1154</td><td>4</td><td>6</td></tr><tr><td>11</td><td>B</td><td>1221</td><td>5</td><td>6</td></tr><tr><td>10</td><td>B</td><td>1345</td><td>6</td><td>6</td></tr><tr><td>17</td><td>C</td><td>65</td><td>1</td><td>6</td></tr><tr><td>13</td><td>C</td><td>2345</td><td>2</td><td>6</td></tr><tr><td>14</td><td>C</td><td>2645</td><td>3</td><td>6</td></tr><tr><td>15</td><td>C</td><td>2645</td><td>4</td><td>6</td></tr><tr><td>16</td><td>C</td><td>2652</td><td>5</td><td>6</td></tr></tbody></table><ol start="2"><li>找到中位数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, company, salary</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, company, salary,</span><br><span class="line">row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company <span class="keyword">order</span> <span class="keyword">by</span> salary) <span class="keyword">as</span> rank_name,</span><br><span class="line"><span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company) <span class="keyword">as</span> <span class="keyword">num</span> </span><br><span class="line"><span class="keyword">from</span> employee</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">abs</span>(rank_name - (<span class="keyword">num</span>+<span class="number">1</span>)/<span class="number">2</span>) &lt; <span class="number">1</span> <span class="comment">-- 顺序编号在公司薪水记录数中间的，即为中位数</span></span><br></pre></td></tr></table></figure><hr><h1 id="查找至少有5名直接下属的经理"><a href="#查找至少有5名直接下属的经理" class="headerlink" title="查找至少有5名直接下属的经理"></a>查找至少有5名直接下属的经理</h1><p>表：Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Department</th><th>ManagerId</th></tr></thead><tbody><tr><td>101</td><td>John</td><td>A</td><td>null</td></tr><tr><td>102</td><td>Dan</td><td>A</td><td>101</td></tr><tr><td>103</td><td>James</td><td>A</td><td>101</td></tr><tr><td>104</td><td>Amy</td><td>A</td><td>101</td></tr><tr><td>105</td><td>Anne</td><td>A</td><td>101</td></tr><tr><td>106</td><td>Ron</td><td>B</td><td>101</td></tr></tbody></table><p>要求： 查询来查找至少有5名直接下属的经理</p><p>输出结果为： </p><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>John</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a2.Name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee a1 <span class="keyword">join</span> Employee a2</span><br><span class="line"><span class="keyword">on</span> a1.ManagerId = a2.Id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.ManagerId</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">count</span>(*) &gt;=<span class="number">5</span></span><br></pre></td></tr></table></figure><hr><h1 id="给定数字的频率查中位数"><a href="#给定数字的频率查中位数" class="headerlink" title="给定数字的频率查中位数"></a>给定数字的频率查中位数</h1><p>表： Numbers</p><table><thead><tr><th>Number</th><th>Frequency</th></tr></thead><tbody><tr><td>0</td><td>7</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>要求： 数字为 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3，所以中位数是 (0 + 0) / 2 = 0，输出结果如下</p><table><thead><tr><th>median</th></tr></thead><tbody><tr><td>0.0000</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(n2.number) <span class="keyword">median</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(n.number) <span class="built_in">number</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">number</span>, frequency, (@cumsum:=@cumsum+frequency) <span class="string">'cumsum'</span></span><br><span class="line"><span class="keyword">from</span> numbers ,(<span class="keyword">select</span> @cumsum:=<span class="number">0</span>) temp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">number</span>)  n</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">n.cumsum &gt;= (<span class="keyword">floor</span>(((<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(frequency) <span class="keyword">FROM</span> numbers) +<span class="number">1</span> ) / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(n1.number) <span class="built_in">number</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">number</span>, frequency, (@cumsum1:=@cumsum1+frequency) <span class="string">'cumsum'</span></span><br><span class="line"><span class="keyword">from</span> numbers ,(<span class="keyword">select</span> @cumsum1:=<span class="number">0</span>) temp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">number</span>)  n1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">n1.cumsum &gt;= (<span class="keyword">ceil</span>(((<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(frequency) <span class="keyword">FROM</span> numbers) +<span class="number">1</span> ) / <span class="number">2</span>))) n2;</span><br></pre></td></tr></table></figure><hr><h1 id="找出当选最多的人名称"><a href="#找出当选最多的人名称" class="headerlink" title="找出当选最多的人名称"></a>找出当选最多的人名称</h1><p>表： Candidate</p><table><thead><tr><th>id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr><tr><td>4</td><td>D</td></tr><tr><td>5</td><td>E</td></tr></tbody></table><p>表： Vote</p><table><thead><tr><th>id</th><th>CandidateId</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>3</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>5</td></tr></tbody></table><blockquote><p>表 <code>Candidate</code> 为候选人名称表， 表 <code>Vote</code> 中<code>CandidateId</code> 是 <code>Candidate</code>表中的 <code>id</code>。</p></blockquote><p>要求： 找出当选者的名称，返回结果为当选者<code>B</code>。输出结果如下：<br>| Name |<br>|——|<br>| B    |</p><p>答案：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">Name</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Candidate</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">id</span> = (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            CandidateId</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            Vote</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">            CandidateId</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">            <span class="keyword">count</span>(*) <span class="keyword">DESC</span> </span><br><span class="line">        <span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h1 id="选出所有-bonus-lt-1000的员工的-name-以及-bonus"><a href="#选出所有-bonus-lt-1000的员工的-name-以及-bonus" class="headerlink" title="选出所有 bonus &lt; 1000的员工的 name 以及 bonus"></a>选出所有 bonus &lt; 1000的员工的 name 以及 bonus</h1><p>表：Employee</p><table><thead><tr><th>empId</th><th>name</th><th>supervisor</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>3</td><td>1000</td></tr><tr><td>2</td><td>Dan</td><td>3</td><td>2000</td></tr><tr><td>3</td><td>Brad</td><td>null</td><td>4000</td></tr><tr><td>4</td><td>Thomas</td><td>3</td><td>4000</td></tr></tbody></table><p>表：Bonus</p><table><thead><tr><th>empId</th><th>bonus</th></tr></thead><tbody><tr><td>2</td><td>500</td></tr><tr><td>4</td><td>2000</td></tr></tbody></table><p>要求： 选出所有 bonus &lt; 1000的员工的 name 以及 bonus。输出结果如下</p><table><thead><tr><th>name</th><th>bonus</th></tr></thead><tbody><tr><td>John</td><td>null</td></tr><tr><td>Dan</td><td>500</td></tr><tr><td>Brad</td><td>null</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name,</span><br><span class="line">    a2.bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">as</span> a1</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Bonus <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span> a1.empid = a2.empid </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">ifnull</span> (bonus, <span class="number">0</span>) &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name,</span><br><span class="line">    a2.bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">as</span> a1</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Bonus <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span> a1.empid = a2.empid </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    nvl (bonus, <span class="number">0</span>) &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><h1 id="谁有最多的好友"><a href="#谁有最多的好友" class="headerlink" title="谁有最多的好友"></a>谁有最多的好友</h1><p>表： request_accepted </p><blockquote><p>表中存储了所有好友申请通过的数据记录，其中，requester_id 和 accepter_id 都是用户的编号。</p></blockquote><table><thead><tr><th>requester_id</th><th>accepter_id</th><th>accept_date</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016_06-03</td></tr><tr><td>1</td><td>3</td><td>2016-06-08</td></tr><tr><td>2</td><td>3</td><td>2016-06-08</td></tr><tr><td>3</td><td>4</td><td>2016-06-09</td></tr></tbody></table><p>要求： 求出谁拥有最多的好友和他拥有的好友数目。输出结果如下</p><table><thead><tr><th>id</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>3</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">as</span> <span class="keyword">id</span>, ucnt <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> ucnt</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> requester_id <span class="keyword">as</span> <span class="keyword">id</span> <span class="keyword">from</span> request_accepted</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> accepter_id <span class="keyword">as</span> <span class="keyword">id</span> <span class="keyword">from</span> request_accepted</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> ucnt <span class="keyword">desc</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rownum</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="找出人流量的高峰期"><a href="#找出人流量的高峰期" class="headerlink" title="找出人流量的高峰期"></a>找出人流量的高峰期</h1><p>表：stadium</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>1</td><td>2017-01-01</td><td>10</td></tr><tr><td>2</td><td>2017-01-02</td><td>109</td></tr><tr><td>3</td><td>2017-01-03</td><td>150</td></tr><tr><td>4</td><td>2017-01-04</td><td>99</td></tr><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><p>要求： 找出人流量的高峰期。高峰期时， 至少连续三行记录中的人流量不少于100。得出结果如下</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> a.*</span><br><span class="line"><span class="keyword">FROM</span> stadium <span class="keyword">as</span> a,stadium <span class="keyword">as</span> b,stadium <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> ((a.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id+<span class="number">1</span> = c.id) <span class="keyword">or</span></span><br><span class="line">       (a.id<span class="number">-1</span> = b.id <span class="keyword">and</span> a.id+<span class="number">1</span> = c.id) <span class="keyword">or</span></span><br><span class="line">       (a.id<span class="number">-1</span> = c.id <span class="keyword">and</span> c.id<span class="number">-1</span> = b.id))</span><br><span class="line">  <span class="keyword">and</span> (a.people&gt;=<span class="number">100</span> <span class="keyword">and</span> b.people&gt;=<span class="number">100</span> <span class="keyword">and</span> c.people&gt;=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, to_char(visit_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> visit_date, people</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, visit_date, people,</span><br><span class="line"><span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">offset</span>) cnt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, visit_date, people,</span><br><span class="line">(row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) - <span class="keyword">id</span>) <span class="keyword">offset</span></span><br><span class="line"><span class="keyword">from</span> stadium</span><br><span class="line"><span class="keyword">where</span> people &gt;= <span class="number">100</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> cnt &gt;= <span class="number">3</span>   <span class="comment">-- 连续 3 天（及以上）</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br></pre></td></tr></table></figure><hr><h1 id="预约连续空余座位"><a href="#预约连续空余座位" class="headerlink" title="预约连续空余座位"></a>预约连续空余座位</h1><p>表：cinema</p><table><thead><tr><th>seat_id</th><th>free</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>0</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>1</td></tr><tr><td>5</td><td>1</td></tr></tbody></table><p>要求：获取所有空余座位，并将它们按照 seat_id 排序。输出结果如下</p><blockquote><p>连续空余座位的定义是大于等于 2 个连续空余的座位。1 表示空余，0 表示已被占据。</p></blockquote><table><thead><tr><th>seat_id</th></tr></thead><tbody><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">num</span>) <span class="keyword">as</span> cum</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">( </span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id,</span><br><span class="line">    (row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> seat_id) - seat_id) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    free = <span class="number">1</span>))</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    cum &gt;= <span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    seat_id</span><br></pre></td></tr></table></figure><hr><h1 id="找出符合条件的电影"><a href="#找出符合条件的电影" class="headerlink" title="找出符合条件的电影"></a>找出符合条件的电影</h1><p>表：cinema</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr><tr><td>2</td><td>Science</td><td>fiction</td><td>8.5</td></tr><tr><td>3</td><td>irish</td><td>boring</td><td>6.2</td></tr><tr><td>4</td><td>Ice song</td><td>Fantacy</td><td>8.6</td></tr><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr></tbody></table><p>要求： 找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。输出结果如下</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><p>答案1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     *</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">mod</span>(<span class="keyword">id</span>, <span class="number">2</span>) = <span class="number">1</span> </span><br><span class="line">     <span class="keyword">and</span> </span><br><span class="line">     description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure></p><p>答案2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">   description != <span class="string">'boring'</span></span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   <span class="keyword">id</span> % <span class="number">2</span> !=<span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure></p><hr><h1 id><a href="#" class="headerlink" title=" "></a> </h1><p>表：Sales</p><table><thead><tr><th>sale_id</th><th>product_id</th><th>year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>2</td><td>100</td><td>2009</td><td>12</td><td>5000</td></tr><tr><td>7</td><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>表：Product</p><table><thead><tr><th>product_id</th><th>product_name</th></tr></thead><tbody><tr><td>100</td><td>Nokia</td></tr><tr><td>200</td><td>Apple</td></tr><tr><td>300</td><td>Samsung</td></tr></tbody></table><p>要求： 编写sql查询， 选择每个销售产品的第一年的数据， 输出结果如下</p><table><thead><tr><th>product_id</th><th>first_year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>答案：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    product_id,</span><br><span class="line">    <span class="keyword">year</span>  <span class="keyword">as</span> first_year,</span><br><span class="line">    quantity,</span><br><span class="line">    price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        product_id,</span><br><span class="line">        <span class="keyword">year</span>,</span><br><span class="line">        quantity,price,</span><br><span class="line">        <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> product_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>) rn</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        sales)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    rn=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><h1 id="找到购买所有产品的顾客"><a href="#找到购买所有产品的顾客" class="headerlink" title="找到购买所有产品的顾客"></a>找到购买所有产品的顾客</h1><p>表1： customer</p><table><thead><tr><th>customer_id</th><th>product_key</th></tr></thead><tbody><tr><td>1</td><td>5</td></tr><tr><td>2</td><td>6</td></tr><tr><td>3</td><td>5</td></tr><tr><td>3</td><td>6</td></tr><tr><td>1</td><td>6</td></tr></tbody></table><p>表2： product</p><p>| product_key |<br>+————-+<br>| 5           |<br>| 6           |</p><p>要求：  找出从 customer 表中购买了 product 表所有产品的客户id。 输出结果如下</p><table><thead><tr><th>customer_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr></tbody></table><p>答案：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customer</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> product_key) =</span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> product_key)</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        product )</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        customer_id, <span class="keyword">count</span>(<span class="keyword">distinct</span> product_key) <span class="keyword">as</span> <span class="keyword">num</span> </span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        customer</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        customer_id) <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">count</span>(product_key) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        product</span><br><span class="line">) <span class="keyword">as</span> a2</span><br><span class="line"><span class="keyword">on</span> a1.num = a2.num</span><br></pre></td></tr></table></figure><hr><h1 id="查询关注者的关注数据"><a href="#查询关注者的关注数据" class="headerlink" title="查询关注者的关注数据"></a>查询关注者的关注数据</h1><p>表：follow</p><table><thead><tr><th>followee (博主)</th><th>follower(关注者)</th></tr></thead><tbody><tr><td>A</td><td>B</td></tr><tr><td>B</td><td>C</td></tr><tr><td>B</td><td>D</td></tr><tr><td>D</td><td>E</td></tr></tbody></table><p>要求： 查询每个关注者， 被多少人关注。 输出结果如下：</p><table><thead><tr><th>follower</th><th>num</th></tr></thead><tbody><tr><td>B</td><td>2</td></tr><tr><td>D</td><td>1</td></tr></tbody></table><blockquote><p>B 和 D 都在在 follower 字段中出现，作为博主，B 被 C 和 D 关注，D 被 E 关注。A 不在 follower 字段内，所以A不在输出列表中。</p></blockquote><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    f1.follower, </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> f2.follower) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    follow f1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    follow f2</span><br><span class="line">    <span class="keyword">on</span> f1.follower = f2.followee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    f1.follower</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>   </span><br><span class="line">    f1.follower</span><br></pre></td></tr></table></figure><hr><h4 id="如何用python操作mysql"><a href="#如何用python操作mysql" class="headerlink" title="如何用python操作mysql"></a>如何用python操作mysql</h4><p>步骤</p><ol><li>安装 mysql-connector</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector</span><br></pre></td></tr></table></figure><ol start="2"><li>连接数据库<blockquote><p>通过 connection 对数据库的连接进行管理， 通过 cursor 创建游标对数据库中的数据进行操作。 </p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line"></span><br><span class="line">db = mysql.connector.connect(</span><br><span class="line">    host=<span class="string">'ip地址'</span>,</span><br><span class="line">    user = <span class="string">"root"</span>, </span><br><span class="line">    passwd = <span class="string">"1234"</span>, <span class="comment"># 数据库密码</span></span><br><span class="line">    database = <span class="string">'default'</span>, <span class="comment"># 连接的数据库</span></span><br><span class="line">    auth_plugin = <span class="string">'mysql_native_password" )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取操作游标</span></span><br><span class="line"><span class="string">cursor = db.cursor()</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写sql语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 输出sql 语句</span></span><br><span class="line">sql = <span class="string">"""select</span></span><br><span class="line"><span class="string">     btn_name</span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    cinema</span></span><br><span class="line"><span class="string">where</span></span><br><span class="line"><span class="string">    hit_date = "2019-07-26"</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><ol start="4"><li>执行sql语句并返回结果</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集中的所有行</span></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据中的第一行</span></span><br><span class="line"><span class="comment"># cursor.fetchone()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集中的n条数据</span></span><br><span class="line"><span class="comment"># cursor.fetchmany(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回数据集中中的行数</span></span><br><span class="line"><span class="comment"># cursor.rowcount</span></span><br></pre></td></tr></table></figure><ol start="5"><li>关闭游标和数据库连接</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><ol start="6"><li>延伸： 捕获异常信息。<blockquote><p>在对数据进行增加、删除和修改时， 可能会出现异常，需要对异常数据进行捕获。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sql = <span class="string">"""INSER INTO player (team_id, player_name, height) VALUES (%s, %s, %s)"""</span></span><br><span class="line">    val = (<span class="number">1000</span>, <span class="string">"zhangyu"</span>, <span class="number">1.95</span>)</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cursor.execute(sql, val)</span><br><span class="line">    <span class="comment"># 进行提交</span></span><br><span class="line">    db.commit()</span><br><span class="line">    print(cursor.rowcount, <span class="string">"记录插入成功。"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印异常信息</span></span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    <span class="comment"># 回滚</span></span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>参考资料： 极客时间-sql必知必会</p><hr><h1 id="求出每个项目中经验最丰富的员工"><a href="#求出每个项目中经验最丰富的员工" class="headerlink" title="求出每个项目中经验最丰富的员工"></a>求出每个项目中经验最丰富的员工</h1><p>表：Project table</p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><p>表：Employee table</p><table><thead><tr><th>employee_id</th><th>name</th><th>experience_years</th></tr></thead><tbody><tr><td>1</td><td>Khaled</td><td>3</td></tr><tr><td>2</td><td>Ali</td><td>2</td></tr><tr><td>3</td><td>John</td><td>3</td></tr><tr><td>4</td><td>Doe</td><td>2</td></tr></tbody></table><p>要求： 求出每个项目中经验最丰富的员工， 输出结果如下</p><blockquote><p>ID为1和3的员工，在第一个项目中拥有最丰富的经验， 对于第二个项目， ID为1的员工拥有最丰富的经验</p></blockquote><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    project_id,</span><br><span class="line">    employee_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        p.project_id,</span><br><span class="line">        e.employee_id,</span><br><span class="line">        <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> p.project_id <span class="keyword">order</span> <span class="keyword">by</span> e.experience_years <span class="keyword">desc</span>) rn</span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">project</span> p, employee e</span><br><span class="line">    <span class="keyword">where</span> p.employee_id = e.employee_id)</span><br><span class="line"><span class="keyword">where</span> rn = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="求所有员工的平均工作经验，保留2位小数。"><a href="#求所有员工的平均工作经验，保留2位小数。" class="headerlink" title="求所有员工的平均工作经验，保留2位小数。"></a>求所有员工的平均工作经验，保留2位小数。</h1><p>表： Project </p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><p>+————-+————-+</p><p>表：Employee </p><table><thead><tr><th>employee_id</th><th>name</th><th>experience_years</th></tr></thead><tbody><tr><td>1</td><td>Khaled</td><td>3</td></tr><tr><td>2</td><td>Ali</td><td>2</td></tr><tr><td>3</td><td>John</td><td>1</td></tr><tr><td>4</td><td>Doe</td><td>2</td></tr></tbody></table><p>要求： 求每个部门所有员工的平均工作年限， 保留两位小数。输出结果如下</p><blockquote><p>第一个项目的平均工作年限为（3+2+1）/ 3 = 2.00<br>第二个项目的平均工作年限为（3+2）/ 2 = 2.50</p></blockquote><table><thead><tr><th>project_id</th><th>average_years</th></tr></thead><tbody><tr><td>1</td><td>2.00</td></tr><tr><td>2</td><td>2.50</td></tr></tbody></table><p>答案1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     project_id,</span><br><span class="line">     <span class="keyword">round</span>(<span class="keyword">avg</span>(experience_years),<span class="number">2</span>) <span class="keyword">as</span> average_years</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Project</span>, Employee</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    Project.employee_id = Employee.employee_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    project_id</span><br></pre></td></tr></table></figure></p><hr><h1 id="查询每个专业的学生人数"><a href="#查询每个专业的学生人数" class="headerlink" title="查询每个专业的学生人数"></a>查询每个专业的学生人数</h1><blockquote><p>一所大学有 2 个数据表，分别是 student 和 department ，这两个表保存着每个专业的学生数据和院系数据。</p></blockquote><p>表：student</p><table><thead><tr><th>student_id</th><th>student_name</th><th>gender</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Jack</td><td>M</td><td>1</td></tr><tr><td>2</td><td>Jane</td><td>F</td><td>1</td></tr><tr><td>3</td><td>Mark</td><td>M</td><td>2</td></tr></tbody></table><p>表：department</p><table><thead><tr><th>dept_id</th><th>dept_name</th></tr></thead><tbody><tr><td>1</td><td>Engineering</td></tr><tr><td>2</td><td>Science</td></tr><tr><td>3</td><td>Law</td></tr></tbody></table><p>要求： 查询 department 表中每个专业的学生人数 （即使没有学生的专业也需列出）。将你的查询结果按照学生人数降序排列。 如果有两个或两个以上专业有相同的学生数目，将这些部门按照部门名字的字典序从小到大排列。输出结果如下</p><table><thead><tr><th>dept_name</th><th>student_number</th></tr></thead><tbody><tr><td>Engineering</td><td>2</td></tr><tr><td>Science</td><td>1</td></tr><tr><td>Law</td><td>0</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  a1.dept_name,</span><br><span class="line">  <span class="keyword">COUNT</span>(student_id) <span class="keyword">AS</span> student_number </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  department a1</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student a2  <span class="keyword">ON</span> a1.dept_id = a2.dept_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">     a1.dept_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    student_number <span class="keyword">DESC</span>,</span><br><span class="line">    a1.dept_name</span><br></pre></td></tr></table></figure><p>答案2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    dept_name,</span><br><span class="line">    (<span class="keyword">case</span> <span class="keyword">when</span> student_num <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> student_num <span class="keyword">end</span>) student_number</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    dept_id,</span><br><span class="line">    <span class="keyword">count</span>(*) student_num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    dept_id) t1</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">     department t2 <span class="keyword">on</span> t1.dept_id=t2.dept_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    student_number <span class="keyword">desc</span>,</span><br><span class="line">    dept_name <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></p><hr><p>表：salesperson</p><blockquote><p>表 salesperson 存储了所有销售员的信息。每个销售员都有一个销售员编号 sales_id 和他的名字 name 。</p></blockquote><table><thead><tr><th>sales_id</th><th>name</th><th>salary</th><th>commission_rate</th><th>hire_date</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>100000</td><td>6</td><td>4/1/2006</td></tr><tr><td>2</td><td>Amy</td><td>120000</td><td>5</td><td>5/1/2010</td></tr><tr><td>3</td><td>Mark</td><td>65000</td><td>12</td><td>12/25/2008</td></tr><tr><td>4</td><td>Pam</td><td>25000</td><td>25</td><td>1/1/2005</td></tr><tr><td>5</td><td>Alex</td><td>50000</td><td>10</td><td>2/3/2007</td></tr></tbody></table><p>表：company</p><blockquote><p>表 company 存储了所有公司的信息。每个公司都有一个公司编号 com_id 和它的名字 name 。</p></blockquote><table><thead><tr><th>com_id</th><th>name</th><th>city</th></tr></thead><tbody><tr><td>1</td><td>RED</td><td>Boston</td></tr><tr><td>2</td><td>ORANGE</td><td>New York</td></tr><tr><td>3</td><td>YELLOW</td><td>Boston</td></tr><tr><td>4</td><td>GREEN</td><td>Austin</td></tr></tbody></table><p>表： orders</p><blockquote><p>表 orders 存储了所有的销售数据，包括销售员编号 sales_id 和公司编号 com_id 。<br>| order_id | order_date | com_id  | sales_id | amount |<br>|———-|————|———|———-|——–|<br>| 1        |   1/1/2014 |    3    |    4     | 100000 |<br>| 2        |   2/1/2014 |    4    |    5     | 5000   |<br>| 3        |   3/1/2014 |    1    |    1     | 50000  |<br>| 4        |   4/1/2014 |    1    |    4     | 25000  |</p></blockquote><p>要求： 根据给定的三个表，salesperson， company， orders。输出所有表 salesperson 中，没有向公司 ‘RED’ 销售任何东西的销售员。</p><blockquote><p>根据表 orders 中的订单 ‘3’ 和 ‘4’ ，容易看出只有 ‘John’ 和 ‘Pam’ 两个销售员曾经向公司 ‘RED’ 销售过。所以我们需要输出表 salesperson 中所有其他人的名字。</p></blockquote><p>输出：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Amy</td></tr><tr><td>Mark</td></tr><tr><td>Alex</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    salesperson a1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    orders a2 <span class="keyword">ON</span> a1.sales_id = a2.sales_id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    company a3 <span class="keyword">ON</span> a2.com_id = a3.com_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    <span class="keyword">SUM</span>(<span class="keyword">IF</span>(a3.name = <span class="string">'RED'</span>, <span class="number">1</span>, <span class="number">0</span>))  = <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    a1.sales_id</span><br></pre></td></tr></table></figure><p>答案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     salesperson a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        *</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        orders a2</span><br><span class="line">    <span class="keyword">join</span> company a3 <span class="keyword">on</span> a2.com_id=a3.com_id</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        a3.name=<span class="string">'RED'</span> <span class="keyword">and</span> a1.sales_id=a2.sales_id)</span><br></pre></td></tr></table></figure><p>答案3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">name</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  salesperson </span><br><span class="line"><span class="keyword">WHERE</span> sales_id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    a1.sales_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    orders a1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> company a2 <span class="keyword">ON</span> a1.com_id = a2.com_id </span><br><span class="line">  <span class="keyword">WHERE</span> </span><br><span class="line">    a2.name = <span class="string">'RED'</span>)</span><br></pre></td></tr></table></figure></p><hr><p>LeetCodeAnimation <a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">https://github.com/MisterBooo/LeetCodeAnimation</a></p><p>leetcode 题解 <a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">https://github.com/azl397985856/leetcode</a></p><p>LeetCode所有题目 <a href="http://leetcode.liangjiateng.cn/leetcode/game-play-analysis-ii/description" target="_blank" rel="noopener">http://leetcode.liangjiateng.cn/leetcode/game-play-analysis-ii/description</a></p><p>SQL语句数据分析面试必备 <a href="https://mp.weixin.qq.com/s/ol-jheA3TTv0qqtFtEt_ow" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ol-jheA3TTv0qqtFtEt_ow</a></p><hr><!-- <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,max(days) FROM (SELECT</span><br><span class="line">  id,</span><br><span class="line">  @cont_day :=</span><br><span class="line">  (CASE</span><br><span class="line">   WHEN (@id = id AND DATEDIFF(start, @start) = 1)</span><br><span class="line">     THEN</span><br><span class="line">       (@cont_day + 1)</span><br><span class="line">   WHEN (@id = id AND DATEDIFF(start, @start) &lt; 1)</span><br><span class="line">     THEN</span><br><span class="line">       (@cont_day + 0)</span><br><span class="line">   ELSE</span><br><span class="line">     1</span><br><span class="line">   END) AS days,</span><br><span class="line">  @id := id,</span><br><span class="line">  @start := start login_day</span><br><span class="line">FROM (SELECT</span><br><span class="line">        id,</span><br><span class="line">        DATE(start) start</span><br><span class="line">      FROM dmp.person_view</span><br><span class="line">      WHERE id != 0</span><br><span class="line">      ORDER BY id, start) AS t,</span><br><span class="line">  (SELECT</span><br><span class="line">     @id := &apos;&apos;,</span><br><span class="line">     @start := &apos;&apos;,</span><br><span class="line">     @cont_day := 0) AS t1) t2 GROUP BY id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line"></span><br><span class="line"># sql 刷题网站</span><br><span class="line"></span><br><span class="line">[刷题网站](https://leetcode.com/problems/rank-scores/submissions/)</span><br><span class="line"></span><br><span class="line">1. 统计不同月份的下单人数</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">select</span><br><span class="line">    month(hit_date),</span><br><span class="line">    count(distinct  user_account) as uv </span><br><span class="line">from </span><br><span class="line">    a1</span><br><span class="line">where </span><br><span class="line">    hit_date between &apos;2019-01-01&apos; and &apos;2019-05-31&apos;</span><br><span class="line">    and </span><br><span class="line">    sales = &apos;1&apos;</span><br><span class="line">group by </span><br><span class="line">    month(hit_date)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>统计用户三月份的回购率和复购率</p></li><li><p>统计男女用户的消费频次是否有差异</p></li><li><p>统计多次消费的用户， 第一次和最后一次消费的间隔是多少？</p></li><li><p>统计不同年龄段，用户的额消费金额是否有差异？</p></li><li><p>统计消费的二八法则，消费的top20%用户，贡献了多少额度？<br>–&gt;</p></li></ol>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;结合两个表&quot;&gt;&lt;a href=&quot;#结合两个表&quot; class=&quot;headerlink&quot; title=&quot;结合两个表&quot;&gt;&lt;/a&gt;结合两个表&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;问题描述：&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;表1：Preson&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Hive" scheme="https://zhangandyu.github.io/tags/Hive/"/>
    
      <category term="sql" scheme="https://zhangandyu.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>读书档案</title>
    <link href="https://zhangandyu.github.io/2019/02/20/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99-%E4%B8%AA%E4%BA%BA%E6%88%90%E9%95%BF%E4%B9%A6%E5%8D%95/"/>
    <id>https://zhangandyu.github.io/2019/02/20/生活资料-个人成长书单/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-12-17T12:54:29.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需读书籍"><a href="#需读书籍" class="headerlink" title="需读书籍"></a>需读书籍</h1><h2 id="数据分析："><a href="#数据分析：" class="headerlink" title="数据分析："></a>数据分析：</h2><ol><li><p><a href="https://book.douban.com/subject/20497858/" target="_blank" rel="noopener">《网站分析实战》</a></p></li><li><p><a href="https://book.douban.com/subject/26278639/" target="_blank" rel="noopener">《精益数据分析》</a></p></li></ol><a id="more"></a><ol start="3"><li><p><a href="https://book.douban.com/subject/26873486/" target="_blank" rel="noopener">《运营之光》</a></p></li><li><p><a href="https://book.douban.com/subject/26596778/" target="_blank" rel="noopener">《计算广告》</a></p></li></ol><ol start="5"><li><p><a href="https://book.douban.com/subject/30300335/" target="_blank" rel="noopener">《新零售：低价高效的数据赋能之路》</a></p></li><li><p><a href="https://book.douban.com/subject/26541801/" target="_blank" rel="noopener">《增长黑客》</a></p></li><li><p><a href="https://book.douban.com/subject/1626392/" target="_blank" rel="noopener">《女士品茶》</a></p></li><li><p><a href="https://book.douban.com/subject/25909355/" target="_blank" rel="noopener">《数据化管理》</a></p></li><li><p><a href="https://book.douban.com/subject/30191451/" target="_blank" rel="noopener">《流量池》</a></p></li></ol><h2 id><a href="#" class="headerlink" title></a><iframe width="560" height="315" src="https://www.youtube.com/embed/5HlbV1wKBmo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></h2><h2 id="麦肯锡："><a href="#麦肯锡：" class="headerlink" title="麦肯锡："></a>麦肯锡：</h2><ol><li><p><a href="https://book.douban.com/subject/25779342/" target="_blank" rel="noopener">《麦肯锡教我的思考武器》</a></p></li><li><p><a href="https://book.douban.com/subject/24745639/" target="_blank" rel="noopener">《麦肯锡教我的写作武器》</a></p></li><li><p><a href="https://book.douban.com/subject/1020671/" target="_blank" rel="noopener">《麦肯锡意识》</a></p></li><li><p><a href="https://book.douban.com/subject/1059490/" target="_blank" rel="noopener">《麦肯锡方法》</a></p></li><li><p><a href="https://book.douban.com/subject/27113480/" target="_blank" rel="noopener">《麦肯锡图表工作法》</a></p></li><li><p><a href="https://book.douban.com/subject/26695338/" target="_blank" rel="noopener">《麦肯锡教我的谈判武器》</a></p></li><li><p><a href="https://book.douban.com/subject/27192171/" target="_blank" rel="noopener">《麦肯锡笔记思考法》</a></p></li><li><p><a href="https://book.douban.com/subject/33444642/" target="_blank" rel="noopener">《麦肯锡精英高效阅读法》</a></p></li></ol><hr><h2 id="批判思维与逻辑思维："><a href="#批判思维与逻辑思维：" class="headerlink" title="批判思维与逻辑思维："></a>批判思维与逻辑思维：</h2><ol><li><p><a href="https://book.douban.com/subject/24697776/" target="_blank" rel="noopener">《批判性思维工具》</a></p></li><li><p><a href="https://book.douban.com/subject/20428922/" target="_blank" rel="noopener">《学会提问》</a></p></li><li><p><a href="https://book.douban.com/subject/1020644/" target="_blank" rel="noopener">《金字塔原理》</a></p></li><li><p><a href="https://book.douban.com/subject/26260187/" target="_blank" rel="noopener">《零秒思考》</a>； <a href="https://zhangandyu.github.io/2019/01/20/%E3%80%8A%E9%9B%B6%E7%A7%92%E6%80%9D%E8%80%83%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#more">已写文章</a> </p></li></ol><blockquote><p>行动： 每天问自己的10个问题</p></blockquote><hr><h2 id="如何学习："><a href="#如何学习：" class="headerlink" title="如何学习："></a>如何学习：</h2><ol><li><p><a href="https://book.douban.com/subject/26895988/" target="_blank" rel="noopener">《学习之道》</a></p></li><li><p><a href="https://book.douban.com/subject/27081766/" target="_blank" rel="noopener">《如何学习》</a></p></li><li><p><a href="https://book.douban.com/subject/26895993/" target="_blank" rel="noopener">《刻意练习》</a>；<a href="https://zhangandyu.github.io/2018/04/16/%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#more">已写文章</a> </p></li><li><p><a href="https://book.douban.com/subject/27071913/" target="_blank" rel="noopener">《刻意学习》</a>；<a href="https://zhangandyu.github.io/2018/02/17/%E3%80%8A%E5%88%BB%E6%84%8F%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20/#more">读书笔记</a></p></li><li><p><a href="https://book.douban.com/subject/26952718/" target="_blank" rel="noopener">《好好学习-个人成长指南》</a> ；<a href="https://zhangandyu.github.io/2019/01/13/%E5%8F%8D%E6%80%9D%E6%97%A5%E8%AE%B0/#more">已写文章</a> ； <a href="https://zhangandyu.github.io/2018/10/12/%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F/#more">读书笔记</a>  </p><blockquote><p>行动： 反思日记</p></blockquote></li></ol><hr><h2 id="如何生活："><a href="#如何生活：" class="headerlink" title="如何生活："></a>如何生活：</h2><ol><li><p><a href="https://book.douban.com/subject/30435330/" target="_blank" rel="noopener">《基本穿搭-适用一生的穿衣法则》</a></p></li><li><p><a href="https://book.douban.com/subject/1115353/" target="_blank" rel="noopener">《奇特的一生》</a></p></li><li><p><a href="https://book.douban.com/subject/30335756/" target="_blank" rel="noopener">《我是个怪圈》</a></p></li><li><p><a href="https://book.douban.com/subject/20507212/" target="_blank" rel="noopener">《习惯的力量-原版》</a></p></li><li><p><a href="https://book.douban.com/subject/26865498/" target="_blank" rel="noopener">《医治受伤的自信》</a></p></li><li><p><a href="https://book.douban.com/subject/26838557/" target="_blank" rel="noopener">《智能时代》</a></p></li></ol><hr><h2 id="职场技能："><a href="#职场技能：" class="headerlink" title="职场技能："></a>职场技能：</h2><ol><li><p><a href="https://zhangandyu.github.io/2018/10/14/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/#more">《精准表达：让你的方案在最短的时间内打动人心》</a></p></li><li><p><a href="https://book.douban.com/subject/25852981/" target="_blank" rel="noopener">《小强升职记》</a></p></li><li><p><a href="https://book.douban.com/subject/1867455/" target="_blank" rel="noopener">《像外行一样思考，像专家一样实践》</a></p></li><li><p><a href="https://book.douban.com/subject/26915104/" target="_blank" rel="noopener">你凭什么做好互联网</a></p></li></ol><hr><h2 id="如何思考："><a href="#如何思考：" class="headerlink" title="如何思考："></a>如何思考：</h2><ol><li><p><a href="https://book.douban.com/subject/11528220/" target="_blank" rel="noopener">《系统之美》</a></p></li><li><p><a href="https://book.douban.com/subject/10785583/" target="_blank" rel="noopener">《思考-快与慢》</a></p></li><li><p><a href="https://book.douban.com/subject/27608239/" target="_blank" rel="noopener">《原则》</a></p></li><li><p><a href="https://book.douban.com/subject/2124114/" target="_blank" rel="noopener">《怎样解题》</a></p></li><li><p><a href="https://book.douban.com/subject/4051739/" target="_blank" rel="noopener">《第五项修炼》</a></p></li><li><p><a href="https://book.douban.com/subject/5346110/" target="_blank" rel="noopener">《穷查理宝典》</a></p></li><li><p><a href="https://book.douban.com/subject/3006742/" target="_blank" rel="noopener">《改变》</a></p></li><li><p><a href="https://book.douban.com/subject/25986341/" target="_blank" rel="noopener">《万万没想到-用理工科思维理解世界》</a>； <a href="https://zhangandyu.github.io/2018/10/10/%E9%98%85%E8%AF%BB%E7%B3%BB%E7%BB%9F/#more">已写文章</a> </p></li></ol><hr><!-- ## 商业数据分析学习思路1. 七周成为数据分析师2. 数据分析思维案例课程3. 统计学、excel、sql、ppt4. 《活用数据》5. 行业报告，多问自己，如果是你来做报告出发点是什么？为什么这样做？6. 《网站分析实战》  《运营之光》， 《计算广告》， 《黑客增长》，7. 做一个自己满意的框架体系报告 --><hr><h2 id="适合产品经理的十本书-俞军"><a href="#适合产品经理的十本书-俞军" class="headerlink" title="适合产品经理的十本书 - 俞军"></a>适合产品经理的十本书 - 俞军</h2><h3 id="入门必读"><a href="#入门必读" class="headerlink" title="入门必读"></a>入门必读</h3><ol><li><p>《社会心理学》</p><blockquote><p>阿伦森 插图第七版：特别好，适合成为“产品经理的第一本书”</p></blockquote></li><li><p>《第一本经济学》</p><blockquote><p>经济学帮助人们洞察世事 </p></blockquote></li><li><p>《学会提问》</p><blockquote><p>学习辨别信息和言论的真假对错</p></blockquote></li></ol><blockquote><ul><li>以上三本都是既可以当做产品经理的入门书读，又可以在职业生涯反复读的书。</li></ul></blockquote><h3 id="思维："><a href="#思维：" class="headerlink" title="思维："></a>思维：</h3><ol><li><p>《认知心理学及其启示》</p><blockquote><p> 人类认知和思维的基本机制</p></blockquote></li><li><p>《 思考快与慢》</p><blockquote><p>人如何有缺陷地思考</p></blockquote></li><li><p>《 超越智商》</p><blockquote><p>如何克服缺陷做理性决策</p></blockquote></li><li><p>《思维与决策》  第四版</p></li></ol><blockquote><p>系统介绍思维与决策领域的研究</p></blockquote><blockquote><ul><li>学习深度思考和决策需要的书籍，以上四本够用很久了，因为仅仅阅读多是没用的，最终还是阅读、思考、实践的最短板决定决策水平。</li></ul></blockquote><h2 id="经济学："><a href="#经济学：" class="headerlink" title="经济学："></a>经济学：</h2><ol><li><p>《经济学原理》  曼昆版 微观分册</p><blockquote><p>最通用的经济学教材</p></blockquote></li><li><p>《错误的行为》</p><blockquote><p>行为经济学离PM最近，但尚无好教材，先用这一本占坑</p></blockquote></li><li><p>《新制度经济学 一个交易费用分析范式》</p><blockquote><p>学习交易费用思考商业模式</p></blockquote></li></ol><ol start="4"><li><p>《魔鬼经济学》 史蒂芬.列维特</p></li><li><p>《统计数据会撒谎》 </p><blockquote><p> 统计陷阱</p></blockquote></li><li><p>《超级数字天才》</p></li><li><p>《女士品茶》</p></li></ol><h2 id="其他推荐"><a href="#其他推荐" class="headerlink" title="其他推荐"></a>其他推荐</h2><p><a href="https://mp.weixin.qq.com/s/UtJ117v5GmtAM5GkLrEZpA" target="_blank" rel="noopener">阳志平：双十一买书指南</a><br><a href="https://mp.weixin.qq.com/s/dkTvhSfG1USLlgWApFCX7A" target="_blank" rel="noopener">认知科学入门书单</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需读书籍&quot;&gt;&lt;a href=&quot;#需读书籍&quot; class=&quot;headerlink&quot; title=&quot;需读书籍&quot;&gt;&lt;/a&gt;需读书籍&lt;/h1&gt;&lt;h2 id=&quot;数据分析：&quot;&gt;&lt;a href=&quot;#数据分析：&quot; class=&quot;headerlink&quot; title=&quot;数据分析：&quot;&gt;&lt;/a&gt;数据分析：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/20497858/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《网站分析实战》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26278639/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《精益数据分析》&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="生活资料" scheme="https://zhangandyu.github.io/categories/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99/"/>
    
    
      <category term="书单" scheme="https://zhangandyu.github.io/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>业务分析——埋点方案</title>
    <link href="https://zhangandyu.github.io/2018/12/22/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/"/>
    <id>https://zhangandyu.github.io/2018/12/22/数据分析技能-埋点方案/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-12-15T16:20:02.575Z</updated>
    
    <content type="html"><![CDATA[<h3 id="APP埋点上报规则如何制定"><a href="#APP埋点上报规则如何制定" class="headerlink" title="APP埋点上报规则如何制定"></a>APP埋点上报规则如何制定</h3><p>埋点中业务的痛点：</p><ol><li><p>改版前后，同一位置命名不统一，导致数据提取比较麻烦。 </p></li><li><p>按钮数据出现漏采，多发情况。 </p></li><li><p>数据埋点不能很好的服务于业务， 有些业务的划分埋点也许要埋点。</p></li><li><p>数据埋点业务繁琐，埋点需求-埋点方案-需求评审-研发实施-埋点测试-埋点更正-上线数据采集。  每一步都比较繁琐。 </p></li><li><p>用户换端，导致有些数据追踪不到。 </p></li></ol><hr><p> 数据统计埋点工作框架及细节规范  <a href="https://zhuanlan.zhihu.com/p/78267447" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/78267447</a></p><p> 数据分析入门：初识数据埋点（一） <a href="http://www.woshipm.com/data-analysis/872543.html" target="_blank" rel="noopener">http://www.woshipm.com/data-analysis/872543.html</a></p><p> 有赞埋点实践  <a href="https://tech.youzan.com/track-1/" target="_blank" rel="noopener">https://tech.youzan.com/track-1/</a></p><p> 美团点评前端无痕埋点实践  <a href="https://tech.meituan.com/2017/03/02/mt-mobile-analytics-practice.html" target="_blank" rel="noopener">https://tech.meituan.com/2017/03/02/mt-mobile-analytics-practice.html</a></p><p>知乎客户端埋点流程、模型和平台技术 <a href="https://zhuanlan.zhihu.com/p/40985361" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/40985361</a></p><h3 id="数据埋点方案"><a href="#数据埋点方案" class="headerlink" title="数据埋点方案"></a>数据埋点方案</h3><hr><p>埋点需求：<br><img src="https://i.loli.net/2019/11/21/TMEiAdIVWNg6vuZ.png" alt="微信截图_20191121230856.png"></p><hr><p>代码埋点</p><h2 id><a href="#" class="headerlink" title></a><img src="https://i.loli.net/2019/11/21/bSmPA7gtMeoIzrT.png" alt="微信截图_20191121231329.png"></h2><p>无埋点</p><p><img src="https://i.loli.net/2019/11/21/dAIlJbiXaFvGNqS.png" alt="无码埋点.png"></p><hr><p>全埋点<br><img src="https://i.loli.net/2019/11/21/rGeEoKXRLlNcpyT.png" alt="全埋点.png"></p><hr><p>埋点方案比较<br><img src="https://i.loli.net/2019/11/21/E6weVz43Hhua1Ib.png" alt="埋点方案比较.png"></p><hr><p>埋点实施流程<br><img src="https://i.loli.net/2019/11/21/qOHeoBS9GcJZ3x1.png" alt="埋点实施流程.png"></p><hr><p>不同场景的埋点方案<br><img src="https://i.loli.net/2019/11/21/4dL8rDeHgb6ZQOo.png" alt="埋点方式不同.png"></p><p><a href="https://www.sensorsdata.cn/blog/20181114-2/" target="_blank" rel="noopener">https://www.sensorsdata.cn/blog/20181114-2/</a></p><p>问题：</p><ol><li>需求整理不完善， 没有整体考虑， 版本更替原有埋点不可用</li><li>数据统计口径不清楚，没有将埋点的具体采集时机郑群传达，埋点不是自己想要定义的指标</li><li>数据采集方案没有想清楚， 哪些应该在前端埋点，哪些应该在后端埋点，埋点采集sdk如何正确使用没有了解清楚</li></ol><hr><h1 id="数据采集和埋点方式"><a href="#数据采集和埋点方式" class="headerlink" title="数据采集和埋点方式"></a>数据采集和埋点方式</h1><h2 id="全埋点（无埋点、自动埋点）"><a href="#全埋点（无埋点、自动埋点）" class="headerlink" title="全埋点（无埋点、自动埋点）"></a>全埋点（无埋点、自动埋点）</h2><p><a href="https://www.sensorsdata.cn/blog/20181206-2/" target="_blank" rel="noopener">什么是全埋点？</a></p><p><a href="https://www.sensorsdata.cn/school/library/cfd8cf4e7ea6360775e118954518de2c?utm_source=WeChat&amp;utm_medium=free&amp;utm_term=%e9%98%85%e8%af%bb%e5%8e%9f%e6%96%87&amp;utm_content=%e7%99%bd%e7%9a%ae%e4%b9%a6-Android%e5%85%a8%e5%9f%8b%e7%82%b9&amp;utm_campaign=sensorsdata2" target="_blank" rel="noopener">《Android 全埋点技术白皮书》</a></p><p><a href="http://www.chinawebanalytics.cn/auto-event-tracking-good-bad-ugly/" target="_blank" rel="noopener">无埋点实现监测的真相——革新还是噱头？</a></p><h3 id="什么是全埋点"><a href="#什么是全埋点" class="headerlink" title="什么是全埋点"></a>什么是全埋点</h3><p>预先收集用户的所有行为数据， 然后根据实际分析需求从中提取行为数据。 在产品中嵌入SDK，等于做了一个统一的埋点，对于其他行为，则不需要调用SDK代码。</p><h3 id="无埋点的优势"><a href="#无埋点的优势" class="headerlink" title="无埋点的优势"></a>无埋点的优势</h3><ol><li>可视化展现宏观指标，满足基本的数据分析需求。 能够采集uv、pv等基础数据。 <blockquote><p>如果仅仅看宏观数据，并没有精细化分析需求，并且是对客户端做的分析，则全面点是比较省事的选择。 </p></blockquote></li></ol><ol start="2"><li><p>技术门槛低，使用与部署比较简单。 </p><blockquote><p>只需要嵌入SDK，极大程度避免了因需求变更、埋点错误等原因导致重新埋点的复杂工作。 </p></blockquote></li><li><p>用户友好性强。可以直接应用手指或鼠标进行操作，自动向服务器发送数据，避免手工埋点错误。</p></li></ol><h3 id="无埋点的缺点"><a href="#无埋点的缺点" class="headerlink" title="无埋点的缺点"></a>无埋点的缺点</h3><ol><li><p>无埋点只能采集到用户交互数据，且适合标准化的采集，自定义属性的采集需要代码埋点来辅助。每个用户的交互行为均有许多属性，无埋点无法深入到更细、更深的维度。</p><blockquote><p>电商行业，用户点击“购物车”是一次交互行为，无埋点会忽悠用户信息、商品品类等其他维度的信息。<br>用户上滑屏幕，内容瀑布流的底部加载、商品或广告的加载展示、下拉菜单中下拉内容的数据点击情况，都需要代码采集来辅助实现。</p></blockquote></li><li><p>会存在数据采集不全面、传输时效性差、数据可靠性无法保证等问题。</p></li></ol><h2 id="代码埋点"><a href="#代码埋点" class="headerlink" title="代码埋点"></a>代码埋点</h2><h3 id="什么是代码埋点"><a href="#什么是代码埋点" class="headerlink" title="什么是代码埋点"></a>什么是代码埋点</h3><ol><li><p>前端埋点(wap链接上能够查看埋点数据)：在前端嵌入SDK的方式，对于每一个关键行为，我们都需要调用SDK代码，将必要的事件名、属性字段等写入代码，然后发送到后台数据服务器。</p></li><li><p>后端埋点(wap链接上无法查看发送数据内容，只能通过后端来发送)：将相关的事件、属性等通过后端模块调用SDK的方式，发送到后台服务器。</p><blockquote><p>后端采集数据到分析系统中则是通过内网传输，这个阶段不存在安全和隐私性问题。同时内网传输基本不会因网络原因丢失数据，所传输的数据可以非常真实地反映用户行为。 </p></blockquote></li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>更适合精细化分析的场景，我们可以将各种细粒度的数据采集下来，方便后续深度分析需求。</p><hr><p><a href="https://mp.weixin.qq.com/s/x9SlEvQj4DdYGKtQOKuslg" target="_blank" rel="noopener">Jupyter在美团民宿的应用实践</a><br><a href="https://sm.ms/" target="_blank" rel="noopener">图床</a></p><p># </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;APP埋点上报规则如何制定&quot;&gt;&lt;a href=&quot;#APP埋点上报规则如何制定&quot; class=&quot;headerlink&quot; title=&quot;APP埋点上报规则如何制定&quot;&gt;&lt;/a&gt;APP埋点上报规则如何制定&lt;/h3&gt;&lt;p&gt;埋点中业务的痛点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="埋点方案" scheme="https://zhangandyu.github.io/tags/%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 库总结</title>
    <link href="https://zhangandyu.github.io/2018/09/28/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-Pandas%E5%BA%93/"/>
    <id>https://zhangandyu.github.io/2018/09/28/数据分析技能-Pandas库/</id>
    <published>2018-09-27T16:00:00.000Z</published>
    <updated>2019-12-17T16:48:55.029Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/woainishifu/article/details/76105667" target="_blank" rel="noopener">python中的单引号，双引号，三引号的不同作用</a></p><h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h1><p>Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， <strong>Series</strong>和<strong>DataFrame</strong>，Series用于存储一维数据， 而DataFrame存储多维数据。</p><ul><li>常用的软件-<br>Anaconda是数据分析中运行python的一款利器， 安装教程可参考<a href="https://www.jianshu.com/p/169403f7e40c" target="_blank" rel="noopener">Anaconda入门使用指南</a></li></ul><h1 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from datetime import datetime, time, timedelta</span><br></pre></td></tr></table></figure><ul><li>现在时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = datetime.now()</span><br></pre></td></tr></table></figure><ul><li><p>昨天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ysd = now - timedelta(days = 1)</span><br><span class="line">ysd = now.replace(day = now.day-1)</span><br></pre></td></tr></table></figure></li><li><p>本月第一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">month_first = now.replace(day = 1)</span><br></pre></td></tr></table></figure></li><li><p>上月最后一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastmonth_end = month_first - timedelta(days=1)</span><br></pre></td></tr></table></figure></li><li><p>上月第一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lastmonth_first = now.replace(month = now.month-1, day =1)</span><br><span class="line"></span><br><span class="line">lastmonth_first = lastmonth_end.replace(day=1)</span><br></pre></td></tr></table></figure></li><li><p>转化为日期形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this_firsts = lastmonth_first.__format__(&quot;%Y-%m-%d&quot;)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import datetime</span><br><span class="line">from dateutil.relativedelta import relativedelta </span><br><span class="line"> </span><br><span class="line">begin = datetime.date(2019,1,1)</span><br><span class="line">end = datetime.date(2019,1,31)</span><br><span class="line">for i in range(1,10):</span><br><span class="line">    first = d + relativedelta(months=i)</span><br><span class="line">    last = end + relativedelta(months=i)</span><br></pre></td></tr></table></figure><hr><h1 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h1><p>相对路径与绝对路径:</p><blockquote><p><a href="https://blog.csdn.net/m0_37693335/article/details/81474995" target="_blank" rel="noopener">https://blog.csdn.net/m0_37693335/article/details/81474995</a></p></blockquote><ol><li>读取文件夹的内容<blockquote><p>r（转义符）避免路径中的\被转义。<br>路径中不加 \  则需要把所有的\写成/。</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(r&apos;E:\工作文件\周报\周数据\测试\0902-0908&apos;)</span><br><span class="line">print(file_list, &apos;\t&apos;)</span><br><span class="line"></span><br><span class="line"># 读取当前文件夹地址</span><br><span class="line">os.getwd()</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(&apos;E:/工作文件/周报/周数据/测试/0902-0908/an-商品汇总-uv.xls&apos;)</span><br><span class="line">df = pd.read_excel(r&apos;E:\工作文件\周报\周数据\测试\0902-0908\an-商品汇总-uv.xls&apos;)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(r&apos;E:\工作文件\周报\周数据\测试\0902-0908\an-商品汇总-uv.xlsx&apos;)</span><br></pre></td></tr></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv文件，并用 分隔符分割</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, sep = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读取文件前两行</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, nrows = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>读取显示编码错误：<blockquote><p>python 默认的编码格式是’utf-8’</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示错误为：</span></span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can <span class="keyword">not</span> decode byte <span class="number">0xb5</span> <span class="keyword">in</span> position <span class="number">0</span>: invalid start byte</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式</span></span><br><span class="line">df = pd.read_csv(path + <span class="string">'登记用户 20191127.csv'</span>,encoding=<span class="string">"gbk"</span> )</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'登记用户 20191127.csv'</span>, engine = <span class="string">'python'</span>, encoding = <span class="string">'utf-8-sig'</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>读取txt格式数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;, sep = &apos; &apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">with open(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;, &apos;r&apos;) as f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;)  # 将txt文件存为numpy数组</span><br></pre></td></tr></table></figure><ol start="6"><li>读取excel中的sheet名称</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="string">'sheet1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入sheet的顺序，从0开始计数</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet,并制定文件中的第几行做行索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>, index_col = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\商品汇总.xlsx'</span>, sheet_name = <span class="number">0</span>, head = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\商品汇总.xlsx'</span>, usecols = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># uescols = [0,2]</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rbook = []</span><br><span class="line">kong_data = os.listdir(r&apos;F:\省资源位&apos;)</span><br><span class="line">for file_name in kong_data:</span><br><span class="line">    data_excel = pd.ExcelFile(r&apos;F:\省资源位\\&apos;+file_name)</span><br><span class="line">    sheet = data_excel.sheet_names</span><br><span class="line">    for i in sheet:</span><br><span class="line">        data_button_rest = pd.read_excel(r&apos;F:\省资源位\\&apos;+file_name, sheet_name= i )</span><br><span class="line">        rbook.append(data_button_rest)</span><br><span class="line">        result_df =pd.concat(rbook)</span><br><span class="line">datas_excel = pd.DataFrame(result_df)</span><br></pre></td></tr></table></figure><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from  IPython.core.interactiveshell import InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = &quot;all&quot;</span><br></pre></td></tr></table></figure></li></ul><ol start="7"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data.to_excel(&apos;C:/Users/Administrator/Desktop/&apos;+&apos;商品分类.xlsx&apos;)</span><br><span class="line">data.to_excel(r&apos;C:\Users\Administrator\Desktop\\&apos;+&apos;商品分类.xlsx&apos;)</span><br><span class="line">data.to_excel(r&apos;C:\Users\Administrator\Desktop/&apos;+&apos;商品分类.xlsx&apos;)</span><br></pre></td></tr></table></figure><ul><li>将求出的数据存储在excel中的多个sheet中<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"> </span><br><span class="line">writer = pd.ExcelWriter(<span class="string">'F:/notebooks/zhoushuju.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">btn_navigation.to_excel(writer, sheet_name = <span class="string">'底部导航'</span>)</span><br><span class="line">shouye_top20.to_excel(writer, sheet_name = <span class="string">'首页top20'</span>)</span><br><span class="line">shouyedier_top2.to_excel(writer, sheet_name = <span class="string">'首页第二屏top20'</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li></ul><ol start="8"><li>其他数据格式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 从SQL表/库导入数据 </span><br><span class="line">import pymysql</span><br><span class="line">eng = pymysql.connet(host= &apos;100.129&apos;, user = &apos;root&apos;, password = &apos;1234&apos;, df = &apos;db&apos;, charset = &apos;ugf8&apos;)</span><br><span class="line"></span><br><span class="line">query = &quot;&quot;&quot;select * from android_log  &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">df = pd.read_sql(query, eng)</span><br><span class="line"></span><br><span class="line"># 导出数据到SQL表 </span><br><span class="line">df.to_sql(table_name, eng)</span><br><span class="line"></span><br><span class="line">&lt;!-- # 从JSON格式的字符串导入数据 </span><br><span class="line">pd.read_json(json_string) --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- # 解析URL、字符串或者HTML文件，抽取其中的tables表格 </span><br><span class="line">pd.read_html(url) --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- # 从你的粘贴板获取内容，并传给read_table() </span><br><span class="line">pd.read_clipboard() --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line"># 从字典对象导入数据，Key是列名，Value是数据</span><br><span class="line">pd.DataFrame(dict) --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- # 以Json格式导出数据到文本文件</span><br><span class="line">df.to_json(filename) --&gt;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">6. 常见问题：</span><br><span class="line">* 当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决</span><br></pre></td></tr></table></figure></li></ol><p>f = open(‘我的文件.csv’)<br>res = pd.read_csv(f)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 修改数据格式，并存储</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#切换工作目录</span><br><span class="line">os.chdir(r&apos;E:\detil_data&apos;)</span><br><span class="line"></span><br><span class="line">显示当前目录</span><br><span class="line">os.getcwd()</span><br><span class="line"></span><br><span class="line"># 将目录变成列表</span><br><span class="line">data = os.listdir()</span><br><span class="line"></span><br><span class="line"># for 循环此目录</span><br><span class="line"></span><br><span class="line">for i in data:</span><br><span class="line">    a = open(i)</span><br><span class="line">    datas = pd.read_csv(a)</span><br><span class="line">    datas.to_csv(&apos;F:\\zy_data\\文件\\&apos;+ i +&apos;222.csv&apos;, index=False,encoding=&apos;utf_8_sig&apos; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#datas = pd.read_csv(&apos;a.csv&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line"># datas.to_csv(&apos;test12.csv&apos;, index=False,encoding=&apos;utf_8_sig&apos; )</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os </span><br><span class="line">path = os.getcwd() + <span class="string">"/"</span></span><br><span class="line"><span class="comment"># path</span></span><br><span class="line"></span><br><span class="line">file_list = os.listdir()</span><br><span class="line">a= [name <span class="keyword">for</span> name <span class="keyword">in</span> file_list <span class="keyword">if</span> name.startswith(<span class="string">"登记用户"</span>)]</span><br></pre></td></tr></table></figure><ul><li>当文件特别大， 1个多G时， 可以用for循环查看数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in data:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>查看大文件有多少列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = open(&apos;E:/用户明细.csv&apos;)</span><br><span class="line">data1 = pd.read_csv(data, iterator=True)</span><br><span class="line">data2 = data1.get_chunk(5)</span><br><span class="line">print(data2)</span><br></pre></td></tr></table></figure><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html" target="_blank" rel="noopener">迭代器</a></p><h1 id="对输出数据进行处理"><a href="#对输出数据进行处理" class="headerlink" title="对输出数据进行处理"></a>对输出数据进行处理</h1><p><a href="https://www.jianshu.com/p/5c0aa1fa19af" target="_blank" rel="noopener">pandas的数据输出显示设置</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line"><span class="comment"># pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示</span></span><br><span class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">100</span>) <span class="comment">#数据显示总宽度</span></span><br><span class="line">pd.set_option(<span class="string">'max_rows'</span>, <span class="number">100</span>) <span class="comment">#显示最多行数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_columns'</span>, <span class="number">100</span>) <span class="comment">#显示最多列数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_colwidth'</span>, <span class="number">16</span>) <span class="comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'large_repr'</span>, <span class="string">'truncate'</span>) <span class="comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span></span><br><span class="line">pd.set_option(<span class="string">'show_dimensions'</span>, <span class="keyword">True</span>) <span class="comment">#当数据带省略号显示时，是否在最后显示数据的维度</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">'max_info_columns'</span>, <span class="number">100</span>) <span class="comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span></span><br><span class="line">print(df.info())</span><br></pre></td></tr></table></figure><ul><li>将数据变成小数形式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">inputfile = <span class="string">'../data/electricity_data.xls'</span></span><br><span class="line">outputfile = <span class="string">'./electricity_data_analyze1.xls'</span></span><br><span class="line"> </span><br><span class="line">data = pd.read_excel(inputfile)</span><br><span class="line">data[<span class="string">u'线损率'</span>] = (data[<span class="string">u'供入电量'</span>]-data[<span class="string">u'供出电量'</span>])/data[<span class="string">u'供入电量'</span>]    <span class="comment">#data[u'线损率']的类型为series； data[u'线损率']为小数</span></span><br><span class="line">data[<span class="string">u'线损率'</span>] = data[<span class="string">u'线损率'</span>].apply(<span class="keyword">lambda</span> x: format(x, <span class="string">'.2%'</span>))    <span class="comment">#Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数</span></span><br><span class="line"> </span><br><span class="line">data.to_excel(outputfile, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="描述数据"><a href="#描述数据" class="headerlink" title="描述数据"></a>描述数据</h1><ol><li>表信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li>添加默认列名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果数据没有标题行，可用pandas添加默认的列名</span><br><span class="line">df = pd.read_excel(&apos;x.xlsx&apos;, header = None)</span><br></pre></td></tr></table></figure><ol start="6"><li>显示前数据前5行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(5)</span><br><span class="line">df[[&apos;标题&apos;, &apos;客户端uv&apos;]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(5)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;a&apos;]</span><br></pre></td></tr></table></figure><ol start="10"><li>修改索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.set_index[&apos;标题&apos;]</span><br></pre></td></tr></table></figure><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据有0， 是因对缺失值进行了填充</span><br><span class="line">df[&apos;经纪人级别&apos;].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span><br><span class="line">df = pd.read_excel(&apos;x.xlsx&apos;,skiprows=[2] )</span><br></pre></td></tr></table></figure><ol start="13"><li>对缺失值进行识别</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 所有缺失值显示为True</span><br><span class="line">pd.insull(df)  # df.isnull()</span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#计算此data的数量</span><br><span class="line">df[&apos;data&apos;].value_counts()</span><br><span class="line"></span><br><span class="line"># 升序计数</span><br><span class="line">df[&apos;data&apos;].value_counts(ascending = True)</span><br><span class="line"></span><br><span class="line"># 升序计数并分组</span><br><span class="line">df[&apos;data&apos;].value_counts(ascending = True, bins = 2)</span><br><span class="line"></span><br><span class="line"># 计数</span><br><span class="line">df[&apos;data&apos;].count()</span><br></pre></td></tr></table></figure><ol start="15"><li>字符和数值之间的转化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int()  # 转化成整数</span><br><span class="line">float() # 转化成浮点数</span><br><span class="line">str() # 转化成字符</span><br><span class="line">type() # 查看格式</span><br></pre></td></tr></table></figure></li></ol><h1 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h1><ol><li>删除空值 （dropna函数）</li></ol><p><a href="https://blog.csdn.net/yuanxiang01/article/details/78738812" target="_blank" rel="noopener">DataFrame中的空值处理</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(how=&apos;any&apos;)</span><br><span class="line"></span><br><span class="line">df.dropna(how = &apos;all&apos;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">labels 就是要删除的行列的名字，用列表给定</span><br><span class="line">axis 默认为0，指删除行，因此删除columns时要指定axis=1；</span><br><span class="line">index 直接指定要删除的行</span><br><span class="line">columns 直接指定要删除的列</span><br><span class="line">inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；</span><br><span class="line">inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除包含 集团 二字 的行</span><br><span class="line"></span><br><span class="line">read_data = data_excel_2[- data_excel_2[&apos;所属省份名称&apos;].isin([&apos;集团&apos;])]</span><br></pre></td></tr></table></figure><ol start="2"><li>填充空值（fillna函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 空值用0填充</span><br><span class="line">df.fillna(value=0)</span><br><span class="line"></span><br><span class="line"># 用均值对空值进行填充</span><br><span class="line">df[&apos;经纪人响应时长&apos;].fillna(df[&apos;经纪人响应时长&apos;].mean())</span><br></pre></td></tr></table></figure><ol start="3"><li>更改数据格式，更改数据类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将数据格式int64,改为float格式</span><br><span class="line">df[&apos;大区&apos;].astype(&apos;float64&apos;)</span><br></pre></td></tr></table></figure><ol start="4"><li>更改列名称, 修改列名。 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data2.columns = [[&apos;导航&apos;,&apos;uv&apos;, &apos;pv&apos;,&apos;户均点击&apos;]]</span><br><span class="line"></span><br><span class="line">df.rename(columns=&#123;&apos;IM渠道&apos;: &apos;渠道&apos;&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>找到重复值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="6"><li>删除重复值</li></ol><p><a href="https://www.cnblogs.com/cocowool/p/8421997.html" target="_blank" rel="noopener">Pandas删除数据的几种情况</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认第一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates(keep = <span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列去重</span></span><br><span class="line">df.drop_duplicates(subset = [<span class="string">'姓名'</span>, <span class="string">'唯一识别码'</span>])</span><br></pre></td></tr></table></figure><ol start="7"><li>对列表内的值进行替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;客户UCID&apos;].replace(&apos;10531975&apos;, &apos;110&apos;)</span><br></pre></td></tr></table></figure><ol start="8"><li>获取数据分布情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><ol start="9"><li>修改数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 修改结果</span><br><span class="line">df.replace(参数)</span><br><span class="line"></span><br><span class="line"># 修改索引</span><br><span class="line">df.rename(参数)</span><br><span class="line"></span><br><span class="line"># 增加, 将一列数据添加到另一列数据后。 </span><br><span class="line">df.append(参数)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">def df[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line">df.drop([&apos;a&apos;, &apos;b&apos;], inplace = True)</span><br></pre></td></tr></table></figure><h1 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h1><ol><li>对两个数据进行合并- mearge, join, concat函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 按照轴把多个对象拼接起来</span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span><br><span class="line"></span><br><span class="line"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;&apos;key&apos;:[&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;key2&apos; : [&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;A&apos; :[&apos;ao&apos;,&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos; ],</span><br><span class="line">                     &apos;B&apos; : [&apos;bo&apos;,&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos; ]&#125;)</span><br><span class="line"></span><br><span class="line">right =pd.DataFrame(&#123;&apos;key&apos;:[&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;key2&apos; : [&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k4&apos;],</span><br><span class="line">                     &apos;c&apos; :[&apos;co&apos;,&apos;c1&apos;,&apos;c2&apos;,&apos;c3&apos; ],</span><br><span class="line">                     &apos;d&apos; : [&apos;do&apos;,&apos;d1&apos;,&apos;d2&apos;,&apos;d3&apos; ]&#125;)</span><br><span class="line"></span><br><span class="line"># 将left和right进行合并</span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"># 指定以key为键进行合并</span><br><span class="line">pd.merge(left, right, on = &apos;key&apos;)</span><br><span class="line"> pd.merge(name_3, name_1, left_on = [&apos;ming&apos;], right_on = [&apos;标记&apos;])</span><br><span class="line"></span><br><span class="line"># key2列不相同的部分会直接舍弃掉</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;])</span><br><span class="line"></span><br><span class="line"># 保留key2列不相同的部分</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;], how = &apos;outer&apos;)</span><br><span class="line"></span><br><span class="line"># 不相同的部分指定以左表为基准</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;], how = &apos;left&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>将 list 格式转化成 DataFrame 格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = [&apos;省份&apos;, &apos;按钮名称&apos;, &apos;uv&apos;, &apos;pv&apos;] )</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data =pd.DataFrame(&#123; &apos;group&apos;:[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;a&apos;],</span><br><span class="line">                  &apos;data&apos; : [4, 2, 5, 6, 7, 8, 2, 9, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 在保证group列降序的情况下，对data列进行升序处理</span><br><span class="line">data.sort_values(by = [&apos;group&apos;, &apos;data&apos;],ascending = [False, True], inplace = True)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组——excel中的数据透视表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1</span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(&apos;网&apos;) for x in df[&apos;客户注册渠道&apos;]),</span><br><span class="line">                index=df.index,columns=[&apos;客户注册渠道&apos;,&apos;size&apos;])</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bins = [1,3,6,9]</span><br><span class="line">data_cut = pd.cut(data[&apos;data&apos;], bins)</span><br></pre></td></tr></table></figure><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 取到小数点后3位</span><br><span class="line">for i in a :</span><br><span class="line">    print(&quot;%.3f&quot;%c)</span><br><span class="line"></span><br><span class="line"># 设置小数点位数，四舍五入</span><br><span class="line">df[&apos;cnts&apos;].round( decimals = 2)</span><br></pre></td></tr></table></figure><h1 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h1><ol><li>选择某一列/ 某几列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 普通索引- 根据名称进行选择</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'客户端uv'</span>]</span><br><span class="line"></span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引， 切片索引， 根据所在第几列进行选择</span></span><br><span class="line"></span><br><span class="line">df.iloc[:, [<span class="number">0</span>,<span class="number">2</span>]] <span class="comment"># 获取第1列和第3列的数值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span></span><br></pre></td></tr></table></figure><ol start="2"><li>选择某一行/某几行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通索引-loc</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'第一行'</span>]</span><br><span class="line"></span><br><span class="line">df.log[[<span class="string">'第一行'</span>, <span class="string">'第二行'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引，切片索引</span></span><br><span class="line">df.iloc[<span class="number">0</span>] <span class="comment"># 选择第一行</span></span><br><span class="line"></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]] <span class="comment"># 选择第一行和第二行</span></span><br></pre></td></tr></table></figure><ol start="3"><li><p>根据指定条件进行筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择年龄小于200的数据</span></span><br><span class="line">df[df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#年龄小于200，且id小于300</span></span><br><span class="line">df[(df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>) &amp;   (df[<span class="string">'id'</span>] &lt; <span class="number">300</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_and(df[<span class="string">'年龄'</span>] &gt; <span class="number">10</span>, df[<span class="string">'id'</span>] &gt; <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A列值大于10，或 B列值大于5</span></span><br><span class="line">df[(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>) | (df[<span class="string">'C'</span>] &gt;<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_or(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>, df[<span class="string">'C'</span>] &gt; <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 A列的值大于13时， 显示B，c列的值</span></span><br><span class="line">df[[<span class="string">'B'</span>,<span class="string">'C'</span>]][df[<span class="string">'A'</span>]&gt;<span class="number">13</span>]</span><br></pre></td></tr></table></figure></li><li><p>行列同时选择</p></li></ol><h1 id="对数据进行提取-筛选"><a href="#对数据进行提取-筛选" class="headerlink" title="对数据进行提取,筛选"></a>对数据进行提取,筛选</h1><ol><li>按条件进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 用isin函数进行判断</span><br><span class="line"></span><br><span class="line"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span><br><span class="line">df[df.A.isin((10, 13))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断经纪人级别是否为A3</span><br><span class="line">df[&apos;经纪人级别&apos;].isin([&apos;A3&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # 先判断结果，将结果为True的提取</span><br><span class="line">#先判断经纪人级别列里是否包含A3和M4，然后将复合条件的数据提取出来。</span><br><span class="line">df.loc[df[&apos;经纪人级别&apos;].isin([&apos;A3&apos;,&apos;M4&apos;])]</span><br></pre></td></tr></table></figure><ol start="2"><li>按索引进行提取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取标签为2,3,4， A列的数据， 显示为Series格式</span></span><br><span class="line">df.loc[<span class="number">2</span>:<span class="number">4</span>, <span class="string">'A'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># iloc函数</span></span><br><span class="line"><span class="comment"># 行和列都用index来进行提取</span></span><br><span class="line">df.iloc[<span class="number">0</span>:<span class="number">5</span>, <span class="number">1</span>:<span class="number">3</span>] </span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一行 </span></span><br><span class="line">df.iloc[<span class="number">0</span>,:]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回第一列的第一个元素</span></span><br><span class="line">df.iloc[<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#[0, 2, 5] 代表指定的行，[ 4, 5 ] 代表指定的列</span></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取第1列到第4列的值</span></span><br><span class="line">df.iloc[:, <span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ix</span></span><br><span class="line"><span class="comment">#ix的功能更加强大，参数既可以是索引，也可以是名称，相当于，loc和iloc的合体</span></span><br><span class="line"></span><br><span class="line">df.ix[<span class="number">1</span>:<span class="number">3</span>, [<span class="string">'A'</span>, <span class="string">'B'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># at函数</span></span><br><span class="line">根据指定行index及列label，快速定位DataFrame的元素，选择列时仅支持列名</span><br><span class="line">df.at[<span class="number">3</span>, <span class="string">'A'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># iat函数</span></span><br><span class="line">选择时只使用索引参数</span><br><span class="line">df.iat[<span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><ol start="3"><li>按日期进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import pandas</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line"># 重新设置索引</span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line">#设置日期为索引</span><br><span class="line">df=df.set_index(&apos;日期&apos;)</span><br><span class="line"></span><br><span class="line">#提取2016年11月2号的数据</span><br><span class="line">df[&apos;2016-11-02&apos; : &apos;2016-11-02&apos;]</span><br><span class="line"></span><br><span class="line">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span><br><span class="line">print(dt_time)</span><br><span class="line"></span><br><span class="line">#构造时间</span><br><span class="line">ts = pd.Timestamp(&apos;2018-09-17 22:43:00&apos;)</span><br><span class="line">ts = pd.to_datetime(&apos;2018-09-17 22:43:00&apos;)</span><br><span class="line">ts = pd.to_datetime(&apos;17/09/2018 22:43:00&apos;)</span><br><span class="line"></span><br><span class="line"># 月份</span><br><span class="line">ts.month</span><br><span class="line"></span><br><span class="line">#日期</span><br><span class="line">ts.day</span><br><span class="line"></span><br><span class="line"># 加日期</span><br><span class="line">ts + pd.Timedelta(&apos; 10 days&apos;)</span><br><span class="line"></span><br><span class="line">ts.hour</span><br><span class="line"></span><br><span class="line"># 构造时间序列， 构造十个日期， 每12分钟一次</span><br><span class="line">pd.Series(pd.date_range(start = &apos;2018-09-17 22:43:00&apos;, periods = 10, freq = &apos;12min&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">读取文件， 有时间列， 先将时间字符串转换成时间格式， 再进行处理</span><br><span class="line">或当读取数据时， 就对数据格式进行修改</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(&apos;.../db.csv&apos;, index_col = 0, parse_dates = True)</span><br><span class="line"></span><br><span class="line"># 读取时间为2013年的所有数据</span><br><span class="line">data[&apos;2013&apos;]</span><br><span class="line"></span><br><span class="line"># 取所有8点到12点之间的数据, 不包含8点和12点</span><br><span class="line">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span><br><span class="line"></span><br><span class="line"># 包含8点到12点</span><br><span class="line">data.between_time(&apos;08:00&apos;, &apos;12:00&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 时间序列的重采样-看每月的平均值</span><br><span class="line">data.resample(&apos;M&apos;).mean()</span><br></pre></td></tr></table></figure><hr><h1 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h1><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建数组</span><br><span class="line">df = pd.DataFrame(&#123;&apos;key&apos; : [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;],</span><br><span class="line">                    &apos;data&apos; : [0, 2, 4, 5, 6, 7, 8, 9, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 分别计算a, b, c 的和</span><br><span class="line">df.groupby(&apos;key&apos;)[&apos;data&apos;].sum()</span><br><span class="line"></span><br><span class="line">df.groupby(&apos;key&apos;)[&apos;data&apos;].mean()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = pd.Series([1, 2, 3,1, 2, 3],[8,7,6,8,7,6])</span><br><span class="line"></span><br><span class="line"># 对索引进行排序</span><br><span class="line">grouped = s.groupby(level = 0， sort =False)</span><br><span class="line">grouped.first()</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;&apos;x&apos;:[&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;b&apos;],</span><br><span class="line">                   &apos;y&apos; : [1, 2, 3, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 只关注x中的b</span><br><span class="line">df3 = df2.groupby([&apos;x&apos;]).get_group(&apos;b&apos;)</span><br><span class="line"></span><br><span class="line"># 查看个数</span><br><span class="line">df2.size()</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行透视, 相当于Excel中的数据透视表功能。</li></ol><blockquote><p>将行变为列</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pd.pivot_table(data, values=None, index=None, columns=None, aggfunc=&apos;mean&apos;)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&quot;A&quot;: [&quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;,</span><br><span class="line">                          &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;],</span><br><span class="line">                    &quot;B&quot;: [&quot;one&quot;, &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;,</span><br><span class="line">                          &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;],</span><br><span class="line">                    &quot;C&quot;: [&quot;small&quot;, &quot;large&quot;, &quot;large&quot;, &quot;small&quot;,</span><br><span class="line">                          &quot;small&quot;, &quot;large&quot;, &quot;small&quot;, &quot;small&quot;,</span><br><span class="line">                          &quot;large&quot;],</span><br><span class="line">                    &quot;D&quot;: [1, 2, 2, 3, 3, 4, 5, 6, 7]&#125;)</span><br><span class="line"></span><br><span class="line">table = pd.pivot_table(df, values=&apos;D&apos;, index=[&apos;A&apos;, &apos;B&apos;],</span><br><span class="line">                     columns=[&apos;C&apos;], aggfunc=np.sum)</span><br></pre></td></tr></table></figure><ol start="3"><li>将列变为行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.melt(df2, id_vars=[&apos;date&apos;], value_vars = [&apos;&apos;,&apos;&apos;])</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper)</span><br></pre></td></tr></table></figure><h1 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h1><ol><li>数据采样</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="2"><li>统计计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 描述统计 describe函数</span><br><span class="line"></span><br><span class="line">#自动生成数据的数量，均值，标准差等数据</span><br><span class="line">#round（2）,显示小数点后面2位数，T转置</span><br><span class="line"></span><br><span class="line">df.describe().round(2).T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标准差std()</span><br><span class="line">df[&apos;经纪人响应时长&apos;].std()</span><br><span class="line"></span><br><span class="line"># 协方差cov</span><br><span class="line">df[&apos;经纪人当天发送消息数&apos;].cov(df[&apos;客户当天发送消息数&apos;]</span><br><span class="line"></span><br><span class="line"># 相关性分析corr</span><br><span class="line">df[&apos;客户当天发送消息数&apos;].corr(df[&apos;经纪人当天发送消息数&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 中位数</span><br><span class="line">df.median()</span><br></pre></td></tr></table></figure><hr><h1 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h1><ol><li>大小写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li>去除空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="4"><li>替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns.str.replace(&apos; &apos;, &apos;_&apos;)</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列、 合并</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#切分</span><br><span class="line">a.split(&apos;_&apos;)</span><br><span class="line"></span><br><span class="line"># 切分， 且成为新列</span><br><span class="line">a.split(&apos;_&apos;, expand = True)</span><br><span class="line"></span><br><span class="line"># 对切分进行限制, 只切1次</span><br><span class="line">a.split(&apos;_&apos;, expand = True, n=1)</span><br><span class="line"></span><br><span class="line"># 查看是否包含</span><br><span class="line">a.str.contains(&apos;A&apos;)</span><br><span class="line"></span><br><span class="line"># 分列</span><br><span class="line">s.str.get_dummies(sep= &apos;|&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># pandas对dataframe中的某一列使用split做字符串切割：</span><br><span class="line"># words = df[&apos;col&apos;].split()</span><br><span class="line"># 报错：</span><br><span class="line"># AttributeError: &apos;Series&apos; object has no attribute &apos;split&apos;</span><br><span class="line"># 原因是df[&apos;col&apos;]返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span><br><span class="line"># words = df[&apos;col&apos;].str.split()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对两列数据进行合并</span><br><span class="line">df[&apos;省份_名称&apos;] = df[&apos;省份&apos;].str.cat(df[&apos;名称&apos;],sep = &apos;_&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/woainishifu/article/details/76105667&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python中的单引号，双引号，三引号的不同作用&lt;/a&gt;&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>一个好用的插件</title>
    <link href="https://zhangandyu.github.io/2018/09/25/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    <id>https://zhangandyu.github.io/2018/09/25/生活资料-好用的插件工具/</id>
    <published>2018-09-24T16:00:00.000Z</published>
    <updated>2019-12-15T04:55:22.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个好用的插件神器"><a href="#一个好用的插件神器" class="headerlink" title="一个好用的插件神器"></a>一个好用的插件神器</h1><p>最近发现了一个特别能够提高生活幸福感的插件：<a href="https://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>, 中文翻译过来叫做油猴。 </p><p><img src="https://i.loli.net/2018/09/25/5baa2c1e20259.png" alt="a"></p><p>安装好这个插件最大的作用， 就是我们可以从<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站来安装我们需要的脚本， 从而极大的提高浏览器的使用效率。</p><p>比如：我们在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>网站找到<a href="https://greasyfork.org/zh-CN/scripts/35251-%E6%99%BA%E8%83%BD%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91" target="_blank" rel="noopener">智能划词翻译</a>这个脚本， 然后点击安装脚本即可。<br><img src="https://i.loli.net/2018/09/25/5baa2f1ca7ec9.png" alt="智能划词翻译"><br>安装完成脚本之后， 我们打开一个英文网页，对需要翻译的段落进行框选，点击翻译按钮，就可实现在原网页查看中文翻译， 对于我这种英语不好的人来说，  有很大的帮助。<br> <img src="https://i.loli.net/2018/09/25/5baa2fafa467c.png" alt> </p><p>我们还可以安装<a href="https://greasyfork.org/zh-CN/scripts/3249-yet-another-weibo-filter" target="_blank" rel="noopener">微博过滤设置</a>脚本，来对微博页面进行个性化设置， 自己设置完成后的微博页面是这个样，相对于原版网页来说简洁了不少。<img src="https://i.loli.net/2018/09/25/5baa3127ae4e8.png" alt></p><p>也可安装<a href="https://greasyfork.org/zh-CN/scripts/4233-miniblogimgpop-%E5%BE%AE%E5%8D%9A%E6%B5%AE%E5%9B%BE" target="_blank" rel="noopener">微博浮图</a>脚本， 查看微博图片也比较方便， 只需把鼠标光标放在图片上即可<img src="https://i.loli.net/2018/09/25/5baa316b9fc84.png" alt></p><p>如果想找资料或电影资源的话， 也可以下载<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>, 或<a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E5%8A%A0%E9%80%9F%E7%89%88" target="_blank" rel="noopener">百度网盘直接下载助手</a>等脚本， 当然，有能力还是要支持正版。</p><p>例如：安装<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>脚本后， 打开豆瓣电影网页， 页面是这个样子。<br><img src="https://i.loli.net/2018/09/25/5baa328561727.png" alt="豆瓣页面"></p><p>在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站还有很多别人写好的脚本， 比如<a href="https://greasyfork.org/zh-CN/scripts/369861-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E5%AD%97%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener">百度文库文字复制</a>、<a href="https://greasyfork.org/zh-CN/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E9%A2%86%E5%8F%96%E6%B7%98%E5%AE%9D%E5%86%85%E9%83%A8%E5%88%B8" target="_blank" rel="noopener">购物党自动比价工具</a>、 <a href="https://greasyfork.org/zh-CN/scripts/8426-download-youtube-videos-and-subtitles" target="_blank" rel="noopener">Download Youtube videos and subtitles</a>等好用的脚本， 可以根据自己的需要进行安装。 </p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个好用的插件神器&quot;&gt;&lt;a href=&quot;#一个好用的插件神器&quot; class=&quot;headerlink&quot; title=&quot;一个好用的插件神器&quot;&gt;&lt;/a&gt;一个好用的插件神器&lt;/h1&gt;&lt;p&gt;最近发现了一个特别能够提高生活幸福感的插件：&lt;a href=&quot;https://tam
      
    
    </summary>
    
      <category term="生活资料" scheme="https://zhangandyu.github.io/categories/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99/"/>
    
    
      <category term="工具" scheme="https://zhangandyu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>个人资料收集</title>
    <link href="https://zhangandyu.github.io/2018/08/05/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99-%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
    <id>https://zhangandyu.github.io/2018/08/05/生活资料-资源汇总/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2019-12-15T16:19:56.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="互联网工具"><a href="#互联网工具" class="headerlink" title="互联网工具"></a>互联网工具</h1><ol><li>指数类</li></ol><ul><li>百度指数 <a href="http://index.baidu.com/v2/index.html#/" target="_blank" rel="noopener">http://index.baidu.com/v2/index.html#/</a></li><li>微博指数 <a href="https://data.weibo.com/index/" target="_blank" rel="noopener">https://data.weibo.com/index/</a></li><li>各种数据指数 <a href="http://data.chongbuluo.com/" target="_blank" rel="noopener">http://data.chongbuluo.com/</a></li></ul><ol start="2"><li>企业类</li></ol><ul><li>企业信用信息公示系统 <a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a></li><li>国家统计局 <a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">http://data.stats.gov.cn/</a></li><li>企查查</li></ul><ol start="3"><li>财报类</li></ol><ul><li>上交所<a href="http://www.sse.com.cn/" target="_blank" rel="noopener">http://www.sse.com.cn/</a></li><li>深交所<a href="http://www.szse.cn/" target="_blank" rel="noopener">http://www.szse.cn/</a></li><li>港交所<a href="https://www.hkexnews.hk/" target="_blank" rel="noopener">https://www.hkexnews.hk/</a></li><li>美国上市公司<a href="https://www.sec.gov/" target="_blank" rel="noopener">https://www.sec.gov/</a></li><li>同花顺财经<a href="http://data.10jqka.com.cn/" target="_blank" rel="noopener">http://data.10jqka.com.cn/</a></li></ul><ol start="4"><li>分析工具</li></ol><ul><li>语义分析系统<a href="http://ictclas.nlpir.org/nlpir/" target="_blank" rel="noopener">http://ictclas.nlpir.org/nlpir/</a></li><li>腾讯文智 <a href="https://nlp.qq.com/semantic.cgi#page2" target="_blank" rel="noopener">https://nlp.qq.com/semantic.cgi#page2</a></li><li>echarts <a href="https://echarts.baidu.com/" target="_blank" rel="noopener">https://echarts.baidu.com/</a></li><li>在线图片识别文字 <a href="https://ocr.wdku.net/" target="_blank" rel="noopener">https://ocr.wdku.net/</a></li><li>问卷调查 <a href="https://www.wjx.cn/" target="_blank" rel="noopener">https://www.wjx.cn/</a></li></ul><h1 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h1><ul><li><p><a href="https://www.bilibili.com/video/av21376839/?p=25" target="_blank" rel="noopener">科普-计算机科学速成课</a></p></li><li><p><a href="https://www.bilibili.com/video/av8717782/?from=search&amp;seid=16602645838444177167" target="_blank" rel="noopener">纪录片-设计的艺术</a></p></li><li><p><a href="https://pan.baidu.com/s/1ge6mejh" target="_blank" rel="noopener">纪录片-小兵小赵</a></p></li><li><p><a href="https://www.youtube.com/watch?v=MCvU61Qoty0" target="_blank" rel="noopener">访谈-子夜.大学之殇</a></p></li><li><p><a href="https://aeon.co/videos/soar-around-the-moon-carried-by-the-music-of-debussy-in-this-breathtaking-space-flight" target="_blank" rel="noopener">月球视频</a></p></li><li><p><a href="https://www.youtube.com/watch?v=V22yKlUt4F4&amp;t=8s" target="_blank" rel="noopener">最后的演讲</a></p></li><li><p><a href="http://open.163.com/movie/2016/6/I/9/MBO0V0FG3_MBO0V9CI9.html" target="_blank" rel="noopener">性，死亡与生命的意义</a></p></li><li><p><a href="https://www.youtube.com/watch?v=sxQaBpKfDRk&amp;index=2&amp;list=PL8dPuuaLjXtNM_Y-bUAhblSAdWRnmBUcr" target="_blank" rel="noopener">统计学：statistics —— CrashCourse</a></p></li><li><p><a href="https://www.youtube.com/channel/UCJqMGrR9fX7Pfw_8JgeRqCA" target="_blank" rel="noopener">锵锵行天下</a></p></li><li><p><a href="https://v.qq.com/x/cover/t6udtxyvbhbbxv2/z0024xgmy6h.html" target="_blank" rel="noopener">蓝色星球</a></p></li><li><p><a href="https://v.qq.com/x/cover/jx7g4sm320sqm7i/b0028lgmlwa.html" target="_blank" rel="noopener">风味人间</a></p></li><li><p><a href="https://v.qq.com/x/page/x073074frri.html" target="_blank" rel="noopener">成功的原则</a></p></li><li><p><a href="https://www.youtube.com/channel/UCvn_XCl_mgQmt3sD753zdJA" target="_blank" rel="noopener">youtube视频：Rachel’s English</a></p></li><li><p><a href="https://www.youtube.com/watch?v=gJ0XxJVhf1Q&amp;list=PLnVWId4y5-smswI2kNgeeS4gbfJTmhIpe" target="_blank" rel="noopener">纪录片-生门</a></p></li><li><p><a href="https://www.youtube.com/watch?v=G_BrFk9i3xQ&amp;t=717s" target="_blank" rel="noopener">电影-生门</a></p></li><li><p><a href="https://movie.douban.com/subject/26874505/" target="_blank" rel="noopener">纪录片-人生果实</a></p></li></ul><p>《人类星球》<br>梦与狂想的王国<br>《尘与雪》<br>《人生七年》<br>《身份的焦虑》</p><p>《铁西区》<br>《和凤鸣》<br>《原油》</p><h1 id="书："><a href="#书：" class="headerlink" title="书："></a>书：</h1><ul><li><p><a href="https://book.douban.com/subject/2995759/" target="_blank" rel="noopener">The Non-Designer’s Design Book (4th Edition)</a></p></li><li><p><a href="http://www.freetechbooks.com/" target="_blank" rel="noopener">英文原版免费编程书籍</a></p></li></ul><h1 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h1><ul><li><p><a href="https://feedly.com/i/my" target="_blank" rel="noopener">RSS收集网站</a></p></li><li><p><a href="http://www.zhibimo.com/" target="_blank" rel="noopener">知笔墨</a></p></li><li><p><a href="https://natick.research.microsoft.com/" target="_blank" rel="noopener">微软海底机房摄像头直播</a></p></li><li><p><a href="https://www.earthcam.com/" target="_blank" rel="noopener">全球免费摄像头直播</a></p></li><li><p><a href="https://dribbble.com/" target="_blank" rel="noopener">设计类网站</a></p></li><li><p><a href="https://www.artstation.com/about" target="_blank" rel="noopener">漫画-海报</a></p></li><li><p><a href="https://ourworldindata.org/" target="_blank" rel="noopener">Our the in World</a></p></li><li><p><a href="http://cnki.net/" target="_blank" rel="noopener">中国知网</a></p></li><li><p><a href="https://www.gapminder.org/tools/#$chart-type=bubbles" target="_blank" rel="noopener">统计学可视化</a></p></li></ul><p>cnki免费下载文献：账号：hqwytsg015 密码：cnki015</p><ul><li><p><a href="https://www.douban.com/note/376297328/" target="_blank" rel="noopener">北京值得去的地方</a></p></li><li><p><a href="https://www.youtube.com/watch?v=dKOuUo3pZSE" target="_blank" rel="noopener">纪录片——AlphaGo</a></p></li><li><p><a href="https://www.bestyoutubechannels.info/" target="_blank" rel="noopener">youtube最受欢迎的频道</a></p></li><li><p><a href="http://md.aclickall.com/" target="_blank" rel="noopener">写作网站</a></p></li><li></li></ul><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li><p><a href="https://ayearofreadingtheworld.com/" target="_blank" rel="noopener">TED:阅读全世界</a></p></li><li><p><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰的个人网站</a></p></li><li><p><a href="https://betterexplained.com/" target="_blank" rel="noopener">追求对知识概念和原理进行更合适的描述</a></p></li><li><p><a href="http://www.storytellingwithdata.com/" target="_blank" rel="noopener">《用数据讲故事》作者博客</a></p></li><li><p><a href="https://www.geekonomics10000.com/" target="_blank" rel="noopener">万维钢的博客</a></p></li><li><p><a href="http://w4lle.com/" target="_blank" rel="noopener">w4lle’s Notes = android技术博客</a></p></li><li><p><a href="http://stormzhang.com/posts/" target="_blank" rel="noopener">stormzhang</a></p></li><li><p><a href="https://www.liaohuqiu.net/" target="_blank" rel="noopener">廖祜秋的博客</a></p></li><li><p><a href="https://www.blendo.co/blog/the-best-blogs-every-data-analyst-should-follow/" target="_blank" rel="noopener">最好的数据分析博客汇总</a></p></li></ul><h1 id="数据分析类网站"><a href="#数据分析类网站" class="headerlink" title="数据分析类网站"></a>数据分析类网站</h1><ul><li><p><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a></p></li><li><p><a href="https://cosx.org/archives/" target="_blank" rel="noopener">统计之都</a></p></li><li><p><a href="http://jiyang.me/" target="_blank" rel="noopener">纪杨的网站数据分析笔记</a></p></li><li><p><a href="http://bluewhale.cc/" target="_blank" rel="noopener">蓝鲸的网站分析笔记</a></p></li><li><p><a href="http://cloga.info/" target="_blank" rel="noopener">Cloga的互联网笔记</a></p></li><li><p><a href="https://www.hellobi.com/u/chenlaoshi/articles" target="_blank" rel="noopener">陈老师的天善智能博客文章</a></p></li><li><p><a href="http://www.woshipm.com/u/159343" target="_blank" rel="noopener">秦路-文章</a></p></li><li><p><a href="https://datavizproject.com/" target="_blank" rel="noopener">数据可视化网站</a></p></li><li><p><a href="http://www.17bigdata.com/" target="_blank" rel="noopener">一起大数据</a></p></li><li><p><a href="http://www.datathinking.com/index.php" target="_blank" rel="noopener">数据分析问答</a></p></li><li><p><a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn" target="_blank" rel="noopener">数学公式转换MD格式</a></p></li><li><p><a href="https://infogram.com/" target="_blank" rel="noopener">信息图制作</a></p></li><li><p><a href="https://flowcv.io/app/content" target="_blank" rel="noopener">简历制作网站</a></p></li><li><p><a href="https://trello.com" target="_blank" rel="noopener">多人协同任务清单</a></p></li><li><p><a href="https://www.ichdata.com/" target="_blank" rel="noopener">GA小站-一个Google Analytics 和Adobe Analytics 经验分享平台 </a></p></li></ul><h1 id="TED"><a href="#TED" class="headerlink" title="TED"></a>TED</h1><ul><li><p><a href="http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html" target="_blank" rel="noopener">如何掌控你的自由时间 —— 时间=选择</a></p></li><li><p><a href="http://open.163.com/movie/2016/6/4/J/MBOR278SK_MBP8E2U4J.html" target="_blank" rel="noopener">提升自信的技巧 —— 除非你做到了，否则没有人相信你</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/J/G/MDQLF803V_MDQLQ6BJG.html" target="_blank" rel="noopener">【TED】科技公司如何控制你的注意力</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/C/J/MDR9R6RCV_MDR9RFPCJ.html" target="_blank" rel="noopener">我从生活和写作中学到了12个真理 - 一个一个写，改初稿， 如果不知道写什么，就写你自己经历的事情</a></p></li></ul><ul><li><p><a href="http://open.163.com/movie/2018/9/R/Q/MDQJ11FL3_MDQJ2Q6RQ.html" target="_blank" rel="noopener">收入如何影响人们的生活方式——世界各国， 收入水平导致的生活条件改变都差不多</a><br><a href="http://lectures.dollarstreet.org/matrix?thing=Families&amp;countries=World&amp;regions=World&amp;zoom=4&amp;row=1&amp;lowIncome=26&amp;highIncome=15000&amp;lang=en" target="_blank" rel="noopener">官方网站</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/G/I/MDRK5FS99_MDRK5KCGI.html" target="_blank" rel="noopener">图表的魔力——图表能够让人更快的理解信息</a></p></li><li><p><a href="http://open.163.com/movie/2016/1/E/V/MBCBMP41R_MBCBN6SEV.html" target="_blank" rel="noopener">如何利用大数据做出正确的判断-用大量数据去做分析， 去深入了解， 但要想成功， 就需要冒一定的风险</a></p></li><li><p><a href="http://open.163.com/movie/2018/8/I/P/MDO5I27P8_MDO5J0AIP.html" target="_blank" rel="noopener">大数据时代：如何避免数据迷信？-不光要依靠大数据， 也要依靠厚数据，让解决问题的方法更加多元化</a></p></li><li><p><a href="http://open.163.com/movie/2018/8/3/H/MDO81R1TR_MDO820N3H.html" target="_blank" rel="noopener">李开复：人工智能如何拯救人类-ai让我们明白我们为何为人</a></p></li><li><p><a href="http://open.163.com/movie/2016/1/O/9/MB9RVGAJ5_MBA4K69O9.html" target="_blank" rel="noopener">开启情绪识别的大门-用算法来识别人类情绪</a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li></ul><h1 id="有趣的故事"><a href="#有趣的故事" class="headerlink" title="有趣的故事"></a>有趣的故事</h1><ol><li><p><a href="https://www.zhihu.com/question/29443142/answer/79172653" target="_blank" rel="noopener">盗醉猴</a></p></li><li><p><a href="https://www.zhihu.com/question/47959258/answer/109182642?f3fb8ead20=6c218ad9a813d4ae7365017d9f348828" target="_blank" rel="noopener">植物修炼成精之后还有没有细胞壁？</a></p></li></ol><ol start="3"><li><p><a href="https://www.zhihu.com/question/30620066/answer/49084704" target="_blank" rel="noopener">NBA 感人的比赛或者画面有哪些？</a></p></li><li><p><a href="https://www.zhihu.com/question/37206525/answer/72868899" target="_blank" rel="noopener">有没有一部电影让你在深夜中痛哭？</a></p></li><li><p><a href="https://www.zhihu.com/question/20127634/answer/33490470" target="_blank" rel="noopener">为什么法海要阻止白素贞和许仙在一起？</a></p></li><li><p><a href="https://www.quora.com/What-are-some-amazing-pictures-one-has-to-see-twice-to-understand/answer/Shimmy-He?srid=uXPOL&amp;share=6b286c9a" target="_blank" rel="noopener">What are some amazing pictures one has to see twice to understand?</a></p></li></ol><ol start="7"><li><a href="http://www.bbc.com/culture/story/20160819-the-21st-centurys-100-greatest-films" target="_blank" rel="noopener">21世界100部伟大的电影</a></li></ol><h1 id="幽默段子-银教授"><a href="#幽默段子-银教授" class="headerlink" title="幽默段子-银教授"></a>幽默段子-银教授</h1><p>什么时候有空？也没什么事，就是想占用你一辈子的时间，想和你过过日子。</p><p>我这人特别不实在，除了实在想你。 ​​​​</p><p>你这日子一天天过的，没什么两样，都是喜欢我的一天</p><p>我把电脑抱在怀里安慰了很久，因为它的系统崩溃了。 ​​​​</p><p>没钱真的会被人看不起。今天叫朋友还我一千块钱，朋友说：“借我一万的人都没找我要，你哪来的脸开口？”  我羞愧无比，暗暗发誓等我有钱了，一定要多借点给他。</p><p>总觉得自己过了18岁就能慢慢成熟起来，没想到我每年都是十八岁</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;互联网工具&quot;&gt;&lt;a href=&quot;#互联网工具&quot; class=&quot;headerlink&quot; title=&quot;互联网工具&quot;&gt;&lt;/a&gt;互联网工具&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;指数类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;百度指数 &lt;a href=&quot;http://index.b
      
    
    </summary>
    
      <category term="生活资料" scheme="https://zhangandyu.github.io/categories/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99/"/>
    
    
      <category term="工具" scheme="https://zhangandyu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>python基础学习</title>
    <link href="https://zhangandyu.github.io/2018/07/25/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-python%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhangandyu.github.io/2018/07/25/数据分析技能-python基础/</id>
    <published>2018-07-24T16:00:00.000Z</published>
    <updated>2019-12-15T04:53:46.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数"><a href="#数" class="headerlink" title="数"></a>数</h1><ol><li>整数-int</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line"># 查看变量的类型</span><br><span class="line">type(i)</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>浮点数-float</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.2 * 0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0.020000000000000004</span><br></pre></td></tr></table></figure><blockquote><p>浮点数在计算机中表输入的十进制浮点数仅由实际存储在计算机中的近似的二进制浮点数表示,二进制来表达 1/10 是一个无限循环小数:0.0001100110011001100110011001100110011001100110011…,Python 只打印机器中存储的二进制值的十进制近似值。</p></blockquote><blockquote><p>如何限制显示的小数点个数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;&#123;:.4f&#125;&quot;.format(0.1*0.4))</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>字符串-str</li></ol><p>字符串的表示方式：</p><ul><li><p>python中有3种表示字符串的方式——单引号，双引号，三引号。</p></li><li><p>单引号和双引号的作用是相同的, 但双引号中可以将包含的特殊字符单引号输出，而单引号要输出’需要/转义</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos; \&apos;hello world\&apos; &apos;</span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">str = &quot;&apos;hello python&apos;&quot;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><ul><li>三引号的用法特殊，三引号中可以输入单引号、双引号或换行符等字符,也可用作制作文档字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos;&apos;&apos;&apos;hello&apos;/&quot;world&quot;&apos;&apos;&apos;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><p>常用的字符串处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 重复字符串</span><br><span class="line">sta = &apos;hi&apos;</span><br><span class="line">print (sta * 2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 切片</span><br><span class="line">sta = &apos;1234567890&apos;</span><br><span class="line">print(sta[2:9:2])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#去除空格</span><br><span class="line">name = &apos;   zhang yu    &apos;</span><br><span class="line"># 去除左侧空格</span><br><span class="line">print(name.lstrip())</span><br><span class="line"># 去除右侧空格</span><br><span class="line">print(name.rstrip())</span><br><span class="line"># 去除两侧空格</span><br><span class="line">print(name.strip())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 分割字符串</span><br><span class="line"></span><br><span class="line">#split()函数通过制定分隔符对字符串进行切片</span><br><span class="line">name = &quot;zhang  and  yu  and  han&quot;</span><br><span class="line">print(name.split())</span><br><span class="line">print(name.split(&apos;  &apos;,2))</span><br><span class="line">print(name.split(&apos;  and  &apos;))</span><br><span class="line"></span><br><span class="line"># partition()函数将目标字符串分割为两个部分，返回一个三元元组（head,sep,tail），包含分割符</span><br><span class="line">url = &quot;https://zhangandyu.github.io//2018&quot;</span><br><span class="line">print( url.partition(&quot;//&quot;))</span><br><span class="line">print(url.rpartition(&quot;//&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 替换字符串</span><br><span class="line"></span><br><span class="line">#str.replace(old, new,max)</span><br><span class="line"># max 可选字符串不能超过max次</span><br><span class="line">str = &quot;this is a apple&quot;</span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;))     </span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;, 1))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拼接字符串</span><br><span class="line">a = &apos;_&apos;</span><br><span class="line">name = (&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br><span class="line">print(a.join(name))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查找字符串是否包含子字符串</span><br><span class="line">#str.find(str, beg=0, end=len(string))</span><br><span class="line">a = &apos; this is a apple&apos;</span><br><span class="line">b = &apos;is&apos;</span><br><span class="line"></span><br><span class="line">#从下标3开始，查找在字符串里第一个出现的子串，返回结果：3</span><br><span class="line">print(a.find(b,2)) </span><br><span class="line"></span><br><span class="line">#从下标5开始，查找在字符串里第一个出现的子串，返回结果：6</span><br><span class="line">print(a.find(b,5))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#判断字符串是否以指定的前后缀结尾</span><br><span class="line"># str.startswith(str, beg=0,end=len(string))</span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;th&apos;</span><br><span class="line">c = &apos;is&apos;</span><br><span class="line">print(a.startswith(b))</span><br><span class="line">print(a.startswith(c,2))</span><br><span class="line"></span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;le&apos;</span><br><span class="line">c = &apos;app&apos;</span><br><span class="line">print(a.endswith(b))</span><br><span class="line">print(a.endswith(b,10))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#其他函数</span><br><span class="line"># 检测数字</span><br><span class="line">str.isdigit()    # 检测字符串是否只由数字组成</span><br><span class="line">str.isnumeric()  # 检测字符串是否只由数字组成,这种方法是只针对unicode对象</span><br><span class="line">str.isdecimal()  # 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</span><br><span class="line"># 检测字母</span><br><span class="line">str.isalpha()   # 检测字符串是否只由字母组成</span><br><span class="line"># 检测字母和数字</span><br><span class="line">str.isalnum()   # 检测字符串是否由字母和数字组成</span><br><span class="line"># 检测其他</span><br><span class="line">str.isspace()   # 检测字符串是否只由空格组成</span><br><span class="line">str.islower()   # 检测字符串是否由小写字母组成</span><br><span class="line">str.isupper()   # 检测字符串中所有的字母是否都为大写</span><br><span class="line">str.istitle()   # 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</span><br><span class="line"></span><br><span class="line">str.capitalize()   # 将字符串的第一个字母变成大写,其他字母变小写</span><br><span class="line">str.lower()        # 转换字符串中所有大写字符为小写</span><br><span class="line">str.upper()        # 将字符串中的小写字母转为大写字母</span><br><span class="line">str.swapcase()     # 对字符串的大小写字母进行转换</span><br><span class="line">max(str)    # 返回字符串 str 中最大的字母</span><br><span class="line">min(str)    # 返回字符串 str 中最小的字母</span><br><span class="line">len(str)    # 返回字符串的长度</span><br><span class="line">str(arg) # 将 arg 转换为 string</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>布尔值</li></ol><ul><li>and-逻辑与</li><li>or-逻辑或</li><li>not-逻辑非</li></ul><blockquote><p> not的优先级大于and和or的优先级，而and和or的优先级相等。<br> 逻辑运算符的优先级低于关系运算符，必须先计算关系运算符，再计算逻辑运算符。</p></blockquote><hr><ol start="5"><li>变量命名规则</li></ol><ul><li>只能包含字母、数字和下划线</li><li>不能包含空格</li><li>不能将python关键字和函数名用作变量名</li><li>变量名应简短又具有描述性</li><li>慎用小写字母l和大写字母O</li></ul><hr><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><ol><li>什么是序列</li></ol><ul><li>序列是Python中最基本的数据结构。</li><li>python中有6个序列的内置类型,包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。</li></ul><p>对于序列，都可以使用一下操作：</p><ul><li>索引</li><li>切片</li><li>加</li><li>乘</li><li>成员检查<br>in和not in</li><li>计算序列的长度<br>len()</li><li>取序列中的最大、最小值<br>max()和min()</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><ul><li>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现</li><li>列表适合用于存储在程序运行期间可能变化的数据集。 列表是可以修改的， 这对处理网站的用户列表或游戏中的角色列表至关重要。</li></ul></blockquote><ul><li>列表对象方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.append(x)</span><br><span class="line"># 把一个元素添加到列表的结尾</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.extend(x)</span><br><span class="line"># 将一个给定列表中的所有元素都添加到另一个列表中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.insert(i,x)</span><br><span class="line"># 在指定位置插入一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(x)</span><br><span class="line"># 删除列表中值为 x 的第一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.pop(i)</span><br><span class="line"># 从列表的指定位置删除元素，并将其返回</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.clear()</span><br><span class="line"># 从列表中删除所有元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.index(x)</span><br><span class="line"># 返回列表中第一个值为 x 的元素的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.count(x)</span><br><span class="line"># 返回 x 在列表中出现的次数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.sort()</span><br><span class="line"># 对列表中的元素进行排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.sorted()</span><br><span class="line"># 对列表中的元素进行临时排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br><span class="line"># 倒排列表中的元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.copy()</span><br><span class="line"># 返回列表的一个浅拷贝</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.len(x)</span><br><span class="line">#返回列表的长度</span><br></pre></td></tr></table></figure><ol start="3"><li>用列表实现栈和列队</li></ol><ul><li>栈是一种后进先出的数据结构，我们可以使用列表的append()和pop()方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2]</span><br><span class="line">a.append(3)  #入栈</span><br><span class="line">a.pop() # 最后一个元素出栈</span><br></pre></td></tr></table></figure><ul><li>队列是一种先进先出的数据结构，我们可以使用列表的append()和pop(0)方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [2,1]</span><br><span class="line">a.append(1)  # 入队列</span><br><span class="line">a.pop(0) # 第0个元素出队列</span><br></pre></td></tr></table></figure><ol start="4"><li>列表推导式</li></ol><ul><li><p>为从序列中创建列表提供了一个简单的方法。</p></li><li><p>普通方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">for i in range(20):</span><br><span class="line">    a.append(i ** 2)</span><br><span class="line">print(a)</span><br><span class="line"># i 依然存在</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b = []</span><br><span class="line">for x in [1,2,3,4]:</span><br><span class="line">    for y in [2,3,4]:</span><br><span class="line">        if x !=y:</span><br><span class="line">            b.append((x,y))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li>推导式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [i**2 for i in range(20)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(x,y) for x in [1,2,3,4] for y in [2,3,4] if x !=y]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from math import pi</span><br><span class="line">[str(round(pi, i)) for i in range(1, 16)]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [1, 2, 3, 4],</span><br><span class="line">    [5, 6, 7, 8],</span><br><span class="line">    [9, 10, 11, 12]]</span><br><span class="line">[[row[i] for row in matrix] for i in range(4)]</span><br></pre></td></tr></table></figure><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>元组为不可变得列表， 在需要创建一系列不可修改的元素时使用。 </p></blockquote><ol><li>只有一个元素<br>元组中只包含一个元素时， 需要在元素后面添加逗号，否则括号会被当做运算符使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zy = (2,)</span><br><span class="line">zy[0]</span><br></pre></td></tr></table></figure><ol start="2"><li>修改元组</li></ol><ul><li>对元组进行连接组合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;z&apos;, &apos;y&apos;)</span><br><span class="line">me = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">name = na + me</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><ul><li>给元组变量赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;zy&apos;, &apos;yu&apos;)</span><br><span class="line">na = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">print(na)</span><br></pre></td></tr></table></figure><ul><li>元组运算符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 计算元组个数</span><br><span class="line">len((2,45, 67, 8, 9))</span><br><span class="line"></span><br><span class="line"># 连接</span><br><span class="line">(1,2,3, 4) + (4, 5, 6)</span><br><span class="line"></span><br><span class="line"># 复制</span><br><span class="line">(1,2,3, 4)* 3</span><br><span class="line"></span><br><span class="line">#迭代</span><br><span class="line"> for i in (12, 3,4 , 5):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><ul><li>将列表转换为元组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [ &apos;z&apos;, 1, 2, 3, 4, &apos;u&apos;]</span><br><span class="line">tup = tuple(list)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="映射和集合"><a href="#映射和集合" class="headerlink" title="映射和集合"></a>映射和集合</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><blockquote><p>字典：将相关信息关联起来</p></blockquote><ul><li>访问字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">print(man[&apos;name&apos;])</span><br></pre></td></tr></table></figure><ul><li>添加键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man[&apos;home&apos;] = &apos;xian&apos;</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">man[&apos;hige&apos;] = 170</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>删除键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">del man[&apos;xingbie&apos;]</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>遍历所有的键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key, value in man.items():</span><br><span class="line">    print( key,&quot;:&quot; ,  value)</span><br></pre></td></tr></table></figure><ul><li>分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key in man.keys():</span><br><span class="line">    print( key)</span><br><span class="line">    </span><br><span class="line">for value in man.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><ul><li>按倒序顺序遍历分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in sorted(man.keys()):</span><br><span class="line">    print( key)</span><br></pre></td></tr></table></figure><ul><li>字典列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line">alien = &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;:5&#125;</span><br><span class="line">computer = &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 40&#125;</span><br><span class="line"></span><br><span class="line">alients = [man, alien, computer]</span><br><span class="line"></span><br><span class="line">for i in alients:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;name&apos;:[&apos;zhangyu&apos;, &apos;han&apos;, &apos;dou&apos;],</span><br><span class="line">    &apos;home&apos;:[&apos;xian&apos;, &apos;beijing&apos;],</span><br><span class="line">    &apos;hige&apos;:[165, 170, 370, 2389]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for na, las in province.items():</span><br><span class="line">    for la in las:</span><br><span class="line">        print(na, la)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;man&apos; :&#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;,</span><br><span class="line">    &apos;alien&apos; : &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;: 5&#125;,</span><br><span class="line">    &apos;computer&apos; : &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 10&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i, a  in province.items():</span><br><span class="line">    print(i, a)</span><br></pre></td></tr></table></figure><ul><li>字典键的特性<blockquote><p>不允许同一键出现两次，创建时如果同一键被赋值两次， 后一个值会被记住。<br>键必须不可变， 可以用数字，字符串，或元组充当，但不能用列表</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&apos;name&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict</span><br></pre></td></tr></table></figure><ul><li>python中关于字典的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 删除字典内所有元素</span><br><span class="line">dict.clear()</span><br><span class="line"></span><br><span class="line">#返回一个字典的浅复制</span><br><span class="line">dict.copy()</span><br><span class="line"></span><br><span class="line"># 创建字典</span><br><span class="line">seq = (&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;)</span><br><span class="line">dict = dict.fromkeys(seq,10)</span><br><span class="line">dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#返回指定键的值，如果值不在字典中返回设定值</span><br><span class="line">dict1.get(&apos;Google&apos;, 40)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#和get()类似, 但如果键不存在于字典中，将会添加键并将值设为设定值</span><br><span class="line">dict1.setdefault(&apos;google&apos;, &apos;20&apos;)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#把字典dict2的键/值对更新到dict里</span><br><span class="line">dict1=&#123;&apos;Google&apos;: 10, &apos;Runoob&apos;: 10, &apos;Taobao&apos;: 10&#125;</span><br><span class="line">dict2 =&#123;&apos;na&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line">#以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">dict.items()</span><br><span class="line"></span><br><span class="line">#以列表返回一个字典所有的键</span><br><span class="line">dict.keys()</span><br><span class="line"></span><br><span class="line">#以列表返回字典中的所有值</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><blockquote><p>集合是一个无序的，不重复的数据集合。集合作用有以下两点：</p></blockquote><ol><li>去重： 把一个还有重复元素的列表或元组等数据类型变成集合， 其中的重复元素只出现一次，用set()方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#使用大括号之间创建集合</span><br><span class="line">f = &#123;1, 2, 2, 2, &apos;a&apos;&#125;</span><br><span class="line">print(f)</span><br><span class="line">print(type(f))</span><br><span class="line"></span><br><span class="line"># 用set()方法</span><br><span class="line">a = [1, 2, 2, &apos;a&apos;, &apos;a&apos;]</span><br><span class="line">b = (1,2,2, &apos;a&apos;, &apos;a&apos;)</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line">e = set()</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><ol start="2"><li>进行关系测试：测试两组数据之间的交集，差集，并集等数据关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查看集合的相关函数</span><br><span class="line">help(set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;d&apos;,&apos;e&apos;]</span><br><span class="line">b = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;b&apos;]</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line"></span><br><span class="line"># 取交集</span><br><span class="line">e = c.intersection(d)</span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line"># 取并集</span><br><span class="line">f = c.union(d)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"># 取差集（无重复）</span><br><span class="line">g = c.difference(d)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">#对称差集&quot;（不同时在c,d中存在）</span><br><span class="line">h = c.symmetric_difference(d)</span><br><span class="line">print(h)</span><br><span class="line"></span><br><span class="line">#判读是否为子集</span><br><span class="line">i = c.issubset(d)</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"># &quot;判读是否为超集&quot;</span><br><span class="line">j = c.issuperset(d) </span><br><span class="line"></span><br><span class="line">#检查是否有相同元素,没有返回True</span><br><span class="line">k = c.isdisjoint(d)</span><br></pre></td></tr></table></figure><h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ol><li>if-else语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 17</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print( &quot;you can seee six video&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li>if-elif-else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif age&gt; 18:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>多个elif</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = 80</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif 18&lt;age&lt;30:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">elif 30&lt; age &lt; 60:</span><br><span class="line">    print( &quot;you should go to work&quot;)</span><br><span class="line">elif age&gt; 60:</span><br><span class="line">    print(&quot;you should go to tourism&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="4"><li>if语句中的and和or</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = 9</span><br><span class="line">if num &gt;= 0 and num &lt;= 10: </span><br><span class="line">    print (&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">num = 10</span><br><span class="line">if num &lt;= 0 or num &gt;= 10:</span><br><span class="line">    print(&apos;zy&apos;)</span><br></pre></td></tr></table></figure><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><ol><li>for循环主要用于遍历迭代的对象， while循环主要用于条件判断</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="2"><li>continue 用于跳过该次循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="3"><li>break 用于退出循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><ol start="4"><li>循环使用 else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 5:</span><br><span class="line">   print (count, &quot; is  less than 5&quot;)</span><br><span class="line">   count = count + 1</span><br><span class="line">else:</span><br><span class="line">   print (count,&quot; is not less than 5&quot; )</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for 循环可以遍历任何序列的项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;:</span><br><span class="line">    print(letter)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>函数是组织好， 可重复使用的，用来实现有关功能的代码段。函数能提高应用的模块行，和代码的重复利用率。</li></ul><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def zhangyu():</span><br><span class="line">    &quot;&quot;&quot;显示名称&quot;&quot;&quot;</span><br><span class="line">    print(&quot;zhangandyu&quot;)</span><br><span class="line"> #   return[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line"> zhangyu()</span><br></pre></td></tr></table></figure><ul><li>向函数传入参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def zy(name):</span><br><span class="line">    print(&apos;Hello, &apos; + name.title() + &apos;!&apos;)</span><br><span class="line"></span><br><span class="line">zy(&apos;zhangyu&apos;)</span><br><span class="line"></span><br><span class="line"># name 为形参</span><br><span class="line">#&apos;zhangyu&apos;为实参</span><br></pre></td></tr></table></figure><ul><li>位置实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(&apos;dog&apos;, &apos;huabao&apos;)</span><br><span class="line"># 警惕位置混淆</span><br><span class="line">describe_pet(&apos;huabao&apos;, &apos;dog&apos;)</span><br></pre></td></tr></table></figure><ul><li>关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(name = &apos;huabao&apos;, animal_type = &apos;dog&apos;)</span><br><span class="line"># 位置混淆也没有关系</span><br></pre></td></tr></table></figure><ul><li>设置默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(name,animal_type=&apos;dog&apos;):</span><br><span class="line">    &quot;&quot;&quot;设置animal_type的默认参数是dog&quot;&quot;&quot;</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数不改变</span><br><span class="line">describe_pet(name = &apos;huabao&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数改变</span><br><span class="line">describe_pet(&apos;huxbao&apos;, &apos;cat&apos;)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数返回的值可以使用return语句将值返回到调用函数的代码行中。从而将程序的大部分繁重工作移到函数中取完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name):</span><br><span class="line">    name = first_name + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>让实参变成可选的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name, middle_name =&apos; &apos;):</span><br><span class="line">    if middle_name:</span><br><span class="line">        name = first_name +&apos; &apos;+ last_name +&apos; &apos; +  middle_name</span><br><span class="line">    else:</span><br><span class="line">        name = first_name + &apos; &apos; + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>返回字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def build_person(first_name, last_name, age=&apos;&apos;):</span><br><span class="line">    person = &#123;&apos;first&apos; : first_name, &apos;last&apos;: last_name&#125;</span><br><span class="line">    if age:</span><br><span class="line">        person[&apos;age&apos;] = age</span><br><span class="line">    return person</span><br><span class="line"></span><br><span class="line">build_person(&apos;zhang&apos;, &apos;yu&apos;, age=25)</span><br></pre></td></tr></table></figure><ul><li>传递列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_user(names):</span><br><span class="line">    for name in names:</span><br><span class="line">        print(name.title())</span><br><span class="line">zy = [&apos;a&apos;, &apos;b&apos;, &apos;v&apos;]</span><br><span class="line">get_user(zy)</span><br></pre></td></tr></table></figure><ul><li>传递任意数据的实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_world(* names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">get_world(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用位置实参和任意数量实参</li></ul><p>必须将接纳任意数量实参的形参放到最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_world(size, *names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(str(size) + i)</span><br><span class="line">get_world( 1,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用任意数量的关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_user(**user_info):</span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    for key, value in user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    return profile</span><br><span class="line">user_profile = get_user(location = &apos;princeton&apos;, field = &apos;physics&apos;, home = &apos;xian&apos;)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>如果一个函数在函数内部，调用自己本身，这个函数就是递归函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fan(n):</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return n * fan (n-1)</span><br></pre></td></tr></table></figure><p>但递归函数在数特别大的情况下会导致栈溢出， 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fan(10000)</span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li>局部作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    name = &quot;zhangyu&quot;</span><br><span class="line"></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>运行报错， 因为name变量只在func()函数中生效，而在全局无法调用。</p><ul><li>作用域链</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;lzl&quot;</span><br><span class="line">def f1():</span><br><span class="line">    name = &quot;Eric&quot;</span><br><span class="line">    def f2():</span><br><span class="line">        name = &quot;Snor&quot;</span><br><span class="line">        print(name)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>f1()函数执行，最后输出snor，Python中有作用域链， 变量会由内到外找，先去自己作用域找，自己没有再去上级找，直到找不到报错。</p><ul><li>终极作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;zhang&apos;</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    name = &apos;yu&apos;</span><br><span class="line">    return f1</span><br><span class="line">    </span><br><span class="line">ret = f2()</span><br><span class="line">ret()</span><br></pre></td></tr></table></figure><p>输出结果为zhang, 分析可知， f2()函数执行结果为函数f1的内存地址。执行ret()就是执行f1()，name =’zhang’与fi()在一个作用域链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 新浪面试题</span><br><span class="line">li  = [lambda : x for x in range(10)]</span><br><span class="line">print(type(li))</span><br><span class="line">print(type(li[0]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#lambada 面试题 </span><br><span class="line">li = [lambda :x for x in range(10)]</span><br><span class="line">res = li[0]()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><blockquote><p>Numpy是科学计算库,特点是有N维数组对象ndarray，是Scipy、Pandas等的基础</p></blockquote><ol><li>array结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 给列表每个元素增加1</span><br><span class="line">zy = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">zy = zy + 1</span><br><span class="line"># 错误， 因为列表不支持这样的错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用array函数</span><br><span class="line">zy = np.array(zy)</span><br><span class="line">zy += 1</span><br><span class="line">zy</span><br><span class="line"></span><br><span class="line"># 计算</span><br><span class="line">by = np.array([ 2, 3, 4, 5, 6])</span><br><span class="line">zy + by</span><br><span class="line">zy * by</span><br><span class="line">zy ** by</span><br><span class="line"></span><br><span class="line"># 取值</span><br><span class="line">zy[0]  </span><br><span class="line">zy[2:]</span><br></pre></td></tr></table></figure><ol start="2"><li>底层为创建ndarray对象，有丰富的可选参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zy.shape    # 多维数组的形状</span><br><span class="line">type(zy)    # 类型</span><br><span class="line">zy.dtype    # 数组中元素的类型, array内部必须为同一类型， 不同类型会默认进行转换</span><br><span class="line">zy.size     # 数组中元素个数</span><br><span class="line">zy.ndim     # 数组的维度</span><br></pre></td></tr></table></figure><ol start="3"><li>索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tang_array = np.array([[1, 2, 3],</span><br><span class="line">                        [3, 4, 5],</span><br><span class="line">                        [6, 7, 8]])</span><br><span class="line"></span><br><span class="line">tang_array[1]</span><br><span class="line">tang_array[1, 1]</span><br><span class="line">tang_array[:,1]</span><br><span class="line">tang_array[1,0:2]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tang_array2 = tang_array</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line"># 将tang_array2中的4 改为10</span><br><span class="line">tang_array2[1,1] = 10</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line">tang_array</span><br><span class="line"># tang_array 中的4也改为了10， 修改tang_array2,实际是指向了tang_array中的内存</span><br><span class="line"></span><br><span class="line"># 要想修改tang_array2 而不改tang_arra, 需要用copy()</span><br></pre></td></tr></table></figure><ol start="4"><li>巧用布尔类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 构造等差数组</span><br><span class="line">zy = np.arange(0, 100, 10)</span><br><span class="line">zy</span><br><span class="line"># array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构造布尔类型</span><br><span class="line">by = np.array([0, 0, 1, 0, 1, 1, 1, 0, 1, 0], dtype=bool)</span><br><span class="line">by</span><br><span class="line"># array([False, False,  True, False,  True,  True,  True, False,  True,False])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy[by]</span><br><span class="line"># array([20, 40, 50, 60, 80])</span><br></pre></td></tr></table></figure><ol start="5"><li>array数组的数值计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">zy = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">#所有数据求和 </span><br><span class="line">np.sum(zy)</span><br><span class="line"></span><br><span class="line"># 指定要按什么维度进行计算</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 0)</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 1)</span><br><span class="line"></span><br><span class="line"># 所有数据乘积</span><br><span class="line">zy.prod()</span><br><span class="line"></span><br><span class="line">zy.prod(axis = 0)</span><br><span class="line">zy.prod(axis = -1)</span><br><span class="line"></span><br><span class="line"># 最小最大值</span><br><span class="line">zy.min(axis = 0)</span><br><span class="line">zy.max()</span><br><span class="line"></span><br><span class="line"># 最大值的索引</span><br><span class="line">zy.argmax()</span><br><span class="line"></span><br><span class="line"># 均值</span><br><span class="line">zy.mean()</span><br><span class="line">zy.mean(axis = 0)</span><br><span class="line"></span><br><span class="line"># 标准差</span><br><span class="line">zy.std(axis = 1)</span><br><span class="line"></span><br><span class="line"># 方差</span><br><span class="line">zy.var()</span><br><span class="line"></span><br><span class="line"># 进行限制， 小于3的值都变成3， 大于7的值都变成7</span><br><span class="line">zy.clip(3, 7)</span><br><span class="line"></span><br><span class="line"># 进行四舍五入</span><br><span class="line">zy.round()</span><br><span class="line"></span><br><span class="line"># 进行四舍五入到第一个小数点</span><br><span class="line">zy.round(decimals = 1)</span><br></pre></td></tr></table></figure><ol start="6"><li>排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">tang_array = np.array([[1.1, 4.3, 5.2 , 5.1],</span><br><span class="line">                      [5.2, 6.4, 2.3, 4.6]])</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">np.sort(tang_array)</span><br><span class="line"></span><br><span class="line">np.sort(tang_array, axis = 0)</span><br></pre></td></tr></table></figure><ol start="7"><li>数组形状操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num</span><br><span class="line"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2, 5</span><br><span class="line">zy_num</span><br><span class="line"></span><br><span class="line"># array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num.reshape(1,10)</span><br><span class="line">#array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 增加维度</span><br><span class="line"></span><br><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line">zy_num = zy_num[np.newaxis, :]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(1, 10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num = zy_num[ :, np.newaxis]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10, 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 压缩维度</span><br><span class="line"></span><br><span class="line">zy_num = zy_num.squeeze()</span><br><span class="line">zy_num</span><br><span class="line">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 转置</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2,5</span><br><span class="line"></span><br><span class="line">zy_num</span><br><span class="line">#array([[0, 1, 2, 3, 4],</span><br><span class="line">       [5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line">zy_num.transpose()   # zy_num.T</span><br><span class="line">#array([[0, 5],[1, 6], [2, 7], [3, 8], [4, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数组的连接</span><br><span class="line"></span><br><span class="line">a = np.array([[1,2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line">b = np.array([[0, 3, 5, 7], [8, 0, 10, 21]])</span><br><span class="line"></span><br><span class="line">c = np.concatenate((a, b))</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"># array([[ 1,  2,  3,  4], [ 5,  6,  7,  8],[ 0,  3,  5,  7], [ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = np.confatenate((a, b), axis = 1)</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">np.vstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4],[ 5,  6,  7,  8],[ 0,  3,  5,  7],[ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line">np.hstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4,  0,  3,  5,  7],[ 5,  6,  7,  8,  8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a</span><br><span class="line"># array([[1, 2, 3, 4],[5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">a.flatten()</span><br><span class="line">a.ravel()</span><br><span class="line"># array([1, 2, 3, 4, 5, 6, 7, 8])</span><br></pre></td></tr></table></figure><ol start="8"><li>生成数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">np.arange(10)</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2)</span><br><span class="line"># array([ 2,  4,  6,  8, 10, 12, 14, 16, 18])</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2, dtype= np.float32)</span><br><span class="line"># array([ 2.,  4.,  6.,  8., 10., 12., 14., 16., 18.], dtype=float32)</span><br><span class="line"></span><br><span class="line"># 构造等距数组</span><br><span class="line">np.linspace(0, 10, 5)</span><br><span class="line"># array([ 0. ,  2.5,  5. ,  7.5, 10. ])</span><br><span class="line"></span><br><span class="line"># 构造行向量，列向量</span><br><span class="line">np.r_[0:10:1]</span><br><span class="line">np.c_[0:10:1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.zeros(3)</span><br><span class="line"># array([0., 0., 0.])</span><br><span class="line"></span><br><span class="line">np.zeros((3,3))</span><br><span class="line"></span><br><span class="line">np.ones(3)</span><br><span class="line"># array([1., 1., 1.])</span><br><span class="line"></span><br><span class="line">np.ones((3,3)) * 8</span><br><span class="line"></span><br><span class="line">zy_num = np.array([1,2,3, 4])</span><br><span class="line">np.zeros_like(zy_num)</span><br><span class="line"># array([0, 0, 0, 0])</span><br></pre></td></tr></table></figure><ol start="9"><li>运算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 乘法</span><br><span class="line">x = np.array([5,5])</span><br><span class="line">y = np.array([2,3])</span><br><span class="line"></span><br><span class="line">np.multiply(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">np.dot(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 1])</span><br><span class="line">y = np.array([[1, 2, 3],[4, 5, 6]])</span><br><span class="line"></span><br><span class="line">print(x * y)</span><br><span class="line">#[[1 2 3] [4 5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 2])</span><br><span class="line">y = np.array([1, 1, 1])</span><br><span class="line">x == y</span><br><span class="line"># array([ True,  True, False])</span><br><span class="line"></span><br><span class="line">np.logical_and(x,y)</span><br><span class="line">np.logical_or(x,y)</span><br><span class="line">np.logical_not(x,y)</span><br></pre></td></tr></table></figure><ol start="10"><li>随机模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 随机浮点数</span><br><span class="line">np.random.rand(3,2)</span><br><span class="line"></span><br><span class="line"># 随机整数</span><br><span class="line">np.random.randint(10, size = (2,4))</span><br><span class="line"># array([[4, 6, 7, 8], [7, 6, 2, 3]])</span><br><span class="line"></span><br><span class="line"># 随机数</span><br><span class="line">np.random.rand()</span><br><span class="line">np.random.random_sample()</span><br><span class="line"></span><br><span class="line"># 0-10中随机找三个数</span><br><span class="line">np.random.randint(0, 10, 3)</span><br><span class="line"># array([8, 6, 9])</span><br><span class="line"></span><br><span class="line"># 随机高斯分布</span><br><span class="line">mu, sigma = 0, 0.2</span><br><span class="line">np.random.normal(mu, sigma, 5)</span><br><span class="line"></span><br><span class="line"># 设置数字精度, 输出数精度为小数点后3位</span><br><span class="line">np.set_printoptions(precision = 3 )</span><br><span class="line"></span><br><span class="line"># 洗牌， 打乱排列顺序</span><br><span class="line">zy_num = np.arange(15)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</span><br><span class="line"></span><br><span class="line">np.random.shuffle(zy_num)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 1,  5,  4, 11, 14,  9,  8,  6,  7,  3,  0,  2, 10, 12, 13])</span><br></pre></td></tr></table></figure><ol start="11"><li>读取写入文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 写一个名为tang的txt文件</span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1 2 3 4 5 6 </span><br><span class="line">2 3 4 5 5 7</span><br><span class="line"></span><br><span class="line"># 读取tang文件</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;)</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line"># array([[1., 2., 3., 4., 5., 6.],[2., 3., 4., 5., 5., 7.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">a, b, c, d, e, f</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line"># 不读取第一行</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1)</span><br><span class="line"></span><br><span class="line"># 指定使用哪几列</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1, usecols = (0,1, 4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写入数组文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num)</span><br><span class="line"></span><br><span class="line"># 保存成指定格式</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;)</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%.2f&apos;)</span><br><span class="line"></span><br><span class="line"># 指定分隔符</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读写文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.save(&apos;zy_num.npy&apos;, zy_num)</span><br><span class="line"></span><br><span class="line">zy_num = np.load(&apos;zy_num.npy&apos;)</span><br><span class="line"></span><br><span class="line"># 将两个文件保存在同一文件夹，并进行读写</span><br><span class="line">zy_num2 = np.arange(10)</span><br><span class="line">np.savez(&apos;zy_npz&apos;, a = zy_num, b = zy_num2)</span><br><span class="line"></span><br><span class="line">data = np.load(&apos;zy.npz&apos;)</span><br><span class="line">data.keys()</span><br><span class="line"># [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">data[&apos;a&apos;]</span><br><span class="line"># array([[1, 2, 3],[4, 5, 6]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数&quot;&gt;&lt;a href=&quot;#数&quot; class=&quot;headerlink&quot; title=&quot;数&quot;&gt;&lt;/a&gt;数&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;整数-int&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://zhangandyu.github.io/2018/07/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD-Python%E7%88%AC%E8%99%AB/"/>
    <id>https://zhangandyu.github.io/2018/07/12/数据分析技能-Python爬虫/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2019-12-15T04:53:24.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬取英雄联盟-英雄皮肤图片"><a href="#爬取英雄联盟-英雄皮肤图片" class="headerlink" title="爬取英雄联盟-英雄皮肤图片"></a>爬取英雄联盟-英雄皮肤图片</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>最近自己在学爬虫， 有天朋友问我能否爬取英雄联盟的皮肤图片到本地，好实现快速浏览，折腾了半个小时，终于成功了。</p><h2 id="2-过程"><a href="#2-过程" class="headerlink" title="2. 过程"></a>2. 过程</h2><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><h4 id="找到皮肤图片链接，-研究规律"><a href="#找到皮肤图片链接，-研究规律" class="headerlink" title="找到皮肤图片链接， 研究规律"></a>找到皮肤图片链接， 研究规律</h4><p>在抓取图片之前，我们需要分析网址链接的构成， 以便找到其中的规律。</p><p><img src="https://i.loli.net/2018/07/17/5b4e086d05abd.png" alt="英雄联盟图片"></p><p>打开英雄联盟网站, 点击其中的一个英雄， 我们可以看到一个英雄有1-6个皮肤甚至更多，且我们很容易从每个皮肤链接中找到规律。</p><p><img src="https://i.loli.net/2018/07/17/5b4e09769c56a.png" alt="英雄皮肤"><br><img src="https://i.loli.net/2018/07/17/5b4e0ac67e187.png" alt="狐狸皮肤"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 英雄1</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266002.jpg</span><br><span class="line"></span><br><span class="line"># 英雄2</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103002.jp</span><br></pre></td></tr></table></figure><p>从以上的链接中，我们可以知道英雄皮肤的链接规律为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;http://ossweb-img.qq.com/images/lol/web201310/skin/small&quot; + &quot;英雄代号&quot; + &quot;0&quot; + &quot;01-10&quot;</span><br></pre></td></tr></table></figure></p><h4 id="找到每个英雄对应的数字代号"><a href="#找到每个英雄对应的数字代号" class="headerlink" title="找到每个英雄对应的数字代号"></a>找到每个英雄对应的数字代号</h4><p>那么我们需要解决的问题就变成了到每个英雄对应的代号是多少？</p><p>通过搜索，我们发现每个英雄对应的代号存在champion.js文件中</p><p><img src="https://i.loli.net/2018/07/17/5b4e0df090d6c.png" alt="英雄对应的代号"></p><p>从Headers中， 我们可以看到champion.js 对应的url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lol.qq.com/biz/hero/champion.js</span><br></pre></td></tr></table></figure></p><p>我们通过正则表达式， 把js中对应的英雄代号提取出来。</p><p>通过以上把链接拼凑起来，我们就可以把链接对应的图片皮肤下载到本地了。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">import urllib</span><br><span class="line">url = &quot;http://lol.qq.com/biz/hero/champion.js&quot;</span><br><span class="line">hd =&#123;&apos;User-Agent&apos;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0&quot;&#125;</span><br><span class="line">data = requests.get(url,headers = hd).content</span><br><span class="line">datas = data.decode()</span><br><span class="line">pat = &apos;&quot;keys&quot;:(.*?),&quot;data&quot;&apos;</span><br><span class="line">imglist = re.findall(pat,datas)</span><br><span class="line">datass = json.loads(imglist[0])</span><br><span class="line">for i in datass:</span><br><span class="line">    try:</span><br><span class="line">        for j in range(12):</span><br><span class="line">            try:</span><br><span class="line">                num = str(j)</span><br><span class="line">                # print(num)</span><br><span class="line">                if len(num) == 1:</span><br><span class="line">                    hero_num = &quot;00&quot; + num</span><br><span class="line">                elif len(num) ==2:</span><br><span class="line">                    hero_num = &quot;0&quot; + num</span><br><span class="line">                numstr = i + hero_num</span><br><span class="line">                urls = &apos;http://ossweb-img.qq.com/images/lol/web201310/skin/big&apos;+ numstr +&apos;.jpg&apos;</span><br><span class="line">                localfile = &quot;E:/张宇个人文件/英雄联盟/&quot; + str(i) + str(num) +  &quot;.jpg&quot;</span><br><span class="line">                urllib.request.urlretrieve(urls, filename = localfile)</span><br><span class="line">            except Exception as err:</span><br><span class="line">                pass</span><br><span class="line">    except Exception as err:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><hr><h1 id="爬取王者荣耀-英雄图片"><a href="#爬取王者荣耀-英雄图片" class="headerlink" title="爬取王者荣耀-英雄图片"></a>爬取王者荣耀-英雄图片</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 用python爬取王者荣耀皮肤</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">url = &quot;http://pvp.qq.com/web201605/herolist.shtml&quot;</span><br><span class="line">hd =&#123;&apos;User-Agent&apos;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0&quot;&#125;</span><br><span class="line">data = requests.get(url,headers = hd)</span><br><span class="line">pat = &apos;a href=&quot;herodetail/(.*?).shtml&apos;</span><br><span class="line">imglist = re.compile(pat, re.S).findall(data.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in imglist:</span><br><span class="line">    # print(i)</span><br><span class="line">    try:</span><br><span class="line">        for j in [1,2,3,4,5,6]:</span><br><span class="line">            try:</span><br><span class="line">                numstr = str(i)+&apos;/&apos; +str(i)+&apos;-mobileskin-&apos;+ str(j)</span><br><span class="line">                # print(numstr)</span><br><span class="line">                urls = &apos;https://game.gtimg.cn/images/yxzj/img201606/heroimg/&apos;+numstr+&apos;.jpg&apos;</span><br><span class="line">                print(urls)</span><br><span class="line">                localfile = &quot;E:/张宇个人文件/官网图片/&quot; + str(i)+ str(j)+  &quot;.jpg&quot;</span><br><span class="line">                urllib.request.urlretrieve(urls, filename = localfile)</span><br><span class="line">            except Exception as err: </span><br><span class="line">                pass</span><br><span class="line">    except Exception as err:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><hr><h1 id="爬取网站美女图片"><a href="#爬取网站美女图片" class="headerlink" title="爬取网站美女图片"></a>爬取网站美女图片</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="构建用户代理池"><a href="#构建用户代理池" class="headerlink" title="构建用户代理池"></a>构建用户代理池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 这里可以随意加多个浏览器</span><br><span class="line">uapools = [</span><br><span class="line">    &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2&quot;,</span><br><span class="line">    &quot;Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0 Safari/537.36 OPR/15.0&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (X11; CrOS armv7l 3428.193.0) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.126 Safari/537.22&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/533.9 (KHTML, like Gecko) Maxthon/3.0 Safari/533.9&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="爬取并下载图片"><a href="#爬取并下载图片" class="headerlink" title="爬取并下载图片"></a>爬取并下载图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import urllib.request</span><br><span class="line"># uapools 如上所示</span><br><span class="line">for ua in uapools:</span><br><span class="line">    hd =&#123;&apos;User-Agent&apos;:ua&#125;</span><br><span class="line">    i = uapools.index(ua)</span><br><span class="line">    # 限制爬取页数， 我们爬取前10页</span><br><span class="line">    if i &gt; 10:</span><br><span class="line">        break</span><br><span class="line">    try:</span><br><span class="line">        url = &quot;http://www.iyuanqi.com/home/funimg/fun_list/m/Home/cp_uid/all/sort/30hot/p/&quot;+str(i)+&quot;.html&quot;</span><br><span class="line">        data = requests.get(url, headers = hd)</span><br><span class="line">        pat = &apos;class=&quot;lazy-img&quot; src=&quot;(.*?)&quot; data-original=&quot;&apos;</span><br><span class="line">        imglist = re.compile(pat, re.S).findall(data.text)</span><br><span class="line">        for j in range(0, len(imglist)):</span><br><span class="line">            try:</span><br><span class="line">                thisimg = imglist[j]</span><br><span class="line">                thisimgurl = thisimg</span><br><span class="line">                localfile = &quot;E:/张宇个人文件/网络图片/&quot; + str(i) + str(j) + &quot;.jpg&quot;</span><br><span class="line">                urllib.request.urlretrieve(thisimgurl, filename = localfile)</span><br><span class="line">            except Exception as err:</span><br><span class="line">                pass</span><br><span class="line">    except Exception as err:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><hr><h1 id="爬取天善课程数据表存储到MYSQL"><a href="#爬取天善课程数据表存储到MYSQL" class="headerlink" title="爬取天善课程数据表存储到MYSQL"></a>爬取天善课程数据表存储到MYSQL</h1><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>天善智能是一个商业智能与大数据在线社区，有很多很好的学习课程。我们用爬虫来爬取网站的所有课程并存储到MYSQL数据库中， 以便于进一步的分析。</p><h4 id="用python在MYSQL中创建名为zhanhyu的数据库"><a href="#用python在MYSQL中创建名为zhanhyu的数据库" class="headerlink" title="用python在MYSQL中创建名为zhanhyu的数据库"></a>用python在MYSQL中创建名为zhanhyu的数据库</h4><ul><li>用python连接MYSQL数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 因为本地mysql没有设置密码， 所以没有加password参数</span><br><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306)</span><br><span class="line"></span><br><span class="line"># 用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</span><br><span class="line">cursor = db.cursor()</span><br></pre></td></tr></table></figure><ul><li>创建一个新的数据库， 名字叫做zhangyu</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</span><br><span class="line">cursor.execute(&quot;CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8&quot;)</span><br></pre></td></tr></table></figure><h4 id="在zhangyu库中创建tianshan2-datas的数据表"><a href="#在zhangyu库中创建tianshan2-datas的数据表" class="headerlink" title="在zhangyu库中创建tianshan2_datas的数据表"></a>在zhangyu库中创建tianshan2_datas的数据表</h4><ul><li>指定在zhangyu这个数据库中运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306, db=&apos;zhangyu&apos;)</span><br><span class="line">cursor = db.cursor()</span><br></pre></td></tr></table></figure><ul><li>用sql语句创建名为tianshan2_datas的表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql = &apos;CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))&apos;</span><br><span class="line"></span><br><span class="line">curosr.exectute(sql)</span><br><span class="line"></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h4 id="爬取天善智能网站的数据"><a href="#爬取天善智能网站的数据" class="headerlink" title="爬取天善智能网站的数据"></a>爬取天善智能网站的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(1,5):</span><br><span class="line">    # 观察天善课程链接， 找出规律</span><br><span class="line">    thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1)</span><br><span class="line">    # 用requests库抓取数据</span><br><span class="line">    hd =&#123;&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;&#125;</span><br><span class="line">    data = requests.get(thisurl, headers = hd)</span><br><span class="line">    #用正则表达式进行解析</span><br><span class="line">    title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos;</span><br><span class="line">    price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    title = re.compile(title_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(title)&gt;0):</span><br><span class="line">        title = title[0]</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br><span class="line">    price = re.compile(price_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(price)&gt;0):</span><br><span class="line">        price = price[0]</span><br><span class="line">    else:</span><br><span class="line">        price = &apos;免费&apos;</span><br><span class="line">    numb = re.compile(numb_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(numb)&gt;0):</span><br><span class="line">        numb = numb[0]</span><br><span class="line">    else:</span><br><span class="line">        numb = &apos;缺失&apos;</span><br></pre></td></tr></table></figure><h4 id="将爬取的数据存储到名为zhangyu数据库的tianshan2-datas表中"><a href="#将爬取的数据存储到名为zhangyu数据库的tianshan2-datas表中" class="headerlink" title="将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中"></a>将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)</span><br><span class="line">cursor = con.cursor()</span><br><span class="line"></span><br><span class="line">sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;</span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql, (title, price, numb))</span><br><span class="line">    con.commit()</span><br><span class="line">except:</span><br><span class="line">    con.rollback()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><hr><p>这样，我们就成功的把爬取的数据保存到mysql数据库中，方便我们查询使用。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 因为本地mysql没有设置密码， 所以没有加password参数</span><br><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306)</span><br><span class="line"></span><br><span class="line"># 用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</span><br><span class="line">cursor.execute(&quot;CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8&quot;)</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306, db=&apos;zhangyu&apos;)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = &apos;CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))&apos;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(0,284):</span><br><span class="line">    thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1)</span><br><span class="line">    hd =&#123;&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;&#125;</span><br><span class="line">    data = requests.get(thisurl, headers = hd)</span><br><span class="line">    title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos;</span><br><span class="line">    price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    title = re.compile(title_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(title)&gt;0):</span><br><span class="line">        title = title[0]</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br><span class="line">    price = re.compile(price_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(price)&gt;0):</span><br><span class="line">        price = price[0]</span><br><span class="line">    else:</span><br><span class="line">        price = &apos;免费&apos;</span><br><span class="line">    numb = re.compile(numb_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(numb)&gt;0):</span><br><span class="line">        numb = numb[0]</span><br><span class="line">    else:</span><br><span class="line">        numb = &apos;缺失&apos;</span><br><span class="line">        </span><br><span class="line">    con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)</span><br><span class="line">    cursor = con.cursor()</span><br><span class="line"></span><br><span class="line">    sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;</span><br><span class="line">    try:</span><br><span class="line">        cursor.execute(sql, (title, price, numb))</span><br><span class="line">        con.commit()</span><br><span class="line">    except:</span><br><span class="line">        con.rollback()</span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬取英雄联盟-英雄皮肤图片&quot;&gt;&lt;a href=&quot;#爬取英雄联盟-英雄皮肤图片&quot; class=&quot;headerlink&quot; title=&quot;爬取英雄联盟-英雄皮肤图片&quot;&gt;&lt;/a&gt;爬取英雄联盟-英雄皮肤图片&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot;
      
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>双拼输入法</title>
    <link href="https://zhangandyu.github.io/2017/09/17/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <id>https://zhangandyu.github.io/2017/09/17/生活资料-双拼输入法/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2019-12-15T04:55:49.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code>hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/" target="_blank" rel="noopener">《把时间当朋友》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-怎么接触到双拼的？&quot;&gt;&lt;a href=&quot;#1-怎么接触到双拼的？&quot; class=&quot;headerlink&quot; title=&quot;1. 怎么接触到双拼的？&quot;&gt;&lt;/a&gt;1. 怎么接触到双拼的？&lt;/h1&gt;&lt;p&gt;自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的
      
    
    </summary>
    
      <category term="生活资料" scheme="https://zhangandyu.github.io/categories/%E7%94%9F%E6%B4%BB%E8%B5%84%E6%96%99/"/>
    
    
      <category term="工具" scheme="https://zhangandyu.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
