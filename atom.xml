<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怪兽宇的小站</title>
  
  <subtitle>start</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangandyu.github.io/"/>
  <updated>2019-04-18T15:12:02.362Z</updated>
  <id>https://zhangandyu.github.io/</id>
  
  <author>
    <name>怪兽宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hive 查询</title>
    <link href="https://zhangandyu.github.io/2019/04/18/Hive%E6%9F%A5%E8%AF%A2/"/>
    <id>https://zhangandyu.github.io/2019/04/18/Hive查询/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2019-04-18T15:12:02.362Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是-Hive"><a href="#什么是-Hive" class="headerlink" title="什么是 Hive"></a>什么是 Hive</h1><p>Hive 是一种建立在Hadoop文件系统上的数据仓库架构, 并对存储的数据进行分析和管理，可以将 SQL 语句转换为 MapReduce 任务进行运行，这样就使得数据开发和分析人员很方便的使用 SQL 来完成海量数据的统计和分析。</p><p>Hive 擅长的是非实时的、离线的、对响应及时性要求不高的海量数据批量计算，统计分析。</p><p>Hive 不适用于在线交易处理</p><h1 id="Hive-的常见查询语句"><a href="#Hive-的常见查询语句" class="headerlink" title="Hive 的常见查询语句"></a>Hive 的常见查询语句</h1><blockquote><p>Hive 中的 SELECT 基础语法和标准 SQL 语法基本一致，支持 WHERE、DISTINCT、GROUP BY、ORDER BY、HAVING、LIMIT、子查询等</p></blockquote><h3 id="1-Hive-脚本如何注释"><a href="#1-Hive-脚本如何注释" class="headerlink" title="1.  Hive 脚本如何注释"></a>1.  <strong>Hive 脚本如何注释</strong></h3><p>可以用 - - 开头的字符串来表示注释， 也可以将需要注释的 sql 选中， 然后用 ctrl + ? 快捷键来进行注释。 </p><hr><h3 id="2-切换数据库"><a href="#2-切换数据库" class="headerlink" title="2.  切换数据库"></a>2.  <strong>切换数据库</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前数据库</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    current_database()</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置默认数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="3-查看表"><a href="#3-查看表" class="headerlink" title="3. 查看表"></a>3. <strong>查看表</strong></h3><ul><li>查看当前使用的数据库中有哪些表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure><ul><li>查看非当前使用的数据库中有哪些表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">in</span> myhive;</span><br></pre></td></tr></table></figure><ul><li>查看数据库中以 android 开头的表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">'android*'</span></span><br></pre></td></tr></table></figure><ul><li>查看表的详细信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted android</span><br></pre></td></tr></table></figure><hr><h3 id="4-select…from-语句"><a href="#4-select…from-语句" class="headerlink" title="4. select…from 语句"></a>4. <strong>select…from 语句</strong></h3><ul><li>基本查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 employee 表中的 name 和 salary。</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, salary <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><ul><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, subord[<span class="number">0</span>] <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><ul><li>使用键值进行索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, deductions[<span class="string">"state taxes"</span>] <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 "点" 符号， 类似：表的别名 . 列名 这样的用法</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">name</span>, address.city </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure><ul><li>使用列值进行计算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">upper</span>(<span class="keyword">name</span>), salary, deductions[<span class="string">"Federal Taxes"</span>], </span><br><span class="line">    rount(salary * (<span class="number">1</span> - salary, deductions[<span class="string">"Federal Taxes"</span>]))</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZHANGYU   100000.0     0.2      80000</span></span><br></pre></td></tr></table></figure><ul><li>使用正则表达式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选出所有列名以 price 作为前缀的列</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="string">'price.*'</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks;</span><br></pre></td></tr></table></figure><ul><li>常用的关系运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 等值比较: =</span><br><span class="line"> 等值比较:&lt;=&gt;</span><br><span class="line"> 不等值比较: &lt;&gt;和!=</span><br><span class="line"> 小于比较: &lt;</span><br><span class="line">小于等于比较: &lt;=</span><br><span class="line"> 大于比较: &gt;</span><br><span class="line"> 大于等于比较: &gt;=</span><br><span class="line"> 区间比较</span><br><span class="line"> 空值判断: IS NULL</span><br><span class="line"> 非空判断: IS NOT NULL</span><br><span class="line"> LIKE比较: LIKE</span><br><span class="line"> JAVA的LIKE操作: RLIKE</span><br><span class="line"> REGEXP操作: REGEXP</span><br></pre></td></tr></table></figure><ul><li>数学运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">加法操作: +</span><br><span class="line">减法操作: –</span><br><span class="line">乘法操作: *</span><br><span class="line">除法操作: /</span><br><span class="line">取余操作: %</span><br><span class="line">与操作: &amp;</span><br><span class="line">或操作: |</span><br><span class="line">异或操作: ^</span><br><span class="line">取反操作: ~</span><br></pre></td></tr></table></figure><ul><li>常用的聚合函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count(*)          # 个数统计函数</span><br><span class="line">count(distinct  col) <span class="comment">#  统计去重之后的个数</span></span><br><span class="line">sum(col)          <span class="comment"># 求和</span></span><br><span class="line">sum(distinct col) <span class="comment">#去重之后的和</span></span><br><span class="line">avg(col)          <span class="comment"># 平均值</span></span><br><span class="line">avg(distinct col) <span class="comment"># 去重之后的平均值</span></span><br><span class="line">min(col)          <span class="comment"># 最小值</span></span><br><span class="line">max(col)          <span class="comment"># 最大值</span></span><br><span class="line">corr(col1, col2)  <span class="comment"># 相关系数</span></span><br><span class="line">var_pop(clo)      <span class="comment"># 方差</span></span><br><span class="line">var_samp(col)     <span class="comment"># 样本方差</span></span><br><span class="line">stddev_pop(col)   <span class="comment"># 标准偏差</span></span><br><span class="line">stddev_samp(col)  <span class="comment"># 标准样本偏差</span></span><br><span class="line">covar_pop(col1, col2) <span class="comment"># 协方差</span></span><br><span class="line">covar_samp(col1, col2) <span class="comment"># 样本协方差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>), <span class="keyword">avg</span>(salary) <span class="keyword">form</span> employees;</span><br></pre></td></tr></table></figure><ul><li>使用别名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> acount) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure><ul><li>使用limit语句限制返回的行数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  只显示 10 行</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">form</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>嵌套 select 语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    e.name, e.salary</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">upper</span>(<span class="keyword">name</span>)</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        employees</span><br><span class="line">) <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     e.salary &gt; <span class="number">500</span>;</span><br></pre></td></tr></table></figure><ul><li>case…when..then句式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> , salary,</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> salary &lt; <span class="number">5000</span> <span class="keyword">then</span> <span class="string">'low'</span></span><br><span class="line">        <span class="keyword">when</span> salary &gt; = <span class="number">5000</span> <span class="keyword">and</span> salary &lt; <span class="number">70000</span> <span class="keyword">then</span> <span class="string">'middle'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">'high'</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> bracket <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h3 id="5-where-语句-添加条件"><a href="#5-where-语句-添加条件" class="headerlink" title="5. where 语句, 添加条件"></a>5. <strong>where 语句, 添加条件</strong></h3><ul><li>常见用法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country = <span class="string">'us'</span> <span class="keyword">and</span> state = <span class="string">'ca'</span>;</span><br></pre></td></tr></table></figure><ul><li>可以在where条件下计算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span> , salary, deductions[<span class="string">'first taxes'</span>], salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>])</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">round</span>(salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>]) ) &gt; <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># zhangyu 100000.0 0.2 80000</span></span><br></pre></td></tr></table></figure><ul><li>对上式进行优化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     e.* </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span> , salary, deductions[<span class="string">'first taxes'</span>], salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>])</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">     employees</span><br><span class="line">    ) e</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">round</span>(salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>]) ) &gt; <span class="number">70000</span>;</span><br></pre></td></tr></table></figure><ul><li>条件中有浮点数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对浮点数进行比较</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span>, salary, duductions[<span class="string">'first taxes'</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     duductions[<span class="string">'first taxes'</span>] &gt; <span class="number">0.2</span>;</span><br></pre></td></tr></table></figure><blockquote><p>出现的结果中会有 0.2， 因为 DOUBL 和 FLOAT 类型不同</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">name</span>, salary, duductions[<span class="string">'first taxes'</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     duductions[<span class="string">'first taxes'</span>]  &gt; <span class="keyword">cast</span> (<span class="number">0.2</span> <span class="keyword">as</span> <span class="built_in">float</span>);</span><br></pre></td></tr></table></figure><blockquote><p>出现的结果中不会有0.2</p></blockquote><ul><li>like 和 rlike</li></ul><blockquote><p>rlike 子句是Hive功能的一个扩展， 可以通过Java的正则表达式来指定匹配条件</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">where</span> address.street rlikt <span class="string">'.*(beijing|shanghai).*'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用like</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">like</span> <span class="string">'%beijing%'</span> <span class="keyword">or</span> address.street <span class="keyword">like</span> <span class="string">'%shanghai%'</span>;</span><br></pre></td></tr></table></figure><h3 id="6-group-by-语句-order-by-与-having"><a href="#6-group-by-语句-order-by-与-having" class="headerlink" title="6. group by 语句, order by, 与 having"></a>6. group by 语句, order by, 与 having</h3><ul><li>分类并排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ul><li>having 子句来限制输出结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) <span class="keyword">from</span> stocks</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">     <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">     <span class="keyword">avg</span>(price_close) &gt; <span class="number">50.0</span> ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子2</span></span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    col1</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    <span class="keyword">sum</span>(col2) &gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 如果没有having， 将要使用嵌套select子查询</span></span><br><span class="line"><span class="comment"># 例子1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    s2.year, s2.avg <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">year</span>(ymd) <span class="keyword">as</span> <span class="keyword">year</span>, <span class="keyword">avg</span>(price_close) <span class="keyword">as</span> <span class="keyword">avg</span> <span class="keyword">from</span> stocks</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">year</span>(ymd)</span><br><span class="line">) s2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    s2.avg &gt; <span class="number">50.0</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子2</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    col1 </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        col1,</span><br><span class="line">        <span class="keyword">sum</span>(col2) <span class="keyword">as</span> col2sum</span><br><span class="line">    <span class="keyword">from</span>    </span><br><span class="line">        t1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        col1 )  <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span>   </span><br><span class="line">     t2.col2sum &gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>having 与 where 的区别</li></ul><blockquote><ul><li>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。</li></ul></blockquote><blockquote><ul><li>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找平均工资大于3000的部门</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">avg</span>(salary) <span class="keyword">as</span> average </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    average &gt; <span class="number">3000</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询每个部门工资大于3000的员工个数</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">count</span>(*) <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    salary &gt; <span class="number">3000</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment</span><br></pre></td></tr></table></figure><h3 id="7-join-语句"><a href="#7-join-语句" class="headerlink" title="7. join 语句"></a>7. join 语句</h3><blockquote><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定</p></blockquote><ul><li>内连接 </li></ul><blockquote><p>只有进行连接的两个表中都存在与连接标准相匹配的数据才会被保留下来。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     a <span class="keyword">JOIN</span>  b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span> <span class="keyword">and</span> b.symbol = <span class="string">'Ibm'</span></span><br></pre></td></tr></table></figure><blockquote><p>ON 子句指定了两个表间数据进行连接的条件。</p></blockquote><ul><li>对于多张表进行连接查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close, c.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line">      <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.ymd = c.ymd</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a. symbol = <span class="string">'Apple'</span>  <span class="keyword">AND</span> b.symbol = <span class="string">'Ibm'</span> <span class="keyword">AND</span> c.symbol = <span class="string">'Google'</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么条件内不加表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</p></blockquote><ul><li>Join 优化</li></ul><blockquote><ul><li>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。</li></ul></blockquote><blockquote><ul><li>因此， 我们在查询时， 要保证连续查询中的表的大小从左到右依次是增加的。  </li></ul></blockquote><blockquote><p>假如，在 a, b 两个表中，b表最小， 则 sql 需要修改为：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><ul><li>使用 “标记” 来指定哪张表是大表， 不需要排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">/*+Streamtable(a)*/</span> a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> B <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><ul><li>左外连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><blockquote><p>左边表符合 WHERE 条件的全部返回，右表不符合 ON 条件的返回 NULL</p></blockquote><ul><li>完全外链接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><blockquote><p>返回所有表中符合 WHERE 语句条件的所有记录<br>    Hive 不支持右半开连接</p></blockquote><h3 id="8-排序-ORDER-BY"><a href="#8-排序-ORDER-BY" class="headerlink" title="8. 排序 ORDER BY"></a>8. 排序 ORDER BY</h3><ul><li>Order by   对查询的所有结果进行排序</li></ul><blockquote><p>可在字段加 DESC 关键字， 进行降序排序。 （默认 ASC， 升序）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a.price_close</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    A.PRICE_close <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="9-子查询"><a href="#9-子查询" class="headerlink" title="9. 子查询"></a>9. 子查询</h3><blockquote><p>Hive中如果是从一个子查询进行SELECT查询，那么子查询必须设置一个别名</p></blockquote><ul><li>From 子句进行子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    dt,     </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"> (<span class="keyword">select</span></span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">    client.android_log_view</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">    client.ios_log_view  </span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    dt</span><br></pre></td></tr></table></figure><ul><li>Hive 0.13 开始， Where 子句也支持子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">WHERE</span> A.a <span class="keyword">IN</span> (<span class="keyword">SELECT</span> foo <span class="keyword">FROM</span> B);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> A</span><br><span class="line"><span class="keyword">FROM</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> B <span class="keyword">FROM</span> T2 <span class="keyword">WHERE</span> T1.X = T2.Y)</span><br></pre></td></tr></table></figure><ul><li>将子查询作为一个表的语法，叫做Common Table Expression（CTE）</li></ul><blockquote><p>如果用 distinct, select 后面必须直接跟 distinct</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">        province</span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_ios_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">       hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    province</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    uv <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><hr><h1 id="Hive查询性能优化"><a href="#Hive查询性能优化" class="headerlink" title="Hive查询性能优化"></a>Hive查询性能优化</h1><h3 id="1-什么是数据倾斜"><a href="#1-什么是数据倾斜" class="headerlink" title="1. 什么是数据倾斜"></a>1. 什么是数据倾斜</h3><p>当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</p><h3 id="2-数据倾斜的表现"><a href="#2-数据倾斜的表现" class="headerlink" title="2. 数据倾斜的表现"></a>2. 数据倾斜的表现</h3><p>任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</p><h3 id="3-如何避免数据倾斜"><a href="#3-如何避免数据倾斜" class="headerlink" title="3. 如何避免数据倾斜"></a>3. 如何避免数据倾斜</h3><blockquote><ul><li>sql优化</li><li>业务逻辑优化</li></ul></blockquote><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a>方法1：</h4><ul><li>在查询中， 避免使用 select *, 使用条件限制取需要的列</li></ul><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a>方法2：</h4><ul><li><strong>当数据量特别大时，用 group by 代替 count(distinct)</strong></li></ul><blockquote><p>count(distinct ),在数据量特别大的情况下，效率较低, 可以用先 group by 再 count 的方式进行代替。<br>因为count(distinct)是按group by 字段分组，按distinct字段排序</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-02'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>可以转换成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-02'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date, user_account) a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><h4 id="方法3："><a href="#方法3：" class="headerlink" title="方法3："></a>方法3：</h4><ul><li><strong>join 优化</strong></li></ul><blockquote><p> 在使用 Join 进行外关联时， 将副表的过滤条件写在 where 后面，会先全表关联， 再进行过滤， 这样会耗费资源。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><p>正确的写法是将 where 条件卸载 on 后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> ( b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol <span class="keyword">and</span> s.symbol = <span class="string">'APPLE'</span>)</span><br></pre></td></tr></table></figure><h4 id="方法4："><a href="#方法4：" class="headerlink" title="方法4："></a>方法4：</h4><ul><li><strong>避免 union all 子查询中使用 group by</strong> 【替换 count(distinct) 除外】、<strong>count(distinct)、max、min等。</strong> </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">use computer_view;</span><br><span class="line">with a1 as (</span><br><span class="line">        select</span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        from</span><br><span class="line">            client_android_log_view</span><br><span class="line">        where</span><br><span class="line">            hit_date between &apos;2018-12-01&apos; and &apos;2018-12-13&apos;</span><br><span class="line">            and</span><br><span class="line">            nbtn_name like &quot;%支付宝%&quot;</span><br><span class="line">        union all </span><br><span class="line">        select</span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        from</span><br><span class="line">            client_ios_log_view</span><br><span class="line">        where</span><br><span class="line">            hit_date between &apos;2018-12-01&apos; and &apos;2018-12-13&apos;</span><br><span class="line">        and</span><br><span class="line">        nbtn_name like &quot;%支付宝%&quot;)</span><br><span class="line">select</span><br><span class="line">    hit_date,</span><br><span class="line">    count(user_account) as pv</span><br><span class="line">from</span><br><span class="line">    a1</span><br><span class="line">group by</span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><h4 id="方法5："><a href="#方法5：" class="headerlink" title="方法5："></a>方法5：</h4><ul><li><strong>避免不同数据类型进行关联</strong></li></ul><blockquote><p>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    a.price_close,</span><br><span class="line">    b.price_close</span><br><span class="line">from</span><br><span class="line">    a join b  on a.user_id = cast(b.user_id as string)</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-11-01&apos; and &apos;2018-11-02&apos;</span><br><span class="line">    and </span><br><span class="line">    a.symbol = &apos;apple&apos;</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="方法6："><a href="#方法6：" class="headerlink" title="方法6："></a>方法6：</h4><ul><li><strong>无效ID在关联时的数据倾斜问题</strong></li></ul><blockquote><p>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。<br>需要用到Case When … Else…End语法</p></blockquote><p>写法1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Select</span><br><span class="line">    *</span><br><span class="line">From </span><br><span class="line">    a Join  b</span><br><span class="line">On</span><br><span class="line">     a.user_id is not null</span><br><span class="line">And </span><br><span class="line">    a.user_id = b.user_id</span><br><span class="line">Union all</span><br><span class="line">Select</span><br><span class="line">    * </span><br><span class="line">from</span><br><span class="line">    a</span><br><span class="line">where</span><br><span class="line">    a.user_id is null</span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Select</span><br><span class="line">    *</span><br><span class="line">From</span><br><span class="line">    a left out Join b</span><br><span class="line">On </span><br><span class="line">Case when </span><br><span class="line">    a.user_id is null </span><br><span class="line">then </span><br><span class="line">    concat(‘dp_hive’,rand() ) </span><br><span class="line">else </span><br><span class="line">    a.user_id = b.user_id end;</span><br></pre></td></tr></table></figure></p><hr><h1 id="求两组数据的交集，-并集，-差集"><a href="#求两组数据的交集，-并集，-差集" class="headerlink" title="求两组数据的交集， 并集， 差集"></a>求两组数据的交集， 并集， 差集</h1><h3 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h3><p>union 与 union all </p><blockquote><p>union, 结果包含所有行， 并删除重复行<br>unoin all, 结果包含所有行， 但不删除重复行</p></blockquote><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><blockquote><p>点击支付宝或者手淘活动的人数总共有 435499 人</p></blockquote><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><blockquote><p>点击支付宝或者手淘活动的次数为 665935</p></blockquote><hr><h3 id="交集-intersect函数"><a href="#交集-intersect函数" class="headerlink" title="交集-intersect函数"></a>交集-intersect函数</h3><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">intersect</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_ios_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><blockquote><p> 点击支付宝又点击手淘活动的人数为 66174</p></blockquote><hr><h3 id="差集-except-函数-与-join写法"><a href="#差集-except-函数-与-join写法" class="headerlink" title="差集-(except 函数 与 join写法)"></a>差集-(except 函数 与 join写法)</h3><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            client_android_log_view</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-20'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> a2 </span><br><span class="line">    <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line">    <span class="keyword">and</span> a2.user_account <span class="keyword">is</span>  <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><blockquote><p>只参加支付宝活动， 没有参加手淘活动的人数为 369325<br>在求差集时， 需要注意前后顺序， 否则会出现逻辑错误<br>可以发现， 差集 + 交集 =并集， 369325 +  66174 = 435499</p></blockquote><p>写法3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--详细列出差集的版本号</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">distinct</span> two <span class="keyword">as</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.data_csv</span><br><span class="line"><span class="keyword">except</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-03'</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_ios_log_view</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-03'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">   a2.six ,</span><br><span class="line">   <span class="keyword">COUNT</span>(a2.two) <span class="keyword">as</span> uv,</span><br><span class="line">   <span class="keyword">count</span>(a1.user_account) <span class="keyword">as</span> uv_1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1, test.data_csv <span class="keyword">as</span> a2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a1.user_account = a2.two</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a2.six</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><h3 id="字符串截取函数：substr-substring-substring-index"><a href="#字符串截取函数：substr-substring-substring-index" class="headerlink" title="字符串截取函数：substr,substring, substring_index"></a>字符串截取函数：substr,substring, substring_index</h3><p>语法: substr(string A, int start, int len),substring(string A, int start, int len)</p><p>返回值: string</p><p>说明：返回字符串A从start位置开始，长度为len的字符串</p><p>举例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">substring</span>(charge_products,<span class="number">2</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-05'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    charge_products</span><br><span class="line"><span class="keyword">limit</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>举例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">     a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lookup.products_lookup <span class="keyword">as</span>  a1    <span class="keyword">join</span>    computer_view.client_android_log_view   <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span></span><br><span class="line">    a1.product =  <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-07'</span> <span class="keyword">and</span> <span class="string">'2018-10-13'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    mall_events <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">    a1.name</span><br></pre></td></tr></table></figure></p><p>举例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--打断</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">substring_index(page_url, <span class="string">'?'</span>, <span class="number">1</span>),</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> user_tracking_id) <span class="keyword">as</span> uv,</span><br><span class="line"><span class="keyword">count</span>(page_url) <span class="keyword">as</span> pv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.jt_wap_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-04-09'</span> <span class="keyword">and</span> <span class="string">'2019-04-09'</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">campaign <span class="keyword">like</span> <span class="string">"%scjh-scep-tcnr-9yuanka%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">substring_index(page_url, <span class="string">'?'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    uv <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h3 id="刷新数据表"><a href="#刷新数据表" class="headerlink" title="刷新数据表"></a>刷新数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh table computer_log.client_ios_log</span><br></pre></td></tr></table></figure><h1 id="留存率"><a href="#留存率" class="headerlink" title="留存率"></a>留存率</h1><blockquote><p>求11月10-15号每天的1、3、7日留存率</p></blockquote><p>方法：</p><blockquote><ol><li>统计每天的uv</li><li>使用date_add 函数， 一次性求出10-15号每一天的次1、3、7日留存</li><li>算出留存率</li></ol></blockquote><p>步骤1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天uv</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> </span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span> </span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>步骤2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-25'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.hit_date =  <span class="keyword">date_add</span>(a1.hit_date, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.hit_date</span><br></pre></td></tr></table></figure></p><p>拓展方法：(迷神)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 留存sql优化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> userid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> t1.userid,</span><br><span class="line">                t1.statdate</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            table1 t1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.statdate &gt;= $&#123;上<span class="number">30</span>天日期&#125;</span><br><span class="line">            <span class="keyword">and</span> t1.statdate &lt;= $&#123;上一天日期&#125;</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            t1.userid,</span><br><span class="line">            t1.statdate</span><br><span class="line">        ) s1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        userid</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>) &gt; <span class="number">2</span></span><br><span class="line">    ) R1</span><br></pre></td></tr></table></figure><blockquote><p>此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=${上一天日期}。<br>另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</p></blockquote><blockquote><p>这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</p></blockquote><hr><h1 id="HIVE中的窗口函数"><a href="#HIVE中的窗口函数" class="headerlink" title="HIVE中的窗口函数"></a>HIVE中的窗口函数</h1><h3 id="over-函数"><a href="#over-函数" class="headerlink" title="over 函数"></a>over 函数</h3><blockquote><p>语法： over(partition by ….)<br>作用： 与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据日期 和 mac_id 进行分组求每组的数量和， 并按日期排序</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date, </span><br><span class="line">    mac_id,</span><br><span class="line">    mac_color,</span><br><span class="line">    day_num,</span><br><span class="line">    <span class="keyword">sum</span>(day_num) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> hit_date, mac_id <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> sum_num</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.datas</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>hit_date</th><th>mac_id</th><th>mac_color</th><th>day_num</th><th>sum_num</th></tr></thead><tbody><tr><td>20171011</td><td>1292</td><td>金色</td><td>11</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>黑色</td><td>19</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>粉金</td><td>58</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>金色</td><td>1</td><td>89</td></tr><tr><td>20171011</td><td>2013</td><td>金色</td><td>9</td><td>22</td></tr><tr><td>20171011</td><td>2013</td><td>金色</td><td>3</td><td>22</td></tr><tr><td>20171012</td><td>1292</td><td>金色</td><td>5</td><td>18</td></tr><tr><td>20171012</td><td>1292</td><td>粉金</td><td>1</td><td>18</td></tr><tr><td>20171012</td><td>2013</td><td>粉金</td><td>1</td><td>7</td></tr><tr><td>20171012</td><td>2013</td><td>金色</td><td>6</td><td>7</td></tr><tr><td>20171013</td><td>1292</td><td>黑色</td><td>1</td><td>1</td></tr><tr><td>20171013</td><td>2013</td><td>粉金</td><td>2</td><td>2</td></tr></tbody></table><hr><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group by 语句</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    mac_id,</span><br><span class="line">    <span class="keyword">sum</span>(day_num) </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.data</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date,</span><br><span class="line">    mac_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>day_id</th><th>mac_id</th><th>sum_num</th></tr></thead><tbody><tr><td>20171011</td><td>124609</td><td>1</td></tr><tr><td>20171011</td><td>20130</td><td>22</td></tr><tr><td>20171011</td><td>12922</td><td>89</td></tr><tr><td>20171012</td><td>12922</td><td>18</td></tr><tr><td>20171012</td><td>20130</td><td>7</td></tr><tr><td>20171013</td><td>12922</td><td>1</td></tr><tr><td>20171013</td><td>20130</td><td>2</td></tr></tbody></table><blockquote><p>over(partition by)  与 group by 的区别<br>grou by 字段只能显示与分组聚合相关的字段， 而 over(partition by)<br>可以显示所有字段</p></blockquote><hr><h3 id="LAG-和-LEAD-函数"><a href="#LAG-和-LEAD-函数" class="headerlink" title="LAG 和 LEAD 函数"></a>LAG 和 LEAD 函数</h3><blockquote><p>语法： LAG(col,n,DEFAULT) 用于统计窗口内往上第n行值;<br>LEAD(col,n,DEFAULT) 用于统计窗口内往下第n行值</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算11月1-10号， 不同日期同一用户登陆客户端 pv 量对比</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv,</span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account, hit_date)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.pv,</span><br><span class="line">    lag(a1.pv, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv1,</span><br><span class="line">    <span class="keyword">lead</span>(a1.pv, <span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account  <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h3 id="first-value-和-last-value-函数"><a href="#first-value-和-last-value-函数" class="headerlink" title="first_value() 和 last_value() 函数"></a>first_value() 和 last_value() 函数</h3><blockquote><p>语法:first_value() ：比较每个用户浏览次数与第一天浏览次数进行比较，查询返回当前浏览次数以及第一天浏览次数<br>last_value() ： 比较每个用户浏览次数与最新一天浏览次数进行比较，查询返回当前浏览次数以及最新一天浏览次数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv,</span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account, hit_date)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.pv,</span><br><span class="line">    <span class="keyword">first_value</span>(a1.pv) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv1,</span><br><span class="line">    <span class="keyword">last_value</span>(a1.pv) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account  <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="rank、dense-rank、-row-number-排序函数"><a href="#rank、dense-rank、-row-number-排序函数" class="headerlink" title="rank、dense_rank、 row_number  排序函数"></a>rank、dense_rank、 row_number  排序函数</h3><blockquote><p>说明： rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位， 如1、2、2、4<br>dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位， 如1、2、2、3<br>row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等， 如1、2、3、4</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) row_number,</span><br><span class="line">    <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) <span class="keyword">rank</span>,</span><br><span class="line">    <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) <span class="keyword">dense_rank</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    lijie.test_rank</span><br></pre></td></tr></table></figure><table><thead><tr><th>a</th><th>row_number</th><th>rank</th><th>dense_rank</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>1</td><td>1</td></tr><tr><td>C</td><td>2</td><td>2</td><td>2</td></tr><tr><td>D</td><td>3</td><td>3</td><td>3</td></tr><tr><td>B</td><td>4</td><td>3</td><td>3</td></tr><tr><td>E</td><td>5</td><td>5</td><td>4</td></tr><tr><td>F</td><td>6</td><td>6</td><td>5</td></tr><tr><td>G</td><td>7</td><td>7</td><td>6</td></tr></tbody></table><hr><h3 id="业务问题"><a href="#业务问题" class="headerlink" title="业务问题"></a>业务问题</h3><ul><li>求点击【确认充值】按钮的上一步点击的名称</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">with</span> a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    btn_name,</span><br><span class="line">    lag(btn_name, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> create_timestamp) <span class="keyword">as</span> previous_btn_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-01'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    btn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    btn_name <span class="keyword">like</span> <span class="string">'确认支付'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    previous_btn_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    previous_btn_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    c <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">    <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><img src="http://plosti2dy.bkt.clouddn.com/%E7%A1%AE%E8%AE%A4%E6%94%AF%E4%BB%98%E4%B8%8A%E4%B8%80%E6%AD%A5.png" alt="确认支付上一步"></p><ul><li>上一步点击的名称我已经知道了， 现在要想 之前通过上一步点击这些条件之后， 再点击【确认支付】按钮的 去重uv</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">with</span> a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    btn_name,</span><br><span class="line">    lag(btn_name, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> create_timestamp) <span class="keyword">as</span> previous_btn_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-01'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    btn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    btn_name <span class="keyword">like</span> <span class="string">'确认支付'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    (previous_btn_name <span class="keyword">like</span> <span class="string">"%10元%"</span> <span class="keyword">or</span> </span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%30元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%50元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%10元%"</span> <span class="keyword">or</span> </span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%30元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%50元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%100元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%200元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%300元%"</span> )</span><br></pre></td></tr></table></figure><blockquote><p>125752</p></blockquote><hr><h1 id="临时需求"><a href="#临时需求" class="headerlink" title="临时需求"></a>临时需求</h1><h3 id="创建临时表"><a href="#创建临时表" class="headerlink" title="创建临时表"></a>创建临时表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.nine_android_user_version_10</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.client_android_log_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    user_account <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    app_version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br></pre></td></tr></table></figure><h3 id="原始日志中取数"><a href="#原始日志中取数" class="headerlink" title="原始日志中取数"></a>原始日志中取数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.nine_user_version_10</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>) <span class="keyword">as</span> user_account,</span><br><span class="line">    <span class="keyword">split</span>(url_par(url_query,<span class="string">'AppID'</span>),<span class="string">' '</span>)[<span class="number">1</span>] <span class="keyword">as</span> app_version</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    apache_log.client_ios_sensor</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-20'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    url_par(url_query,<span class="string">'AppID'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>),</span><br><span class="line">    <span class="keyword">split</span>(url_par(url_query,<span class="string">'AppID'</span>),<span class="string">' '</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="在-spark-中写-hive-循环-工具-zeppelim"><a href="#在-spark-中写-hive-循环-工具-zeppelim" class="headerlink" title="在 spark 中写 hive 循环, 工具 zeppelim"></a>在 spark 中写 hive 循环, 工具 zeppelim</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">%spark</span><br><span class="line"></span><br><span class="line">for( a &lt;- 0 until 30)&#123;</span><br><span class="line">        // val sql= s&quot;&quot;&quot;use default&quot;&quot;&quot;</span><br><span class="line">    // spark.sql(sql)</span><br><span class="line">    val sql = s&quot;&quot;&quot;</span><br><span class="line">    with a1 as (</span><br><span class="line">    select</span><br><span class="line">        user_account</span><br><span class="line">    from</span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">    where</span><br><span class="line">         hit_date between &quot;2018-11-01&quot; and date_add(&quot;2018-11-01&quot;,$&#123;a&#125;)</span><br><span class="line">    union all </span><br><span class="line">        select</span><br><span class="line">        user_account</span><br><span class="line">    from</span><br><span class="line">        computer_view.client_ios_log_view</span><br><span class="line">    where</span><br><span class="line">         hit_date between &quot;2018-11-01&quot; and date_add(&quot;2018-11-01&quot;,$&#123;a&#125;))</span><br><span class="line">    select</span><br><span class="line">        count(distinct user_account) as uv</span><br><span class="line">    from</span><br><span class="line">        a1</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    val data = spark.sql(sql)</span><br><span class="line">    println(&quot;day:&quot;, a, &quot;uv:&quot;, data.show())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h1><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。 </p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。</p><ol><li>首先， 用Python连接数据库</li></ol><blockquote><p>对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">conn = hive.Connection(host=<span class="string">'ip地址'</span>, port=<span class="number">10000</span>, username=<span class="string">'用户名'</span>, database = <span class="string">'default'</span>, auth=<span class="string">'NOSASL'</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 获得连接的游标</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置开始和结束时间</li></ol><blockquote><p>可以用python中的time函数设置时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startdate = <span class="string">'2018-09-01'</span></span><br><span class="line">enddate   = <span class="string">'2018-09-19'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>用Python中的format函数将日期传入{}中</li></ol><blockquote><ul><li>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。</li></ul><ul><li>日期用两个{}来代替， 用format函数将开始日期与结束日期传入</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 提取积分类uv,pv数据</span><br><span class="line"></span><br><span class="line">sql_jifenxinxi_an = &quot;&quot;&quot;select </span><br><span class="line">    count(distinct user_account) as uv, </span><br><span class="line">    count(1) as pv </span><br><span class="line">from </span><br><span class="line">    computer_view.client_android_log_view </span><br><span class="line">where </span><br><span class="line">    hit_date between &quot;&#123;&#125;&quot; and &quot;&#123;&#125;&quot; </span><br><span class="line">    and </span><br><span class="line">    (btn_position like &quot;服务-查询-积分信息%&quot; </span><br><span class="line">    or </span><br><span class="line">    btn_home = &quot;积分-扇形左&quot; </span><br><span class="line">    ) </span><br><span class="line">limit 1000&quot;&quot;&quot;.format(startdate,enddate)</span><br><span class="line"># format 插入时间</span><br><span class="line"></span><br><span class="line">cursor.execute(sql_jifenxinxi_an)</span><br><span class="line"># 运行此语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line">#fetchall():接收全部的返回结果行.</span><br></pre></td></tr></table></figure><p>我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 </p><hr><p>参考资料：<br><a href="https://book.douban.com/subject/25791255/" target="_blank" rel="noopener">Hive 编程指南</a><br><a href="https://www.iteblog.com/archives/tag/hive-technology/" target="_blank" rel="noopener">Hive的那些事</a><br><a href="https://hive.apache.org/" target="_blank" rel="noopener">Hive 官网</a><br><a href="http://lxw1234.com/archives/2015/06/317.htm" target="_blank" rel="noopener">一起学Hive</a><br><a href="https://blog.csdn.net/MrLevo520/article/details/76339075" target="_blank" rel="noopener">Hive性能优化上的一些总结</a><br><a href="https://www.iteblog.com/archives/category/hive/" target="_blank" rel="noopener">过往记忆——hive</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是-Hive&quot;&gt;&lt;a href=&quot;#什么是-Hive&quot; class=&quot;headerlink&quot; title=&quot;什么是 Hive&quot;&gt;&lt;/a&gt;什么是 Hive&lt;/h1&gt;&lt;p&gt;Hive 是一种建立在Hadoop文件系统上的数据仓库架构, 并对存储的数据进行分析和管理，
      
    
    </summary>
    
      <category term="编程语言" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Hive" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Hive/"/>
    
    
      <category term="Hive" scheme="https://zhangandyu.github.io/tags/Hive/"/>
    
  </entry>
  
  <entry>
    <title>类比汇总</title>
    <link href="https://zhangandyu.github.io/2019/03/30/%E7%B1%BB%E6%AF%94/"/>
    <id>https://zhangandyu.github.io/2019/03/30/类比/</id>
    <published>2019-03-29T16:00:00.000Z</published>
    <updated>2019-03-31T07:11:06.782Z</updated>
    
    <content type="html"><![CDATA[<p>知道这些就很好了！</p><p>这就好像你拿着一张地图，不可能一下子掌握其中所有的细节，但花几分钟搞清楚 “图例”（Legend）部分总是可以的，知道什么样的线标示的是公交车，什么样的线标示的是地铁，什么样的线标示的是桥梁，然后知道上北下南左西右东 —— 这之后，就可以开始慢慢研究地图了……</p><hr><p>在我们使用函数的过程中，我们常常有意忽略它的内部如何完成从输入到输出之间的处理过程 —— 这就好像我们平日里用灯泡一样，大多数情况下，我们只要知道开关的使用方法就够了 —— 至于为什么按到这个方向上灯会亮，为什么按到另外一个方向上灯会灭，并不是我们作为用户必须关心的事情……</p><p>当然，如果你是设计开关的人就不一样了，你必须知道其中的运作原理；但是，最终，你还是希望你的用户用最简单方便的操作界面，而不是必须搞懂所有原理才能够使用你所设计的产品……</p><hr><p>在任何一本编程书籍之中，关于字符串的内容总是很长 —— 就好像每本英语语法书中，关于动词的内容总是占全部内容的至少三分之二。</p><hr><p>教育就像一副眼镜。<br>戴上眼镜之前和之后，我们看到的其实是同样的世界；但是戴上眼镜之后，我们就看得更清楚。</p><hr><p>我们是这样一台计算机，厂商（我们的父母）并没有为我们提供详尽的说明书，也不负责定期升级我们的操作系统——即使他们并非故意。</p><hr><p>人与人之间很不一样，就好像计算机和计算机之间也很不一样，有些中央处理器（头脑）更强大一些，有些人的内存容量（记忆力）更大一些，有些人的硬盘空间（笔记与藏书）更大一些，有些人显示器（外表）更漂亮一些。</p><hr><p>很多人的处理器是落伍的，输入和输出设备常常残缺不全，内存小到没法用的底部，硬盘甚至根本就没有……至于连网设备么，真的很差，甚至真的还不如没有，因为即使连着网也因为缺乏通讯协议而完全无法使用…</p><hr><p>科学是由信息构成的，正如房子是用砖头盖的一样，可问题在于，正如仅仅一堆砖头放在那里的时候，我们不能称其为房子一样，一堆信息放在一块就叫科学，有点不像话……</p><hr><p>学习电脑编程的函数时，我把函数想象成铅笔刀，钝铅笔进去，锐利的铅笔出来，这个模型不依赖于图像，但是过程类似。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;知道这些就很好了！&lt;/p&gt;
&lt;p&gt;这就好像你拿着一张地图，不可能一下子掌握其中所有的细节，但花几分钟搞清楚 “图例”（Legend）部分总是可以的，知道什么样的线标示的是公交车，什么样的线标示的是地铁，什么样的线标示的是桥梁，然后知道上北下南左西右东 —— 这之后，就可以开
      
    
    </summary>
    
      <category term="素材" scheme="https://zhangandyu.github.io/categories/%E7%B4%A0%E6%9D%90/"/>
    
    
      <category term="资料" scheme="https://zhangandyu.github.io/tags/%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>算法-决策树</title>
    <link href="https://zhangandyu.github.io/2019/03/24/%E7%AE%97%E6%B3%95-%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>https://zhangandyu.github.io/2019/03/24/算法-决策树/</id>
    <published>2019-03-23T16:00:00.000Z</published>
    <updated>2019-04-18T07:58:36.101Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://read.pudn.com/downloads166/ebook/762719/ID3%20%CB%E3%B7%A8%BF%C9%CA%D3%BB%AF%BD%E2%B6%C1.pdf" target="_blank" rel="noopener">ID3算法过程</a></p><p><a href="https://www.jiqizhixin.com/articles/introduction-to-decision-tree-learning" target="_blank" rel="noopener">机器学习第一课：决策树学习概述与实现</a></p><p><a href="https://www.kaggle.com/learn/machine-learning" target="_blank" rel="noopener">kaggle learning</a></p><p><a href="https://marian5211.github.io/2018/03/19/%E3%80%90%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E3%80%91CART%E7%AE%97%E6%B3%95%E3%80%81%E5%86%B3%E7%AD%96%E6%A0%91%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">CART算法、决策树总结</a></p><h2 id="什么是决策树"><a href="#什么是决策树" class="headerlink" title="什么是决策树"></a>什么是决策树</h2><p>想像一下，一个女孩的妈妈给女孩介绍相亲对象的场景，当女孩在询问男孩的基本情况时， 她就已经在生成一个决策树了。<br> <img src="https://i.loli.net/2019/04/10/5cade5ac7e6ee.png" alt="决策树"></p><p>在日常的生活当中，我们经常会基于以往的经验来做判断。  当我们把判断背后的思考逻辑整理起来，你会发现，它其实是一个树状结构，也就是决策树</p><p>决策树本质上就是一系列  <code>if-then</code> 语句， 但关键是如何确定哪个属性先判断，哪个属性后判断。 我们在做决策树的时候，会经历两个阶段：<strong>构造和剪枝。</strong></p><hr><h2 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h2><p><strong>构造就是选择什么属性来作为判断节点的过程。 通过构造，从而生成一棵完整的决策树</strong></p><p>在了解决策树是如何构造之前， 我们先来了解三个概念：</p><blockquote><ul><li><strong>根节点</strong>：树最开始的那个节点， 也就是上图中的<code>身高超过170？</code></li><li><strong>子节点</strong>： 树中间的那些节点， 上图中的<code>月收入过万</code> <code>是否有房</code> <code>长得帅不帅</code></li><li><strong>叶节点</strong>： 树最底层的那些节点， 上图中的 <code>见</code> <code>不见</code></li></ul></blockquote><p>在构造决策树时， 哪个属性做根节点， 哪些属性做叶节点？如何选择判断是决策树中机器学习算法的关键， 就引出算法： <code>ID3</code>， <code>C4.5</code> 和  <code>CDAR</code>。</p><hr><h2 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h2><h3 id="ID3-算法原理"><a href="#ID3-算法原理" class="headerlink" title="ID3 算法原理"></a>ID3 算法原理</h3><p>我们常说一篇文章信息很多， 或者信息很少， 但却很难说清楚信息到底有多少。 比如，《习惯的力量》这本书到底有多少信息量。</p><p>直到 1948 年，信息论之父-香农提出了“<strong>信息熵</strong>”理论， 才解决了对信息的度量问题，让我们能够通过数学计算来确定信息的不确定程度。<strong>当事物越不确定时， 信息熵越大，H(X)度量了X的不确定性。</strong></p><blockquote><p>随机变量 X 的熵的表达式为：$$H(X) = -\sum_{i=1}^{n} p_{i} log p_{i}$$<br>其中 n 代表了 X 有 n 种不同的离散取值。 $p_{i}$ 代表了X 取值为 i 的概率，log为以2为底的对数。</p></blockquote><p>例如：<br>A：在 6 次相亲中， 女生有 3 次选择见面， 3 次选择不见。 则这则消息的信息熵为</p><p> $$H(X)  = -(\frac{3}{6}log\frac{3}{6} + \frac{3}{6}log\frac{3}{6})  = 1$$</p><p>B：在 6 次相亲中， 女生有 5 次选择见面，  1 次选择不见。则这则消息的信息熵为<br>$$H(X)  = -(\frac{5}{6}log\frac{5}{6} + \frac{1}{6}log\frac{1}{6}) =  0.65$$</p><p><strong>我们可以看到， 消息A的不确定性大于消息B， 所以信息熵也比较大。</strong></p><hr><ul><li>条件熵</li></ul><p>上面我们讨论了在一个变量下，消息的信息熵大小的计算。现在有两个变量，X 与Y,在已知随机变量Y 的条件下，随便变量X的不确定性还剩多少呢？</p><blockquote><p>已知<code>Y</code>的前提下，随机变量<code>X</code>的熵为<br>$$H(X|Y) = -\sum_{i=1}^{n}p(x_{i}, y_{i})logp(x_{i}| y_{i}) =  \sum_{j=1}^{n}p( y_{j})H(X|y_{j})$$</p></blockquote><p>我们刚才提到了<code>H(x)</code>度量了 <code>X</code> 的不确定性， 条件熵<code>H(X|Y)</code> 度量了在知道 <code>Y</code> 以后 <code>X</code> 的不确定性， 那么 <code>H(x)-H(X|Y)</code>呢？ </p><p><code>H(x)-H(X|Y)</code>度量了 <code>X</code> 在知道<code>Y</code>以后不确定性减少的程度， 记为<code>I(X,Y)</code>. 在决策树 <code>ID3</code> 算法中叫做<code>信息增益</code>。通过信息增益，来衡量通过哪个属性之后，信息不确定减小的程度最多。 </p><p><code>ID3</code>算法就是用信息增益大小来判断，当前节点应该用什么特征来构建决策树。 通过计算，信息增益最大的属性，最适合来建立决策树的当前节点。</p><p>以上就是ID3 算法的原理</p><hr><h3 id="ID3算法的计算过程"><a href="#ID3算法的计算过程" class="headerlink" title="ID3算法的计算过程"></a>ID3算法的计算过程</h3><p>在<a href="https://mp.weixin.qq.com/s/igRt9I-OqWSFId25PUJk-A" target="_blank" rel="noopener">决策树（一）</a>中，我们讨论了ID3算法的原理， 在这篇文章中，我们来一步步展现ID3算法的计算过程。 </p><p>我们用 ID3 算法来决定天气是否适合我们打篮球。 过去两周中，收集了14天的天气数据， 如下图所示：</p><table><thead><tr><th>编号</th><th>天气</th><th>户外</th><th>温度</th><th>风速</th><th>活动</th></tr></thead><tbody><tr><td>1</td><td>晴天</td><td>炎热</td><td>高</td><td>弱</td><td>取消</td></tr><tr><td>2</td><td>晴天</td><td>炎热</td><td>高</td><td>强</td><td>取消</td></tr><tr><td>3</td><td>阴天</td><td>炎热</td><td>高</td><td>弱</td><td>进行</td></tr><tr><td>4</td><td>雨天</td><td>温柔</td><td>高</td><td>弱</td><td>进行</td></tr><tr><td>5</td><td>雨天</td><td>凉爽</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>6</td><td>雨天</td><td>凉爽</td><td>正常</td><td>强</td><td>取消</td></tr><tr><td>7</td><td>阴天</td><td>凉爽</td><td>正常</td><td>强</td><td>进行</td></tr><tr><td>8</td><td>晴天</td><td>温柔</td><td>高</td><td>弱</td><td>取消</td></tr><tr><td>9</td><td>晴天</td><td>凉爽</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>10</td><td>雨天</td><td>温柔</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>11</td><td>晴天</td><td>温柔</td><td>正常</td><td>强</td><td>进行</td></tr><tr><td>12</td><td>阴天</td><td>温柔</td><td>高</td><td>强</td><td>进行</td></tr><tr><td>13</td><td>阴天</td><td>炎热</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>14</td><td>雨天</td><td>温柔</td><td>高</td><td>强</td><td>取消</td></tr></tbody></table><p>天气用四个属性来进行描述， <strong>户外， 天气，温度和湿度</strong>。 它们的属性分别为：</p><blockquote><p>天气 = {晴天， 阴天， 雨天}</p><p>户外 = {炎热，温柔， 凉爽}</p><p>温度 = {高，正常}</p><p>风速 = {弱， 强}</p></blockquote><h4 id="选择根节点："><a href="#选择根节点：" class="headerlink" title="选择根节点："></a>选择根节点：</h4><hr><h5 id="步骤1：计算决策属性的熵"><a href="#步骤1：计算决策属性的熵" class="headerlink" title="步骤1：计算决策属性的熵"></a>步骤1：计算决策属性的熵</h5><p>决策属性活动有14个记录， 其中9个活动可以进行，5个活动取消，则</p><p><img src="https://i.loli.net/2019/04/09/5cacacd92ae03.png" alt></p><p>计算熵为：</p><p>$H(决策)  = -(\frac{9}{14}log\frac{5}{14} + \frac{5}{14}log\frac{5}{14})  = 0.940$</p><hr><h5 id="步骤2：计算条件属性的熵"><a href="#步骤2：计算条件属性的熵" class="headerlink" title="步骤2：计算条件属性的熵"></a>步骤2：计算条件属性的熵</h5><p>样本共有四个条件属性， <strong>户外， 温度，湿度和风速</strong></p><hr><ol><li>风速的熵</li></ol><p><img src="https://i.loli.net/2019/04/09/5cacac9ee0f81.png" alt></p><p>计算分为2个过程，先计算属性值的熵， 再计算属性的熵</p><ul><li>风速分为风速强和风速弱， 我们分别计算这两个属性值的熵：</li></ul><p>$H(弱)  = -(\frac{6}{8}log\frac{6}{8} + \frac{2}{8}log\frac{2}{8})  = 0.811$</p><p>$H(强)  = -(\frac{3}{6}log\frac{3}{6} + \frac{3}{6}log\frac{3}{6})  = 1$</p><ul><li>属性的熵（在风速分别为强和弱的前提下，决策的熵）</li></ul><p>$H(决策，风速)  = \frac{8}{14}H(弱) + \frac{6}{14}H(强)   = 0.892$</p><hr><ol start="2"><li>户外的熵</li></ol><p><img src="https://i.loli.net/2019/04/09/5cacad8ee845a.png" alt></p><ul><li>户外分为凉爽、温柔和炎热， 我们分别计算这三个属性值的熵：</li></ul><p>$H(凉爽)  = -(\frac{3}{4}log\frac{3}{4} + \frac{1}{4}log\frac{1}{4})  = 0.811$</p><p>$H(温柔)  = -(\frac{4}{6}log\frac{4}{6} + \frac{2}{6}log\frac{2}{6})  = 0.918$</p><p>$H(炎热)  = -(\frac{2}{4}log\frac{2}{4} + \frac{2}{4}log\frac{2}{4})  = 1 $</p><ul><li>属性的熵</li></ul><p>$H(决策，户外)  = \frac{4}{14}H(凉爽) + \frac{6}{14}H(温柔)+ \frac{4}{14}H(炎热)  = 0.911 $</p><hr><ol start="3"><li>天气的熵<br><img src="https://i.loli.net/2019/04/09/5cacb1e5882a0.png" alt></li></ol><ul><li>天气分为晴天、阴天和雨天， 我们分别计算这三个属性值的熵：</li></ul><p>$H(晴天)  = -(\frac{2}{5}log\frac{2}{5} + \frac{3}{5}log\frac{3}{5})  = 0.971$</p><p>$H(阴天)  = -(\frac{4}{4}log\frac{4}{4} )= 0$ <strong>熵为0表示信息完全确定，没必要再分</strong></p><p>$H(雨天)  = -(\frac{2}{5}log\frac{2}{5} + \frac{3}{5}log\frac{3}{5})  = 0.971$</p><ul><li>属性的熵<br>$H(决策，天气)  = \frac{5}{14}H(晴天) + \frac{5}{14}H(雨天) + \frac{4}{14}H(阴天)   = 0.693 $</li></ul><hr><ol start="4"><li>温度的熵<br><img src="https://i.loli.net/2019/04/09/5cacb3b0b25cf.png" alt></li></ol><ul><li>温度分为高、低， 我们分别计算这两个属性值的熵：</li></ul><p>$H(高)  = -(\frac{4}{7}log\frac{4}{7} + \frac{3}{7}log\frac{3}{7})  = 0.985$</p><p>$H(正常)  = -(\frac{1}{7}log\frac{1}{7} + \frac{6}{7}log\frac{6}{7})  =0.591 $</p><ul><li><p>属性的熵</p><p>$H(决策，温度)  = \frac{7}{14}H(高) + \frac{7}{14}H(正常)   = 0.789 $</p></li></ul><hr><h5 id="步骤3：-计算各属性的信息增益"><a href="#步骤3：-计算各属性的信息增益" class="headerlink" title="步骤3： 计算各属性的信息增益"></a>步骤3： 计算各属性的信息增益</h5><ol><li>风速的信息增益 =   H(决策) - H(决策，风速) = 0.940 -  0.892 = 0.048</li><li>户外的信息增益 =  H(决策) - H(户外，风速) = 0.940 -  0.911  = 0.029 </li><li>天气的信息增益 =  H(决策) - H(天气，风速) = 0.940 - 0.693 = <strong>0.246</strong></li><li>温度的信息增益 =  H(决策) - H(温度，风速) = 0.940 - 0.789 = 0.151</li></ol><p>条件属性<strong>天气</strong>有最大的信息增益， 所以<strong>天气</strong>作为根节点。 </p><p><img src="https://i.loli.net/2019/04/10/5cacc357869be.png" alt></p><h4 id="选择子节点"><a href="#选择子节点" class="headerlink" title="选择子节点"></a>选择子节点</h4><p><strong>晴天节点下， 检验哪个属性？</strong><br>因为已经使用了天气作为根节点，所以只剩三个变量： 户外、温度和风速</p><h5 id="第一步：计算天气为晴天的熵"><a href="#第一步：计算天气为晴天的熵" class="headerlink" title="第一步：计算天气为晴天的熵"></a>第一步：计算天气为晴天的熵</h5><p> 从前面可知， H（晴天） = 0.970</p><h5 id="第二步：计算天气为晴天下，各属性的熵"><a href="#第二步：计算天气为晴天下，各属性的熵" class="headerlink" title="第二步：计算天气为晴天下，各属性的熵"></a>第二步：计算天气为晴天下，各属性的熵</h5><ol><li>户外的熵<br><img src="https://i.loli.net/2019/04/10/5cacc6b0de0fa.png" alt></li></ol><ul><li>户外各属性值的熵：<blockquote><p>H（凉爽） = 0 （信息确定）<br>H（温柔） = 1<br>H（炎热） = 0 （信息确定）</p></blockquote></li><li>户外的熵<br>$$H（晴天|户外） = \frac{1}{5}H（凉爽）+  \frac{2}{5}H（温柔）+ \frac{2}{5}H（炎热） = 0.4$$</li></ul><ol start="2"><li>温度的熵<br><img src="https://i.loli.net/2019/04/10/5cacc8dada342.png" alt></li></ol><ul><li><p>温度各属性值的熵</p><blockquote><p>H(高) = 0<br>H(正常) = 0</p></blockquote></li><li><p>温度的熵<br>H（晴天|温度） = 0</p></li></ul><ol start="3"><li>风速的熵<br><img src="https://i.loli.net/2019/04/10/5cacc9cf14b36.png" alt></li></ol><ul><li><p>风速各属性值的熵<br>$H（强） = -(\frac{1}{2}log\frac{1}{2} + \frac{1}{2}log\frac{1}{2}) = 1$<br>$H（弱） = -(\frac{1}{3}log\frac{1}{3} + \frac{2}{3}log\frac{2}{3}) =0.918$</p></li><li><p>风速的熵<br>$H（晴天|风速） = \frac{2}{5}H（强） + \frac{3}{5}H（弱） = 0.9508$</p></li></ul><h5 id="第三步：计算在晴天下，各属性的信息增益"><a href="#第三步：计算在晴天下，各属性的信息增益" class="headerlink" title="第三步：计算在晴天下，各属性的信息增益"></a>第三步：计算在晴天下，各属性的信息增益</h5><ol><li>温度的信息增益 = H（晴天） - H（晴天|温度） = 0.970</li><li>户外的信息增益 = H（晴天） - H（晴天|户外） = 0.570</li><li>风速的信息增益 = H（晴天） - H（晴天|风速） = 0.019</li></ol><p>条件属性<strong>温度</strong>有最大的信息增益， 所以<strong>温度</strong>作为根节点。</p><p><img src="https://i.loli.net/2019/04/10/5cacccce3a72d.png" alt></p><h5 id="雨天节点下，检验哪个属性"><a href="#雨天节点下，检验哪个属性" class="headerlink" title="雨天节点下，检验哪个属性"></a>雨天节点下，检验哪个属性</h5><p>雨天与晴天计算同理， 故不再计算。 </p><h4 id="决策树计算结果"><a href="#决策树计算结果" class="headerlink" title="决策树计算结果"></a>决策树计算结果</h4><ul><li>最后根据计算，得出的决策树分类如图所示：</li></ul><p><img src="https://i.loli.net/2019/04/10/5caccdc86d4b0.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以上就是ID3分类算法计算原理的全过程</span><br></pre></td></tr></table></figure><hr><h3 id="用-python3-实现-ID3算法"><a href="#用-python3-实现-ID3算法" class="headerlink" title="用 python3 实现 ID3算法"></a>用 python3 实现 ID3算法</h3><h4 id="1-导入数据库、常用模块、函数"><a href="#1-导入数据库、常用模块、函数" class="headerlink" title="1. 导入数据库、常用模块、函数"></a>1. 导入数据库、常用模块、函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> sklearn  <span class="keyword">as</span> tree</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"><span class="keyword">import</span> pydotplus</span><br></pre></td></tr></table></figure><h4 id="2-读取原始数据"><a href="#2-读取原始数据" class="headerlink" title="2. 读取原始数据"></a>2. 读取原始数据</h4><blockquote><p>我们用决策树（二）中的打篮球数据来进行决策树的建立</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = pd.read_excel(<span class="string">r'C:\Users\Administrator\Desktop\tree\打篮球数据.xlsx'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看数据前5行</span></span><br><span class="line">data.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>天气</th><th>户外</th><th>温度</th><th>风速</th><th>活动</th></tr></thead><tbody><tr><td>0</td><td>晴天</td><td>炎热</td><td>高</td><td>弱</td><td>取消</td></tr><tr><td>1</td><td>晴天</td><td>炎热</td><td>高</td><td>强</td><td>取消</td></tr><tr><td>2</td><td>阴天</td><td>炎热</td><td>高</td><td>弱</td><td>进行</td></tr><tr><td>3</td><td>雨天</td><td>温柔</td><td>高</td><td>弱</td><td>进行</td></tr><tr><td>4</td><td>雨天</td><td>凉爽</td><td>正常</td><td>弱</td><td>进行</td></tr></tbody></table><h4 id="3-对数据进行预处理"><a href="#3-对数据进行预处理" class="headerlink" title="3. 对数据进行预处理"></a>3. 对数据进行预处理</h4><blockquote><p>scikit_learn默认不支持文本标签，使用 pandas库将文本标签转化成数字</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datas[<span class="string">'活动'</span>] = datas[<span class="string">'活动'</span>].map(&#123;<span class="string">'取消'</span>:<span class="number">0</span>, <span class="string">'进行'</span>:<span class="number">1</span>&#125;)</span><br><span class="line">datas[<span class="string">'风速'</span>] = datas[<span class="string">'风速'</span>].map(&#123;<span class="string">'弱'</span>:<span class="number">0</span>, <span class="string">'强'</span>:<span class="number">1</span>&#125;)</span><br><span class="line">datas[<span class="string">'温度'</span>] = datas[<span class="string">'温度'</span>].map(&#123;<span class="string">'正常'</span>:<span class="number">0</span>, <span class="string">'高'</span>:<span class="number">1</span>&#125;)</span><br><span class="line">datas[<span class="string">'户外'</span>] = datas[<span class="string">'户外'</span>].map(&#123;<span class="string">'凉爽'</span>:<span class="number">0</span>, <span class="string">'温柔'</span>:<span class="number">1</span>, <span class="string">'炎热'</span>:<span class="number">2</span>&#125;)</span><br><span class="line">datas[<span class="string">'天气'</span>] = datas[<span class="string">'天气'</span>].map(&#123;<span class="string">'雨天'</span>:<span class="number">0</span>, <span class="string">'阴天'</span>:<span class="number">1</span>, <span class="string">'晴天'</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.head()</span><br></pre></td></tr></table></figure><table><thead><tr><th>天气</th><th>户外</th><th>温度</th><th>风速</th><th>活动</th></tr></thead><tbody><tr><td>0</td><td>2</td><td>2</td><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>2</td><td>2</td><td>1</td><td>1</td><td>0</td></tr><tr><td>2</td><td>1</td><td>2</td><td>1</td><td>0</td><td>1</td></tr><tr><td>3</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td></tr><tr><td>4</td><td>0</td><td>0</td><td>0</td><td>0</td><td>1</td></tr></tbody></table><h4 id="4-给定节点与结果"><a href="#4-给定节点与结果" class="headerlink" title="4. 给定节点与结果"></a>4. 给定节点与结果</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">'天气'</span>,<span class="string">'户外'</span>,<span class="string">'温度'</span>,<span class="string">'风速'</span>]</span><br><span class="line">train_data = datas[data]</span><br><span class="line">train_labels = datas[<span class="string">'活动'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>将数据转化成机器学习中可用的数值型特征</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.feature_extraction <span class="keyword">import</span> DictVectorizer</span><br><span class="line">dvec = DictVectorizer(sparse = <span class="keyword">False</span>)</span><br><span class="line">train_data = dvec.fit_transform(train_data.to_dict(orient=<span class="string">'record'</span>))</span><br></pre></td></tr></table></figure><blockquote><p>查看转换后的数据</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(train_data)</span><br></pre></td></tr></table></figure><pre><code>[&apos;天气&apos;, &apos;户外&apos;, &apos;温度&apos;, &apos;风速&apos;]</code></pre><h4 id="5-进行决策树"><a href="#5-进行决策树" class="headerlink" title="5. 进行决策树"></a>5. 进行决策树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line">decision_tree = DecisionTreeClassifier(criterion =<span class="string">'entropy'</span>)</span><br><span class="line">decision_tree.fit(train_data, train_labels)</span><br></pre></td></tr></table></figure><pre><code>DecisionTreeClassifier(class_weight=None, criterion=&apos;entropy&apos;, max_depth=None,            max_features=None, max_leaf_nodes=None,            min_impurity_decrease=0.0, min_impurity_split=None,            min_samples_leaf=1, min_samples_split=2,            min_weight_fraction_leaf=0.0, presort=False, random_state=None,            splitter=&apos;best&apos;)</code></pre><h4 id="6-查看决策"><a href="#6-查看决策" class="headerlink" title="6. 查看决策"></a>6. 查看决策</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成pdf文件</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> export_graphviz</span><br><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"><span class="keyword">import</span> pydotplus</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"></span><br><span class="line">dot_data = tree.export_graphviz(decision_tree, out_file=<span class="keyword">None</span>,feature_names=decision_tree.feature_importances_,</span><br><span class="line">                                  filled=<span class="keyword">True</span>, rounded=<span class="keyword">True</span>, special_characters=<span class="keyword">True</span>)</span><br><span class="line">graph = pydotplus.graph_from_dot_data(dot_data)</span><br><span class="line"><span class="comment"># 保存pdf文件</span></span><br><span class="line">graph.write_pdf(<span class="string">"treetwo.pdf"</span>)</span><br></pre></td></tr></table></figure><blockquote><p> 打开pdf文件，可以看到生成的决策树</p></blockquote><p><img src="https://i.loli.net/2019/04/12/5cb046a840a5e.png" alt></p><blockquote><p> 查看决策树-方法2</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotData = tree.export_graphviz(decision_tree, out_file=<span class="keyword">None</span>)</span><br><span class="line">print(dotData)</span><br></pre></td></tr></table></figure><pre><code>digraph Tree {node [shape=box] ;0 [label=&quot;X[2] &lt;= 0.5\nentropy = 0.94\nsamples = 14\nvalue = [5, 9]&quot;] ;1 [label=&quot;X[0] &lt;= 0.5\nentropy = 0.592\nsamples = 7\nvalue = [1, 6]&quot;] ;0 -&gt; 1 [labeldistance=2.5, labelangle=45, headlabel=&quot;True&quot;] ;2 [label=&quot;X[3] &lt;= 0.5\nentropy = 0.918\nsamples = 3\nvalue = [1, 2]&quot;] ;1 -&gt; 2 ;3 [label=&quot;entropy = 0.0\nsamples = 2\nvalue = [0, 2]&quot;] ;2 -&gt; 3 ;4 [label=&quot;entropy = 0.0\nsamples = 1\nvalue = [1, 0]&quot;] ;2 -&gt; 4 ;5 [label=&quot;entropy = 0.0\nsamples = 4\nvalue = [0, 4]&quot;] ;1 -&gt; 5 ;6 [label=&quot;X[0] &lt;= 1.5\nentropy = 0.985\nsamples = 7\nvalue = [4, 3]&quot;] ;0 -&gt; 6 [labeldistance=2.5, labelangle=-45, headlabel=&quot;False&quot;] ;7 [label=&quot;X[0] &lt;= 0.5\nentropy = 0.811\nsamples = 4\nvalue = [1, 3]&quot;] ;6 -&gt; 7 ;8 [label=&quot;X[3] &lt;= 0.5\nentropy = 1.0\nsamples = 2\nvalue = [1, 1]&quot;] ;7 -&gt; 8 ;9 [label=&quot;entropy = 0.0\nsamples = 1\nvalue = [0, 1]&quot;] ;8 -&gt; 9 ;10 [label=&quot;entropy = 0.0\nsamples = 1\nvalue = [1, 0]&quot;] ;8 -&gt; 10 ;11 [label=&quot;entropy = 0.0\nsamples = 2\nvalue = [0, 2]&quot;] ;7 -&gt; 11 ;12 [label=&quot;entropy = 0.0\nsamples = 3\nvalue = [3, 0]&quot;] ;6 -&gt; 12 ;}</code></pre><p>访问 <a href="http://www.webgraphviz.com/" target="_blank" rel="noopener">WebGraphviz</a> 并粘贴输出，点击 Generate Graph</p><p><img src="https://i.loli.net/2019/04/12/5cb0479b69824.png" alt></p><p>可以看到它先基于<code>温度</code>进行分割，再基于<code>风速</code>进行分割。</p><h4 id="7-测试决策树​"><a href="#7-测试决策树​" class="headerlink" title="7. 测试决策树​"></a>7. 测试决策树​</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(decision_tree.predict([[<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]]))</span><br><span class="line"></span><br><span class="line">print(decision_tree.predict([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>]]))</span><br><span class="line"></span><br><span class="line">print(decision_tree.predict([[<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>]]))</span><br></pre></td></tr></table></figure><blockquote><p>[1]  [1]  [0]</p></blockquote><blockquote><p>输出1， 证明活动可以进行；输出0，证明活动取消。</p></blockquote><h3 id="ID3-的缺陷"><a href="#ID3-的缺陷" class="headerlink" title="ID3 的缺陷"></a>ID3 的缺陷</h3><p>ID3算法相对简单，并且可解释性强。但同样也存在缺陷。在上面的计算中，我们有意忽略了<code>编号</code>这一列。</p><p>如果把<code>编号</code>也作为一个候选划分属性，则它的信息增益远大于其他候选划分属性。因为<code>编号</code>将产生<code>14</code>个分支，每个分支只包含一个样本，这些分支节点的纯度已经达到最大。然而，这样的决策数不会有泛化能力，无法对新样本进行有效预测。</p><h2 id="C4-5算法"><a href="#C4-5算法" class="headerlink" title="C4.5算法"></a>C4.5算法</h2><p>ID3算法利用的信息增益，对取值数目较多的属性有所偏好，为减少这种偏好可能带来的不利影响， C4.5算法在其基础上进行升级，利用信息增益率来选择划分最优属性。</p><ul><li>信息增益率 = 信息增益 / 属性熵 = I（x，y） /  H(x)</li></ul><p>C4.5是ID3算法的改进版本，针对四个主要的不足进行改进：</p><blockquote><ul><li>不能处理连续特征</li><li>用信息增益作为标准容易偏向于取值较多的特征</li><li>不能处理缺失值</li><li>容易发生过拟合问题</li></ul></blockquote><h4 id="C4-5-算法的缺点："><a href="#C4-5-算法的缺点：" class="headerlink" title="C4.5 算法的缺点："></a>C4.5 算法的缺点：</h4><ul><li>在构造树的过程中，需要对数据集进行多次的顺序扫描和排序，因而导致算法的低效。</li><li>另外，C4.5只适合于能够驻留于内存的数据集，当训练集大得无法在内存容纳时程序无法运行。</li></ul><hr><h1 id="对决策树进行剪枝"><a href="#对决策树进行剪枝" class="headerlink" title="对决策树进行剪枝"></a>对决策树进行剪枝</h1><p>ID3 算法对数据递归的产生决策树，直到不能继续进行下去，这样产生的决策树往往对训练数据的分类很准确，但对未知的测试数据的分类却并没有那么准确，即会出现过拟合现象。</p><p>过拟合现象的原因是在生成决策树时，过多地考虑如何提高对训练数据的正确分类，从而构建出过于复杂的决策树。解决办法是对已生成的决策树进行剪枝。</p><h1 id="CART算法-分类回归树"><a href="#CART算法-分类回归树" class="headerlink" title="CART算法 - 分类回归树"></a>CART算法 - 分类回归树</h1><p><a href="https://blog.csdn.net/acdreamers/article/details/44664481" target="_blank" rel="noopener">决策树之CART算法</a></p><p>ID3 和 C4.5 算法可以生成二叉树或多叉树，而CART 算法只支持二叉树。 同时CART算法既可以作为<code>分类树</code>， 也可以作为<code>回归数</code>。</p><blockquote><p>分类和回归的区别在于输出变量的类型。</p></blockquote><blockquote><ul><li>定量输出称为回归，或者说是连续变量预测；</li><li>定性输出称为分类，或者说是离散变量预测。</li></ul></blockquote><blockquote><p>举个例子：</p><ul><li>预测明天的气温是多少度，这是一个回归任务；</li><li>预测明天是阴、晴还是雨，就是一个分类任务。</li></ul></blockquote><h2 id="CART算法的计算原理"><a href="#CART算法的计算原理" class="headerlink" title="CART算法的计算原理"></a>CART算法的计算原理</h2><p>CART算法生成的决策树是结构简洁的二叉树,它在每一步决策时只能是<code>是</code>或者<code>否</code>。<br>CART算法在构建决策树时，主要分为两步：</p><blockquote><ul><li>生成决策树</li><li>对决策树进行剪枝</li></ul></blockquote><p>我们知道， ID3 选择节点属性是基于信息增益来做判断， 而 CART和ID3类似，只不过选择时是使用 基尼系数来做判断。 </p><p>决策树分类的过程本身是一个不确定性降低的过程。 基尼系数本身反应了样本的不确定度。 当基尼系数越小时，说明样本之间的差异性小，不确定程度低。 所以CART 算法在构建分类树是，会选择基尼系数较小的属性作为节点的划分。 </p><p>t为节点， 则该节点的基尼系数计算公式： </p><blockquote><p>$GINI（t） = 1 - \sum_{k}^{}[ p(C_{k}|t )]^{2}$</p></blockquote><blockquote><ul><li>$ p(C_{k}|t $ 表示 t节点属于类别$C_{k}$的概率</li><li>节点t的基尼系数等于 1减去各类别 $C_{k}$概率平方和</li></ul></blockquote><p>例如：</p><ol><li>6个人都去打篮球</li><li><p>3个人打篮球，3个人不打篮球</p><p>条件1中， 所有人都去打篮球， 所以 $C_{k}|t = 1$ , $[ p(C_{k}|t )]^{2} = 1$, 因此$GINI（t）= 1-1=0$</p></li></ol><p>条件2中，一半人打篮球，一半人不打篮球。所以：$ p(C_{1}|t ) = 0.5$， $ p(C_{2}|t ) = 0.5$。 因此$GINI（t）= 1-（0.5^{2}+0.5^{2}）=0.5$</p><p>通过2个基尼系数，可以看到， 条件1的基尼系数最小，样本最稳定。而条件2的样本不稳定行更大。 </p><p><img src="https://i.loli.net/2019/04/13/5cb1614e8b296.jpg" alt></p><p>节点D的基尼系数等于节点D1和D2的归一化基尼系数之和， 用公式表示为：</p><p>$$GINI（D,A） = \frac{D_{1}}{D}GINI（D_{1}）+\frac{D_{2}}{D}GINI（D_{2}）$$</p><p>所以 节点D 的基尼系数为：$GINI（D,A） = \frac{6}{12}GINI（D_{1}）+\frac{6}{12}GINI（D_{2}）$ = 0.25</p><p>节点D被属性A划分后的基尼系数越大，样本集合的不确定性越大。 </p><h1 id="CART算法计算过程"><a href="#CART算法计算过程" class="headerlink" title="CART算法计算过程"></a>CART算法计算过程</h1><p>数据：</p><table><thead><tr><th>编号</th><th>天气</th><th>户外</th><th>温度</th><th>风速</th><th>活动</th></tr></thead><tbody><tr><td>1</td><td>晴天</td><td>炎热</td><td>高</td><td>弱</td><td>取消</td></tr><tr><td>2</td><td>晴天</td><td>炎热</td><td>高</td><td>强</td><td>取消</td></tr><tr><td>3</td><td>阴天</td><td>炎热</td><td>高</td><td>弱</td><td>进行</td></tr><tr><td>4</td><td>雨天</td><td>温柔</td><td>高</td><td>弱</td><td>进行</td></tr><tr><td>5</td><td>雨天</td><td>凉爽</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>6</td><td>雨天</td><td>凉爽</td><td>正常</td><td>强</td><td>取消</td></tr><tr><td>7</td><td>阴天</td><td>凉爽</td><td>正常</td><td>强</td><td>进行</td></tr><tr><td>8</td><td>晴天</td><td>温柔</td><td>高</td><td>弱</td><td>取消</td></tr><tr><td>9</td><td>晴天</td><td>凉爽</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>10</td><td>雨天</td><td>温柔</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>11</td><td>晴天</td><td>温柔</td><td>正常</td><td>强</td><td>进行</td></tr><tr><td>12</td><td>阴天</td><td>温柔</td><td>高</td><td>强</td><td>进行</td></tr><tr><td>13</td><td>阴天</td><td>炎热</td><td>正常</td><td>弱</td><td>进行</td></tr><tr><td>14</td><td>雨天</td><td>温柔</td><td>高</td><td>强</td><td>取消</td></tr></tbody></table><p><img src="https://i.loli.net/2019/04/13/5cb1a1216092e.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gini(t1)  = <span class="number">1</span> -(<span class="number">3</span>/<span class="number">5</span>)<span class="number">2</span>-(<span class="number">2</span>/<span class="number">5</span>)<span class="number">2</span> = <span class="number">0.48</span></span><br><span class="line">gini(t2)  = <span class="number">1</span> -(<span class="number">0</span>/<span class="number">4</span>)<span class="number">2</span>-(<span class="number">4</span>/<span class="number">4</span>)<span class="number">2</span> = <span class="number">0</span></span><br><span class="line">gini(t1)  = <span class="number">1</span> -(<span class="number">3</span>/<span class="number">5</span>)<span class="number">2</span>-(<span class="number">2</span>/<span class="number">5</span>)<span class="number">2</span> = <span class="number">0.48</span></span><br><span class="line">gini(t) = <span class="number">5</span>/<span class="number">14</span> * <span class="number">0.48</span> * <span class="number">2</span> = <span class="number">0.343</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/13/5cb1a345ac88e.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gini(t1)  = <span class="number">1</span> -(<span class="number">4</span>/<span class="number">7</span>)<span class="number">2</span>-(<span class="number">3</span>/<span class="number">7</span>)<span class="number">2</span> = <span class="number">0.48979591836734704</span></span><br><span class="line">gini(t2)  = <span class="number">1</span> -(<span class="number">1</span>/<span class="number">7</span>)<span class="number">2</span>-(<span class="number">6</span>/<span class="number">7</span>)<span class="number">2</span> = <span class="number">0.24489795918367352</span></span><br><span class="line">gini(t) =</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/13/5cb1a12165255.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gini(t1)  = <span class="number">1</span> -(<span class="number">3</span>/<span class="number">6</span>)<span class="number">2</span>-(<span class="number">3</span>/<span class="number">6</span>)<span class="number">2</span> = <span class="number">0.5</span></span><br><span class="line">gini(t2)  = <span class="number">1</span> -(<span class="number">2</span>/<span class="number">8</span>)<span class="number">2</span>-(<span class="number">6</span>/<span class="number">8</span>)<span class="number">2</span> = <span class="number">0.375</span></span><br><span class="line">gini(t) =</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/04/13/5cb1a12163b87.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gini(t1)  = <span class="number">1</span> -(<span class="number">1</span>/<span class="number">4</span>)<span class="number">2</span>-(<span class="number">3</span>/<span class="number">4</span>)<span class="number">2</span> = <span class="number">0.375</span></span><br><span class="line">gini(t2)  = <span class="number">1</span> -(<span class="number">2</span>/<span class="number">6</span>)<span class="number">2</span>-(<span class="number">4</span>/<span class="number">6</span>)<span class="number">2</span> = <span class="number">0.44444444444444</span></span><br><span class="line">gini(t1)  = <span class="number">1</span> -(<span class="number">2</span>/<span class="number">4</span>)<span class="number">2</span>-(<span class="number">2</span>/<span class="number">4</span>)<span class="number">2</span> = <span class="number">0.5</span></span><br><span class="line">gini(t) =</span><br></pre></td></tr></table></figure><!-- ## 决策树有什么用## 决策树实现过程步骤是什么## 决策树底层的算法原理是什么## 决策树如何用python实现## 决策树的优点与缺点## 决策数的案例应用 --><!-- 1.简述决策树的原理2.简述决策树的构建过程3.信息增益率有什么优缺点？4.如何对决策树进行剪枝？5.为什么决策树需要进行剪枝?6.C4.5对ID3做了哪些改进？7.C4.5决策树算法如何处理连续数值型属性？8.C4.5与CART的区别9.简述一下分类树和回归树10.CART如何生成回归树？11.CART树对离散特征取值数目>=3的特征如何处理？12.决策树对缺失值如何处理？13.如果决策树属性用完了仍未对决策树完成划分应该怎么办？14.如何避免决策树的过拟合？15.决策树需要进行归一化处理吗？16.常用的决策树一定是二叉树吗？二叉决策树与多分支决策树相比各有什么特点？17.你认为在一棵决策树构建过程中较为耗时的步骤是什么？18.你正在一个时间序列数据集上工作，开始用决策树算法，因为你知道它在所有类型数据上的表现都不错。后来，你尝试了时间序列回归模型，并得到了比决策树模型更高的精度。这种情况会发生吗？为什么？ 19.决策树在选择特征进行分类时一个特征被选择过后，之后还会选择到这个特征吗？20.和其他模型比，决策树有哪些优点和缺点？ --><!-- # 决策树## 构造**选择什么属性作为节点**> 存在三种节点> * 根节点> >树最开始的节点> * 内部节点> > 树中间的那些节点> * 叶节点> > 最底部节点-决策结果节点之间存在父子关系，在构造过程中，需要解决三个重要问题：> * 选择哪些属性作为根节点> * 选择哪些属性作为子节点> * 什么时候停止并得到叶节点----### 如何判断哪些节点作为根节点** 1.纯度与信息熵*** **纯度**> 让目标的分析最小* ** 信息熵**>  表示信息的不确定度。**2. 基于纯度，三种构建决策树的方法*** ** ID3算法-信息增益 **> 作用：划分带来纯度的提高，信息熵的下降> > 优点： 方法简单>> 缺点：> * 对噪声敏感，有些属性可能对分类任务没有多大的作用，但仍会被选为最优属性。* ** C4.5算法-信息增益率 **> 原理： 信息增益率 = 信息增益 / 属性熵>> 目前使用最广的算法> >优点：> * ID3 构造决策树，容易产生过拟合情况。但 C4.5中，会在决策树构造之后采用悲观剪枝，提升了决策树的泛化能力。> * 可以处理连续属性情况，对连续的属性进行离散化处理。> * 针对数据集不完整的情况，也可以进行处理。>> 缺点：需对数据集进行多次扫描，算法效率相对较低。* ** Cart算法-基尼指数 **>既可以做`分类树`，也可以做`回归树`> * 分类树-根据基尼指数作为评判标准>> 处理离散数据-数据种类有限，输出样本的类别。> * 回归树-根据样本的离散程度来进行评判>> 对连续性数值进行预测-数据在某个区间内都有取值的可能，输出一个数值。> 原理： 基尼系数反应样本的不确定度。 Cart算法属性采用基尼系数。> 剪枝： CCP方法，后剪枝<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 Cart算法 来创建分类树</span></span><br><span class="line"><span class="comment"># encoding = utf-8</span></span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">iris = load_iris()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取特征集合分类标识</span></span><br><span class="line">features = iris.data</span><br><span class="line">labels = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机抽取33%的数据作为测试集，其余为训练集</span></span><br><span class="line">train_features, test_features, train_labels, test_labels = train_test_split(features, labels, test_size = <span class="number">0.33</span>, random_state=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建CART分类树</span></span><br><span class="line">clf = DecisionTreeClassifier(criterion = <span class="string">'gini'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合构造 CART 分类树</span></span><br><span class="line">clf = clf.fit(train_features, train_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 CART 分类树做预测</span></span><br><span class="line">test_predict = clf.predict(test_features)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测结果与测试集结果作比对</span></span><br><span class="line">score = accuracy_score(test_labels, test_predict)</span><br><span class="line">print(<span class="string">"Cart 分类树准确率 %.4lf"</span> % score)</span><br></pre></td></tr></table></figure><pre><code>Cart 分类树准确率 0.9800</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用CART 算法， 来创建回归数</span></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_boston</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> r2_score, mean_absolute_error, mean_squared_error</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备数据集</span></span><br><span class="line">boston = load_boston()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 探索数据</span></span><br><span class="line"><span class="comment"># print(boston.feature_names)</span></span><br><span class="line"><span class="comment"># 获取特征集合房价</span></span><br><span class="line">features = boston.data</span><br><span class="line">prices = boston.target</span><br><span class="line"><span class="comment"># 随机抽取33%的数据作为测试集，其余为训练集</span></span><br><span class="line">train_features, test_features, train_price, test_price = train_test_split(features, prices, test_size = <span class="number">0.33</span>)</span><br><span class="line"><span class="comment"># 创建 CART 回归数</span></span><br><span class="line">dtr = DecisionTreeRegressor()</span><br><span class="line"><span class="comment"># 拟合构造 CART 回归数</span></span><br><span class="line">dtr.fit(train_features, train_price)</span><br><span class="line"><span class="comment"># 预测测试集中的房价</span></span><br><span class="line">predict_price = dtr.predict(test_features)</span><br><span class="line"><span class="comment"># 测试集的结果评价</span></span><br><span class="line">print(<span class="string">'回归树二乘偏差均值:'</span>, mean_squared_error(test_price, predict_price))</span><br><span class="line">print(<span class="string">'回归树绝对值偏差均值:'</span>, mean_absolute_error(test_price, predict_price))</span><br></pre></td></tr></table></figure><pre><code>回归树二乘偏差均值: 13.753413173652696回归树绝对值偏差均值: 2.7508982035928145</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># features</span></span><br><span class="line"><span class="comment"># prices</span></span><br></pre></td></tr></table></figure><hr><h2 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h2><p>给决策瘦身，防止“过拟合”现象的发生。</p><p><strong> 什么是“过拟合”现象</strong></p><blockquote><p>指模型的训练结果<code>太好了</code>, 以至于在实际应用的过程中，会存在<code>死板</code>的情况，导致分类错误。会把训练集中一些数据的特点当成所有数据的特点，但这个特点并不是全部数据的特点。导致模型的<code>泛化能力差</code></p></blockquote><p><strong> 造成 <code>过拟合</code>的原因</strong></p><blockquote><p>训练数据存在噪音，或者训练数据过少</p></blockquote><p><strong>剪枝的方法</strong></p><blockquote><ul><li>预剪枝<blockquote><p> 在决策树进行构造时就进行剪枝。 </p><p> 方法：在构造的过程中进行评估，如果对某个节点进行划分，在验证集中不能带来准确性的提升，就把当前节点作为叶节点，不进行划分。</p></blockquote></li></ul></blockquote><blockquote><ul><li>后剪枝<blockquote><p>在生成决策树之后再进行剪枝。</p><p>方法：从决策树的叶节点开始，逐层向上对每个节点进行评估。如果剪掉这个节点，与保留这个节点在分类准确性上差别不大，或准确性上升，那就对该节点进行剪枝。</p></blockquote></li></ul></blockquote><hr><h1 id="泰坦尼克号生存预测"><a href="#泰坦尼克号生存预测" class="headerlink" title="泰坦尼克号生存预测"></a>泰坦尼克号生存预测</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建 ID3 决策树</span></span><br><span class="line">clf = DecisionTreeClassifier(criterion = <span class="string">'entropy'</span>)</span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">train_data = pd.read_csv(<span class="string">r'E:\Titanic_Data\train.csv'</span>)</span><br><span class="line">test_data = pd.read_csv(<span class="string">r'E:\Titanic_Data\test.csv'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># train_data.info</span></span><br><span class="line">train_data.describe()</span><br></pre></td></tr></table></figure><hr><h1 id="在-Python-中建立一个决策树"><a href="#在-Python-中建立一个决策树" class="headerlink" title="在 Python 中建立一个决策树"></a>在 Python 中建立一个决策树</h1><p><a href="https://web.archive.org/web/20110807035706/http://onlamp.com/lpt/a/6464">Building Decision Trees in Python</a></p><p>你准备销售一款精妙的小玩具，你非常确定它在商业上能够大获成功，并且开始全心投入。几年之后，你非常成功。 然而，最近你注意到销售的下滑，并且你决定你需要把营销资金用更好的方法用于目标受众，你如何去做？</p><p>这篇文章将介绍一个非常受欢迎并且很容易用的决策工具， 叫做决策树。 它能够解决你的决策难题。</p><p>决策树是人工智能的主题。 更具体的话， 它属于机器学习的子领域。这是因为他们能够通过示例学习对数据集中的单个记录进行分类</p><p>本文将让你更深入的了解决策树是什么，以及它们如何帮助你更有效地将营销活动定位到你的核心客户中去。 在这样做的过程中，我将讨论决策树的一些不同用途，我将讨论一种可以在学习过程中使用的流行启发式方法，以创建最有效的决策树。最后，我将使用 python 编程语言实现一个简单的决策是程序。 </p><h3 id="什么是决策树-1"><a href="#什么是决策树-1" class="headerlink" title="什么是决策树"></a>什么是决策树</h3><p>决策树本质上是一系列 <code>if-then</code> 语句， 当应用于数据集中的记录时， 会导致该记录的分类。 因此， 一旦创建了决策树， 就可以通过程序运行数据集， 并对数据集中的每个单独记录进行分类。作为一名销售小玩具的制造商，对你来说意味着在本文创建的程序将能够预测每个用户在数据集中购买精心制作的产品的可能性。 </p><p>虽然数据分类是创造决策树的驱动力，但并不是决策树特有的。 决策树的美妙之处在于他们的学习能力。当创建完成后，你将给你的程序一组测试数据， 它将学习如何从训练中对未来的数据集进行分类。 </p><p>首先， 你需要了解整个决策树的外观， 它是具有良好视觉表现的最容易理解的数据结构之一</p><p><img src="https://pic2.zhimg.com/v2-39d109b46ea4f34d5efbf67edc11d57d_r.jpg" alt=""></p><h3 id="真实场景"><a href="#真实场景" class="headerlink" title="真实场景"></a>真实场景</h3><p>你作为世界上最好的玩具制造商， 正在寻找一种方法来聚焦你的营销工作，以便更加紧密地吸引你的目标人群。为此， 你需要一组测试数据来用于训练决策树程序。</p><p>我认为， 你作为一个企业家，已经收集到了用户的统计信息。 以下是收集的信息样本：</p><table><thead><tr><th>Age</th><th>Education</th><th>Income</th><th>Marital Status</th><th>Purchase?</th></tr></thead><tbody><tr><td>36-55</td><td>master’s</td><td>high</td><td>single</td><td>will buy</td></tr><tr><td>18-35</td><td>high school</td><td>low</td><td>single</td><td>won’t buy</td></tr><tr><td>36-55</td><td>master’s</td><td>low</td><td>single</td><td>will buy</td></tr><tr><td>18-35</td><td>bachelor’s</td><td>high</td><td>single</td><td>won’t buy</td></tr><tr><td>&lt; 18</td><td>high school</td><td>low</td><td>single</td><td>will buy</td></tr><tr><td>18-35</td><td>bachelor’s</td><td>high</td><td>married</td><td>won’t buy</td></tr><tr><td>36-55</td><td>bachelor’s</td><td>low</td><td>married</td><td>won’t buy</td></tr><tr><td>&gt; 55</td><td>bachelor’s</td><td>high</td><td>single</td><td>will buy</td></tr><tr><td>36-55</td><td>master’s</td><td>low</td><td>married</td><td>won’t buy</td></tr><tr><td>&gt; 55</td><td>master’s</td><td>low</td><td>married</td><td>will buy</td></tr><tr><td>36-55</td><td>master’s</td><td>high</td><td>single</td><td>will buy</td></tr><tr><td>&gt; 55</td><td>master’s</td><td>high</td><td>single</td><td>will buy</td></tr><tr><td>&lt; 18</td><td>high school</td><td>high</td><td>single</td><td>won’t buy</td></tr><tr><td>36-55</td><td>master’s</td><td>low</td><td>single</td><td>will buy</td></tr><tr><td>36-55</td><td>high school</td><td>low</td><td>single</td><td>will buy</td></tr><tr><td>&lt; 18</td><td>high school</td><td>low</td><td>married</td><td>will buy</td></tr><tr><td>18-35</td><td>bachelor’s</td><td>high</td><td>married</td><td>won’t buy</td></tr><tr><td>&gt; 55</td><td>high school</td><td>high</td><td>married</td><td>will buy</td></tr><tr><td>&gt; 55</td><td>bachelor’s</td><td>low</td><td>single</td><td>will buy</td></tr><tr><td>36-55</td><td>high school</td><td>high</td><td>married</td><td>won’t buy</td></tr></tbody></table><p>结合图一的决策树， 与数据集， 应该可以很容易的看到决策树如何对数据集中的记录进行分类。  </p><p>从 <code>根节点 （Age）</code>开始， 检查字段中与第一个节点匹配的第一个记录的值 <code>36-55</code>。 然后按照指向树中的下一个节点链接<code>Marital Status</code> 并重复该过程， 直到最终到达 <code>叶节点</code>。此<code>叶节点</code>可以回答顾客是否购买了你的产品问题。</p><hr><p>图中的决策树只是你可以创造的许多决策树结构之一，以解决营销问题。 找到最优决策树的任务是一个刺手的问题。随着训练决策树的测试数量的增加，训练决策树所需的时间会成指数级的增加。 </p><p>虽然在相当长的额时间内找到最小（或最合适）的决策树几乎是不可能的， 但是可以通过特殊启发法找到“足够小”的决策树。</p><p>本文选择的是 ID3（信息理论）， 通过计算 信息熵的减小来决定那个属性最适合用于将数据划分为子组。 </p><h3 id="ID3-理论"><a href="#ID3-理论" class="headerlink" title="ID3 理论"></a>ID3 理论</h3><hr><h1 id="GOOGLE-机器学习视频笔记"><a href="#GOOGLE-机器学习视频笔记" class="headerlink" title="GOOGLE 机器学习视频笔记"></a>GOOGLE 机器学习视频笔记</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/cKxRvEZd3Mw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p><a href="https://www.youtube.com/watch?v=cKxRvEZd3Mw&amp;list=PLOU2XLYxmsIIuiBfYad6rFYQU_jL2ryal">GOOGLE</a></p><h3 id="区分苹果和橙子"><a href="#区分苹果和橙子" class="headerlink" title="区分苹果和橙子"></a>区分苹果和橙子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 决策树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="comment"># 140 克， 0：表皮粗糙   1：表皮光滑</span></span><br><span class="line">features = [[<span class="number">140</span>,<span class="number">1</span>], [<span class="number">130</span>,<span class="number">1</span>], [<span class="number">150</span>,<span class="number">0</span>], [<span class="number">170</span>,<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0 苹果 1 橙子</span></span><br><span class="line">labels = [<span class="number">0</span>,<span class="number">0</span>, <span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf = clf.fit(features, labels)</span><br><span class="line"><span class="keyword">print</span> (clf.predict([[<span class="number">180</span>,<span class="number">0</span>]]))</span><br></pre></td></tr></table></figure><pre><code>[1]</code></pre><p><a href="https://en.wikipedia.org/wiki/Iris_flower_data_set">Iris flower data set</a></p><h3 id="展现花的所有数据"><a href="#展现花的所有数据" class="headerlink" title="展现花的所有数据"></a>展现花的所有数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line">iris = load_iris()</span><br><span class="line"><span class="keyword">print</span> (iris.feature_names)</span><br><span class="line">print(iris.target_names)</span><br><span class="line">print(iris.data[<span class="number">0</span>])</span><br><span class="line">print(iris.target[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><pre><code>[&apos;sepal length (cm)&apos;, &apos;sepal width (cm)&apos;, &apos;petal length (cm)&apos;, &apos;petal width (cm)&apos;][&apos;setosa&apos; &apos;versicolor&apos; &apos;virginica&apos;][5.1 3.5 1.4 0.2]0</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出所有数据</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(iris.target)):</span><br><span class="line">    print(<span class="string">"Example %d : label %s, features %s"</span> % (i, iris.target[i], iris.data[i]))</span><br></pre></td></tr></table></figure><pre><code>Example 0 : label 0, features [5.1 3.5 1.4 0.2]Example 1 : label 0, features [4.9 3.  1.4 0.2]Example 2 : label 0, features [4.7 3.2 1.3 0.2]Example 3 : label 0, features [4.6 3.1 1.5 0.2]Example 4 : label 0, features [5.  3.6 1.4 0.2]</code></pre><p>……<br>    Example 145 : label 2, features [6.7 3.  5.2 2.3]<br>    Example 146 : label 2, features [6.3 2.5 5.  1.9]<br>    Example 147 : label 2, features [6.5 3.  5.2 2. ]<br>    Example 148 : label 2, features [6.2 3.4 5.4 2.3]<br>    Example 149 : label 2, features [5.9 3.  5.1 1.8]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分出测试数据与训练数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line">iris = load_iris()</span><br><span class="line">test_idx = [<span class="number">0</span>, <span class="number">50</span>, <span class="number">130</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># training data</span></span><br><span class="line">train_target = np.delete(iris.target, test_idx)</span><br><span class="line">train_data = np.delete(iris.data, test_idx, axis = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># testing data</span></span><br><span class="line">test_target = iris.target[test_idx]</span><br><span class="line">test_data = iris.data[test_idx]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进行训练</span></span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf.fit(train_data, train_target)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用测试集进行测试</span></span><br><span class="line">print(test_target)</span><br><span class="line">print(clf.predict(test_data))</span><br></pre></td></tr></table></figure><pre><code>[0 1 2][0 1 2]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"><span class="keyword">import</span> pydotplus</span><br><span class="line">dot_data = StringIO()</span><br><span class="line">tree.export_graphviz(clf, out_file = dot_data, feature_names = iris.feature_names,class_names = iris.target_names, filled = <span class="keyword">True</span>, rounded = <span class="keyword">True</span>, special_characters = <span class="keyword">True</span>)</span><br><span class="line">graph = graphviz.Source(dot_data)</span><br><span class="line"><span class="comment"># graph.render("iris")</span></span><br><span class="line">graph = pydotplus.graph_from_dot_data(dot_data.getvalue())</span><br><span class="line">graph.write_pdf(<span class="string">"iris.pdf"</span>)</span><br></pre></td></tr></table></figure><pre><code>True</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(test_data[<span class="number">1</span>], test_target[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><pre><code>[7.  3.2 4.7 1.4] 1</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(iris.feature_names, iris.target_names)</span><br></pre></td></tr></table></figure><pre><code>[&apos;sepal length (cm)&apos;, &apos;sepal width (cm)&apos;, &apos;petal length (cm)&apos;, &apos;petal width (cm)&apos;] [&apos;setosa&apos; &apos;versicolor&apos; &apos;virginica&apos;]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sepal length <span class="number">7.4</span></span><br><span class="line">sepal width   <span class="number">3.2</span></span><br><span class="line">petal length  <span class="number">4.7</span></span><br><span class="line">petal width  <span class="number">1.4</span></span><br></pre></td></tr></table></figure><p>决策树提出的问题必须针对某个特征， 当你选择的特征越可靠， 决策树的准确性越高。 </p><h3 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征x 与 标签y</span></span><br><span class="line">x = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练集的特征与标签  测试集的特征与标签</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span>  train_test_split</span><br><span class="line"><span class="comment"># 一半用来训练，一半用来测试</span></span><br><span class="line"></span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = <span class="number">.5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 决策树分类器</span></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line">my_classifier = tree.DecisionTreeClassifier()</span><br><span class="line"><span class="comment"># 进行训练</span></span><br><span class="line">my_classifier.fit(x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试准确性</span></span><br><span class="line">predictions = my_classifier.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">print(accuracy_score(y_test, predictions))</span><br></pre></td></tr></table></figure><pre><code>0.96</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用KNN分类器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.neighbors <span class="keyword">import</span> KNeighborsClassifier</span><br><span class="line">my_classifier = KNeighborsClassifier()</span><br><span class="line">my_classifier.fit(x_train, y_train)</span><br><span class="line">predictions = my_classifier.predict(x_test)</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">print((accuracy_score(y_test, predictions)))</span><br></pre></td></tr></table></figure><pre><code>0.9733333333333334</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机分类器</span></span><br><span class="line"><span class="keyword">from</span> scipy.spatial <span class="keyword">import</span> distance</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">euc</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> distance.euclidean(a,b)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrappyKNN</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, x_train, y_train)</span>:</span></span><br><span class="line">        self.x_train = x_train</span><br><span class="line">        self.y_train = y_train</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x_test)</span>:</span></span><br><span class="line">        predictions = []</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> x_test:</span><br><span class="line">            labe1 = self.closest(row)</span><br><span class="line">            predictions.append(labe1)</span><br><span class="line">        <span class="keyword">return</span> predictions</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closest</span><span class="params">(self, row)</span>:</span></span><br><span class="line">        best_dist = euc(row, self.x_train[<span class="number">0</span>])</span><br><span class="line">        best_index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(self.x_train)):</span><br><span class="line">            dist = euc(row, self.x_train[i])</span><br><span class="line">            <span class="keyword">if</span> dist &lt; best_dist:</span><br><span class="line">                best_dist = dist</span><br><span class="line">                best_index = i</span><br><span class="line">        <span class="keyword">return</span> self.y_train[best_index]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"><span class="comment"># 特征x 与 标签y</span></span><br><span class="line">x = iris.data</span><br><span class="line">y = iris.target</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.cross_validation <span class="keyword">import</span>  train_test_split</span><br><span class="line">x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = <span class="number">.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_classifier = ScrappyKNN()</span><br><span class="line">my_classifier.fit(x_train, y_train)</span><br><span class="line">predictions = my_classifier.predict(x_test)</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score</span><br><span class="line">print((accuracy_score(y_test, predictions)))</span><br></pre></td></tr></table></figure><pre><code>0.96</code></pre><hr><p>信息理论使用基数为<code>2</code> 的 <code>log</code> 函数，来确定表示一条信息所需的位数。 如 2^{x} = 8  , 我们很容易计算出<code>x = 3</code>。 但是如果 2^{x}=8388608 , 可以计算出 <code>x = 23</code>。 因此， 你需要 <code>23</code>位信息才能正确表示 <code>8388608</code>个不同的数字。 这就是<code>ID3</code>算法中熵测量背后的基本思想。 换句话说， 你正在尝试查找最能减少分类数据所需信息量的属性。 </p><p> –&gt;</p>-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://read.pudn.com/downloads166/ebook/762719/ID3%20%CB%E3%B7%A8%BF%C9%CA%D3%BB%AF%BD%E2%B6%C1.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopen
      
    
    </summary>
    
      <category term="算法" scheme="https://zhangandyu.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="决策树" scheme="https://zhangandyu.github.io/categories/%E7%AE%97%E6%B3%95/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    
    
      <category term="算法" scheme="https://zhangandyu.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="https://zhangandyu.github.io/2019/03/24/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangandyu.github.io/2019/03/24/git学习笔记/</id>
    <published>2019-03-23T16:00:00.000Z</published>
    <updated>2019-03-24T07:03:27.589Z</updated>
    
    <content type="html"><![CDATA[<ol><li>博客登陆</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global.name&apos;zhang&apos;</span><br><span class="line">git config --global.email &apos;zhang@qq.com&apos;</span><br><span class="line">cd E:/zy_blog</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ol start="2"><li>下载仓库到本地</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;博客登陆&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="git" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/git/"/>
    
    
      <category term="git" scheme="https://zhangandyu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>数据分析——数据分析的常用指标</title>
    <link href="https://zhangandyu.github.io/2019/03/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/"/>
    <id>https://zhangandyu.github.io/2019/03/12/数据分析的常用指标/</id>
    <published>2019-03-11T16:00:00.000Z</published>
    <updated>2019-03-21T13:34:34.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如何建立业务数据指标"><a href="#如何建立业务数据指标" class="headerlink" title="如何建立业务数据指标"></a>如何建立业务数据指标</h3><blockquote><p>数据君</p></blockquote><p><strong>指标体系不重要，重要的是指标之间的关系</strong></p><p>假设进入一个企业， 要从0-1去搭建指标体系。</p><ol><li>调研</li></ol><ul><li>一方面是业务的调研，比如我们现在有哪些业务？这些业务在行业有没有一些标准的指标？</li><li>另一方面使需求调研，比如哪个部门处于我们业务流程的哪个阶段，他们关注什么指标？</li></ul><p>这两点很重要，因为我们后面做的分析都是要通过指标去看业务的发展，而每个业务发展的阶段都是某个或者某些部门一起来完成，这就会埋下一个很深的伏笔，问题出现了，谁来背锅。</p><ol start="2"><li>找到适合自己企业的方法论<br>比如互联网企业都在用AARRR，整体的拆分逻辑是【获取-活跃-留存-营收-传播】， 这个模型在各个公司都会被改良，因为太笼统不够细化，但它给了我们一种关键行为的思路。 </li></ol><p>比如有的分为好几个阶段： 认知、注册、行为、互动、交易、售后、客服等等，你需要对每一个类型进行进一步的拆分。</p><p>比如： 认知阶段，也就是你和用户第一次见面在哪里？可以分为线上广告，品牌类推广、SEM\SEO、CPS、CPC等等， 线下的灯箱广告、楼宇、公交广告、地铁等，这样去制定每个渠道的关键性考核指标，比如线下可能多是曝光，不懂可以去进行搜索，这种方法可以依次拆分注册、行为、互动等等。</p><ol start="3"><li><p>技巧<br>自己要画几个方框，在方法论走通的前提下，每一个业务动作都话一个方框，注明什么动作，再补充这个动作需要哪些指标，到最后一目了然，领导看后肯定喜悦，这就是指标体系与业务之间的商业画布。</p></li><li><p>落实<br>在方法论和商业画布的基础上，要对应到部门，比如认知阶段，很多都是市场部、品牌部、渠道从部负责，那么这样指标有问题，你就知道找谁背锅了。 这里面需要注意的一点，现在很多部门的指标比较单一，比如渠道部只负责拉点击，不负责注册，那么你就要通过指标的表现和系统性，考虑跨部门背指标，这一点比较难，但还是要提出来，或者用权重的方式去解决，让领导去拍板，一般指标体系老板都要产于，因为他们想要找个方式来量化一切。 </p></li><li><p>最后<br>以上的部分只是让你从业务和企业的角度梳理出来适合自己的衣服，但是指标既然存在就要有量化之后的数据，最难的是数据之间的关系，所以这里面也要指出每个阶段，每个部门更关注的一些指标，也被称为第一关键指标或者北极星指标，这样会让自己更清晰，而不是简单的对指标进行归类，一个是自上而下，一个是自下而上，思路是不一样的。</p></li><li><p>核心<br>最核心的一点， 指标体系的搭建其实很简单，主要是如何从你的报告体系中反应出来，比如日报应该反应什么，周报应该反应什么，月报应该反应什么？这就很烧脑了。 </p></li></ol><hr><hr><ol><li>核心指标</li><li>好的指标应该是比率</li><li>好的指标能够带来显著效果</li><li>好的指标不应该虚荣与复杂</li></ol><h1 id="市场营销指标"><a href="#市场营销指标" class="headerlink" title="市场营销指标"></a>市场营销指标</h1><ol><li>用户生命周期</li></ol><p>潜在用户（市场容量）， 兴趣用户，新用户，老用户， 流失客户， 回流客户</p><ul><li>用户价值：<br>用户贡献 = 产出量 / 投入量 * 100%<br>用户价值 = （贡献1 + 贡献2 + ….)</li></ul><ol start="2"><li>RFM模型</li></ol><ul><li>最近一次消费时间</li><li>总消费金额</li><li>消费频次</li></ul><ol start="3"><li>用户分群</li></ol><h1 id="产品运营指标"><a href="#产品运营指标" class="headerlink" title="产品运营指标"></a>产品运营指标</h1><ol><li>AARRR<br>用户获取： </li></ol><ul><li>曝光量</li><li>转化率： CPM、CPC、CPS、CPD、CPT</li><li>渠道ROI</li></ul><p>日应用下载量：<br>日新增用户数：<br>获客成本：<br>一次会话用户数占比：</p><p>用户活跃： 活跃用户数， 活跃用户占比， 用户会话次数， 用户访问时长， 用户平均访问次数， </p><p>用户留存： 七日留存</p><p>营收： 付费用户数， 付费用户数占比， ARPU, ARPPU, LTV</p><p>传播： K因子， 用户分享率， 活动/邀请曝光量</p><h1 id="用户行为指标"><a href="#用户行为指标" class="headerlink" title="用户行为指标"></a>用户行为指标</h1><ol><li>功能使用</li></ol><p>功能渗透率：<br>用户会话： 用户从开始到结束的所有操作<br>用户路径： 访问产品内部的浏览轨迹（关键路径）</p><h1 id="电子商务指标"><a href="#电子商务指标" class="headerlink" title="电子商务指标"></a>电子商务指标</h1><ol><li>购物篮分析</li></ol><ul><li>笔单价： </li><li>件单价：</li><li>成交率：</li><li>购物篮系数： </li><li>复购率：</li><li>回购率：</li></ul><h1 id="流量指标"><a href="#流量指标" class="headerlink" title="流量指标"></a>流量指标</h1><ul><li>pv</li><li>uv</li><li>新老访客占比</li><li>访客时间</li><li>访客平均访问页数</li><li>访客来源</li><li>用户行为转化率</li><li>首页访客占比</li><li>退出率</li><li>跳出率</li></ul><h1 id="如何生成指标"><a href="#如何生成指标" class="headerlink" title="如何生成指标"></a>如何生成指标</h1><ul><li>组合</li></ul><h1 id="如何通过指标搭建分析框架"><a href="#如何通过指标搭建分析框架" class="headerlink" title="如何通过指标搭建分析框架"></a>如何通过指标搭建分析框架</h1><ul><li>从业务的角度出发</li><li>从指标的角度出发</li><li>从流程的角度出发：业务落地的闭环</li></ul><h1 id="市场营销模型"><a href="#市场营销模型" class="headerlink" title="市场营销模型"></a>市场营销模型</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;如何建立业务数据指标&quot;&gt;&lt;a href=&quot;#如何建立业务数据指标&quot; class=&quot;headerlink&quot; title=&quot;如何建立业务数据指标&quot;&gt;&lt;/a&gt;如何建立业务数据指标&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;数据君&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="运营" scheme="https://zhangandyu.github.io/tags/%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>数据分析——常见的数据分析方法与方法论</title>
    <link href="https://zhangandyu.github.io/2019/02/26/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E7%A1%80%E6%96%B9%E6%B3%95/"/>
    <id>https://zhangandyu.github.io/2019/02/26/数据分析的基础方法/</id>
    <published>2019-02-25T16:00:00.000Z</published>
    <updated>2019-03-23T06:16:25.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分析的常见方法论"><a href="#数据分析的常见方法论" class="headerlink" title="数据分析的常见方法论"></a>数据分析的常见方法论</h1><p>方法论： 从宏观角度出发， 提出分析框架，指导具体分析方向。</p><h3 id="象限法"><a href="#象限法" class="headerlink" title="象限法"></a>象限法</h3><p>通过象限法， 找到问题的共同原因， 从而建立分组优化策略。 </p><ul><li><p>内外因素分解法<br><img src="https://i.loli.net/2019/02/25/5c7409d9dce08.png" alt="内外因素分解法"></p></li><li><p>用户分群</p></li></ul><p><img src="https://i.loli.net/2019/02/23/5c70f5814cc93.png" alt="用户分群"></p><ul><li>RFM 用户分群<br><img src="https://i.loli.net/2019/02/23/5c70f7f128f4c.png" alt="RFM用户分群"></li></ul><h3 id="5W2H-分析法"><a href="#5W2H-分析法" class="headerlink" title="5W2H 分析法"></a>5W2H 分析法</h3><p>在知乎上看到一个很好的回答：</p><p>什么原因 (why)  导致 什么事情 (what), 需要哪些人 (who) 在什么时间完成 (when),在什么地点 (where) 用什么方法 (how)完成, 预算是多少 (how much)?</p><p><img src="https://i.loli.net/2019/02/26/5c7418d10b4c8.png" alt="思维导图"></p><h3 id="二八法则-帕累托法则"><a href="#二八法则-帕累托法则" class="headerlink" title="二八法则 / 帕累托法则"></a>二八法则 / 帕累托法则</h3><ul><li>将对象分为重要和不重要两类， 20%的用户贡献了80%的销售额。 </li><li>数据中， 20% 的变量将直接产生 80% 的效果，数据分析应该围绕这20%的变量来进行。 </li><li>和业务和KPI紧密相关，花费很少的精力就能达到不错的效果。</li><li>在条件允许的状况下， 依旧不能放弃全局，否则会让思维变得狭隘。 </li></ul><p>升级版本： ABC 分析法<br>与之对应： 长尾理论</p><h3 id="AARRR-模型"><a href="#AARRR-模型" class="headerlink" title="AARRR 模型"></a>AARRR 模型</h3><p>移动应用的生命周期</p><p><img src="https://i.loli.net/2019/02/26/5c75582b87a7c.png" alt="AARRR 模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95c95929a40.jpg" alt="AARRR 模型"></p><h3 id="基于用户生命周期的数据分析体系"><a href="#基于用户生命周期的数据分析体系" class="headerlink" title="基于用户生命周期的数据分析体系"></a>基于用户生命周期的数据分析体系</h3><p><img src="https://i.loli.net/2019/03/23/5c95c9d2e937c.jpg" alt="分析体系"></p><ul><li>对应的关键指标</li></ul><p><img src="https://i.loli.net/2019/03/23/5c95ca1b5fdc9.jpg" alt="对应的关键指标"></p><h3 id="SWOT方法"><a href="#SWOT方法" class="headerlink" title="SWOT方法"></a>SWOT方法</h3><p>指定发展战略前，对自身进行全面的分析及竞争优势定位。</p><ul><li><p>对自己进行解析<br><img src="https://i.loli.net/2019/02/26/5c754bb2536a0.jpg" alt="对自己进行解析"></p></li><li><p>指定相应的对策<br><img src="https://i.loli.net/2019/02/26/5c754bc095f85.jpg" alt="指定相应的对策"></p></li></ul><h3 id="USED方法"><a href="#USED方法" class="headerlink" title="USED方法"></a>USED方法</h3><p>针对SWOT分析后的结果，使用USED方法产出解决方案</p><ul><li>如何善用每个优势？ How can we Use each Strength?</li><li>如何停止每个劣势？ How can we Stop each Weakness?</li><li>如何成就每个机会？ How can we Exploit each Opportunity?</li><li>如何抵御每个威胁？ How can we Defend against each Threat?</li></ul><h3 id="4P-与-STP-理论"><a href="#4P-与-STP-理论" class="headerlink" title="4P 与 STP 理论"></a>4P 与 STP 理论</h3><p>市场营销与市场定位</p><ul><li>4P 理论</li></ul><p><img src="https://i.loli.net/2019/02/26/5c7557f086661.png" alt="4P 理论"></p><ul><li>STP 理论<br><img src="https://i.loli.net/2019/02/26/5c755817819c3.png" alt="STP 理论"></li></ul><h3 id="SLEPT分析法"><a href="#SLEPT分析法" class="headerlink" title="SLEPT分析法"></a>SLEPT分析法</h3><ul><li>社会和文化环境-social</li><li>法律环境-legal</li><li>经济环境-economic</li><li>政治环境-political</li><li>技术环境-technology</li></ul><h3 id="PEST分析方法"><a href="#PEST分析方法" class="headerlink" title="PEST分析方法"></a>PEST分析方法</h3><p>企业的战略外部环境分析。<br>PEST、SWOT 与 SLEPT 可以作为企业与环境分析的基础工具。</p><p><img src="https://i.loli.net/2019/02/26/5c75584a86f2c.png" alt="PEST分析方法"></p><h3 id="延伸：-个人IPO模型"><a href="#延伸：-个人IPO模型" class="headerlink" title="延伸： 个人IPO模型"></a>延伸： 个人IPO模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95bfee175d6.png" alt="个人IPO模型"></p><h3 id="波特五种竞争力分析模型"><a href="#波特五种竞争力分析模型" class="headerlink" title="波特五种竞争力分析模型"></a>波特五种竞争力分析模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95c30761cdc.png" alt="波特五种竞争力分析模型"></p><h3 id="SPACE-战略地位与行动评价矩阵"><a href="#SPACE-战略地位与行动评价矩阵" class="headerlink" title="SPACE-战略地位与行动评价矩阵"></a>SPACE-战略地位与行动评价矩阵</h3><ul><li>企业的内部因素与外部因素</li></ul><p><img src="https://wiki.mbalib.com/w/images/7/72/SPACEjz.jpg" alt="SPACE"></p><h3 id="SCP模型"><a href="#SCP模型" class="headerlink" title="SCP模型"></a>SCP模型</h3><ul><li>分析在行业或者企业收到表面冲击时，可能的战略调整及行为变化。</li></ul><p><img src="https://wiki.mbalib.com/w/images/d/d8/SCP%E6%A8%A1%E5%9E%8B.gif" alt="SCP模型"></p><h3 id="AISAS-用户行为决策分析模型"><a href="#AISAS-用户行为决策分析模型" class="headerlink" title="AISAS-用户行为决策分析模型"></a>AISAS-用户行为决策分析模型</h3><ul><li>注意- 兴趣-搜索-行动-分享</li></ul><p><img src="https://i.loli.net/2019/03/23/5c95c4f93ba91.jpg" alt="AISAS 模型"></p><h3 id="KANO模型"><a href="#KANO模型" class="headerlink" title="KANO模型"></a>KANO模型</h3><ul><li>对用户需求分类和优先排序</li></ul><blockquote><p>将影响用户满意度的因素划分为五个类型，包括：</p></blockquote><blockquote><ul><li>魅力因素：用户意想不到的，如果不提供此需求，用户满意度不会降低，但当提供此需求，用户满意度会有很大提升;</li><li>期望因素(一维因素)：当提供此需求，用户满意度会提升，当不提供此需求，用户满意度会降低;</li><li>必备因素：当优化此需求，用户满意度不会提升，当不提供此需求，用户满意度会大幅降低;</li><li>无差异因素：无论提供或不提供此需求，用户满意度都不会有改变，用户根本不在意;</li><li>反向因素：用户根本都没有此需求，提供后用户满意度反而会下降;</li></ul></blockquote><p><img src="https://i.loli.net/2019/03/23/5c95c58968dae.jpg" alt="KANO模型"></p><h3 id="PDCA模型"><a href="#PDCA模型" class="headerlink" title="PDCA模型"></a>PDCA模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95c631c6fe3.png" alt="PDCA模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95cbc1629d7.jpg" alt="PDCA模型"></p><h3 id="麦肯锡七步分析法"><a href="#麦肯锡七步分析法" class="headerlink" title="麦肯锡七步分析法"></a>麦肯锡七步分析法</h3><blockquote><ul><li>界定问题</li><li>将问题分解成议题</li><li>去除不重要的议题（优先排序）</li><li>制定详细工作计划 </li><li>分析重要议题 </li><li>汇总研究成果 </li><li>准备你的故事</li></ul></blockquote><p><img src="https://i.loli.net/2019/03/23/5c95ca64ce6f6.jpg" alt="七步分析法"></p><h3 id="SMART原则"><a href="#SMART原则" class="headerlink" title="SMART原则"></a>SMART原则</h3><p><img src="https://upload-images.jianshu.io/upload_images/133280-0b55132dd0ce5a52.jpg" alt="SMART原则"></p><hr><h1 id="数据分析的常见方法"><a href="#数据分析的常见方法" class="headerlink" title="数据分析的常见方法"></a>数据分析的常见方法</h1><p>在分析过程中使用的方法</p><h3 id="对比分析法"><a href="#对比分析法" class="headerlink" title="对比分析法"></a>对比分析法</h3><p>对比分析， 给单独的数据一个参考系， 否则孤立的数据毫无意义。 </p><p>问题： 超市 A 今天的营业额是 2000 块。 我们该如何评判这个超市的运营状况是好是坏呢？</p><ol><li>时间上的同比环比</li></ol><ul><li><p>环比<br>本次统计时间段 与 相连的上次时间段 之间的比较。 比如：本周和上周的对比。  </p></li><li><p>环比增长率<br>（本期数 - 上期数） / 上期数 <em> 100%  或  （本期数 / 上期数 -1） </em> 100%</p></li></ul><ul><li><p>同比：<br>某个统计时间段，今年和去年 之间的比较。 比如： 19年2月营销额和18年2月营销额之间的对比。 </p></li><li><p>同比增长率<br>（本期数 - 去年同期数） / 去年同期数 <em> 100%  或 （本期数 / 去年同期数 -1 ） </em> 100%</p></li></ul><ol start="2"><li>竞争对手对比</li><li>与其他维度结合，进行对比</li></ol><ul><li>活动促销前后的对比</li><li>细拆维度之间的对比</li><li>各渠道之间的对比等</li></ul><h3 id="漏斗分析法"><a href="#漏斗分析法" class="headerlink" title="漏斗分析法"></a>漏斗分析法</h3><p>漏斗分析法， 还原用户转化的路径， 分析每一步的转化率， 针对性的优化和改善</p><p><img src="https://i.loli.net/2019/02/25/5c74047cc3522.jpg" alt="漏斗模型"></p><h3 id="多维度拆解法"><a href="#多维度拆解法" class="headerlink" title="多维度拆解法"></a>多维度拆解法</h3><ul><li>维度划分<br><img src="https://i.loli.net/2019/02/26/5c756008dedc0.png" alt="维度划分"></li></ul><ul><li>注意事项<br>维度拆解不够， 容易导致<a href="https://wiki.mbalib.com/wiki/%E8%BE%9B%E6%99%AE%E6%A3%AE%E6%82%96%E8%AE%BA" target="_blank" rel="noopener">辛普森悖论</a></li></ul><h3 id="公式法"><a href="#公式法" class="headerlink" title="公式法"></a>公式法</h3><p>将一切问题皆可量化，拆解成最小的维度，通过 +、-、*、/ 进行计算</p><p><img src="https://i.loli.net/2019/02/27/5c7698403238e.png" alt="公式法"></p><h3 id="假设法"><a href="#假设法" class="headerlink" title="假设法"></a>假设法</h3><p>假设-验证-判断。 当没有直观数据时， 以假设先行的方式进行推断。 </p><p>例如： 如果商品提价后， 公司收益会不会变化？</p><ul><li><p>假设流量不会发生变化， 那么商品价格会影响转化率，确定转化率的下降。 </p></li><li><p>计算日常的转化率， 针对不同的用户，如：忠诚用户、普通用户、羊毛用户， 预估各类别用户提价后的转化率变化。</p></li></ul><h3 id="指数法"><a href="#指数法" class="headerlink" title="指数法"></a>指数法</h3><p>指定一个标准， 解决衡量的问题</p><ul><li><p>线性加权：</p></li><li><p>反比例： 1-1/n， 范围为0-1</p></li><li><p>log指数法</p><blockquote><p>热度公式： log(uv+ 5*评论,2) +(time -初始时间) / 10</p></blockquote></li></ul><p>以上就是常用的数据分析方法与方法论</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据分析的常见方法论&quot;&gt;&lt;a href=&quot;#数据分析的常见方法论&quot; class=&quot;headerlink&quot; title=&quot;数据分析的常见方法论&quot;&gt;&lt;/a&gt;数据分析的常见方法论&lt;/h1&gt;&lt;p&gt;方法论： 从宏观角度出发， 提出分析框架，指导具体分析方向。&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="运营" scheme="https://zhangandyu.github.io/tags/%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>七周成为数据分析师笔记</title>
    <link href="https://zhangandyu.github.io/2019/02/23/%E4%B8%83%E5%91%A8%E6%88%90%E4%B8%BA%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B8%88%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangandyu.github.io/2019/02/23/七周成为数据分析师笔记/</id>
    <published>2019-02-22T16:00:00.000Z</published>
    <updated>2019-02-25T16:23:46.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分析的思维技巧"><a href="#数据分析的思维技巧" class="headerlink" title="数据分析的思维技巧"></a>数据分析的思维技巧</h1><h2 id="三种核心思维"><a href="#三种核心思维" class="headerlink" title="三种核心思维"></a>三种核心思维</h2><h3 id="结构化-分析思路"><a href="#结构化-分析思路" class="headerlink" title="结构化-分析思路"></a>结构化-分析思路</h3><ol><li>将分析思维结构化-金字塔原理</li></ol><ul><li>将论点归纳和整理</li><li>将论点递进和拆解</li><li>将论点完善和补充</li></ul><ol start="2"><li>思考方式</li></ol><ul><li><p>核心论点</p><blockquote><p>金字塔的塔顶：假设、问题、预测、原因</p></blockquote></li><li><p>结构拆解</p><blockquote><p>自上而下，将核心论点层层拆解成分论点，上下之间呈因果或依赖关系</p></blockquote></li><li><p>MECE</p><blockquote><p>相互独立，完全穷尽，论点之间避免交叉和重复，分论点要尽量完善</p></blockquote></li><li><p>验证</p><blockquote><p>不论核心论点还是分论点，都应该是可量化的，用数据说话</p></blockquote></li></ul><ol start="3"><li>工具</li></ol><ul><li>思维导图：xmind</li></ul><h3 id="公式化——将思路转化为数据"><a href="#公式化——将思路转化为数据" class="headerlink" title="公式化——将思路转化为数据"></a>公式化——将思路转化为数据</h3><ol><li>核心</li></ol><ul><li>将一切结构皆可量化： 通过 +、-、*、/ 进行计算</li><li>拆解成最小的维度，可以去落地计算。</li></ul><ol start="2"><li>例如：</li></ol><ul><li>利润 = 销售额 —— 成本</li><li>销售额 = 销量 * 客单价</li><li>点击转化率 = 曝光量 / 点击量</li></ul><ol start="3"><li>运用</li></ol><ul><li>加 ： 不同类别的业务叠加</li><li>减： 业务间的逻辑关系</li><li>乘/除：各种比例或比率</li></ul><h3 id="业务化-将分析数据与业务贴合"><a href="#业务化-将分析数据与业务贴合" class="headerlink" title="业务化-将分析数据与业务贴合"></a>业务化-将分析数据与业务贴合</h3><ol><li>如何预估上海地区的共享单车投放量</li></ol><ul><li><p>结构思维与公式化</p><blockquote><ul><li>城市流动人口计算</li><li>从人口密度计算</li><li>从城市交通数据计算</li><li>从保有自行车量进行计算</li></ul></blockquote></li><li><p>业务化</p><blockquote><ul><li>单车损耗因素</li></ul></blockquote></li></ul><ol start="2"><li>业务分析问题</li></ol><ul><li>有没有从业务方的角度思考</li><li>真的分析出来原因了吗</li><li>能不能将分析结果落地</li></ul><ol start="3"><li>结构化思维——结构化数据——结构化业务数据</li></ol><h1 id="数据分析的思维技巧-1"><a href="#数据分析的思维技巧-1" class="headerlink" title="数据分析的思维技巧"></a>数据分析的思维技巧</h1><p><a href="https://36kr.com/p/5143891.html" target="_blank" rel="noopener">https://36kr.com/p/5143891.html</a></p><h3 id="多维法"><a href="#多维法" class="headerlink" title="多维法"></a>多维法</h3><ol><li>数据维度</li></ol><ul><li>用户统计维度： 性别、年龄、地区、身份等</li><li>用户行为维度： 注册时间、用户点击行为、用户活跃、用户流失等</li><li>消费维度： 消费金额、消费频率、消费商品内容等</li><li>商品维度： 商品品类、商品品牌、商品属性等。</li></ul><ol start="2"><li>缺点：<a href="https://wiki.mbalib.com/wiki/%E8%BE%9B%E6%99%AE%E6%A3%AE%E6%82%96%E8%AE%BA" target="_blank" rel="noopener">辛普森悖论</a></li></ol><ul><li>通过钻取来规避辛普森悖论</li></ul><ol start="3"><li>方法<br><img src="https://i.loli.net/2019/02/23/5c70f9d115d93.png" alt="钻取法"></li></ol><h3 id="假设法"><a href="#假设法" class="headerlink" title="假设法"></a>假设法</h3><ol><li>问题： 现在公司要你去贝宁出差， 如果你只能携带一个背包， 你会装什么东西，为什么装它？</li></ol><p>恰当回答： 贝宁这个地方我不熟悉，但假设它是在非洲，考虑到炎热情况……</p><ol start="2"><li>问题， 电商分析， 如果商品提价后， 收入会不会有变化？</li></ol><ul><li>假设流量不会变化，那么商品价格会影响转化率，确定转化率的下降。</li><li>找出平时的转化率， 预估提价后的转化率变化。 假设各类型用户对价格敏感度不同，将用户划分为忠诚用户、普通用户、羊毛用户。</li><li>不同用户层次不同，反应不同。 忠诚用户转化率变化极低，羊毛党几乎不会转化，普通用户的转化率根据经验做出假设。最后汇总。 </li></ul><p>3.综述：</p><ul><li>核心：启发思考驱动。假设——验证——判断</li><li>优点： 没有直观数据，以假设先行的方式进行推断。</li></ul><h3 id="指数法"><a href="#指数法" class="headerlink" title="指数法"></a>指数法</h3><ol><li>方法：</li></ol><ul><li>线性加权</li><li>反比例: 1- 1/n, 收敛到0-1</li><li>log：数字收敛。 <blockquote><p> 热度公式： log(uv+ 5*评论,2) +(time -初始时间) / 10</p></blockquote></li></ul><ol start="2"><li>综述：</li></ol><ul><li>核心： 目标驱动</li><li>优点：目标驱动力强，直观，简洁，有效。 对业务有一定的指导作用。一旦设立，不易频繁变动。 </li></ul><h3 id="如何在业务中锻炼数据分析思维"><a href="#如何在业务中锻炼数据分析思维" class="headerlink" title="如何在业务中锻炼数据分析思维"></a>如何在业务中锻炼数据分析思维</h3><ol><li><p>好奇心</p></li><li><p>生活中的练习</p></li></ol><ul><li>夜市一天的人流量是多少？一年的人流量</li><li>哪家店的利润是最高的，原因？</li><li>从数据分析角度，如何提高店铺营业额</li><li>如何设计数据评估方案评估营销活动效果？</li></ul><ol start="3"><li>工作中的问题</li></ol><ul><li>为什么同事不认同这次分析结果</li><li>如果我的职位比现在高两级，我会如何分析</li><li>对于之前的分析，我会如何优化和迭代</li></ul><hr><h1 id="业务"><a href="#业务" class="headerlink" title="业务"></a>业务</h1><h3 id="业务分析指标"><a href="#业务分析指标" class="headerlink" title="业务分析指标"></a>业务分析指标</h3><p>模型未动，指标先行。<br>如果你不能衡量它，那么你就不能增长他。 </p><ol><li>指标建立的要点</li></ol><ul><li>核心指标</li><li>好的指标应该是比率</li><li>好的指标应该能带来显著效果</li><li>好的指标不应该虚荣、复杂</li></ul><h5 id="市场营销指标"><a href="#市场营销指标" class="headerlink" title="市场营销指标"></a>市场营销指标</h5><ol><li>用户生命周期<br>潜在用户——兴趣用户——新用户——老用户——流失用户</li><li><p>用户价值<br>用户贡献 = 产出量 / 投入量 * 100%<br>用户价值 = 贡献1 + 贡献2….</p></li><li><p>RFM模型</p></li></ol><ul><li>消费金额</li><li>消费频次</li><li>消费时间</li></ul><ol start="4"><li>用户分群</li></ol><ul><li>x轴：价值 y轴：流失</li></ul><h5 id="产品运营指标"><a href="#产品运营指标" class="headerlink" title="产品运营指标"></a>产品运营指标</h5><ol><li>AARRR指标</li></ol><ul><li>用户获取<br>渠道曝光量<br>渠道转化率： cpm\cpc\cps\cpd\cpt等<br>渠道roi: 投资回报率， 利润/ 投资 * 100%</li></ul><p>下载量<br>新增用户数： 用户注册提交资粮<br>获客成本： 微信粉丝，10元。 电商，70-80元。 旅游： 上百<br>金融： 700-800元。<br>一次会话用户占比： 新用户下载完成app,仅打开过产品一次，且该次使用时长在2分钟之内。 衡量渠道是否靠谱</p><ul><li><p>用户活跃<br>活用用户数<br>活跃用户占比：活跃用户在总用户的比例，衡量产品健康程度。<br>用户会话session次数： 用户打开产品操作和使用，直到退出产品的整个周期。 5分钟之内没有操作， 默认会话操作结束。<br>用户访问时长： 一次会话的持续时间。<br>用户平均访问次数： 一段时间内的用户平均产生会话次数。看用户粘性</p></li><li><p>用户留存</p></li><li><p>用户获利<br>付费用户数<br>付费用户数占比： 每日付费用户占活跃用户比<br>arpu: 某时间段内每位用户平均收入<br>arppu: 某时间段内每位付费用户平均收入<br>客单价： 每一位用户平均购买商品的金额。<br>ltv: 用户生命周期价值<br>ltv = arpu *1/流失率</p></li></ul><ul><li>用户传播<br>k因子： 每个用户能够带来几个新用户<br>k因子 = 用户数<em> 平均邀请人数</em> 邀请转化率<br>用户分享率 = 某功能/页面pv<br>活动/邀请曝光量： 线上传播活动中，该页面被人浏览的次数。</li></ul><h5 id="用户行为指标"><a href="#用户行为指标" class="headerlink" title="用户行为指标"></a>用户行为指标</h5><p>功能使用率/ 渗透率： 使用该功能的用户占总活跃数之比<br>用户路径图：桑基图</p><h5 id="电子商务指标"><a href="#电子商务指标" class="headerlink" title="电子商务指标"></a>电子商务指标</h5><p>笔单价： 用户每次购买支付的金额。<br>件单价： 商品的平均价格<br>成交率： 支付成功用户占总客流量<br>购物连系数： 平均每笔订单中，卖出了多少商品。<br>复购率： 一段时间内多次消费的用户占总消费用户数，衡量用户消费欲望<br>回购率： 一段时间内消费的用户，在下一段时间内扔旧消费的占比。用户忠诚度。</p><h5 id="流量指标"><a href="#流量指标" class="headerlink" title="流量指标"></a>流量指标</h5><p>uv<br>pv<br>新老用户占比<br>访客时间<br>访客平均访问页数<br>访客来源<br>用户行为转化率：操作用户占总访问用户<br>首页访客占比： 只看了首页用户，在总访客数上的占比。 衡量网页结构，对新用户导航是否友好。<br>退出率： 从该页面退出的页面访问数 / 进入该页面的访问数。 衡量各个落地页的效果。<br>跳出率： 浏览单页即退出 / 访问次数。 衡量产品效果。 </p><h5 id="如何生成指标"><a href="#如何生成指标" class="headerlink" title="如何生成指标"></a>如何生成指标</h5><p>组合：<br>访客访问时长 + uv = 重度访问用户占比<br>用户会话次数 + 成交率 = 有效消费会话占比</p><h1 id="业务的分析框架"><a href="#业务的分析框架" class="headerlink" title="业务的分析框架"></a>业务的分析框架</h1><ol><li>从指标的角度出发</li><li>从业务的角度出发</li><li>从流程的角度出发</li></ol><h3 id="市场营销模型"><a href="#市场营销模型" class="headerlink" title="市场营销模型"></a>市场营销模型</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据分析的思维技巧&quot;&gt;&lt;a href=&quot;#数据分析的思维技巧&quot; class=&quot;headerlink&quot; title=&quot;数据分析的思维技巧&quot;&gt;&lt;/a&gt;数据分析的思维技巧&lt;/h1&gt;&lt;h2 id=&quot;三种核心思维&quot;&gt;&lt;a href=&quot;#三种核心思维&quot; class=&quot;head
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="运营" scheme="https://zhangandyu.github.io/tags/%E8%BF%90%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>linux学习</title>
    <link href="https://zhangandyu.github.io/2019/02/20/linux%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhangandyu.github.io/2019/02/20/linux学习/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-02-21T16:01:05.202Z</updated>
    
    <content type="html"><![CDATA[<iframe width="100%" height="415" src="https://www.youtube.com/embed/9sIbn9xVdlk" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>linux本身只操作系统的内核。</p><ul><li>调用命令端：搜索-terminal</li><li>移动文件目录： cd zhang/</li><li>返回目录： cd ..</li><li>返回上一条目录： cd -</li><li>返回上一条指令： cd 上方向键</li></ul><p>ctrl + d: 键盘输入结束或退出终端<br>ctrl + s: 暂停当前程序， 暂停后按下任意键恢复运营<br>ctrl + z: 将当前程序放到后台运行， 恢复到前台为命令 fg<br>ctrl + a: 将光标移到输入行头， 相当于home键<br>ctrl + e: 将光标移到输入行未，相当于end键<br>ctrk + k: 删除从光标所在位置到行末<br>alt + backspace : 向前删除一个单词<br>shift + paup : 将终端显示向上滚动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe width=&quot;100%&quot; height=&quot;415&quot; src=&quot;https://www.youtube.com/embed/9sIbn9xVdlk&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-
      
    
    </summary>
    
      <category term="编程语言" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="linux" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/linux/"/>
    
    
      <category term="linux" scheme="https://zhangandyu.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>业务分析——工作报表、临时需求、异常数据排查</title>
    <link href="https://zhangandyu.github.io/2019/02/17/%E6%8A%A5%E8%A1%A8-%E4%B8%B4%E6%97%B6%E9%9C%80%E6%B1%82-%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
    <id>https://zhangandyu.github.io/2019/02/17/报表-临时需求-异常分析/</id>
    <published>2019-02-16T16:00:00.000Z</published>
    <updated>2019-02-21T16:00:53.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、-日报、周报、月报"><a href="#一、-日报、周报、月报" class="headerlink" title="一、 日报、周报、月报"></a>一、 日报、周报、月报</h3><p>日报</p><blockquote><p>日报每天都要看。<br>编写数据脚本，实现日报半自动化。 </p></blockquote><p>为什么每天要看日报：</p><ul><li><p>了解公司业务现状<br>  当公司同事询问数据时，能够做到对基础的业务数据脱口而出,一定要对公司的核心指标数据熟记于心</p></li><li><p>培养个人数据敏感性<br>  当每天看数据时，都能够看到数据的波动变化。比如每日客户端活跃用户数都是在550-600万用户之间，突然一天增长到605万，能够做到有所怀疑，并进一步寻找原因。这就是数据敏感性。 </p></li><li><p>提供业务发展建议<br>  通过日报的数据观察，能够知道当产品运营做出哪些优化时， 数据会出现涨跌情况，给业务运营提供发展建议。 </p><p>周报</p><blockquote><p>看短期趋势。</p></blockquote></li></ul><p>周报作用：</p><ul><li>新版本发布往往一到两周，通过一周的时间长短， 可以分析APP新版本的改版效果。</li><li>一周的数据更加稳定， 有说服力。 </li></ul><p> 月报</p><blockquote><p>给出建议。</p></blockquote><p>月报内容：</p><ul><li><p>通过月报对公司业务进行梳理，月报一定要有给业务运营的建议，不能只是罗列数据。 </p></li><li><p>当通过数据变化发现某些活动效果好时， 一定要把分析原因放到月报里去展现，让所有管理层知道，从而推送业务的发展。</p></li></ul><hr><h3 id="二、临时数据需求"><a href="#二、临时数据需求" class="headerlink" title="二、临时数据需求"></a>二、临时数据需求</h3><ol><li>管理层需求：</li></ol><ul><li>优先级最高</li><li>了解需求背景，思考为何要这个数据， 通过这个数据可以进行哪些决策</li><li>一定要进行核对，不能出错，只能给一遍。</li><li>必须时候找上级进行询问</li></ul><ol start="2"><li>业务需求：</li></ol><ul><li>询问为何要这个数据</li><li>建立该业务类的分析框架</li><li>只给业务方最核心的需求，其他延伸需求让自己去取数</li><li>坚决不做提数机</li></ul><blockquote><p>例如： 优惠券的使用情况如何，如何优化？<br>建立分析框架：</p><ul><li>优惠券的下发人数</li><li>优惠券的点击人数</li><li>优惠券的使用人数</li><li>优惠券的使用金额</li><li>用户消费优惠券的频次</li><li>优惠券的消费时段</li></ul></blockquote><hr><h3 id="三、数据异常排查"><a href="#三、数据异常排查" class="headerlink" title="三、数据异常排查"></a>三、数据异常排查</h3><p>清楚以下三点：</p><ol><li>业务理解</li><li>指标口径</li><li>当前数据产出过程</li></ol><p>数据异常原因分析：</p><ol><li>数据有问题</li></ol><ul><li>将时间轴拉长，看数据是近期异常还是历史异常，对比近三个月数据。</li><li>查看和该指标关联的其他核心指标是否也异常，如果异常，也要一并查看。</li><li>核查埋点是否有问题， 数据是否存在多发情况。</li><li>业务口径是否有问题， 取的数据是不是真正需要的数据。</li><li>写的sql逻辑是否有误， 或者android 和 ios 数据没有相加。 </li></ul><ol start="2"><li>业务发生了变化</li></ol><ul><li>同口径下，同比环比数据是否异常， 在长时间轴的条件下进行对比</li><li>进行细拆， 看到底是哪个指标的数据出现了异常， 将该指标和相关的指标一起进行对比</li><li>与负责此指标的负责人进行沟通， 询问他们近期是否做了推广活动。</li><li>产品最近是否发布了新版本，或者某个功能改版存在缺陷问题。 </li></ul><ol start="3"><li>其他因素影响</li></ol><ul><li>假期效应： 开学季， 暑期， 四大节日，当地节日</li><li>热点事件：常规热点如运动会，世界杯，其他热点事件</li><li>活动影响： 双11， 618， 支付宝送红包</li><li>政策影响： 金融监管</li><li>底层系统故障： 服务器迁移导致数据丢失</li><li>存在外部刷量作弊情况</li><li>统计口径： 业务逻辑进行了更改， 之前某业务有统计， 但现在不统计了。  数据计算方式改变</li></ul><p>要对异常排查进行闭环</p><ol><li>持续跟踪后期数据是否再次异常<br>比如7.0版本数据存在多发现象， 但7.1版本开发说已更改， 当7.1版本发布之后， 要及时去查看数据是否再次异常。 </li><li>对数据异常一定要记录， 对异常口径要留文档。</li><li>邮件化， 当数据异常排查原因查明， 并且确认更改之后， 发邮件给相关方， 描述数据异常的影响范围和主要结论。 </li></ol><hr><p>作为一名数据分析师， 一定要经常去看这三种报表，培养自己的数据敏感度，了解业务的各种核心指标。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、-日报、周报、月报&quot;&gt;&lt;a href=&quot;#一、-日报、周报、月报&quot; class=&quot;headerlink&quot; title=&quot;一、 日报、周报、月报&quot;&gt;&lt;/a&gt;一、 日报、周报、月报&lt;/h3&gt;&lt;p&gt;日报&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;日报每天都要看。&lt;br
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="分析流程" scheme="https://zhangandyu.github.io/tags/%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用户路径分析</title>
    <link href="https://zhangandyu.github.io/2019/01/22/%E8%B7%AF%E5%BE%84%E5%88%86%E6%9E%90/"/>
    <id>https://zhangandyu.github.io/2019/01/22/路径分析/</id>
    <published>2019-01-21T16:00:00.000Z</published>
    <updated>2019-01-21T17:02:45.638Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://ark.analysys.cn/blog3zhongyonghuxingweilujingfenxifangfa/" target="_blank" rel="noopener">玩转用户行为路径分析，3种方法就够了</a><br><img src="http://plosti2dy.bkt.clouddn.com/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190121233044.png" alt="路径分析"><br><img src="http://plosti2dy.bkt.clouddn.com/%E8%B7%AF%E5%BE%84%E5%88%86%E6%9E%90%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95" alt="三种方法"></p><p><a href="http://www.sylan215.com/upload-to-qiniu.html" target="_blank" rel="noopener">http://www.sylan215.com/upload-to-qiniu.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://ark.analysys.cn/blog3zhongyonghuxingweilujingfenxifangfa/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;玩转用户行为路径分析，3种方法就够了&lt;/a&gt;&lt;br&gt;&lt;img
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="路径分析" scheme="https://zhangandyu.github.io/tags/%E8%B7%AF%E5%BE%84%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>如何整理大脑思绪</title>
    <link href="https://zhangandyu.github.io/2019/01/20/%E3%80%8A%E9%9B%B6%E7%A7%92%E6%80%9D%E8%80%83%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangandyu.github.io/2019/01/20/《零秒思考》-读书笔记/</id>
    <published>2019-01-19T16:00:00.000Z</published>
    <updated>2019-01-20T14:35:02.668Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/20/5c44810e998d3.jpg" alt="如何整理大脑思绪？"><br>自己时常有这种感觉，总觉得自己的大脑反应很迟钝，思绪比较混乱，看一个问题想法很模糊，有时心情急躁却找不到问题的解决方法。工作中和别人沟通时，有时词不达意，表达不够清晰，导致工作中出现很多问题。自己也明白自己需要更加深入的思考，但总是没有找到好的办法。</p><p>最近在看《零秒思考》这本书，书中作者提供了一个解决此类问题的方法：<strong>时刻写下自己的想法</strong>。</p><p>我们每天会接受不同的信息，在脑海中会产生大量的想法与感觉。很多时候，这些想法还没有转换成语言之前，便在含混朦胧、内心纠结的状态下消失了。虽然想法会暂时忘记，但是那种纠结的感觉并没有消解，会导致自己的心情消极的，产生精神上的压力，进而让大脑变得迟钝。</p><p>时刻记录自己想法的好处是，写下来能够将纠结于心的情绪发泄出来，在写的过程中对大脑的思绪进行整理，也能更准确的表达自己的想法。这个方法的关键是：在1分钟的时间限制内，迅速写出大量自己的原始感受。</p><p>具体的做法是这样：</p><blockquote><ul><li>写标题： 写出有关大脑中思绪的一个疑问句。</li><li>写内容：写4-6行文字来写下自己的原始想法。</li><li>字数限制：每行文字字数在10-15字之间。</li><li>时间限制：在2分钟之内完成。</li><li>数量限制：每天写10条。</li></ul></blockquote><p>每个做法对应的原理是这样：</p><blockquote><ul><li>标题，用疑问句可以让自己更有写下去的冲动。</li><li>内容，写4-6行文字，能够将自己大脑中浮现的想法基本都写下来，而不至于重复。</li><li>字数，10-15字，让自己不至于写的太短而不能充分表达想法，也不会字数太长在规定时间内写不完。</li><li>时间，限制时间，避免大脑受环境和周围状况的影响。</li><li>数量，每天写10条，不会过多占用时间，更容易坚持。</li></ul></blockquote><p>书中作者要求在A4纸上写，个人感觉不是很方便，自己目前习惯于通过手机自带的【闪念胶囊】软件来进行记录。记录想法的方法与写<a href="https://mp.weixin.qq.com/s/vCGCMMYgZ2RS6vBouh7gbw" target="_blank" rel="noopener">反思日记</a>有些相似，两者都要求把自己的想法写下来，不同之处在于，反思日记是对自己这一天做的事情进行反思记录，而记笔记是对你时刻产生的想法进行记录。</p><p>目前自己按照这个方法写了10天左右，感觉自己一个很大的变化就是下班回家走在路上，可以通过自问自答的方式来对一个问题进行深入的思考。虽然有时也想着想着就跑偏了，但是自己对于思考这件事情，不再有抵触的情绪。</p><p>书中作者还提供了通过回顾记录来挖掘价值的方法：</p><blockquote><ul><li>回顾自己的笔记， 然后再把笔记的内容当做标题， 每个标题再写4-6行。 这样自己对这类问题的思考会更加的深入。 </li><li>多角度的写一个标题。 让自己对带有个人情感的内容作出更冷静的判断， 能够站在别人的角度去看问题。 </li><li>将笔记按照不同领域来进行分类整理。</li><li>每三个月回顾一次笔记，了解自己面临的问题，探寻自己的成长轨迹。</li></ul></blockquote><p>最后，想说的是，看到一个方法论，我们常常会怀疑这样的方法真的有用吗，但问题本质是看你选择<strong>先相信再看见</strong>，还是<strong>先看见再相信</strong>。 我相信时刻记录想法是一个看似简单却对个人成长大有裨益的方法，所以准备践行100天再看看效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/20/5c44810e998d3.jpg&quot; alt=&quot;如何整理大脑思绪？&quot;&gt;&lt;br&gt;自己时常有这种感觉，总觉得自己的大脑反应很迟钝，思绪比较混乱，看一个问题想法很模糊，有时心情急躁却找不到问题的解决方
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="读书笔记" scheme="https://zhangandyu.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>反思日记</title>
    <link href="https://zhangandyu.github.io/2019/01/13/%E5%8F%8D%E6%80%9D%E6%97%A5%E8%AE%B0/"/>
    <id>https://zhangandyu.github.io/2019/01/13/反思日记/</id>
    <published>2019-01-12T16:00:00.000Z</published>
    <updated>2019-01-13T06:59:57.125Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/01/13/5c3ae1c08f107.png" alt="反思日记"></p><blockquote><p>“我应该不会拒绝从头到尾把生活再过一遍，只是希望能够获得唯有作家才有的特权——在‘再版’的生活中修正‘初版’的错误，生活的悲哀之处在于我们总是老得太快而又聪明得太晚，等你不再修正的时候，你也就不再了” ——西塞罗《论老年》</p></blockquote><p>在18年下半年，自己有一种感觉特别的强烈，就是总感觉时间过得飞快，而自己还什么都没有做，一周就完了，甚至自己想不到自己上周主要做了哪些事情。于是，自己想了一个办法，来抵抗这种感觉，就是每天写日记。 </p><p>开始的时候，自己主要是记录自己这一天都干了什么，写了一个月之后，自己总感觉自己是在记流水账，刚好那时候，在看一本书《好好学习：个人知识精力管理指南》，里面提到了通过写反思日记的方法来掌握知识，自己按照里面的方法写了 100 多天，感觉还是非常有用的。 </p><p>反思日记主要分为两个部分，反思与日记。反思就是对自己做的事进行思考，对产生结果的原因进行分析。日记则是要每天都要去写，每天都要对自己的生活进行记录。自己现在更加深刻的认识到， 一个人的变化不是突然发生的， 而是发生在每一天做的事情中的。 </p><p>根据自己的实际情况，我给自己制定了反思模板，每天日记的任务主要是回答自己这7个问题。</p><blockquote><ol><li>今天自己做的不好的事情是什么？</li><li>自己当时是怎么想的， 身体是如何反应的</li><li>如果自己再重新来一次， 自己会如何做</li><li>自己今天做的很好的事情是什么</li><li>自己目前最主要的目标是什么</li><li>自己今天任务的完成情况。</li><li>自己明天的计划是什么</li></ol></blockquote><p>这7个问题背后的原理是这样的：</p><ul><li><p>问题1-3，是对自己思考方式的反思。我们平时做一件事情，是基于 <strong>假设-行动-结果</strong> 这样的过程。 而反思，就是通过 <strong>观察结果-研究原来假设-反思校正假设</strong> 这样的顺序对自己思考的再思考。 </p></li><li><p>问题4， 是为了提高自己的自信心。个人认为自己在生活中不够自信，通过每天记录自己做的事情，来让自己增加自信心。 </p></li><li>问题5，提醒自己时刻盯住自己的目标，为了自己的目标而努力。 </li><li>问题6，对比昨天的计划，监督自己今天任务的完成情况。</li><li>问题7，是为明天的事情，做出一个良好的计划。 </li></ul><p>有时候，翻看自己之前的记录，会发现自己当时会面临这样的问题，回过头来再看也是比较有意思的事情，比如, 翻看自己18年10月22号的日记，发现自己是这样想的：<br><img src="https://i.loli.net/2019/01/13/5c3adb19d656f.jpg" alt="反思日记"></p><p>通过写反思日记，自己发现了一些自己反复会犯的问题。比如：</p><blockquote><p>自己下班一回到房子就什么也不想干，总是在刷微博、看美剧，但是自己在看完之后，自己并没有产生放松的愉悦感，在写反思日记的时候，自己总是懊恼自己为什么这样浪费时间，这实际上是自己的精力管理方面出了问题，认识到这个问题之后，现在自己也在尝试各种方式来恢复自己的精力。 </p></blockquote><p>个人认为培养出记反思日记的习惯还是很有必要的，通过记录自己的生活并不断反思， 能够让我更清醒的认识到自己的不足，从而尝试做出改变。</p><p>作者在《好好学习-个人知识精力管理指南》这本书中还提到了通过写反思日记来进行对标管理，把一本书中的知识进行每日的反思等方法。大家可以根据书中的内容，指定自己的个人反思模板。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/01/13/5c3ae1c08f107.png&quot; alt=&quot;反思日记&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“我应该不会拒绝从头到尾把生活再过一遍，只是希望能够获得唯有作家才有的特权——在‘再版’的生
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="写作" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="日记" scheme="https://zhangandyu.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="周报" scheme="https://zhangandyu.github.io/tags/%E5%91%A8%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>个人情绪控制</title>
    <link href="https://zhangandyu.github.io/2019/01/06/%E8%87%AA%E6%88%91%E6%95%91%E8%B5%8E/"/>
    <id>https://zhangandyu.github.io/2019/01/06/自我救赎/</id>
    <published>2019-01-05T16:00:00.000Z</published>
    <updated>2019-02-13T14:35:38.294Z</updated>
    
    <content type="html"><![CDATA[<p>自我救赎</p><p>童年遭受过负面的人，自控力和延迟自我满足的能力较弱。</p><p>对生活在不可预测的环境中的孩子来说，未来是不可信赖的，不值得等待的，<br>更不值得放弃眼前就能得到的快乐。</p><p>匮乏感让人不愿意接受他人的帮助。 一个在资源充足的环境中长大的人，反而更容易要求或者接受别人的帮助。 但对于匮乏感强烈的孩子来说，接受他人的帮助，就会提醒他们再次想起那种<br>匮乏感， 以及那种匮乏感所带来的羞耻感、面对他人的自卑感、没有力量的虚弱感。</p><p>痛楚感能够帮助我们对自我的情绪更有洞察力。在痛楚感发生时，人们为了减轻这种不适感，被迫去不断思考，<br>探寻思考这种痛楚从何而来？自己究竟为什么感到痛苦？痛楚感是我们自我分析、理解他人、思考世界的最重要的原动力。 </p><p>成长过程中有很多痛楚感的孩子，在长大后成为那些更深刻、更敏锐、更能接受和处理人和生活本质的复杂性的人。 </p><ol><li>以更开放的视角去看待不幸<br>每天花时间，写下你人生中的痛苦给你带来的积极和消极的影响。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自我救赎&lt;/p&gt;
&lt;p&gt;童年遭受过负面的人，自控力和延迟自我满足的能力较弱。&lt;/p&gt;
&lt;p&gt;对生活在不可预测的环境中的孩子来说，未来是不可信赖的，不值得等待的，&lt;br&gt;更不值得放弃眼前就能得到的快乐。&lt;/p&gt;
&lt;p&gt;匮乏感让人不愿意接受他人的帮助。 一个在资源充足的环境中长
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="阅读" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="情绪" scheme="https://zhangandyu.github.io/tags/%E6%83%85%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>业务分析——埋点方案</title>
    <link href="https://zhangandyu.github.io/2018/12/22/%E5%9F%8B%E7%82%B9%E6%96%B9%E6%A1%88/"/>
    <id>https://zhangandyu.github.io/2018/12/22/埋点方案/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-01-13T06:43:35.917Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据埋点方案"><a href="#数据埋点方案" class="headerlink" title="数据埋点方案"></a>数据埋点方案</h3><p><a href="https://www.sensorsdata.cn/blog/20181114-2/" target="_blank" rel="noopener">https://www.sensorsdata.cn/blog/20181114-2/</a></p><p>问题：</p><ol><li>需求整理不完善， 没有整体考虑， 版本更替原有埋点不可用</li><li>数据统计口径不清楚，没有将埋点的具体采集时机郑群传达，埋点不是自己想要定义的指标</li><li>数据采集方案没有想清楚， 哪些应该在前端埋点，哪些应该在后端埋点，埋点采集sdk如何正确使用没有了解清楚</li></ol><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据埋点方案&quot;&gt;&lt;a href=&quot;#数据埋点方案&quot; class=&quot;headerlink&quot; title=&quot;数据埋点方案&quot;&gt;&lt;/a&gt;数据埋点方案&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.sensorsdata.cn/blog/20181114-2/&quot; 
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="分析流程" scheme="https://zhangandyu.github.io/tags/%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>营销活动分析与思维技巧</title>
    <link href="https://zhangandyu.github.io/2018/12/22/%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E5%88%86%E6%9E%90/"/>
    <id>https://zhangandyu.github.io/2018/12/22/营销活动分析/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-02-24T16:01:54.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="营销活动分析"><a href="#营销活动分析" class="headerlink" title="营销活动分析"></a>营销活动分析</h1><h3 id="营销活动分析介绍"><a href="#营销活动分析介绍" class="headerlink" title="营销活动分析介绍"></a>营销活动分析介绍</h3><p>互联网公司经常会做一些运营活动，比如比如当当网的限时优惠活动，春节期间支付宝的集五福活动等。这些活动花费了公司大量的人力与财力， 那么活动的效果该如何评估呢？<br>这就需要用数据来说话。 数据分析在营销活动中的任务，不仅是在活动后对数据进行分析， 更要在活动前、活动中、活动后三个方面来都进行跟踪。 </p><h3 id="活动前期："><a href="#活动前期：" class="headerlink" title="活动前期："></a>活动前期：</h3><ol><li>目的</li></ol><ul><li>和运营人员商定好本次活动的目标，这次活动主要是为了：拉新、促活还是品牌推广，没有目标的活动不是好的运营活动。 </li></ul><ol start="2"><li>埋点</li></ol><ul><li>和运营人员商定好这次活动都需要了解哪些数据，针对需要采集的页面位置，写好埋点方案：字段名、埋点位置、上报方式</li><li>和研发人员沟通埋点方案，数据埋点完成后，测试采集数据是否准确， 避免采集数据有误。 </li></ul><ol start="3"><li>搭建指标体系</li></ol><ul><li>写出这次活动自己都需要哪些指标，如何计算， 提前搭建好指标体系</li><li>提前订好这次活动自己需要输出哪些数据，用什么形式来进行展现， 定好数据的输出格式。 </li></ul><blockquote></blockquote><h3 id="活动中期"><a href="#活动中期" class="headerlink" title="活动中期"></a>活动中期</h3><ol><li>观察活动前3天的数据</li></ol><ul><li>观察活动第1天的数据， 详细查看各指标体系的报表数据是否有异常，对于发现的问题做到及时修改。</li><li>观察1-3天的数据趋势， 预估活动目标的完成度， 考虑活动目标是否需要调整。 </li></ul><ol start="2"><li>活动数据及时数据</li></ol><ul><li>定时输出活动战报，及时发现数据异常波动， 让运营人员和项目领导知道数据的实时动态。 </li><li>对于长期活动，第一周后需要进行一次复盘，将结论同步给管理层， 让更高视野的人给建议。 </li></ul><h3 id="活动后期"><a href="#活动后期" class="headerlink" title="活动后期"></a>活动后期</h3><ol><li>活动的效果</li></ol><ul><li>短期效果<blockquote><p>活动对大盘的影响</p><ul><li>参与活动uv</li><li>打开APP， 首次进入活动uv</li><li>大盘的日环比、周同比</li></ul><p>新增用户<br>拉动低活跃用户重新活跃数<br>目标完成度<br>品牌传播指数</p></blockquote></li></ul><ul><li>长期效果<blockquote><p> 新增用户留存率<br>低活用户留存率</p></blockquote></li></ul><ol start="2"><li>活动优化</li></ol><ul><li>活动主漏斗数据转化率</li><li>活动功能模块渗透率</li><li>用户反馈</li></ul><ol start="3"><li>活动报告</li></ol><ul><li>在活动结束1-2周内输出，要有时效性。</li><li>活动与活动之前的数据对比更能说明问题</li><li>思考每次活动的本质和意义。</li><li>敢于暴露问题， 把已知的事实告诉上级，邮件同步给运营负责人</li><li>涉及到钱的问题， 需要让业务方给， 邮件说明情况，钱问题比较敏感。</li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>支付宝集五福活动</p><ul><li>带来新增用户，提升用户的活跃度，品牌传播量</li></ul><p>在活动开始之前应该确定一个重点提升的核心数据。 这样的数据包括新用户注册、用户活跃度、用户付费转化、产品交易额、品牌知名度（百度指数、新浪指数等）等等。 </p><p>非商品交易类的互动性活动，需要关注：</p><ul><li>产品核心数据（日活、新用户) 的提升效果。</li><li>专题页面的uv、pv,</li><li>活动产生的用户互动量和人均互动次数、分享次数</li><li>老用户和新用户的互动比例</li></ul><p>交易类产品的促销活动：</p><ul><li>互动为平台带来的总交易额、购买人数、人均客单价（关键指标）</li><li>活动页面商品的 uv、pv、进入活动页面的人数占比（活动吸引力）</li><li>浏览-加入购物车-下单的转化率，分析潜在用户流失原因。</li><li>优惠券核销量/ 优惠券发放量</li><li>不同渠道用户的付费比例，单价，留存</li></ul><p><img src="https://i.loli.net/2019/02/24/5c721dbaacd7d.png" alt="营销活动分析"></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;营销活动分析&quot;&gt;&lt;a href=&quot;#营销活动分析&quot; class=&quot;headerlink&quot; title=&quot;营销活动分析&quot;&gt;&lt;/a&gt;营销活动分析&lt;/h1&gt;&lt;h3 id=&quot;营销活动分析介绍&quot;&gt;&lt;a href=&quot;#营销活动分析介绍&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="活动分析" scheme="https://zhangandyu.github.io/tags/%E6%B4%BB%E5%8A%A8%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>专题分析</title>
    <link href="https://zhangandyu.github.io/2018/12/22/%E4%B8%93%E9%A2%98%E5%88%86%E6%9E%90/"/>
    <id>https://zhangandyu.github.io/2018/12/22/专题分析/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-01-14T16:11:16.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="专题分析"><a href="#专题分析" class="headerlink" title="专题分析"></a>专题分析</h3><p>数据分析师的一个重要考核， 就是专题分析的效果</p><ol><li>需求沟通</li></ol><p>一定要将20%以上的时间分配在沟通需求上，一定要当面沟通。 </p><p>原始需求——了解需求—— 本质需求——逻辑树——sql提数——分析方法——写分析报告</p><p>例如上线活动效果的专题分析流程：</p><ul><li>业务需求解读————需要与业务方当面沟通， 业务沟通贯穿整个分析流程。</li><li>活动效果的数据情况</li><li>目前活动对整个APP活跃用户，或者留存率的影响，以及活动的问题有哪些</li><li>活动的拉新、促活，用户粘性情况， 活动效果的优劣</li><li>通过逻辑树进行整理</li><li>建立分析AP， 分析师与业务方之间完成分析数据对焦，形成最终报告框架和结构。</li><li>通过SQL进行取数验证</li><li>分析： 组成部分、数量比较、维度变化、各项变化、各项相关性、其他数据挖掘</li><li>撰写报告： 90%的图+10的文，标题就是结论。 结论前置。 讲故事，报告的逻辑性一定要强。</li></ul><ol start="2"><li>项目专题分析的特征</li></ol><ul><li>有目标——围绕项目KPI来进行。 </li><li>有节奏——2-3周输出一份完整的报告。 </li><li>有闭环——报告不能太技术性， 要写成大白话最好， 说人话。 要明确给业务方提供建议改进方向， 而不是自己技术展现。</li></ul><p>3.专题分析实战</p><ul><li><p>项目背景：<br>电信app要在数据分析的基础上， 对产品运营进行优化，提升用户留存5%的绝对值。 </p></li><li><p>第1阶段：新用户留存整体分析<br>目的： 摸清数据现状， 同时找到若干个切入点。<br>关键点： 不要太注重细节， 该过程讲究报告产出的时效性，指明数据分析的方向， 让其他人员感受到数据分析师的存在。<br>过程：渠道方面， 各渠道的uv, 一、二级渠道的次留、7留。 产品方面, 主要功能的渗透率，功能是否出问题， 关键漏斗数据如何， 漏斗数据上有无发现。 用户方面， 产品用户的画像是什么， 用户的行为分布如何。 使用产品用户的分布。 </p></li><li><p>第2阶段： 寻找优化切入点， 一般是1-2个。<br>比如： 1. 关键立即数据发现曝光pv到点击pv的ctr很低， 我们可以围绕这个点细致分析： 对于新用户， 应该曝光什么，在什么时候， 什么位置曝光。 2. 某个量大的二级渠道的次留明显低于其他渠道， 围绕这个点，来进一步分析原因： 渠道本身质量存在问题？用户安装了竞品？当前产品设计与渠道用户不太匹配？高留存的渠道本身特征是什么？<br>通过这两点， 给渠道和运营的同事提供建议， 结合A/B测试， 就能看到数据分析的效果。 </p></li><li><p>第3阶段：</p></li><li><ul><li>不断重复前两个阶段， 继续寻找其他切入点。 </li></ul></li><li><ul><li>同时进行竞品分析， 营销活动分析，用户流失分析等等</li></ul></li><li><ul><li>每一次分析报告都要有能落地的点， 并且真正的落地了。 形成闭环，  评判数据分析师的标准： 产出专题分析的质量和数量。  质量就是数据分析落地的点和提神的kpi。 </li></ul></li></ul><h1 id="改版分析"><a href="#改版分析" class="headerlink" title="改版分析"></a>改版分析</h1><p> 新改版页面的效果怎么样？</p><p> 产品迭代的需求来源： 市场调研、竞品分析、用户反馈、数据分析、团队头脑风暴。</p><p> 分析方向：</p><ol><li>改版后， 新功能是否受欢迎</li><li>改版后， 对产品的流程转化率是否有提升</li><li>改版后， 对产品的整体留存的影响</li><li>改版后， 用户究竟如何使用新功</li></ol><ol><li><p>功能活跃比<br>新功能的用户数 / 同期客户端活跃用户数</p></li><li><p>漏斗转化提升</p></li><li><p>次日留存、周留存、月留存等指标是否朝着更好的方向发展。 </p></li><li><p>用户使用新功能， 是否符合你的预设， 还是说用户创造出了新的玩法。 </p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;专题分析&quot;&gt;&lt;a href=&quot;#专题分析&quot; class=&quot;headerlink&quot; title=&quot;专题分析&quot;&gt;&lt;/a&gt;专题分析&lt;/h3&gt;&lt;p&gt;数据分析师的一个重要考核， 就是专题分析的效果&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需求沟通&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;一定要将20
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="分析流程" scheme="https://zhangandyu.github.io/tags/%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>业务分析-数据分析师岗位介绍</title>
    <link href="https://zhangandyu.github.io/2018/12/22/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B8%88%E5%B2%97%E4%BD%8D%E4%BB%8B%E7%BB%8D/"/>
    <id>https://zhangandyu.github.io/2018/12/22/数据分析师岗位介绍/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-02-21T16:50:45.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数据分析师岗位介绍"><a href="#1-数据分析师岗位介绍" class="headerlink" title="1. 数据分析师岗位介绍"></a>1. 数据分析师岗位介绍</h1><ol><li>什么是数据分析师？</li></ol><ul><li>数据分析师， 就是专门从事数据收集、研究分析，并依据数据来指导业务决策的人员。</li></ul><ol start="2"><li>岗位分类</li></ol><ul><li><p>其中的数据收集、研究分析、业务指导刚好可以将数据分析的岗位分为三个大的部分：</p></li><li><ul><li>数据收集——数据研发工程师</li></ul><blockquote><p>主要职能是搭建数据处理的基础设置，让大数据的存储、处理、计算能按要求完成，包括数据仓库搭建、数据存储、计算处理、报表开发等。</p></blockquote></li><li><ul><li>数据挖掘、算法工程师</li></ul><blockquote><p>主要是应用机器学习和数据挖掘算法，进行用户行为分析和用户属性挖掘，建立模型，预测、用户画像等为业务场景提供支持。</p></blockquote></li><li><ul><li>业务数据分析师</li></ul><blockquote><p>分析业务数据， 发现问题，分析问题，得出分析结论，为决策提供支持，主要支持市场运营部门。</p></blockquote></li></ul><p>如需详细了解数据分析师的岗位划分，可以参考秦路老师的文章：<a href="https://mp.weixin.qq.com/s?__biz=MjM5NjEyMDI2MQ==&amp;mid=2455947571&amp;idx=1&amp;sn=4e1fe329b7acef882142df0186a4c4a5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">数据分析的职业规划</a></p><ol start="3"><li>业务数据分析师的日常工作有哪些?</li></ol><ul><li><p>业务前期： 建立业务数据指标， 梳理业务数据口径， 确定数据埋点方案， 进行埋点测试，确保数据采集的准确性。</p></li><li><p>日常工作： 公司的日报、周报、月报数据支持，业务方临时性数据支持， 数据异常原因分析， 业务专题分析。</p></li></ul><ol start="4"><li>业务数据分析师的技能要求</li></ol><ul><li><p>数据分析思维和对公司业务的理解程度， 是业务数据分析的主要核心技能。</p></li><li><p>必备技能有： Excel, Hive/Sql, 统计学，PPT</p></li><li><p>软技能有： 逻辑思维能力，分析方法论， 数据敏感度， 沟通协调能力</p></li><li><p>加分技能： Python, R,  机器学习算法</p></li></ul><ol start="5"><li><p>业务数据分析的发展方向</p><p>业务数据分析是入门相对容易， 但要精通比较困难， 在公司属于比较基础的岗位。如果专精于业务方向， 可以往管理方面发展， 如数据运营经理/总监。也可往数据挖掘工程师方面发展， 需要进一步掌握Python和机器学习算法等知识，后面也可以往数据产品经理的方向发展。</p><p>对于我自己来说，目前的职业发展方向是业务数据分析师， 主要任务是不断学习和完善业务数据分析的所有技能， 加强互联网运营的业务理解能力，打好职业发展的基础，未来的期望是往数据挖掘方面发展。</p></li></ol><ol start="6"><li>业务数据分析师的考量标准</li></ol><h3 id="业务数据分析师的考核标准"><a href="#业务数据分析师的考核标准" class="headerlink" title="业务数据分析师的考核标准"></a>业务数据分析师的考核标准</h3><p>产品理解能力：</p><blockquote><ul><li>熟悉业务的各种核心数据，明白用户从哪里来，进来之后做了什么，了解用户反馈最多的问题是什么。</li><li>了解产品功能渗透率和关键路径，再以这些数据为切入点，思考当前产品有哪些问题，并与产品经理沟通如何优化，同时看竞品数据和行业数据，深入了解业务数据。</li><li>深入了解： 要有自己的洞见，对于整个行业，各个不同阶段的领头羊是谁，他们靠什么成为领头羊，又因为什么出现增长瓶颈，当前各自的大法测试什么，对我们自身的app有什么借鉴，后续我们要监控哪些数据。</li></ul></blockquote><p>分析方法论：</p><blockquote><p>能够快速从一个较全面、逻辑性、价值性的角度去分析，而不是单点无架构分析。所有方法论都是通过不断提炼、总结、实践得出来的。</p><ul><li>指标体系方法论</li><li>流量分析方法论</li><li>路径分析方法论</li><li>产品分析方法论</li><li>营销活动分析方法论</li><li>用户流失分析方法论</li><li>A/B 测试</li><li>最大概率法则、二八定律、幸存者偏差等</li></ul></blockquote><p>可视化能力： </p><blockquote><ul><li>PPT 制作能力</li><li>PPT专题报告之间的逻辑性</li><li>内容是否符合金字塔原理</li><li>数据可视化内容美观性</li></ul></blockquote><p>演讲能力：</p><blockquote><ul><li>表达能力</li><li>讲故事能力</li><li>形象化能力</li><li>大心脏能力如何</li></ul></blockquote><p>协作沟通能力： </p><blockquote><ul><li>跟产品、业务、研发沟通时的软技能</li><li>如何在团队中定义好自己的位置并让其他人感到舒服</li></ul></blockquote><p>逻辑思维能力：</p><blockquote><ul><li>分析推导过程的全面性、合理性、价值型</li></ul></blockquote><p>技术能力：</p><blockquote><ul><li>excel的常规操作</li><li>统计知识是否能够熟练应用</li><li>hive、sql的熟练程度</li><li>python 中常用的数据分析库能否熟练应用</li><li>算法模型是否熟练搭建并知道有哪些坑。</li></ul></blockquote><hr><p>—如何规划数据职业生涯</p><ol start="6"><li>数据产品经理-产品架构师</li></ol><ul><li>掌握基础技能和思想<br>技能：excel, sql, hive, python, 统计学、 基础机器算法<br>策略产品： 机制设计、冷启动、用户画像标签体系<br>思维模式： 依赖数据做决策，建立产品闭环——从数据产生、收集、统计、分析、反馈。<br>职能分工： 功能产品，策略产品</li></ul><ul><li><p>参与完整的业务闭环-open<br>建立明确的优化目标(objective)<br>打通数据记录和分析流程(process)<br>建立A/B测试优化的框架(Experiment)<br>将目标按转化网络分解(Net)</p><p>通过闭环的优化过程， 感知数据。 </p></li><li><p>独立负责项目或产品</p></li></ul><hr><p>机器学习定理</p><ol><li>没有免费午餐定理，NFL定理<br>没有任何算法在所有数据情形下有天然优势， 在没有实际背景下，没有一种算法比随机胡猜的效果好。</li></ol><p>所有模型是没有好坏之分的， 当数据有线性分布时， 模型就会有效。 先掌握领域前言知识， 用它来指导业务， 而不是把<br>每一个模型都跑一遍。 </p><ol start="2"><li>丑小鸭定理<br>两只白天鹅的区别与丑小鸭与白天鹅的区别一样远。</li></ol><p><a href="https://blog.csdn.net/mnshenyanping/article/details/51280731" target="_blank" rel="noopener">https://blog.csdn.net/mnshenyanping/article/details/51280731</a></p><hr><ol><li><p>不要追求成为全栈工程师。 </p></li><li><p>产品的逻辑一定要懂。<br>什么是产品？<br>-定义问题， 解决问题的逻辑。 比如： 用户标签体系、冷启动策略等。</p></li><li><p>不要频繁切换从事的业务领域</p></li></ol><ul><li>业务领域先验知识的积累， 是成功进行数据建模的关键。 </li><li>业务领域的商业逻辑需要花时间搞清楚， 这对产品的决策至关重要。 </li><li>同一个领域的不断努力可以形成个人口碑。 </li></ul><hr><hr><h3 id="工作内容"><a href="#工作内容" class="headerlink" title="工作内容"></a>工作内容</h3><p>周末报表：</p><ol><li>整体业务报表：核心指标和产品核心业务与功能变化</li><li>新用户报表：用户获取与渠道质量、新用户行为分析、新用户相关运营活动分析</li><li>分析师分析报表：分析师结合核心指标与产品内部的活跃现象，自行去分析用户行为数据，挖掘有效增长点，并讨论后产出有价值的分析报告</li><li>异常分析报表： 日活、留存、新增等数据发生异常时，通过细分探寻原因，定位问题。 如果日活正常偏高，可提醒业务同事选择进行一些活动。</li></ol><p>根据报表数据与其他部门进行沟通，推动业务产品的迭代和发展。</p><ol><li>每次产品改进时，和产品经理沟通本次改版的方向和目的</li><li>在新版本或功能上线后， 在第一时间（1-2天内）给产品经理搭建新版本报表，反馈改进结果。（新版本覆盖情况，新功能使用情况，新优化的数据表现；整体表现数据：留存，转化。具体功能的使用人数、使用率、使用留存等）</li><li>在1-2周内，给出3-4份详细的分析报告，进一步分析用户对新功能或新版本的反馈，挖掘信息，证明有效性，分享给产品经理，推动他们解决问题</li></ol><hr><h1 id="3-数据分析师能力如何展现"><a href="#3-数据分析师能力如何展现" class="headerlink" title="3. 数据分析师能力如何展现"></a>3. 数据分析师能力如何展现</h1><hr><h3 id="如何提高自己的数据分析能力"><a href="#如何提高自己的数据分析能力" class="headerlink" title="如何提高自己的数据分析能力"></a>如何提高自己的数据分析能力</h3><ol><li>行业认知， 多看一些咨询公司的报告，了解分析的角度和行业趋势及现状。</li><li>数据认识， 对数据的敏感度不能局限在统计意义， 而是要掌握数据来源的方式，业务之间的埋点如何， 采集方式是什么样</li><li>分析的目的是什么，能否还原用户或产品行为</li><li>注重数据的探索， 多角度去思考， 输出与目的相关的发现，由点到面，还原到用户行为或营销策略的制定，比如， 用户使用的一款app, 什么时间发的信息能够让DAU迅速提升。</li><li>掌握统计学， 统计学是对各种假设检验的还原，要深入理解每个算法的场景和弊端</li><li>要尝试总结归纳，输出自己对行业的看法，动手+动脑思维。</li><li>假设你是领导，你如何看数据而不是玩数据；假设你是运营人员， 你如何建立分析体系， 指标设定如何让目标更有效</li><li>写文章，能够提高自己的故事构思和思维能力， 更有效的是能够积累文笔、表达、沟通深度等。想的越多， 说的才能越有深度。</li></ol><hr><h3 id="如何算是懂业务、有思路的数据分析师"><a href="#如何算是懂业务、有思路的数据分析师" class="headerlink" title="如何算是懂业务、有思路的数据分析师"></a>如何算是懂业务、有思路的数据分析师</h3><blockquote><p>数据君</p></blockquote><ul><li>硬实力</li></ul><ol><li>工具的掌握</li><li>算法的掌握</li><li>有自己的技术博客</li><li>工具的操作和应用上有自己的输出和展示</li></ol><ul><li>软实力</li></ul><ol><li>要有好的思路</li></ol><blockquote><p>说话表达有套路，比如 总分总 等逻辑</p></blockquote><ol start="2"><li>要对方法路有深入的思考。</li></ol><p>比如：swot,pest,5w2h,生命周期，aaarrr,4p， 金字塔原理等</p><p>训练方式： 脑图，逻辑树</p><ul><li>案例</li></ul><p>例如： 为什么最近GMV的增速放缓了？</p><ol><li><p>大局观，用pest,swot等方法先看看大环境的状态是什么？竞争对手如何</p></li><li><p>GMV计算的切入点，比如，人、货、物等（思维框架）</p></li><li><p>用5w2h、aaarrr、生命周期等方法去定位和排查问题出现的可能性。（不同方向有不同的方法论）</p></li><li><p>数据罗列和验证过程， 从数据分析的本身流程去全面核实，数据来源追溯、口径核实、对比历史等，找到产品用户放缓的原因到底是什么，假设验证的过程</p></li><li><p>问题和策略落实到人或者部门，要不然你的建议就是咨询，无法很好的落地，假设几个角色，要不面试官会觉得你只停留在学术层面</p></li><li><p>面试官要的不是答案，而是你思考的过程。</p></li></ol><ul><li>战斗力</li></ul><ol><li>你学了什么课程， 有没有输出自己的作品。把自己所学的做成一份从0-1的报告呈现给面试官，你的印象分会很高，他们会觉得你的心智更成熟，很有想法，每个团队其实都缺少一定的活力， 这才是年轻人应该有的担当。</li></ol><ol start="2"><li><p>当你把自己的作品展现出来， 总会有一些人和你产生共鸣，而你在共鸣中不断的迭代自己， 这才是一个良性的循环，你才有可能有不平庸的资本。</p></li><li><p>其实数据分析师一个入门简单， 深入难的学习， 他不是依靠参加各类培训和课程积累，而是依靠你的经验和思维系统。 </p></li></ol><hr><h1 id="4-数据分析方法论"><a href="#4-数据分析方法论" class="headerlink" title="4. 数据分析方法论"></a>4. 数据分析方法论</h1><h3 id="数据分析的主要方法"><a href="#数据分析的主要方法" class="headerlink" title="数据分析的主要方法"></a>数据分析的主要方法</h3><ol><li>趋势分析</li></ol><p>通常我们在数据分析产品中建立一张数据指标的线图或者柱状图，然后持续观察，重点关注异常值。<br>在这个过程中，我们要选定第一关键指标(OMTM，One Metric That Metter)，而不要被虚荣指标(Vanity Metrics )所迷惑。<br>以社交类APP为例，如果我们将下载量作为第一关键指标，可能就会走偏;因为用户下载APP并不代表他使用了你的产品。在这种情况下，建议将DAU(Daily Active Users，日活跃用户)作为第一关键指标，而且是启动并且执行了某个操作的用户才能算上去;这样的指标才有实际意义，运营人员要核心关注这类指标。</p><ol start="2"><li>多维分解</li></ol><p>多维分解是指从业务需求出发，将指标从多个维度进行拆分;这里的维度包括但不限于浏览器、访问来源、操作系统、广告内容等等。</p><p>为什么需要进行多维拆解?有时候一个非常笼统或者最终的指标你是看不出什么问题来的，但是进行拆分之后，很多细节问题就会浮现出来。</p><p>举个例子，某网站的跳出率是0.47、平均访问深度是4.39、平均访问时长是0.55分钟。如果你要提升用户的参与度，显然这样的数据会让你无从下手;但是你对这些指标进行拆解之后就会发现很多思路。</p><ol start="3"><li>用户分群</li></ol><p>用户分群主要有两种分法：维度和行为组合。<br>第一种根据用户的维度进行分群，比如从地区维度分，有北京、上海、广州、杭州等地的用户;从用户登录平台进行分群，有PC端、平板端和手机移动端用户。<br>第二种根据用户行为组合进行分群，比如说每周在社区签到3次的用户与每周在社区签到少于3次的用户的区别，这个具体的我会在后面的留存分析中介绍。</p><ol start="4"><li>用户细查</li></ol><p>用户行为数据也是数据的一种，观察用户在你产品内的行为路径是一种非常直观的分析方法。在用户分群的基础上，一般抽取3-5个用户进行细查，即可覆盖分群用户大部分行为规律。<br>绝大多数产品都或多或少存在一些反人类的设计或者BUG，通过用户细查可以很好地发现产品中存在的问题并且及时解决。</p><ol start="5"><li>漏斗分析 </li></ol><p>漏斗分析是一套流程式数据分析，它能够科学反映用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。漏斗分析模型已经广泛应用于网站用户行为分析和APP用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析的工作中</p><p>漏斗分析要注意的两个要点：<br>第一：不但要看总体的转化率，还要关注转化过程每一步的转化率;<br>第二：漏斗分析也需要进行多维度拆解，拆解之后可能会发现不同维度下的转化率也有很大差异。</p><ol start="6"><li>留存分析</li></ol><p>留存分析是一种用来分析用户参与情况/活跃程度的分析模型，考察进行初始行为的用户中，有多少人会进行后续行为。这是用来衡量产品对用户价值高低的重要方法</p><p>衡量留存的常见指标有：次日留存率、7日留存率、30日留存率等等</p><p>留存分析可以帮助回答以下问题：<br>一个新客户在未来的一段时间内是否完成了您期许用户完成的行为？如支付订单等；<br>某个社交产品改进了新注册用户的引导流程，期待改善用户注册后的参与程度，如何验证？<br>想判断某项产品改动是否奏效，如新增了一个邀请好友的功能，观察是否有人因新增功能而多使用产品几个月？</p><ol start="7"><li>A/B测试与A/A测试</li></ol><p>A/B测试是为了达到一个目标，采取了两套方案，一组用户采用A方案，一组用户采用B方案。通过实验观察两组方案的数据效果，判断两组方案的好坏。在A/B测试方面，谷歌是不遗余力地尝试;对于搜索结果的显示，谷歌会制定多种不同的方案(包括文案标题，字体大小，颜色等等)，不断来优化搜索结果中广告的点击率。</p><p>这里需要注意的一点，A/B测试之前最好有A/A测试或者类似准备。什么是A/A测试?A/A测试是评估两个实验组是否是处于相同的水平，这样A/B测试才有意义。其实这和学校里面的控制变量法、实验组与对照组、双盲试验本质一样的。</p><hr><h1 id="5-如何分析业务数据"><a href="#5-如何分析业务数据" class="headerlink" title="5. 如何分析业务数据"></a>5. 如何分析业务数据</h1><p>问题陈述、产生假设、收集数据、分析数据、获取结论、采取行动</p><ol><li>评估和定位问题</li></ol><p>在深入研究任何类型的数据之前，应该快速找到你需要解决的真正问题，并用最简单的话定义它</p><p>如果无法用简单的语言解释你要解决的业务问题，那么任何数据分析都无法解决问题。</p><ol start="2"><li>快速评估和定位问题的三问：</li></ol><ul><li><p>这是否是系统异常导致的问题？</p><blockquote><p>下载量下跌，但激活量没有，也许是下载数据没有埋点或埋点错误？</p></blockquote></li><li><p>这是更大问题的预兆吗？</p><blockquote><p>注册号码的下降是网站故障的指示吗？</p></blockquote></li><li><p>你在看一个重要的度量指标吗？</p><blockquote><p>如果网站的转化率下降，但原始注册量没有下降， 那么就从一个紧急事件变成了一个谜团待揭开</p></blockquote></li></ul><ol start="3"><li>确定潜在原因</li></ol><ul><li><p>经验检索，快速寻找原因<br>根据经验，寻找任何明显的可能原因或问题的答案, 当你检查显示问题的来源或报告后，是否有任何异常原因立即浮现在脑海中？</p><blockquote><p>例如，你的电子商务网站的ssl认证可能过期，导致浏览器弹窗窗口警告数据不安全，从而显著降低购物车转化率</p></blockquote></li><li><p>询问相关人员原因<br>这个问题会影响和涉及其他团队吗？如果是这样，他们是否对可能的原因有任何了解？即使问题与其他团队之间没有明显的联系，也有必要咨询一下。</p><blockquote><p>营销经理可能会问客户支持： 我注意到注册数据下降了，你能否想一想过去几周你发现过什么相关的变化吗？</p></blockquote></li><li><p>创建假设<br>一个假设知识一个尚未得到证实的有根据的猜测。 在分析数据之前，清楚地说明问题的几个可能原因非常重要，这有助于防止常见的数据分析误区。</p></li></ul><blockquote><p>导致注册量突然下降的假设：</p><ul><li>某些地区的公众假期</li><li>最近对营销网站的更改</li><li>星期一网站中断导致注册过程中出现错误</li><li>转换率下降减少了注册量</li><li>产品页面在某搜索排名下降到搜索结果的第二页</li></ul></blockquote><p>技术思维的方法——科学假设需具备的条件：</p><ul><li>涉及一个自变量和一个因变量</li><li>它是可测试的</li><li>它是可证伪的</li></ul><blockquote><p>有时查看数据可能会产生一个新的假设，需要再次测试。最终，我们的假设会在下一步通过数据分析得到证实或反驳。</p></blockquote><ol start="4"><li>分析数据</li></ol><ul><li><p>分割并确定相关数据指标<br>根据你的假设，你需要查看哪些数据？哪些指标可以帮助你证明或者反驳假设？</p><blockquote><p>你可以按国家/地区， 渠道和网络会话持续时间细分注册次数，以测试你的假设</p></blockquote></li><li><p>注意你的数据<br>基于你已知的业务指标，你可以判断数据是否出现异常？如果无基准线，请用历史数据作为起点。</p><blockquote><p>app注册量同比下降20%</p></blockquote></li><li><p>评估异常或趋势的影响<br>经过前两个步骤，你要查看发现的趋势/异常是否足以解释问题</p></li></ul><blockquote><p>在寻找数据中的异常或趋势时，要注意这些异常或趋势不仅要具有统计意义，也要具有实际意义。我们需要弄清楚是什么会对我们发现的问题产生实际影响。</p></blockquote><p>统计显著性检验用于确定你注意到的异常是由于抽样误差还是适用于所有对象。 </p><hr><h1 id="6-数据分析面试问题"><a href="#6-数据分析面试问题" class="headerlink" title="6. 数据分析面试问题"></a>6. 数据分析面试问题</h1><ol><li>假设你的产品新功能上线，那么哪些数据指标可以量化这些功能？这些变化产生的影响，你准备如何入手？</li></ol><blockquote><p>提示：从数据角度讲，可能从页面的热力图选取热区，或根据 A/B test 实验来选择方案可能会更加理想。</p></blockquote><ol start="2"><li>如果抖音一个视频的页面变宽， 那么它的点击数，曝光数，和点击率如何变化</li></ol><ol start="3"><li><p>面试技巧：理论基础要非常好，面试环节和谈薪资环节，一定要非常淡定，有一颗大心脏，不到最后签合同，绝不松懈。</p></li><li><p>活动的拉新效果怎么评估</p></li><li><p>国企面试技巧</p></li></ol><ul><li><p>软技能——与人相处能力、展示能力、时间管理能力、预判力</p></li><li><p>面试技巧——积极主动、沟通能力、逻辑框架性、表现自信、淡定。 </p></li></ul><ol start="6"><li>BAT面试</li></ol><ul><li><p>1面-电话面<br>说话要有逻辑性，简历中项目的数据要非常清晰， 目前公司app的日活、月活、渠道留存。 </p></li><li><p>2面-现场面<br>多使用应聘岗位公司的app, 带一份自己写的优秀的分析报告，当面试官问你有什么想问的，结合公司app内容， 提前想好一些问题， 问面试官， 并给出自己的见解。  </p></li><li><p>3面-总监面<br>要有亮点， 有自己代表性的项目， 了解产品的宏观知识，行业趋势， 了解产品竞品， 行业痛点， 产品改进， 之前项目的上下游关系， 要多有想法。 </p></li><li><p>4.必问的三个问题</p></li><li><ul><li>流量波动</li></ul></li><li><ul><li>常用的三个app</li></ul></li><li><ul><li>之前产品的商业模式，如cpc, cpm</li></ul></li></ul><h1 id="7-专题分析"><a href="#7-专题分析" class="headerlink" title="7. 专题分析"></a>7. 专题分析</h1><p>流量分析</p><ol><li>从哪里来</li><li>经过什么</li><li>产生什么价值</li><li>波动分析</li></ol><p>渠道分析——常见渠道<br>内部渠道<br>外部渠道<br>作用： 拉新用户<br>前期靠渠道推广， 中后期靠自传播，或用户的免费推广</p><hr><p>软技能+面试技巧<br>进入一家公司靠能力， 在一家公司的发展空间靠能力+软技能。<br>同样一个问题，如何快速领会出领导的意图，并且能够有效的表达和展现，往往决定后面的发展高度。</p><p>开会提前准备会议内容，并且随时准备表达自己的数据分析能力。把会议当做展示自我的一个机会。 比如ceo开员工大会，对业务提出一些问题，或数据不太清楚，业务该怎么走。如果你能够对公司的业务数据了然于胸，并对该类问题有过见解，必然会脱颖而出。</p><hr><p>BAT工作<br>阿里：对寻找方向，重点解决，方法论研究。<br>腾讯： 埋点，指标体系，检测，异常，A/B测试。 增长黑客。<br>百度： 用户运营，体系</p><p>用户增长</p><p>日常主要工作：<br>数据异常排查<br>专项分析KPI<br>埋点</p><p>数据异常排查：<br>解释数据波动，排查原因。</p><p>数据较大波动说明两个问题：1. 数据本身有问题。 2. 业务本身有问题</p><p>数据异常排查的前期准备：</p><ol><li>业务理解</li><li>指标口径</li><li>当前数据的产出过程</li></ol><p>异常排查的方法论：<br>判断是否异常</p><ul><li>亲自看数据的准确性</li><li>时间轴拉长，看是近期异常，还是周期异常<br>把近三个月的数据拉出来</li><li>看和该指标关联的其他指标或其他核心指标是否异常</li><li>找到一个关键人物，提前沟通一下。 </li></ul><p>最大概率法则<br>闭合</p><h1 id="8-数据分析方法案例"><a href="#8-数据分析方法案例" class="headerlink" title="8.  数据分析方法案例"></a>8.  数据分析方法案例</h1><p>如何提高全站留存率？</p><ol><li>选择高留存的行为，并选择其中比较容易扩大使用者面积的几个，在产品功能层面放大，让更多的人看到并发生转化，从而提升留存。</li><li>评估最终效果时，首先评估该功能的使用人群和占比是否有效提升，有则认为改进有效</li><li>以上主要因为产品在改进期间会同时发生很多其他改进，也会有各种不同的市场，运营活动，单纯用留存来评估，无法有效验证。</li></ol><p>例如：<br>即刻产品的核心功能之一就是内容的分发，用户绝大多数的时间都在浏览关注、推荐和动态页的内容与评论。<br>按照用户使用这些内容模块的行为，可以按其门槛和深浅分为路人行为（如浏览帖子）、围观行为（点击并查看评论）、普通参与行为（点赞、转发）、深度参与行为（发布评论）等。通过留存分析功能，发现行为深度越深，用户的留存就越高。<br>但由于扩大发生参与行为的门槛过高，落地性也就较差。因此，选择围观行为，通过放大其面积来提升用户全站留存，所以，就在产品信息流列表页露出一条热评，一方面让更多的用户看到最精彩评论，另一方面更有力的引导用户点击查看更多内容。</p><p>新增热评功能后，成功将阅读评论的用户比例提升，并且成功提高了全站留存</p><hr><p>具的操作只是帮你快速业务流程梳理出关键性的分析和指标体系，那么这些体系和指标的度量和之间的关系就要依靠统计学去界定和规范</p><p>一个网站改版了，新版的页面没有改变原来的交互操作，只是改变了视觉样式，用户访问量和点击量变化了，这些变化是好是坏?</p><p>  1、我们已知的是改版前后点击量的数据和用户访问量的数据<br>2 、我们想知道这个变化是好是坏</p><p>要怎么做?算一下改版前后用户的百分比和点击量的百分，如果改版后用户量下降了，点击量下降了是不是改版就不成功?显然我们不能如此简单的看问题。要比较这两个样本，我们可以使用T检验。</p><p>T检验(Student’s t test)是用于小样本(样本容量小于30，总体标准差σ未知的正态分布)的两个平均值差异程度的检验方法。</p><p>我的置信区间是95%，所以如果sig&lt;.05就代表差异显著。</p><p>从表上看，改版前后点击量和用户数两项上差异并不显著，所以我们可以认为这次改版至少没引起什么不良的影响。</p><p>当然现实问题往往更复杂，仅就改版为例，我们需要考虑很多问题，例如：</p><p>1、改变了哪些内容? 外观还是交互方式?或者外观+交互方式?布局有什么变化?交互方式的变化对用户完成一个任务所需的步骤或点击次数是否有改变?<br>2、改版前的数据采集了多少天?改版后的数据采集了多少天?<br>3、改版前后的时期在每一年的相应劫夺，用户的访问量是否有显著变化?趋势是怎样的?</p><p>tabula工具， 将PDF表格提取到Excel</p><hr><p>对新版本的分析</p><ol><li><strong> 改版后，新功能是否受欢迎 </strong> </li></ol><p>要衡量一个新功能是否受欢迎，基本就看这个功能上线之后，用的人数多不多，用的人越多，表示这个新功能还是挺受欢迎的（当然，这里还有一些运营推广的因素）。</p><p>一个比较好的衡量指标是功能活跃比，什么叫功能活跃比，也就是使用了新功能的用户数/同期活跃用户数，比如说新功能的用户数是1000人，而同时期产品的整体活跃用户数是10000人，那么这个功能的活跃比就是10%。</p><ol start="2"><li>对产品流程转化率是否有提升</li></ol><p>我们就需要通过去观察整个产品的流程转化率是否因为产品迭代改版而有所提升。最基本的方法，就是通过创建流程漏斗来进行数据观察<br>们就可以将上述事件组装成一个转化漏斗，如果你优化了商品详情页或者是搜索页面，那么就可以很好地通过漏斗来看出，改版之前和改版之后，这个流程的转化数据发生了什么变化，每个小环节的漏斗转化率又发生了什么变化，这样就能比较准确地评估出产品迭代对流程转化率是否具备提升作用</p><ol start="3"><li>对产品整体留存的影响</li></ol><p>在迭代之后，也可以好好观察一下产品的整体留存是否产生了变化，比如次日留存、周留存、月留存等等指标，是否朝着更好的方向发展</p><ol start="4"><li>用户究竟如何使用新功能</li></ol><p>用户究竟是如何使用产品新功能的，是否符合你预期设想的那样，还是说用户自己创造出了新的玩法</p><hr><p>向老板汇报注册量下降的原因</p><p>核心问题： 我们的注册量下降， 是什么原因导致的？</p><p>假设： 由于….导致了注册量的下降</p><blockquote><ul><li>某些地区的公众假期</li><li>最近对营销网站的更改</li><li>星期一网站中断导致注册过程中出现错误</li><li>转换率下降减少了注册量</li><li>产品页面在某搜索排名下降到搜索结果的第二页</li></ul></blockquote><p>数据分析：<br>思考数据有多少变化?是否真的异常<br>分别按照天和小时查看数据的变化，发现更改网站（网站注册会出现中断）时注册量确实有下降，但网站更改完成后注册量仍然在下跌，且进一步分析发现对注册表单样式的更改，使转化率略有上升，因此不是对营销网站的更改导致。<br>通过进一步查看数据，发现在总体注册量下降期间，到达注册页面的人数减少了大约 10％，因此，可能是上游问题导致的。<br>接下来，考虑假期假设（下跌开始时间是某些地区的公众假期）。但随着时间的推移，各国的注册量都有所下跌，所以该假设排除<br>此时，她整理了一下思绪，决定分析点击付费广告投放更改后的数据。发现其中一个广告系列转化率下降了 50％，但这个只占注册量的 1％，所以不是主要原因。<br>Jody 又通过渠道查看注册率，发现有机搜索（占注册量的 70％）下降了 20％，推测是几周前页面更改引起的页面排名的变化。于是，她开始检查 SEO 数据，发现主要关键字已降低排名，现在位于第二页，这样一来，除了注册量其他方面也会受影响。<br>最终，Jody 除了解释注册量下降之外，还创建了一个策略来恢复注册，并将分析报告呈现给了产品副总裁和首席执行官。</p><hr><p> 为什么购物车到下单的转化率在降低？</p><p>核心问题：许多潜在客户在购物车结算这一步流失，我们该如何降低流失率？</p><p>假设： 由于…转化率下降</p><blockquote><ul><li>放入购物车的人绝对数量增加</li><li>最近对付费流程的更改</li><li>季节性（即假期，学校休息等）</li><li>促销结束导致更多人放弃下单</li><li>某些商品出现问题，影响下单</li></ul></blockquote><p>Tyler 第一步思考加入购物车的人绝对数量是否增加？如果有大量人开始向购物车添加商品但完成购买的人数保持不变，那么可以判断有一批购物者的转化率降低，他注意到加入购物车的人数略有增加。</p><p>然后他开始询问相关团队的人，如有没有促销活动？有没有推出新产品？会不会有季节性影响？付费过程有什么变化吗？价格是否经过调整？（注意：根据业务和产品范围的不同，这可能会有很大差异。）</p><p>Tyler 最终得知付费流程发生了一些小变化。现在，他们不仅仅列出购物车中的商品，而是展示每件商品的图片。</p><p>为了进一步分析这种变化的影响，他将付费流程分成了不同的步骤，发现用户的浏览数据正常，事实上，更多的人正在进行下一步，所以这似乎不太可能是罪魁祸首。</p><p>接下来，Tyler 通过将本周的购物车转化率与前几年的同一周进行比较来寻找任何季节性影响，他还通过快速浏览日历，了解任何可能的线索，但由于会话和电子邮件开放率等相关指标未受影响，季节性因素假设也排除。</p><p>Tyler 之前咨询到最近的促销结束了，按照常识，当人们意识到促销已经结束时，他们更有可能放弃下单。Tyler 在购物车转化率下降之前使用促销代码查看付费比例，发现只占 5％，但放弃率的变化是三倍，所以这只能算一个促成因素。</p><p>Tyler 又开始思考这是商品库存的原因吗？但所有商品的性能相当一致，这个假设也不成立。</p><p>在考虑其他可能的原因时，Tyler 再次审查付费流程。发现商品价格页面中对运费的描述部分大大减少，他回忆起之前对产品页面进行一些外观修改的时间与流失率增加时间完美吻合。</p><p>回顾这些变化后，他的新假设是潜在客户放弃下单，是因为他们期望下单时购买的价格是产品页面设定的较低价格，一旦他们看到全价（包括运费），就会放弃下单。</p><p>发现这一点后，Tyler 非常有自信的准备使用 A / B 测试来检验假设，如将产品更改恢复到以前的设计，或者尝试使用包含运费的版本。最终，他验证了假设，并调整了页面。</p><hr><p> 想找出所负责的 App 激活率降低的原因</p><ul><li><p>核心问题： 初始下载后，打开和使用 App 的人数减少了，怎样才能提高激活率？</p></li><li><p>假设：由于……激活率下降</p><blockquote><ul><li>App 的更改使人们不太愿意激活</li><li>一群新的（或不同的）人开始尝试这种产品</li></ul></blockquote></li></ul><p>她注意到在过去 3 个月中激活（打开并开始使用 App）的比例一直在稳步下降（与下载总数相比）</p><p>Sofia 先查看一些数据来获得更多背景资料。最终她发现下载的绝对数量明显增加，而激活人数仅略有增加。不过两个指标的绝对数字都在增加，让她松了一口气。（注意：根据不同的企业，这可能是也可能不是问题。最终，这取决于是否浪费了额外的注册资金。）</p><p>Sofia 后续很快确定应用程序中与激活下降相关的初始体验没有任何变化。</p><p>现在，她更密切地关注哪些人正在下载应用程序以及人口统计数据是否发生了变化。因此，她按地区对下载人群进行了分层，发现来自较低激活区域的下载量略有增加，但这远远不足以解释激活率的下降。</p><p>接下来，Sofia 分析不同渠道（例如，应用商店搜索，社交广告，推荐等）的下载情况，发现推荐下载渠道的下载量大幅增加，且似乎与她之前提到的增加的下载次数大致相同。深入分析后，她发现通过推荐下载的激活率明显低于其他渠道。</p><p>Sofia 通过咨询营销团队，了解到基本是一个高流量文章引起的推荐渠道的下载量增加，而且它没有任何成本，具有很大的潜力待开发。Sofia 和营销经理下一步准备采取行动增加该渠道的激活量。</p><p>Sofia 最终通过一些快速的数据分析，使最初的问题变成了一个机会</p><hr><h1 id="9-如何避免数据分析中的坑"><a href="#9-如何避免数据分析中的坑" class="headerlink" title="9. 如何避免数据分析中的坑"></a>9. 如何避免数据分析中的坑</h1><p>要避开哪些坑？</p><ol><li>不要重复无意义的工作。许多刚入行的小伙伴喜欢把清理数据作为主要工作，纪敏认为这只是让你接触数据的一种方法，每天重复地提出需求、整理表格，会磨灭掉许多对于分析师岗位的热情。</li><li>不要“全手动”，要寻找代替的工具。既然不能重复地做无意义的工作，那么就要学会用工具去代替人工，选择合适的用户行为模型和工具，能把分析师的主要精力放在规律和策略的探索上，才能充分发挥一名数据分析师应有的价值。</li></ol><p>数据分析只是一种辅佐手段，它无法从根本上改变产品方向、功能价值，主要辅佐和支持的产品，探索更有价值的数据意义。</p><p><a href="https://www.sensorsdata.cn/blog/20181107/" target="_blank" rel="noopener">https://www.sensorsdata.cn/blog/20181107/</a></p><hr><ol><li>避免数据偏见<br>在分析数据时受个人偏见和动机的影响，即仅选择支持你声明的数据，同时丢弃不支持声明的部分。“数据偏见”将让数据的客观性荡然无存。</li></ol><p>避免这种谬误的方法是在分析数据时，尽可能收集相关数据，并询问他人意见</p><ol start="2"><li>避免数据疏浚<br>数据疏浚（Data Dredging）是指未能确认相关性，实际上是偶然的结果。</li></ol><p>在寻找问题的原因时，很容易被数据蒙蔽。乍一看，这些数据可能具有统计学意义，但进一步测试（例如，检查趋势是否持续，查看相关指标等）可能会发现只是偶然结果。</p><p>避免这种谬误的方法是在分析数据时，从假设开始检查相关指标和观察数据变化趋势。</p><ol start="3"><li>区分因果关系和相关性 </li></ol><p>在数据分析时很容易将两个事件同时发生（相关），判断为因果关系。</p><p>避免这种谬误的方法是，收集更多数据并查看可能的第三方原因，有时会发现他们的相关关系可能与第三个独立因子相关，而不是彼此相关。</p><p>例如，我们发现放弃其在线购物车的潜在客户往往具有较低的总购物车价值（放弃时购物车中物品的总成本）。此时，我们没有足够的数据来确定这是一致的相关性，是偶然结果，还是由其他因素引起的。深入挖掘我们可能会发现运输成本导致购物车到下单的流失率上升，因为免费送货仅适用于超过特定最低购物车价值的订单。</p><ol start="4"><li>解决问题，做出明智的决定<br>在找到数据支持的结论后，你需要记下一个简短的摘要（包括问题，数据显示的内容以及由此产生的决策 / 行动），这样做有两个目的：</li></ol><p>1.将你所分析的数据和结论告知可能涉及或受影响的任何其他团队，为其他人提供有价值的背景信息。</p><p>2.这个记录也将使你在将来出现类似情况时更容易参考和以防其他人想要查看数据本身。</p><p>最终，问题解决了，也总结了有价值的经验。</p><hr><p>对数据进行分析的最佳途径：</p><ol><li>业务梳理——了解业务需求</li><li>确定业务目标——弄清产品目标以及当下的首要问题</li><li>事件设计——记录和目标相关的用户行为，并定义为相应事件</li><li>数据采集——保证采集质量，确定好事件采集时机，和开发进行沟通</li><li>构建指标体系——确定想要看的指标，想要达到的分析粒度，建立产品的第一关键指标</li><li>数据分析——业务人员根据自己的经验，进行数据分析，迭代优化</li></ol><hr><p>以子弹短信app来进行举例</p><ol><li><p>产品信息结构图<br>了解产品承载了哪些信息和功能，这些信息的目的是什么， 想要用户干什么</p></li><li><p>产品功能结构图<br>将产品的功能模块梳理出来， 功能之间怎样跳转，功能的上游入口和下游入口是什么，都要想清楚，并标记出来</p></li><li><p>核心业务梳理流程图<br>弄清梳理出产品的核心业务流程，密切观察用户在核心业务流程运转的整个过程，比如：注册流程，新手完成任务流程等</p></li><li><p>梳理产品需求<br>首先明确我们要分析什么样的场景，解决什么样的业务问题，要解决这个业务问题，要看什么数据，要衡量什么指标。</p></li><li><p>定义指标<br>明确产品的目标和目前产品阶段来说最重要的问题。<br>比如，要增加销售额，销售额等于活动流量乘以付费转化率乘以客单价，我们就需要把这个指标需求进一步细化，分给不同的角色各有侧重点的去执行。 </p></li></ol><p>要梳理这个指标需求和产品逻辑有什么关系？<br>比如，活跃用户指标，一般是启动app的用户来定义活跃，实际上，每一款产品的核心功能不同，只有完成核心功能的用户才能算活跃</p><ol start="6"><li>事件设计和数据采集埋点设计<br>根据用户在使用产品功能时产生的行为数据，从用户使用行为分析的角度去分析需要的埋点</li></ol><p>用户行为：<br>发布话题——上传图片、视频——进入本地视频列表——选择视频——输入话题——发布话题</p><ol><li>操作系统，应用版本，话题分类</li><li>操作系统，应用版本</li><li>操作系统，应用版本，是否取消</li><li>操作系统，应用版本，操作类型，是否取消</li><li>操作系统，应用版本，输入话题名称方式，话题名称</li><li>操作系统，应用版本，话题分类，话题名称，是否成功</li></ol><hr><p><a href="https://www.sensorsdata.cn/blog/20180929/" target="_blank" rel="noopener">https://www.sensorsdata.cn/blog/20180929/</a></p><p><a href="https://www.geckoboard.com/learn/data-literacy/basic-data-analysis-guide/" target="_blank" rel="noopener">https://www.geckoboard.com/learn/data-literacy/basic-data-analysis-guide/</a></p><p><a href="http://www.woshipm.com/marketing/1058822.html" target="_blank" rel="noopener">一个提升用户体验的绝好方法：触点管理</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-数据分析师岗位介绍&quot;&gt;&lt;a href=&quot;#1-数据分析师岗位介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 数据分析师岗位介绍&quot;&gt;&lt;/a&gt;1. 数据分析师岗位介绍&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;什么是数据分析师？&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;

      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="分析流程" scheme="https://zhangandyu.github.io/tags/%E5%88%86%E6%9E%90%E6%B5%81%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>面试问题</title>
    <link href="https://zhangandyu.github.io/2018/12/22/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    <id>https://zhangandyu.github.io/2018/12/22/面试问题/</id>
    <published>2018-12-21T16:00:00.000Z</published>
    <updated>2019-03-31T04:23:19.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><ol><li><p>工作中， 提数数据时，有没有遇到过数据倾斜问题， 什么是数据倾斜，  如何避免数据倾斜问题?</p></li><li><p>你觉得一个数据分析师应该具有哪些能力？你更侧重什么能力？</p></li><li><p>假如有一天我们的复购率下降了， 你如何分析和假设，并制定策略？</p></li><li><p>你做过的项目中， 在宏观、中观、微观层面实用的方法有哪些？他们之间的逻辑关系和分析的层级是什么样子的？</p></li><li><p>excel，sql,可视化，python 现场操作</p></li><li><p>你在工作中具体做了哪些事， 给公司和客户带来了什么样的提升</p></li><li><p>某城市有两种颜色的出租车，蓝车和绿车的比率是15:85. 一辆出租车夜间肇事逃逸，但有一位目击证人，这位目击证人认定肇事的出租车是蓝色的。 但是，他的目击未必可信，公安人员经过在相同环境下对该目击者进行“蓝绿”测试得到：80%的情况下识别正确，20%的情况下不正确。那么， 实际为蓝车的可能性为多少。 </p></li><li><p>用 python 实现 1+2+3+……+100</p></li><li><p>如何理解过度拟合</p></li><li><p>为什们说朴素贝叶斯是“朴素”的</p></li><li><p>K-means 算法 和 knn 算法的区别是什么</p></li><li><p>找出 1-100 以内的所有质数</p></li><li><p>下面代码输出的结果会是什么</p></li></ol><p>代码1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for n in range(2, 100):</span><br><span class="line">    if n == 2:</span><br><span class="line">        print(n)</span><br><span class="line">        continue</span><br><span class="line">    for i in range(2, n):</span><br><span class="line">        if (n % i) == 0:</span><br><span class="line">            break</span><br><span class="line">    else:               # 下一行的 print(n) 事实上属于语句块 for i in range(2, n): </span><br><span class="line">        print(n)        # 整个循环结束，都没有发生 break 的情况下，才执行一次 print(n)</span><br></pre></td></tr></table></figure></p><p>代码2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for n in range(2, 100):</span><br><span class="line">    if n == 2:</span><br><span class="line">        print(n)</span><br><span class="line">    for i in range(2, n):</span><br><span class="line">        if (n % i) == 0:</span><br><span class="line">            break</span><br><span class="line">    else:               </span><br><span class="line">        print(n)</span><br></pre></td></tr></table></figure></p><p>代码3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for n in range(2, 100):</span><br><span class="line">    if n == 2:</span><br><span class="line">        print(n)</span><br><span class="line">        continue</span><br><span class="line">    for i in range(2, n):</span><br><span class="line">        if (n % i) == 0:</span><br><span class="line">            break</span><br><span class="line">    print(n)            # 事实上相当于针对 range(2, 100) 中每个 n 都执行了一次 print(n)</span><br><span class="line">                        # 这个 print(n) 属于语句块 for n in range(2, 100):</span><br></pre></td></tr></table></figure></p><p>代码4<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for n in range(2, 100):</span><br><span class="line">    if n == 2:</span><br><span class="line">        print(n)</span><br><span class="line">        continue</span><br><span class="line">    for i in range(2, n):</span><br><span class="line">        if (n % i) == 0:</span><br><span class="line">            break</span><br><span class="line">        print(n)            # 事实上相当于针对 range(2, n) 中每个 n 都执行了一次 print(n)</span><br></pre></td></tr></table></figure></p><ol start="14"><li>输出1000以内的斐波那契数列</li></ol><hr><h3 id="问题2，答案："><a href="#问题2，答案：" class="headerlink" title="问题2，答案："></a>问题2，答案：</h3><blockquote><p>要分开说：业务、思维、工具、算法、用户体验、宏观层面。<br>回答的时候不要扯数据、分析。</p></blockquote><h3 id="问题3，-答案："><a href="#问题3，-答案：" class="headerlink" title="问题3， 答案："></a>问题3， 答案：</h3><p>复购率，从商业角度来讲，就是竞争能力下降，无非价格、质量、口碑等因素。</p><p>复购率 = 重复购买率。 也就是复购次数 &gt;=2 的用户占所有购买总用户的占比，影响复购率的直接因素是两个， 一个是总用户群体中， 一个是购买次数&gt;=2的用户数，<br>复购率第要么是购买总用户数增大，要么是购买次数&gt;=2的用户减少，然后再分别去找这两个对应的因素，并进行细分，最后给出结论是正向影响还是负向影响，采取什么措施<br>去解决这样的问题。 </p><h3 id="问题4，参考答案："><a href="#问题4，参考答案：" class="headerlink" title="问题4，参考答案："></a>问题4，参考答案：</h3><ol><li>宏观层面一般影响的是一个业务，甚至是企业的发展方向。会向外看竞品分析，行业分析、包括潜在竞品分析，甚至是对于整个大环境的预判。比如人工智能，5G等。<br>向内看经营分析，对业务完整的经营闭环的健康分析。</li><li>中观层面，分析方法论。 如AAARR分析模型。 漏斗分析模型，路径分析模型等。</li><li>微观层面， 数据分析的软实力。如数据敏感度，逻辑思维能力。</li><li>逻辑关系： 中观能力是硬核能力，微观能力是转实力，两者具备才能上升为宏观能力。</li></ol><h3 id="问题6，-答案："><a href="#问题6，-答案：" class="headerlink" title="问题6， 答案："></a>问题6， 答案：</h3><p>把实际问题分层</p><blockquote><p>定位问题，从数据的角度发现了管理的误区和营销的浪费<br>发现了好机会，对目前的业务发展和增长空间进行了诊断分析, 让业务又了新的方向<br>优化了商业模式，借助上下游产业分析，找出了利于公司在**方面迅速提升……<br>回答问题要有原则，务实，通俗易懂，直击企业场景</p></blockquote><h3 id="问题7，答案："><a href="#问题7，答案：" class="headerlink" title="问题7，答案："></a>问题7，答案：</h3><p>蓝车： 150    80% 蓝车  120 量          20%绿车  30量</p><p>绿车： 850      80% 绿车  680  蓝车  170<br>120/ (120+170) = 41.37%</p><h3 id="问题8，-答案："><a href="#问题8，-答案：" class="headerlink" title="问题8， 答案："></a>问题8， 答案：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum = 0</span><br><span class="line">for i in range(1,100)</span><br><span class="line">    sum = sum + i</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><h3 id="问题12"><a href="#问题12" class="headerlink" title="问题12"></a>问题12</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">for i in range(2, 100):</span><br><span class="line">    if i == 2:</span><br><span class="line">        print(i)</span><br><span class="line">        continue</span><br><span class="line">    for n in range(2, i):</span><br><span class="line">        if i % n ==0:</span><br><span class="line">            break</span><br><span class="line">    else:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><h3 id="问题14"><a href="#问题14" class="headerlink" title="问题14"></a>问题14</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n =1000</span><br><span class="line">a = 0 b = 1</span><br><span class="line">while a &lt; n:</span><br><span class="line">    print(a, end =&apos; &apos;)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面试问题&quot;&gt;&lt;a href=&quot;#面试问题&quot; class=&quot;headerlink&quot; title=&quot;面试问题&quot;&gt;&lt;/a&gt;面试问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;工作中， 提数数据时，有没有遇到过数据倾斜问题， 什么是数据倾斜，  如何避免数据倾斜问题?&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="各项细分" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%90%84%E9%A1%B9%E7%BB%86%E5%88%86/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="面试问题" scheme="https://zhangandyu.github.io/tags/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>数据运营</title>
    <link href="https://zhangandyu.github.io/2018/11/28/%E7%94%B5%E5%95%86%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    <id>https://zhangandyu.github.io/2018/11/28/电商数据分析/</id>
    <published>2018-11-27T16:00:00.000Z</published>
    <updated>2019-01-07T14:39:19.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据运营的内容"><a href="#数据运营的内容" class="headerlink" title="数据运营的内容"></a>数据运营的内容</h1><ol><li><p>什么是数据运营<br>用数据指导运营决策、驱动业务增长</p></li><li><p>数据运营与其他运营的区别<br>常见的运营： 用户运营、内容运营、产品运营、活动运营、社群运营、品类运营、流量运营、APP运营</p></li></ol><p>工作岗位上的区别： 从事数据采集、清理、分析、策略支持等工作，支持整个运营体系朝精细化方向发展。</p><p>从思维方式来看：数据化运营属于运营必备的的一种技能或思维方式，即通过数据分析的方法发现问题、解决问题、提升工作效率、促进业务增长。</p><ol start="3"><li>数据运营的常用场景</li></ol><ul><li><p>拉新：获取新用户</p><blockquote><p>广告投放效果</p></blockquote></li><li><p>转化：注册转化率、订单转化率</p><blockquote><p>漏斗模型</p></blockquote></li><li><p>促活： 如何让用户经常使用我们的产品</p><blockquote><p>分析具体用户行为， 用用户行为分析做用户画像</p></blockquote></li><li><p>留存：提前发现可能流失的用户，降低留存率</p><blockquote><p>根据用户的细微行为，来预测用户是否会流失</p></blockquote></li><li><p>变现：发现高价值用户，提高销售效率</p></li></ul><h1 id="数据运营的具体工作"><a href="#数据运营的具体工作" class="headerlink" title="数据运营的具体工作"></a>数据运营的具体工作</h1><ol><li><p>数据规划：<br>收集 整理业务部门的数据需求，搭建数据指标体系</p></li><li><p>数据采集：<br>采集业务数据，向业务部门提供数据报表</p></li><li><p>数据分析：<br>通过数据挖掘、数据模型等方式，深入分析业务数据；提供数据分析报告，定位问题，提出解决方案</p></li></ol><h3 id="数据规划"><a href="#数据规划" class="headerlink" title="数据规划"></a>数据规划</h3><p>两个重要的概念：指标与维度</p><blockquote><p> 搞清楚数据分析的目的是什么， 需要什么样的数据</p></blockquote><ol><li>指标<br>用来衡量具体的运营效果，指标的选择来源于具体的业务需求，从需求中归纳事件，从事件对应指标。<blockquote><p>比如： uv、 DAU（日活跃用户数）、 销售金额、转化率等</p></blockquote></li></ol><p>电商网站为例，选择指标的过程为：</p><ul><li>明确需求： 网站主要业务是商品销售，希望通过数据分析来提升网站销售金额</li><li>归纳事件：用户购买是一连串关键事件的结果，包括访问网站、浏览商品、注册账号、加入购物车、开始结算、支付等</li><li>对应指标：销售金额 = 访问流量<em>下单转化率</em>支付转化率*客单价</li></ul><p>通过分析，可以得出销售金额是OMTM，同时，整个销售金额的指标提醒包括访问流量、下单转化率、支付转化率、客单价四个可操作的指标。</p><ol start="2"><li>维度体系</li></ol><p>维度是用来对指标进行细分的属性，选择维度的原则是： 记录那些对指标可能产生影响的维度</p><p>维度分为：维度类别和具体维度<br>人口属性： 性别、年龄、职业、爱好、城市、地区、国家<br>设备属性：平台、设备品牌、设备型号、屏幕大小、浏览器类型、屏幕方向<br>流量属性：访问来源、广告来源、广告内容、搜索词、页面来源<br>行为属性： 活跃度、是否注册、是否下单</p><h1 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h1><ol><li><p>埋点<br>在产品中手动添加统计代码收集需要的数据，如果要手机用户注册数，就需要在注册按钮处加载相应的统计代码。<br>容易发生楼埋，错埋的情况。</p></li><li><p>可视化埋点<br>通过可视化交互的方式来代替手动埋点。 Mixpanel 采用了可视化的埋点方案</p></li><li><p>无埋点<br>只需加载一个SDK就可以采集全量的用户行为数据，可以自定义分析所有行为数据。</p></li></ol><h1 id="数据报表"><a href="#数据报表" class="headerlink" title="数据报表"></a>数据报表</h1><p>定期向业务部门提交数据报表是数据运营的工作之一，包括日报、周报、月报甚至年报。<br>数据报表建立在数据指标体系的基础上，数据运营应该让这部分工作尽量自动化。<br>搭建数据看板是除了数据报表之后的又一项工作，与企业BI系统连在一起，属于数据可视化的部分。</p><h1 id="数据分析"><a href="#数据分析" class="headerlink" title="数据分析"></a>数据分析</h1><p>通过数据分析的方法定位问题，提出解决方案，促进业务增长。选择什么样的分析方法要和你的业务场景相结合。</p><p>数据运营岗位弱化了对编程统计的要求，更强调在现有工具基础上灵活使用分析方法。一个好的数据运营一定要及时发现问题、定位问题、并提出可行的解决方案。</p><table><thead><tr><th>分析方法</th><th>运营场景</th></tr></thead><tbody><tr><td>流量标记.UTM</td><td>广告投放、对外推广</td></tr><tr><td>多维度分析</td><td>细化问题</td></tr><tr><td>转化漏斗</td><td>转化过程流失分析</td></tr><tr><td>留存曲线</td><td>用户留存分析</td></tr><tr><td>魔法数字</td><td>用户留存分析</td></tr><tr><td>用户画像</td><td>用户细分、精准营销</td></tr><tr><td>用户细查</td><td>用户研究、产品研究</td></tr><tr><td>热力图</td><td>用户产品访问偏好</td></tr><tr><td>数学建模</td><td>预测分析、精准营销</td></tr><tr><td>A/B测试</td><td>产品、运营优化</td></tr></tbody></table><p><a href="https://36kr.com/p/5051225.html" target="_blank" rel="noopener">用户留存分析详解</a></p><p><a href="https://zhuanlan.zhihu.com/p/39866436" target="_blank" rel="noopener">用SQL替代机器学习，这是新时代的“电风扇吹香皂盒”吗？</a></p><p><a href="https://blog.csdn.net/csdnnews/article/details/80161554" target="_blank" rel="noopener">还在用 AI 和机器学习？简单的 SQL 脚本就能替代！</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据运营的内容&quot;&gt;&lt;a href=&quot;#数据运营的内容&quot; class=&quot;headerlink&quot; title=&quot;数据运营的内容&quot;&gt;&lt;/a&gt;数据运营的内容&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是数据运营&lt;br&gt;用数据指导运营决策、驱动业务增长&lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="电商分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%94%B5%E5%95%86%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>投资系统</title>
    <link href="https://zhangandyu.github.io/2018/10/27/%E6%8A%95%E8%B5%84%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhangandyu.github.io/2018/10/27/投资系统/</id>
    <published>2018-10-26T16:00:00.000Z</published>
    <updated>2019-01-07T14:36:28.069Z</updated>
    
    <content type="html"><![CDATA[<ol><li>理想的收入来源</li></ol><ul><li>工资收入<blockquote><p>出卖时间</p></blockquote></li></ul><p>成为某个领域的行家，做出成绩，争取超出领导的期待，然后升职加薪。</p><ul><li>兴趣收入<blockquote><p>个人品牌变现</p></blockquote></li></ul><p>持续给大家提供价值，帮助大家解决问题，满足大家的需求<br>提升自己的写作能力</p><ul><li>投资收益<blockquote><p>资本生息</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;理想的收入来源&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;工资收入&lt;blockquote&gt;
&lt;p&gt;出卖时间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;成为某个领域的行家，做出成绩，争取超出领导的期待，然后升职加薪。&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="投资" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E6%8A%95%E8%B5%84/"/>
    
    
      <category term="生活" scheme="https://zhangandyu.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>统计学</title>
    <link href="https://zhangandyu.github.io/2018/10/20/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    <id>https://zhangandyu.github.io/2018/10/20/统计学/</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2019-04-18T14:55:30.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言：为什么应该学点统计学"><a href="#前言：为什么应该学点统计学" class="headerlink" title="前言：为什么应该学点统计学"></a>前言：为什么应该学点统计学</h1><p>统计学是人类发明用来研究我们自身的科学，它与我们的生活息息相关。 小到支付宝根据用户个人消费数据判断其消费水平，从而有针对性进行限额借贷。大到国家通过国民生产总值这样的统计数据分析，来研究国家经济发展趋势等， 都需要用到统计学知识。</p><p>我们可以从统计大师 Hans Rolling 的演讲中， 来看下 1960 年到 2003 年的世界各国出生率与经济发展是如何变化的。</p><p><a href="https://www.youtube.com/watch?v=RUwS1uAdUcI&amp;t=1065s" target="_blank" rel="noopener">Hans Rolling —— 统计的魅力</a></p><p>有人会问，统计学那么多高深的概念和复杂的算术， 在平时的生活中自己也应用不到。 这种想法其实是错误的。<strong>我们学习统计学， 不光是学习怎么对数据进行统计计算，更重要的是学会运用统计思维去更理性地看待周围的事物。</strong></p><p>比如， 最近报道的一名美国公民在 10 月 23 号中了 16 亿美元的彩票， 看到这则消息，你会不会也有点心动， 也想去买个彩票。其实， 关于是否要买彩票，统计学有一个重要的概念来衡量：<strong>期望值</strong></p><p>即同一种行为多次重复之后，所能得到的平均收益</p><p>举例来说， 假如某彩票规则为：每次买张彩票需要 2 元，假设 200 次抽奖可以中奖一次，奖金为 300 元。</p><p>期望值 = 300 <em>(1/200) + 0 </em> (199/200) = 1.5。</p><p>期望值是 1.5 元， 但是每次抽奖成本为 2 元， 于是每次净亏损 0.5 元。如果你偶尔买一次就算了， 但如果你长期买彩票，就肯定会亏很多钱。 况且现实生活中，中奖的概率远远低于 1/200</p><p>你可能会觉得，概率那么低， 那我怎么感觉天天有人中奖呢， 这背后其实是媒体的选择性报道， 也就是统计学中的选择性偏差问题</p><p>例如：二战期间，盟军为减少飞机在敌人防空炮火中的损失，军方决定为飞机加装防护，多数人认为，应该在机身中弹多的地方加强防护。但统计学家沃德认为，应该给那些没有中弹的油箱和驾驶部位进行防护，因为这些部位中弹的飞机根本没有机会飞回来。</p><p><strong>现实生活中，也往往会存在一些选择性偏差的数据，我们生活中接触的数据越来越多， 解读数据背后的信息， 辨析数据真伪就显得非常的重要</strong>，这则 TED 视频对此有更深入的讲解。</p><p><a href="https://v.qq.com/x/page/l03817zzhl2.html" target="_blank" rel="noopener">为什么应该学点统计学</a></p><p>那么统计学到底要学什么呢？统计学主要学习两个方面</p><ol><li>描述统计， 描述数据的基本情况</li></ol><blockquote><p>通过研究数据的平均值，中位数，标准差等指标， 来了解数据的整体分布状况，从杂乱的数据中得出有用的信息</p></blockquote><ol start="2"><li>推理统计，根据样本数据来对总体进行估计</li></ol><blockquote><p>通过对样本数据的研究， 来对总体数据进行估计，评估推理数据的准确度，统计学中就会通过置信度， 卡方分布等来对总体进行估计。</p></blockquote><p>统计学是我们将客观数据转化成有用信息的一把钥匙， 运用统计概念对一些更为广泛而大致的信息及规律进行思考， 可以改善我们做出的判断和决定。我们当然不能指望这些判断不出错误， 但每一个好的决策都会帮助你更有效的利用这些信息，积少成多，把事情做成的概率会大很多 。</p><p><a href="https://v.qq.com/x/page/n0146d3s4zj.html" target="_blank" rel="noopener">Hans Rolling —— 东方崛起</a></p><hr><h1 id="统计学知识点"><a href="#统计学知识点" class="headerlink" title="统计学知识点"></a>统计学知识点</h1><h3 id="在python中各种图形的绘制"><a href="#在python中各种图形的绘制" class="headerlink" title="在python中各种图形的绘制"></a>在python中各种图形的绘制</h3><ol><li>条形图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">plt.rcParams[&apos;font.sans-serif&apos;]=[&apos;SimHei&apos;] #解决中文乱码</span><br><span class="line"></span><br><span class="line"># 语法：plt.bar(left, height, width=0.8, bottom=None, hold=None, data=None, **kwargs)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">num_list = [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">name_list = [&apos;Monday&apos;,&apos;Tuesday&apos;,&apos;Friday&apos;,&apos;Sunday&apos;]</span><br><span class="line"></span><br><span class="line"># 如何想让条形图横放， 将 plt.bar 改为 plt.barh</span><br><span class="line">plt.bar(range(len(num_list)), num_list, color = &apos;rgb&apos;, tick_label = name_list) </span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ol start="2"><li>折线图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plt.plot([1, 2, 3, 4], [1, 4, 9, 16], &apos;g&apos;)</span><br><span class="line">plt.ylabel(&apos;some numbers&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><blockquote><p>折线图要注意起始位置， 避免被图形误导。</p></blockquote><ol start="3"><li>饼图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(6,9)) #调节图形大小</span><br><span class="line">labels = [u&apos;大型&apos;,u&apos;中型&apos;,u&apos;小型&apos;,u&apos;微型&apos;] #定义标签</span><br><span class="line">sizes = [46,253,321,66] #每块值</span><br><span class="line">colors = [&apos;red&apos;,&apos;yellowgreen&apos;,&apos;lightskyblue&apos;,&apos;yellow&apos;] #每块颜色定义</span><br><span class="line">explode = (0,0,0,0) #将某一块分割出来，值越大分割出的间隙越大</span><br><span class="line">patches,text1,text2 = plt.pie(sizes,</span><br><span class="line">                      explode=explode,</span><br><span class="line">                      labels=labels,</span><br><span class="line">                      colors=colors,</span><br><span class="line">                      autopct = &apos;%3.2f%%&apos;, #数值保留固定小数位</span><br><span class="line">                      shadow = False, #无阴影设置</span><br><span class="line">                      startangle =90, #逆时针起始角度设置</span><br><span class="line">                      pctdistance = 0.6) #数值距圆心半径倍数距离</span><br><span class="line">#patches饼图的返回值，texts1饼图外label的文本，texts2饼图内部的文本</span><br><span class="line"># x，y轴刻度设置一致，保证饼图为圆形</span><br><span class="line">plt.axis(&apos;equal&apos;)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ol start="4"><li>箱型图</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt </span><br><span class="line"></span><br><span class="line">def draw_plot(data, edge_color, fill_color): </span><br><span class="line">    bp = ax.boxplot(data, patch_artist=True) </span><br><span class="line"></span><br><span class="line">    for element in [&apos;boxes&apos;, &apos;whiskers&apos;, &apos;fliers&apos;, &apos;means&apos;, &apos;medians&apos;, &apos;caps&apos;]: </span><br><span class="line">     plt.setp(bp[element], color=edge_color) </span><br><span class="line"></span><br><span class="line">    for patch in bp[&apos;boxes&apos;]: </span><br><span class="line">     patch.set(facecolor=fill_color)  </span><br><span class="line"></span><br><span class="line">example_data1 = [[1,2,0.8], [0.5,2,2], [3,2,1]] </span><br><span class="line">example_data2 = [[5,3, 4], [6,4,3,8], [6,4,9]] </span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots() </span><br><span class="line">draw_plot(example_data1, &apos;red&apos;, &apos;tan&apos;) </span><br><span class="line">draw_plot(example_data2, &apos;blue&apos;, &apos;cyan&apos;) </span><br><span class="line">ax.set_ylim(0, 10) </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><hr><h3 id="对数据位置和变异程度的度量"><a href="#对数据位置和变异程度的度量" class="headerlink" title="对数据位置和变异程度的度量"></a>对数据位置和变异程度的度量</h3><ol><li>均值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 均值</span><br><span class="line">np.mean(a)</span><br></pre></td></tr></table></figure><ol start="2"><li>中位数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.median(a)</span><br></pre></td></tr></table></figure><ol start="3"><li>众数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#方法1</span><br><span class="line"># np.bincount, 计算非负的int数组中，每个值出现的次数</span><br><span class="line"></span><br><span class="line">counts = np.bincount(a)</span><br><span class="line">#[0 1 0 2 1 1 0 2 0 0 0 0 0 0 0 3]</span><br><span class="line"></span><br><span class="line">#返回沿轴最大值的索引</span><br><span class="line">np.argmax(counts)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 方法2</span><br><span class="line">from scipy import stats</span><br><span class="line">stats.mode(a)[0][0]</span><br></pre></td></tr></table></figure><ol start="4"><li>极差</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b = max(a) - min(a)</span><br></pre></td></tr></table></figure><ol start="5"><li>均值</li></ol><ul><li><p>总体均值： $\mu  =  \frac{\sum_{i=1}^{N}{x_{i}}}{N}$</p></li><li><p>样本均值：$\frac{}{x} = \frac{  \sum_{i=1}^{n}{x_{i}}}{n}$</p></li></ul><ol start="6"><li>方差</li></ol><ul><li><p>总体方差： $\sigma ^{2} = \frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}$</p></li><li><p>样本方差</p></li></ul><blockquote><p>总体方差一般很难求出， 因为你没有办法获得总体数据。 但样本方差是可以求出的。对样本来进行分析， 从而估计出总体参数</p></blockquote><p>$s^{2} = \frac{  \sum_{i=1}^{n}(x_{i}-\frac{}{x})^{2}}{n}$</p><blockquote><p>用样本方差来估计总体方差， 通常会低估总体方差的,所以我们要用这样的公式：</p></blockquote><p>$s_{n-1}^{2} = \frac{  \sum_{i=1}^{n}(x_{i}-\frac{}{x})^{2}}{n-1}$</p><ol start="7"><li>标准差</li></ol><ul><li><p>总体标准差 $\sigma =  \sqrt{\sigma ^{2}} =\sqrt{\frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}} $</p></li><li><p>样本标准差$ s = \sqrt{s_{n-1}^{2}} = \sqrt{\frac{  \sum_{i=1}^{n}(x_{i}-\frac{}{x})^{2}}{n-1}}$</p></li></ul><blockquote><p>标准差 比 方差 更容易解释， 因为标准差与数据的单位相同</p></blockquote><hr><h3 id="对分布形态，-相对位置的度量"><a href="#对分布形态，-相对位置的度量" class="headerlink" title="对分布形态， 相对位置的度量"></a>对分布形态， 相对位置的度量</h3><ol><li>偏度 </li></ol><ul><li>偏度 ：$\frac{n}{(n-1)(n-2)} *   \sum (\frac{x_{i}-\frac{ }{x}}{s})^{3}$</li></ul><blockquote><ul><li>左偏， 偏度为负数， 右偏，偏度为正数，数据对称，偏度为0</li><li>当数据严重偏离时， 中位数是位置的首选度量。</li></ul></blockquote><ol start="2"><li>z-分数</li></ol><ul><li>z-分数：$\frac{x_{i}-\frac{ }{x}}{s}$</li></ul><blockquote><p>衡量数据对于平均值的相对位置， 比如z-分数为-1.5， 则表示此数据比平均值小1.5个标准差</p></blockquote><ol start="3"><li>切比雪夫定理</li></ol><ul><li>定理： 与平均值的距离在z个标准差之类的数据项所占比例至少为$(1-1/z^{2})$， z大于1。</li></ul><blockquote><p> 当z为2,3和4个标准差时：</p><ul><li>至少75%的数值与平均数的距离在z=2 个标准差之内</li><li>至少89%的数与平均数的距离在z=3个标准差之内</li><li>至少94%的数与平均数的距离在z=4个标准差之内</li></ul></blockquote><ol start="4"><li>检验异常值</li></ol><p>异常值： 当z-分数小于-3或着大于+3的数值视为异常值。</p><hr><h3 id="对两变量之间关系的度量"><a href="#对两变量之间关系的度量" class="headerlink" title="对两变量之间关系的度量"></a>对两变量之间关系的度量</h3><ul><li>样本相关系数</li></ul><blockquote><p>相关系数的范围是-1~+1， 当数为0时， 线性不相关</p></blockquote><p>$r _{xy} = \frac{ s _{xy}}{s _{x}s _{y}}$</p><blockquote><ul><li>样本协方差：$s_{xy} = \frac{\sum (x_{i} - \frac{ }{x})(y_{i} - \frac{ }{y})}{n-1}$</li></ul></blockquote><blockquote><ul><li>x的标准差：$s _{x}$</li></ul></blockquote><ul><li>用python进行计算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2,3,4]</span><br><span class="line">b = [2,4, 6,9]</span><br><span class="line"></span><br><span class="line">import numpy as np</span><br><span class="line">np.corrcoef([a,b])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import scipy.stats as stats</span><br><span class="line"></span><br><span class="line">stats.pearsonr(a,b)</span><br><span class="line"># 结果的第一个数为相关系数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df= pd.DataFrame()</span><br><span class="line">df[&apos;a&apos;] = [1,2,3,4]</span><br><span class="line">df[&apos;b&apos;] = [2,4, 6,9]</span><br><span class="line">df.corr()</span><br></pre></td></tr></table></figure><hr><h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><ol><li>组合</li></ol><blockquote><p>从N项中任取n项的组合</p></blockquote><p>$c_{n}^{N} = \frac{N!}{n!(N-n)!}$</p><ul><li>用python来进行计算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from scipy.special  import comb, perm</span><br><span class="line"></span><br><span class="line">comb(5,2)</span><br></pre></td></tr></table></figure><ol start="2"><li>排列</li></ol><blockquote><p>从N项中任取n项的排列数</p></blockquote><p>$P_{n}^{N} = \frac{N!}{(N-n)!}$</p><ul><li>用python来进行计算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from scipy.special import comb, perm</span><br><span class="line"></span><br><span class="line">perm(5,2)</span><br></pre></td></tr></table></figure><ol start="3"><li>概率的基本性质</li></ol><ul><li><p>事件的补<br>$P(A) = 1 - P (A^{c})$</p></li><li><p>事件的并</p></li></ul><p>$P(A\bigcup B ) = P(A) + P(A) - P(A\bigcap  B )$</p><ul><li>互斥事件</li></ul><p>$P(A\bigcup B ) = P(A) + P(A)$</p><ol start="4"><li>条件概率</li></ol><blockquote><p>在事件B发生的条件下， A条件发生的概率</p></blockquote><p>$P(A|B ) = \frac{P(A\bigcap B)}{P(B)}$</p><p>$P(A\bigcap B) = P(B)P(A|B) = P(A)P(B|A)$ </p><ul><li>独立事件</li></ul><blockquote><p>两个事件A和B是相互独立的</p></blockquote><p>$P(A|B) = P(A) $</p><p>$P(A\bigcap B) = P(A) P(B)$</p><hr><h2 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a>贝叶斯定理</h2><blockquote><p>计算方法： 先假定一个概率， 然后根据样本获得新的信息， 根据这些信息对 原先假设的概率进行修正， 得到准确的概率。 </p></blockquote><p>$P(A|B) = \frac{P(A) * P(B|A)}{P(B)}$</p><p><a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/" target="_blank" rel="noopener">数学之美番外篇：平凡而又神奇的贝叶斯方法</a></p><p>贝叶斯奥卡姆剃刀<br>《数学之美》第24章<br>《决策与判断》<br><a href="https://amstat.tandfonline.com/doi/abs/10.1080/09332480.2014.914768?journalCode=ucha20#.W9nMJPkzbIU" target="_blank" rel="noopener">Machine Learning, a Probabilistic Perspective</a></p><p><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="noopener">贝叶斯推断及其互联网应用（一）：定理简介</a></p><p><a href="https://www.jiqizhixin.com/articles/2017-09-19-6" target="_blank" rel="noopener">贝叶斯学习与未来人工智能</a></p><p>《统计学关我什么事》</p><p>快速理解贝叶斯定理<br>假设一家商城， 顾客分为： 想买商品的顾客，和随便逛逛的顾客。  假设， 随机走进来一个顾客，他为有意愿度的顾客占20%， 为随便逛逛的顾客占80%。 </p><p>现在增加了一个主动询问店员的动作。 </p><p>假设有意愿度购买的顾客， 向店员询问的概率为70%， 不询问的概率为30%。<br>随便逛逛的客户， 主动询问店员的购买概率为 10%， 不询问的概率为 90%。 </p><p>现在问 如果一顾客主动向店员询问， 那么他是有意愿购买的顾客的概率是多少。</p><p> 有意向且询问的概率为  14%。  有意向不询问的概率为  6%<br> 无意向且询问的概率为 8%， 无意向且不询问的概率为 72%</p><p> 现在 主动询问这个动作已经做出了， 所以总体为两部分： 有意向且询问， 和无意向且询问</p><p> 14:8 = 7:4。    所以她有意向且愿意购买的概率为   7/11   63.6% </p><hr><p>如何判断她喜欢你的概率</p><blockquote><p>贝叶斯定理</p></blockquote><p>假设 你是一名女生， 在情人节这天， 一名男生送给你一盒巧克力， 你可能会有疑问，他是不是喜欢你， 他喜欢你的概率是多大？</p><p>因为你没有证据来说明你就是他喜欢的类型， 所以， 我们假设 你或者是他喜欢的类型， 或者是一名路人。 假设各有50%的概率。 </p><p><img src="https://i.loli.net/2018/11/02/5bdc6bb0a6545.png" alt="a"></p><p>通过调查， 我们发现 一个男生对心意女生送出巧克力的概率为 45%</p><p><img src="https://i.loli.net/2018/11/02/5bdc6be2e46fa.png" alt="a"></p><p> 对路人送出巧克力的概率 为 20%， 那他现在送给你一盒巧克力， </p><p><img src="https://i.loli.net/2018/11/02/5bdc6bfeba767.png" alt="b"></p><p>在他已经送你巧克力的这件事情已经确定了， 所以他们现在是一个整体<br>他喜欢你的概率是多少呢。 </p><p>0.5 <em> 0.45  0.5 </em> 0.2</p><p>0.225   0.1</p><p>225 ： 100 </p><p>225 / 325  = 69.2%  的概率会喜欢你</p><hr><p>当然， 贝叶斯概率 能够计算出这个概率， 但是否要继续， 取决与你。 </p><p>贝叶斯概率在我们生活中的应用是非常广泛的， 常见的， 比如 在邮件中的<br>反垃圾邮件。 这是一种贝叶斯概率非常好的使用案例。 </p><p>在上面的推理中， 我们总会觉得贝叶斯定理有些“牵强”<br>牵强的原因主要是因为先验概率。 这种主观上<br>假定或者大概的概率， 会让人感觉牵强。 </p><p>但也正是由于设定了先验概率， 贝叶斯定理才会有<br>即是只有少量信息， 也能够进行推理。 </p><p>当然， 贝叶斯定理有另一学习功能， 就是<br>信息越多， 推理结果就越精确。 </p><hr><h1 id="离散型概率分布"><a href="#离散型概率分布" class="headerlink" title="离散型概率分布"></a>离散型概率分布</h1><ol><li><p>离散型概率函数的基本条件：<br> $f(x) \geqslant  0$<br> $\sum f(x) = 1$</p></li><li><p>离散型随机变量的数学期望：<br>$E(x) = \mu \approx \sum xf(x)$</p></li></ol><p>比如：掷一枚公平的六面骰子，其每次“点数”的期望值是3.5</p><ol start="3"><li>方差<br>$Var(x) = \delta ^{2} = \sum (x-\mu )^{2} f(x)$</li></ol><h1 id="连续性概率分布"><a href="#连续性概率分布" class="headerlink" title="连续性概率分布"></a>连续性概率分布</h1><ol><li>离散型概率分布和连续性概率分布的区别<br>离散型： 概率函数给出了随机变量x取某个特定值的概率</li></ol><p>连续性： 概率密度函数， 通过面积给出该区间取值的概率。</p><ol start="2"><li>正态概率分布</li></ol><ul><li>正态分布的最高点在均值处， 标准差决定了曲线的宽度和平坦度。</li><li>正态分布曲线的总面积为1</li></ul><ol start="3"><li>标准正态分布</li></ol><ul><li>均值为0，且标准差为1</li></ul><hr><h1 id="七周数据分析-统计学"><a href="#七周数据分析-统计学" class="headerlink" title="七周数据分析-统计学"></a>七周数据分析-统计学</h1><h3 id="描述统计学"><a href="#描述统计学" class="headerlink" title="描述统计学"></a>描述统计学</h3><p>1.数值数据 与 分类数据</p><ol start="2"><li><p>分类数据描述统计<br>频数统计<br>频数百分比</p></li><li><p>平均数，中位数，众数</p></li><li><p>分位数</p></li><li><p>方差、标准差： 描述数据的离散程度</p></li><li><p>数据标准化： Z-Score</p></li></ol><p>公式： z = (x - u) / 方差 。  可以用数据标准化进行预估计算</p><ol start="7"><li>切比雪夫定理-异常值检测</li></ol><ul><li>至少有75%的数据在两个标准差之内</li><li>至少有89%的数据在三个标准差之内</li><li>至少有95%的数据在5个标准差之内</li></ul><ol start="8"><li><p>箱线图</p></li><li><p>直方图， 偏度，标准型分布，</p></li><li><p>概率</p></li><li><p>贝叶斯： 通过结果来反推原因</p><blockquote><p>参加活动的人群中，女性只占30%， 是否说明女性不喜欢参加此类活动？</p></blockquote></li><li><p>二项分布</p></li></ol><ol start="13"><li>泊松分布</li></ol><ol start="12"><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言：为什么应该学点统计学&quot;&gt;&lt;a href=&quot;#前言：为什么应该学点统计学&quot; class=&quot;headerlink&quot; title=&quot;前言：为什么应该学点统计学&quot;&gt;&lt;/a&gt;前言：为什么应该学点统计学&lt;/h1&gt;&lt;p&gt;统计学是人类发明用来研究我们自身的科学，它与我们的生
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="统计学" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
    
      <category term="统计学" scheme="https://zhangandyu.github.io/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>逻辑系统</title>
    <link href="https://zhangandyu.github.io/2018/10/14/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    <id>https://zhangandyu.github.io/2018/10/14/逻辑思维/</id>
    <published>2018-10-13T16:00:00.000Z</published>
    <updated>2019-01-08T15:47:21.185Z</updated>
    
    <content type="html"><![CDATA[<p>《精准表达：让你的方案在最短的时间内打动人心》</p><p>逻辑思考能力， 语言组织能力</p><ol><li><p>为什么说话要讲逻辑<br>为了让任何人都能够听懂并接受我们的方案。<br>对方与我们的文化背景大不相同， 或者与我们持相反一件， 不注意讲话的逻辑， 对方可能听不懂我们的方案。 </p></li><li><p>什么是逻辑<br>把语言合理的组织起来 </p></li><li><p>有逻辑的讲话分为哪些方面</p></li></ol><ul><li><p>纵向逻辑</p><blockquote><p>因为A， 所以B。 因为B， 所以C。 </p></blockquote></li><li><p>横向逻辑 - MECE 分析法</p><blockquote><p>A包含B和C。 </p></blockquote></li></ul><ol start="4"><li>缺乏逻辑性：</li></ol><ul><li>缺乏纵向逻辑 - 真的是这样吗</li><li>缺乏横向逻辑 - 仅仅是这样吗</li></ul><ol start="5"><li>真的是这样吗？<br>纵向逻辑组织的不好， 因果关系比较薄弱。 </li></ol><p>当对方要求你仔细解释你的纵向逻辑时， 你能回答出来。 做到针对对方的提问能够详细的做出解释。 </p><ol start="6"><li>真的是这样吗？<br>未能合理把握整体思路， 出现了遗漏和重复。 </li></ol><p>覆盖范围广、分类细致。 </p><ol start="7"><li>纵向逻辑薄弱的原因</li></ol><ul><li>前提条件不同<br>因为A， 所以B。 但是A 包含 A1, A2, A3, A4等隐形前提。 </li></ul><p>要做到有逻辑性地讲话， 应该先质疑自己的前提条件。<br>想想一个与自己前提条件大不相同的人， 设想他可能会提出怎么的问题。 发现自己的隐形前提。 </p><ul><li>把不同性质的东西混为一谈<br>因为A, 所以B。 但A的范围里包含了A1、A2、A、3 等不同性质的东西</li></ul><p>反省自己的额言论， 看自己是否把不同东西混为一谈了。 是否有必要把这件事细致分类， 再进行讨论。 </p><ul><li>偶然的必然化<br>因为A， 所以B。 但是A到B之间原因太过跳跃， 让听众以为是偶然事件。 </li></ul><p>思考哪些印因素可能会破坏因果关系，先想象一下具体情形， 然后按照顺序想想最坏的情形。 </p><ol start="8"><li>如何加强横向逻辑</li></ol><p>体会语言中的层次感<br>把不同角度的概念拉拢到同一平面。 然后再讨论遗漏与重复的重复等问题。 </p><p>如何把不同角度的概念拉到同一平面？</p><ul><li>面对同一概念， 不同的人有不同的看法。 </li><li>面对同一概念， 不同的人会从不同的切入点开始展开联想。 </li></ul><p>首先， 确认对方是以何种立场还思考问题的。<br>其次， 确认对方设想的是何种场景。 </p><p>如何实现MECE状态？</p><ul><li><p>使用架构<br>5p, 营销理论<br>3c, 战略模型<br>7S模型<br>SPRO, SPCO模型<br>AIDAS原理<br>PDCA循环<br>根据具体情况采用合理架构。</p></li><li><p>避免遗漏<br>六维度理论<br>常见的三个维度，<br>维度4, 时间的流动。<br>维度5， 信息、电力、交易等物质的流动<br>维度6， 人们的心情和习惯</p></li><li><p>消除重复</p></li></ul><p>当我们同时具备了 横向逻辑 和 纵向逻辑， 就构建了金字塔结构。 </p><hr><ol><li><p>幸存偏误<br>在生活中更容易看到成功者的故事，看不到失败， 你会系统性地高估成功的概率。</p></li><li><p>游泳选手身材错觉<br>你看到游泳选手的身材好，因此你觉得游泳就可以练就这样的身材。你觉得用这个护肤品的模特都好漂亮， 因此你觉得用了这个护肤品自己也可以变漂亮。<br>其实是因为他们有这样的好身材， 所以他们才能被选为游泳运动员。  和游泳能够练就这样的身材没有直接的关系。<br>用这个护肤品的模特好看， 是因为这个模特好看， 所以她才能被选做拍这个护肤品的广告， 和这个护肤品可以让自己更漂亮没有直接关系。 </p></li><li><p>过度自信效应<br>系统性地高估自己的学识和能力<br>过度自信会令你忽视你真正掌握的能力与你已知的知识之间的区别<br>这个怎么理解呢， 就是你很多知识， 你只是了解， 而并非已经内化成你的能力， 而你会错误的把它归为你能力的一部分。 比如你说你会python, 但当你真正写的时候， 你却写不出来， 其实你没有掌握</p></li><li><p>诉诸结果<br>依据某观点成立所产生的结果好坏，来判断一个观点是否正确。 </p></li><li><p>稻草人谬误<br>有意地模仿他人观点，以达到攻击模仿出来的观点而非实际论点的目的。</p></li><li><p>诉诸无关权威<br>诉诸不是问题专家的人， 其观点更可能是错误的。 例如：信仰中医，而不相信现代医学</p></li><li><p>虚假两难<br>给出一个有两种范畴组成的有限集合， 并假设讨论范围内的一切事物都必须属于该集合。因此<br>若拒绝其中一个范畴，便只好接受另一个。<br>例如： 世界上只有两种人，男人和女人， 你既然不是女人， 那么你一定是男人。 </p></li><li><p>人身攻击<br>通过攻击一个人本身，而不是攻击其论点，以转移讨论话题，最终达到诋毁其论点的目的。<br>“侮辱性人身攻击” ： 你又不是专家， 你有什么资格发言<br>“处境类人身攻击” ： 对他们的动机作出判断。 你又不是真正关心降低城市犯罪率， 你只是想要人们投票给你。</p></li><li><p>循环论证<br>你完全错了， 因为你说得没有道理。<br>你应该相信上帝， 否则你会下地狱。</p></li><li><p>从众心理</p></li><li><p>纠缠于沉迷成本<br>我已经买了电影票了， 电影再烂也要看完。<br>我已经在这段恋情中投入了那么多感情， 现在离开她是不明智的。<br>我已经在这支股票中投了那么多钱了， 现在就收手会亏本的， 说不定以后会涨的。</p></li></ol><ul><li>你应该看的是现在的形势以及你对未来的评估。</li></ul><ol start="12"><li>互惠偏误<br>先送你一束花， 然后让你捐赠。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;《精准表达：让你的方案在最短的时间内打动人心》&lt;/p&gt;
&lt;p&gt;逻辑思考能力， 语言组织能力&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;为什么说话要讲逻辑&lt;br&gt;为了让任何人都能够听懂并接受我们的方案。&lt;br&gt;对方与我们的文化背景大不相同， 或者与我们持相反一件， 不注意讲话的逻辑， 
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="逻辑" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="逻辑" scheme="https://zhangandyu.github.io/tags/%E9%80%BB%E8%BE%91/"/>
    
  </entry>
  
  <entry>
    <title>学习系统</title>
    <link href="https://zhangandyu.github.io/2018/10/12/%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhangandyu.github.io/2018/10/12/学习系统/</id>
    <published>2018-10-11T16:00:00.000Z</published>
    <updated>2019-01-07T14:37:30.329Z</updated>
    
    <content type="html"><![CDATA[<p>阅读《好好学习》</p><h1 id="如何写反思日记："><a href="#如何写反思日记：" class="headerlink" title="如何写反思日记："></a>如何写反思日记：</h1><ol><li><p>什么是反思<br>反思的实质是对假设进行校正<br>做事的顺序：做出假设——采取行动——产生结果<br>反思的顺序： 观察结果——研究原先的假设——反思校正假设</p></li><li><p>反思的作用</p></li></ol><ul><li>发现知识误区——跳跃性假设<blockquote><p>没有通过深入思考就得出结论，比如：遇到大牛就躲闪一旁。</p><p>跳跃性假设帮我们选择了思考路径。而缺乏深入思考的过程，又让我们进一步失去了发现解决问题的方法。</p><p>如何解决：要深入思考<br>如何深入思考：通过提问来放慢思考速度</p><p>提什么问题</p><ol><li>今天我做得不好的事情是什么？</li><li>我当时是怎么考虑的？</li><li>如果我重新来做会有哪些改进？</li></ol></blockquote></li></ul><ul><li><p>促进已有知识产生新知识</p><blockquote><p>在反思的时候主动的进行知识的联想和联结，将生活中其他经历和经验串联起来， 重新认识和审视自己过往经历，能够将自己分散的生活经验进行重新组织， 从而产生新的知识。</p><p>如何做</p><ol><li>我过去还遇到过这样的事情吗？</li><li>我还听过有其他人经历的同样的事情吗？</li><li>有什么相关的方法可以应用到这件事情中吗</li></ol></blockquote></li><li><p>检验学习到的新知识是否用了起来</p><blockquote><p>对标管理：提前设定一个标准， 然后每天反思， 与之比较寻找差距</p></blockquote></li></ul><ol start="3"><li>培养反思的额方法</li></ol><ul><li><p>从小事反思，深入突破</p></li><li><p>把生活案例化处理</p></li><li><p>培养记反思日记的习惯</p></li></ul><ol start="4"><li><strong>每日反思问题：</strong></li></ol><ul><li>今天我做得不好的事情是什么？</li><li>我当时是怎么考虑的， 身体是怎么反应的？</li><li>如果我重新来做会有哪些改进？</li><li>我过去还遇到过这样的事情吗？</li><li>我还听过有其他人经历同样的事情吗？</li><li>有什么相关的方法可以应用到这种事情中吗？</li><li>我今天没有有效控制自己的事情是什么？</li><li>我今天在心理上感觉很好的2件事情是什么？</li><li>我今天学到的新技能时什么？</li><li>我离我的职业目标还差哪些技能？</li></ul><hr><h1 id="如何以教带学"><a href="#如何以教带学" class="headerlink" title="如何以教带学"></a>如何以教带学</h1><hr><p>重复三次左右会面临一个临界点， 度过这后就很容易继续了。</p><p>刻意练习是痛苦的过程。 </p><p>如何保证高效利用好时间？<br>学习仪式感：<br>基于这种仪式感， 给自己带来一种强烈的自我暗示——利用这种暗示， 把自己的专注力、反应能力、运动能力迅速提升。 </p><p>物质准备： 水， 巧克力， 电脑</p><p>精神准备： 第二天高效学习， 第一天晚早早睡去。</p><p>时间准备： 9点正式学习， 9点之前提前赶到图书馆</p><p>预热：<br>翻看即将到来的两个小时之内需要学习的内容， 心里有个大概。 </p><p>静心：<br>在9点之前的一分钟， 会盖上书本， 静等一分钟的流逝， 八点一到， 就带着喜悦的心情静静地<br>翻看书本。 </p><h1 id="必须做的5件事"><a href="#必须做的5件事" class="headerlink" title="必须做的5件事"></a>必须做的5件事</h1><ol><li><p>想尽办法，跟牛人在一起</p><blockquote><p>在跟牛人的交流中， 能迅速打开视野，增长见识， 还能交到朋友。<br>经常交流的人， 对你有很大的反向塑造里，想成为牛人，就一定要常见牛人，付费约见是一种很好的方式。 </p></blockquote></li><li><p>读以致用， 好书至少读十篇</p></li></ol><ul><li>一定要每天坚持读书， 哪怕每天只读5页</li><li>输出， 读完之后， 需要总结，写出文章来，没有输出的输入，质量是不行的。</li><li>好书读十遍，遇到好书， 一定要反复读</li><li>读以致用， 成长的关键在于干事情，并且做出成绩来，读完就要用</li></ul><ol start="3"><li><p>做人大方，持续真诚地利他<br>如果你是个持续大方的人，别人就会知道，跟你合作、和你交往，不会吃亏，朋友、机会才会越来越多</p></li><li><p>视时如命，有极强的抗扰力<br>主动见想见的人，去做该做的事情，但不要被别人打乱你的节奏。</p></li><li><p>持续分享，传播有用的内容<br>想要打造个人品牌，持续对外输出有用的内容，是至关重要的事情。</p></li></ol><hr><h1 id="付费学习"><a href="#付费学习" class="headerlink" title="付费学习"></a>付费学习</h1><ul><li><p>门槛低的群，加了不要在里面混，要不然就是浪费生命</p></li><li><p>收费高的地方，听课是其次，观模式、交朋友、盘资源会被大家放在更重要的位置</p></li><li><p>选择老师的时候，一定要看他是否在相关领域做出不错的成绩</p></li><li><p>一定要跨领域，不要只是在某个领域的各种学习群里学，这会导致你的视野受限</p></li><li><p>要学会重点展示你的独特价值， 在自我介绍环节，你要想想你有哪些独特的价值，优势，是大家所不具备的，<br>然后持续重点展现，这样做，会让你更容易脱颖而出。</p></li><li><p>最好是大家能够嘻嘻哈哈的玩在一起，这样才能有利于关系的发展，如果都端着，只能证明信任还不够，感觉还没到位。</p></li><li><p>要不卑不亢，跟大家平等沟通，哪怕你比他要穷的多。傲和怂，都是很损个人品牌的。 </p></li><li><p>将利他作为一种习惯，利他，才是最好的利己</p></li><li><p>不管你的学历如何，要多读书，多听优秀的人分享，提高自己的写和说的能力</p></li></ul><h1 id="知识转换为付费"><a href="#知识转换为付费" class="headerlink" title="知识转换为付费"></a>知识转换为付费</h1><ul><li><p>通过坚持做一件非常有用的事情，提升自己，并影响他们和帮助他人，是打造个人品牌的“捷径”</p></li><li><p>有了良好的个人品牌，增加收入只是顺带的事情</p></li></ul><h1 id="当学不进去的时候，-用【普瑞马法则】"><a href="#当学不进去的时候，-用【普瑞马法则】" class="headerlink" title="当学不进去的时候， 用【普瑞马法则】"></a>当学不进去的时候， 用【普瑞马法则】</h1><p>在学习和生活中，我们有时会想要做某件事情，但过了好久发现还是没有做， 或者觉得力气使不出来，生活好像配一种惰性缠绕，知道那不好，却又不知道从何入手来改变。</p><p>我们可以利用<strong>普瑞马法则</strong>， 把一件困难的事情放在容易完成的事情前面去做， 把工作中不想完成的事情放在前面完成，这样做不仅强化了工作能力， 增强效率， 同事也让人们意识到， 困难的任务其实也没有那么的困难。</p><p>这是一种强化作用的方式——先处理困难的事情， 再处理不那么困难的事情，那是一种对于前面行动的强化，然后继续， 强化的效果会越来越大，一直大到觉得有力量来完成任何事情。 </p><p>例如，先可以用一天到两天时间给自己做一个行为记录， 把每天要做的事情记下来，大概十几件，然后把这些事情按照兴趣排列，把最不喜欢的事情放在第一位， 把最喜欢的事情放在最后一位。这样在以后的一周，每天一早起来，从最不喜欢的事情开始做起，并且坚持做完第一件事情，再做第二件事情….一直做到最后一件喜欢的事情。</p><p>通过结束懒惰的行为，从而结束懒惰的心理。 </p><h1 id="普瑞马法则"><a href="#普瑞马法则" class="headerlink" title="普瑞马法则"></a>普瑞马法则</h1><p>今日要做的事情：</p><ol><li>思考用户生命周期</li><li>考虑设计应用：用户访问触点，依据用户行为轨迹建模，第二天短信推送或者apppush做相应出点或者活动等推荐，结合目前的活动和业务，看能做哪些场景</li><li>锻炼， 跑步</li><li>写作</li><li>英语阅读</li><li>写反思日记</li><li>吃饭</li><li>玩游戏</li><li>看《别闹了，费曼先生》</li><li>打电话</li></ol><p>排序：</p><ol><li>思考用户生命周期</li><li>考虑设计应用：用户访问触点，依据用户行为轨迹建模，第二天短信推送或者apppush做相应出点或者活动等推荐，结合目前的活动和业务，看能做哪些场景</li><li>英语阅读</li><li>写作</li><li>锻炼， 跑步</li><li>写反思日记</li><li>吃饭</li><li>看《别闹了，费曼先生》</li><li>打电话</li><li>玩游戏</li></ol><hr><p>《好好学习》第二遍笔记：</p><ol><li><p>什么是知识？<br>有能够改变你行动的信息才是知识。</p></li><li><p>如何判断你掌握了知识？<br>是否根据学习到的知识改变了你的思考和行动</p></li><li><p>个人知识学习的三个维度：<br>知识数量， 知识获取速度，<strong>知识深度</strong></p></li><li><p>知识管理的核心<br>通过管理知识来提升我们的认知深度，进而改变我们的行为模式</p></li><li><p>什么是认知深度？</p></li></ol><ul><li>分析问题时，能够找出具体现象背后的抽象规律</li><li>寻找答案时，结论依托于实验验证或数据支持</li></ul><ol start="6"><li>什么是技术效率和认知效率？</li></ol><ul><li>学习在不断掌握应对具体工作场景和问题的方法，就是在提升技术效率</li><li>学习了解问题本质，了解解决方案的底层规律，能够让我们认清问题表象背后的实质，就是在提升认证效率</li></ul><ol start="7"><li>学习那些知识能够提升认知效率</li></ol><ul><li>执行能力： 时间管理，精力管理，沟通技巧</li><li>专业能力：解决系统问题的能力</li><li>结构能力：认知事物底层规律</li></ul><ol start="8"><li>读书，如何跳出低水平的勤奋？</li></ol><ul><li>将学到的新知识和已有知识进行联系，构成知识网络。</li><li>描述读书后受启发的内容，这些启发和过去的哪些经验相关</li><li>当要解决某个问题的时候，主动寻找相关的文章和书籍。<blockquote><p>观察作者是用什么样的思路来解决问题？<br>在这个解决方案背后，是否有我熟悉的知识？<br>我还能把这个解决方案的原理， 应用在什么领域？</p></blockquote></li></ul><ol start="9"><li>学习知识应该具备的两个心态</li></ol><ul><li>绿灯思维：积极地考虑新观点里有价值的地方,而不是一味的抵触。</li><li>以慢为快：结硬寨，打呆仗。打通知识的阻塞，实现融会贯通。</li></ul><ol start="10"><li>提升学习能力的三个底层方法</li></ol><ul><li>反思： 观察结果——研究原先假设——反思校正假设， 反思日记</li><li>以教为学： 把教别人的过程作为帮助自己学习的过程</li><li>刻意练习：<blockquote><p>对基本核心知识划小圈——对基本概念，知识堵塞等关键地方反复探究和思考<br>将基本知识组合成更大的知识能力单元——和其他相关知识组合成一个新的知识能力单元<br>在各知识能力单元之间构建认知框架——依靠模型组成的框选来安排你的经验</p></blockquote></li></ul><ol start="11"><li>提升学习能力的三个技巧：</li></ol><ul><li>记录——如实地记录整个事情的发展过程</li><li>定期回顾：<blockquote><p>周/月回顾：微观审视解决问题的假设和效果<br>年度回顾：检视基本思考方式<br>5年以上回顾：探寻基本规律如何影响生活</p></blockquote></li><li>付费购买：<blockquote><p>买书是为了更快速地寻找问题可能的解决方案<br>买时间</p></blockquote></li></ul><ol start="12"><li>如何发现自己的临界知识</li></ol><ul><li>从自己感兴趣的领域入手，学习这个学习的重要知识。</li><li>找到最重要的知识和原理的原始出处</li><li>尝试用更加基本的原理来解释这个知识</li><li>没有解释的时候，想办法寻找或者自己创造个假设，并验证</li></ul><p>13 如何应用临界知识</p><ul><li>刻意练习<blockquote><p>在不同的场景中，重复应用同一个临界知识<br>在不同的时间里，重复应用同一个临界知识</p></blockquote></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;阅读《好好学习》&lt;/p&gt;
&lt;h1 id=&quot;如何写反思日记：&quot;&gt;&lt;a href=&quot;#如何写反思日记：&quot; class=&quot;headerlink&quot; title=&quot;如何写反思日记：&quot;&gt;&lt;/a&gt;如何写反思日记：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;什么是反思&lt;br&gt;反思的实质是对假设进行校
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习系统" scheme="https://zhangandyu.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>阅读系统</title>
    <link href="https://zhangandyu.github.io/2018/10/10/%E9%98%85%E8%AF%BB%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhangandyu.github.io/2018/10/10/阅读系统/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2019-01-13T16:32:03.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="困惑"><a href="#困惑" class="headerlink" title="困惑"></a>困惑</h1><p>在日常的读书学习中，自己总是会出现这样的困惑， 就是发现自己看了很多书， 但是看完就忘。看完一本书也很难用其中的论点指导自己的生活，难道自己陷入看了那么多书，却依然过不好这一生的困境中吗？</p><hr><h1 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h1><p>在最近翻阅的一本书《万万没想到-用理工科思维理解世界》中， 万维钢老师写的一篇【用强力研读书】中提出的读书观点，自己很受启发。在这篇文章中， 作者主要强调了读书要做到两点：</p><p><strong>1. 一本好的书籍最少要读两遍</strong><br><strong>2. 第二遍读书的时候一定要做笔记</strong></p><p>反思自己的读书方法，就能够看到自己过去读书的很多问题:</p><ol><li><p>自己看书为了追求看完， 总是囫囵吞枣的看， 看完一遍就将书扔到一边。</p></li><li><p>在看书过程中即使自己会有一些思考， 自己也不会马上记笔记将自己的思考写下来， 没有将书中的观点和知识内化到自己的系统中， 在以后遇到类似的知识也不会进行升级， 因为自己已经将这个知识忘光了。</p></li></ol><hr><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>当然，记笔记并不是将书中的总结性内容抄到笔记本上就完事了，在这篇文章中， 万维钢老师还详细的介绍了如何做才能让自己的读书效率最大化:</p><ol><li><p><strong>读好书一定要读两遍。</strong><br>第一遍是陷进去，按作者的思路去读。 第二遍跳出来， 抓住文章的精髓仔细读， 做笔记。</p></li><li><p><strong>在读第二遍的时候要找出文章的思想脉络。</strong><br>很多时候你没有真正理解书中的内容， 就是因为看不到书中的脉络。因为你作为读者，看书是将用线性的视角来一行一行看的，而作者写一篇文章是将网状的思考， 把树状的结构， 用线性的语言表达出来。 书中每一个小章节的逻辑结构可能就只有几句话。 在你读书过程中要做的就是找出这样的逻辑结构。</p></li><li><p><strong>当我们看到文章好的亮点时， 我们要把它记下来据为己有，也许是一句话， 也许是一个故事。</strong><br>记笔记， 是当你看到了一个想法之后很激动，必须把这个想法记下来据为己有的行为。 读书，在某种程度上就是寻找能够刺激自己思维的那些亮点， 我们在分析书本脉络的时候要忽略故事，分析完脉络再好的把故事带走。</p></li><li><p><strong>当我们看书的时候，我们要写下自己对书中内容的评论， 就好像和作者对话一样。</strong><br>你可以对书中的观点表达支持， 质疑， 或者写下这个观点给了你启发— 让你想到了自己最近发生的一件事， 听过的一个故事， 你都可以写下来。</p></li><li><p>当你看完一本书的时候， 你也许会发现自己在另一本书上又发现相似的论点， 或者你在网上看到了另一个人对这个观点的表达， 这个时候， <strong>你就要将不同地方看到的蕾西知识整理到自己的笔记上， 不断的完善它， 形成自己的观点， 并写文章发表出来。</strong></p></li></ol><p>再引述一下作者的话：</p><blockquote><p>好书之所以要读两遍， 最重要的目的就是为了读书后的心得、灵感和联系。<br>记笔记是对一本书最大的敬意，记笔记是个人知识的延伸。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结文章的观点， 就是<strong>读两遍，理脉络，记笔记，写心得，融体系</strong>。能够做上述几点，相信你的读书效率一定会大大改善的。</p><p>最后，结合自己的经验，我认为如果为了提高自己的认知能力而读书， 就一定要记读书笔记， 要不读书的效率会差很多。要想改变读了那么多书却依然过不好这一生的困境，我觉得可以用自己很喜欢的一句话来进行回答：</p><blockquote><p>知识不会改变命运，除非它带来行动；<br>行动也不会改变命运，除非它带来结果；<br>是一个一个的结果，在改变你的命运； </p></blockquote><hr><p>参考资料：<br>1.<a href="https://book.douban.com/subject/25986341/" target="_blank" rel="noopener">《万万没想到-用理工思维看世界》</a><br>2.<a href="https://m.igetget.com/share/column/cid/21" target="_blank" rel="noopener">《超级个体》</a></p><hr><p>读书三问：</p><ol><li>为什么我坚持读书写作很久了，却没有进步</li></ol><ul><li>有认真消化吗，自己读了以后，能教别人吗</li><li>你所写的内容， 是简单的搬运，还是行动之后的反思总结</li><li>不要只是读读写写，你得去做事，事上磨练，才是最好的学习方式</li></ul><ol start="2"><li>一年要读多少数</li></ol><ul><li>你更应该关心的是， 你能践行多少内容</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;困惑&quot;&gt;&lt;a href=&quot;#困惑&quot; class=&quot;headerlink&quot; title=&quot;困惑&quot;&gt;&lt;/a&gt;困惑&lt;/h1&gt;&lt;p&gt;在日常的读书学习中，自己总是会出现这样的困惑， 就是发现自己看了很多书， 但是看完就忘。看完一本书也很难用其中的论点指导自己的生活，难道自己
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="阅读" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="阅读系统" scheme="https://zhangandyu.github.io/tags/%E9%98%85%E8%AF%BB%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>写作系统</title>
    <link href="https://zhangandyu.github.io/2018/10/10/%E5%86%99%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://zhangandyu.github.io/2018/10/10/写作系统/</id>
    <published>2018-10-09T16:00:00.000Z</published>
    <updated>2019-01-13T16:32:04.605Z</updated>
    
    <content type="html"><![CDATA[<p>写作准备：</p><ol><li>从生活中想到一个你想要写的主题。</li><li>在日常中思考素材， 注意素材的积累。</li><li>想清楚你想表达的思想是什么， 用一句话表达清楚</li></ol><ol><li>写作， 是自我对话， 认识自己的一种方式。 </li><li>写作的本质， 情绪 与 传递</li><li>文章风格： 逻辑 + 生活 + 有趣</li><li>写： 生活 —— 素材库 —— 观点库（逻辑，情绪） —— 结构库 —— 草稿库</li><li>检查：<ul><li>逻辑是否清晰， 是否有自己的观点， 是否有趣</li><li>排版， 标题， 错别字</li></ul></li></ol><p>写作模板：</p><ol><li><p>这篇文章主要表达什么思想， 用两句话来说清楚。</p></li><li><p>自己准备的素材都有哪些</p></li><li><p>自己选择什么布局？</p><blockquote><ul><li>从证据到结论</li><li>从结论到证据</li><li>将第二重要的内容放首位， 最重要的内容放最后</li></ul></blockquote></li><li><p>写文章引言</p><ul><li>提出一个现象， 或者一个有争议的观点， 由此导出你的观点。 </li><li>讲一则简洁的故事， 这个故事能够很好地阐述你将要表达的观点</li></ul></li><li><p>撰写文章的结论</p><ul><li>简明进行综合， 告诉读者为什么应该赞同你的观点</li><li>对引言的故事加以评论</li></ul></li><li><p>记住哪些观点需要论证， 以及你将如何论证<br> 提供高质量的伦军来支撑自己的观点， 检查每一个观点和证据， 用以下各类方式呈现出来</p><ul><li>提供事实性的细节， 比如数据</li><li>描述人或事</li><li>提供一篇文章或一本书的总结</li><li>引用或转述某个学者的观点</li><li>对真实或假设性事件简明或扩展地叙述</li><li>追溯历史发展</li><li>呈现字面上或者深层次的含义</li><li>细化某一过程或程序</li><li>解释相似性和差异性的联系与区别</li><li>分析原因或产生的影响</li><li>评价某人的观点 阐述其优点和不足</li></ul></li><li><p>根据以上步骤写出你的草稿</p></li><li><p>修改<br>用批判的眼光阅读初稿， 大声朗读出来。问自己以下问题：</p><ul><li>我可以做什么上中心思想表达更清楚</li><li>哪个段落需要做进一步全面解释，以便上读者了解深意</li><li>怎样增强文章连贯性</li><li>用哪种形式编排句子和段落， 让文中思想更容易理解</li><li>我需要在哪加上过度聚， 用来标志转入下一个观点</li><li>哪些想法需要重点强调， 哪些可以一笔带过</li><li>怎样更好地强调重点， 我是否没有找到更充足的证据来支持观点</li></ul></li><li><p>编辑<br>找出表改正那些在语法、错字， 标点、加粗等问题</p></li><li><p>努力达到的标准</p><ul><li>让文字看起来很自然</li><li>力求简洁</li><li>用简单的语言来表达你的观点</li><li>让你的句子富于变化<blockquote><p>尝试不同的句子， 试着变化结构， 学习长短句交叉使用</p></blockquote></li><li>让文字生动起来<blockquote><p>尽量把你的想法用有想象力和有个人色彩的语言表现出来</p></blockquote></li></ul></li></ol><hr><ol><li>好的写作能力， 对个人发展的赋能实在太大了，写作这件事，你需要突破</li><li>下笔困难，写不出什么好东西来，最大的问题在于输入的质和量跟不上</li><li>练习很重要，你可以每天写几十个字，每隔一段时间写一篇长点的</li><li>起步阶段，把某个你特别喜欢的作者的书籍，都找过来，逐字读5遍，你会发现，自己的表达风格，会有他的烙印。</li><li>追求简洁流畅、表达精准、有说服力</li></ol><p>参考书籍：<br>《思考的艺术》<br>《金字塔原理》</p><h1 id="有效写作的四个特点："><a href="#有效写作的四个特点：" class="headerlink" title="有效写作的四个特点："></a>有效写作的四个特点：</h1><ol><li><p><strong>统一协调</strong></p><blockquote><ul><li>用一两句话来清晰地表达你的想法，这篇文章的中心思想，指导你后面的写作。</li></ul></blockquote></li><li><p><strong>连贯一致</strong></p><blockquote><ul><li>明白观点的先后顺序， 当你转入另一观点时， 一定要将前一观点表述清楚。同时用一些连接词进行连贯的过渡。</li></ul></blockquote></li><li><p><strong>重点突出</strong></p><blockquote><ul><li>对重要观点进行详细阐述</li><li>将观点按重要程度进行排序，最重要的观点放在最后，次重要的论点放在开头，另外两个论点放中间。</li></ul></blockquote></li><li><p><strong>拓展升华</strong></p><blockquote><ul><li>详细阐述重要的观点，强调的点要能够引发读者的共鸣，可以使用例证、描述、定义、释义等方法</li></ul></blockquote></li></ol><h1 id="写作的阶段渐进法"><a href="#写作的阶段渐进法" class="headerlink" title="写作的阶段渐进法"></a>写作的阶段渐进法</h1><h2 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h2><ol><li><p><strong>整合观点</strong><br>在产生和评价了自己的想法之后，你就需要整理下自己要用到的材料。想法、笔记、他人观点等</p></li><li><p><strong>选择布局</strong></p><ul><li><p>从结论到证据</p><blockquote><p>先呈现结论，再通过例证来支持结论。</p></blockquote></li><li><p>从证据到结论</p><blockquote><p>让读者逐步接受你的结论。适用于辩驳那种广为人知或根深蒂固的观点。</p></blockquote></li><li><p>从原因到结果</p><blockquote><p>先讨论产生某一现象的原因，然后说明这一现象的影响。<br>从结论到原因</p></blockquote></li><li><p>重要性顺序</p><blockquote><p>将第二重要的内容放在首位，最重要的内容放在最后</p></blockquote></li></ul></li><li><p><strong>撰写文章引言的方法</strong></p></li></ol><ul><li><p>提出一些突出的问题，并讨论可能的答案</p></li><li><p>讲一则简洁的故事，这则故事能够很好地阐述你将要表达的观点</p></li><li><p>引用名人名言，从而导入你的中心思想</p></li><li><p>提出一个你不同意的观点，由此导入你的观点</p></li></ul><ol start="4"><li><strong>撰写文章结论的方法</strong></li></ol><ul><li><p>根据内容中提到的争议提出一个可行方案</p></li><li><p>回答引言提出的问题，或对引言和故事加以评论</p></li><li><p>利用新的引言来深化中心思想</p></li><li><p>描述一则新故事，确保这则故事能够强化你的中心思想，并且不会带入新的问题</p></li><li><p>阐述采纳你观点的益处和不采纳你观点的害处</p></li><li><p>简明扼要地进行统合， 告诉读者为什么应该赞同你的观点。</p></li></ul><ol start="5"><li><strong>哪些观点需要进行论证以及你将如何进行论证</strong></li></ol><hr><p>写作系统-辉哥</p><p>2015年之前，随便写写<br>2015-2018年， 为终身事业而写<br>18年——至今， 日更</p><ol><li><p>什么是写作系统</p></li><li><p>为什么要建立写作系统</p></li><li><p>怎么建立写作系统</p></li></ol><hr><p>写作技能： </p><ol><li>要专注哪个领域<br>个人成长</li><li>为什么要选择这个领域<br>我擅长， 大家需要</li><li>写作技能要怎样才能持续提升<br>大量的阅读相关的书籍， 大量的实践， 通过阅读和实践， 总结出自己的个人成长系统，并通过足够多的案例， 让自己的成长系统本身去迭代。 </li></ol><p>读者社群：</p><ol><li>选择哪类读者<br>对未来抱有希望，但是在现实中遭遇困惑的人。</li><li>为什么要选择这类读者<br>从他们看到身上看到自己的影子</li><li>怎样获得更多匹配的读者<br>持续就这个领域写出更好的作品， 出版书籍， 获取更大的认可。 </li><li>怎样才能更好的满足读者在这个领域更好的需求<br>自己更好的成长，并对成长系统梳理的更加清晰。 </li></ol><p>商业：</p><ol><li>如何从写作中获益<br>让读者获益， 并让读者支付会员费。</li><li>怎样获得持续稳定的收益<br>在会员体系中提供稳定的， 并持续增加的正向收益，并获得很好的口碑， 鼓励会员进行链接。</li><li>怎样不断提升收益<br>更好的作品，更多的读者，更好的引导转化</li></ol><p>梳理自己的写作系统</p><p>驱动写作的一页纸：<br>使命：<br>愿景：<br>价值观：</p><p>写作系统的目标：<br>关键结果：</p><p>与写作相关的微习惯：<br>每日阅读：<br>每日写作：</p><hr><p>如何判断自己的文章好坏<br>-<br>建议：</p><ol><li>多写</li><li>这篇文章对读者是否真的有用</li><li>写作是双向沟通而不是单向表达</li></ol><p>你能理解多少人，就能拥有多少读者。</p><p>内容质量判断：</p><ol><li>逻辑严谨</li><li>论证精彩</li></ol><p>逻辑推理的三个层面：</p><ul><li>形式逻辑-formal logic</li><li>非形式逻辑-informatl logic</li><li>认知偏差纠正-coginitive bias correction</li></ul><p>《thinking fase and slow》</p><ul><li>cognitive bias</li><li>list of cognitive bias</li></ul><p>精彩的例子是攒出来的，不是找出来的。</p><p>《successe quation》</p><p>文采的判断：</p><ul><li>修辞——类比</li><li>韵律——</li></ul><p>格式化写作：</p><ul><li>提出一个观点</li><li>说明这个观点的意义究竟有多大</li><li>证明这个观点</li><li>驳斥对这个观点的质疑</li><li>说清楚这个观点的超级意义</li></ul><hr><ul><li>我要说的是什么概念</li><li>这个概念为什么重要</li><li>这个概念普遍被如何误解</li><li>这个概念实际有什么意义</li><li>正确理解这个概念有什么意义</li><li>如何正确理解这个概念</li><li>错误使用这个概念有什么可怕之处</li><li>这个概念与什么其他重要的概念有重要的联系</li></ul><hr><p>《the walking dead》</p><hr><p>写作的本质， 为了产生影响。<br>我的读者读过之后有什么样的变化？</p><p>《ask right questions》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写作准备：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从生活中想到一个你想要写的主题。&lt;/li&gt;
&lt;li&gt;在日常中思考素材， 注意素材的积累。&lt;/li&gt;
&lt;li&gt;想清楚你想表达的思想是什么， 用一句话表达清楚&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;写作， 是自我对话， 认识自己的一种方式
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="写作" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="写作" scheme="https://zhangandyu.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Pandas 库学习总结</title>
    <link href="https://zhangandyu.github.io/2018/09/28/Pandas%E5%BA%93%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>https://zhangandyu.github.io/2018/09/28/Pandas库学习总结/</id>
    <published>2018-09-27T16:00:00.000Z</published>
    <updated>2019-04-10T01:50:34.672Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/woainishifu/article/details/76105667" target="_blank" rel="noopener">python中的单引号，双引号，三引号的不同作用</a></p><h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h1><p>Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， <strong>Series</strong>和<strong>DataFrame</strong>，Series用于存储一维数据， 而DataFrame存储多维数据。</p><h1 id="常用的软件"><a href="#常用的软件" class="headerlink" title="常用的软件"></a>常用的软件</h1><p>Anaconda是数据分析中运行python的一款利器， 安装教程可参考<br><a href="https://www.jianshu.com/p/169403f7e40c" target="_blank" rel="noopener">Anaconda入门使用指南</a></p><h1 id="Series对象"><a href="#Series对象" class="headerlink" title="Series对象"></a>Series对象</h1><p>Series用于存储一维数据，由两个相互关联的数组组成， 主数组用来存放数据。</p><ol><li>创建Series对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zy = pd.Series([2, 3, 4, 6, 7, 4], index = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;])</span><br></pre></td></tr></table></figure><ol start="2"><li>查看Series对象的两个数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看元素</span><br><span class="line">zy.values</span><br><span class="line"></span><br><span class="line"># 查看索引</span><br><span class="line">zy.index</span><br></pre></td></tr></table></figure><ol start="3"><li>查看元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将zy看做Numpy数组，指定键</span><br><span class="line">zy[2]</span><br><span class="line">zy[0:2]</span><br><span class="line"></span><br><span class="line"># 指定标签</span><br><span class="line">zy[&apos;c&apos;]</span><br><span class="line">zy[[&apos;b&apos;, &apos;c&apos;]]</span><br></pre></td></tr></table></figure><ol start="4"><li>筛选元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zy[zy &gt;3]</span><br></pre></td></tr></table></figure><ol start="5"><li>查看组成元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查看包含的不同元素</span><br><span class="line">zy.unique()</span><br><span class="line">zy.value_counts()</span><br></pre></td></tr></table></figure><ol start="6"><li>通过字典来创建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zy=Series(&#123;&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from datetime import datetime, time, timedelta</span><br></pre></td></tr></table></figure><ul><li>现在时间</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now = datetime.now()</span><br></pre></td></tr></table></figure><ul><li><p>昨天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ysd = now - timedelta(days = 1)</span><br><span class="line">ysd = now.replace(day = now.day-1)</span><br></pre></td></tr></table></figure></li><li><p>本月第一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">month_first = now.replace(day = 1)</span><br></pre></td></tr></table></figure></li><li><p>上月最后一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lastmonth_end = month_first - timedelta(days=1)</span><br></pre></td></tr></table></figure></li><li><p>上月第一天</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lastmonth_first = now.replace(month = now.month-1, day =1)</span><br><span class="line"></span><br><span class="line">lastmonth_first = lastmonth_end.replace(day=1)</span><br></pre></td></tr></table></figure></li><li><p>转化为日期形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this_firsts = lastmonth_first.__format__(&quot;%Y-%m-%d&quot;)</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h3><ol><li>读取文件夹的内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(r&apos;E:\工作文件\周报\周数据\测试\0902-0908&apos;)</span><br><span class="line">print(file_list, &apos;\t&apos;)</span><br><span class="line"></span><br><span class="line"># 读取当前文件夹地址</span><br><span class="line">os.getwd()</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(&apos;E:/工作文件/周报/周数据/测试/0902-0908/an-商品汇总-uv.xls&apos;)</span><br><span class="line">df = pd.read_excel(r&apos;E:\工作文件\周报\周数据\测试\0902-0908\an-商品汇总-uv.xls&apos;)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(r&apos;E:\工作文件\周报\周数据\测试\0902-0908\an-商品汇总-uv.xlsx&apos;)</span><br></pre></td></tr></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(&apos;E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv&apos;)</span><br></pre></td></tr></table></figure><ol start="4"><li>读取txt格式数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;)</span><br><span class="line"></span><br><span class="line">with open(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;, &apos;r&apos;) as f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;)  # 将txt文件存为numpy数组</span><br></pre></td></tr></table></figure><ol start="5"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data.to_excel(&apos;C:/Users/Administrator/Desktop/&apos;+&apos;商品分类.xlsx&apos;)</span><br><span class="line">data.to_excel(r&apos;C:\Users\Administrator\Desktop\\&apos;+&apos;商品分类.xlsx&apos;)</span><br><span class="line">data.to_excel(r&apos;C:\Users\Administrator\Desktop/&apos;+&apos;商品分类.xlsx&apos;)</span><br></pre></td></tr></table></figure><ol start="6"><li><p>其他数据格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 从SQL表/库导入数据 </span><br><span class="line">pd.read_sql(query, connection_object)</span><br><span class="line"></span><br><span class="line"># 从JSON格式的字符串导入数据 </span><br><span class="line">pd.read_json(json_string)</span><br><span class="line"></span><br><span class="line"># 解析URL、字符串或者HTML文件，抽取其中的tables表格 </span><br><span class="line">pd.read_html(url)</span><br><span class="line"></span><br><span class="line"># 从你的粘贴板获取内容，并传给read_table() </span><br><span class="line">pd.read_clipboard()</span><br><span class="line"></span><br><span class="line"># 从字典对象导入数据，Key是列名，Value是数据</span><br><span class="line">pd.DataFrame(dict)</span><br><span class="line"></span><br><span class="line"># 导出数据到SQL表 </span><br><span class="line">df.to_sql(table_name, connection_object)</span><br><span class="line"></span><br><span class="line"># 以Json格式导出数据到文本文件</span><br><span class="line">df.to_json(filename)</span><br></pre></td></tr></table></figure></li><li><p>常见问题：</p></li></ol><ul><li>当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;我的文件.csv&apos;)</span><br><span class="line">res = pd.read_csv(f)</span><br></pre></td></tr></table></figure><ul><li>修改数据格式，并存储</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line">#切换工作目录</span><br><span class="line">os.chdir(r&apos;E:\detil_data&apos;)</span><br><span class="line"></span><br><span class="line"># 显示当前目录</span><br><span class="line"># os.getcwd()</span><br><span class="line"></span><br><span class="line"># 将目录变成列表</span><br><span class="line">data = os.listdir()</span><br><span class="line"></span><br><span class="line"># for 循环此目录</span><br><span class="line"></span><br><span class="line">for i in data:</span><br><span class="line">    a = open(i)</span><br><span class="line">    datas = pd.read_csv(a)</span><br><span class="line">    datas.to_csv(&apos;F:\\zy_data\\文件\\&apos;+ i +&apos;222.csv&apos;, index=False,encoding=&apos;utf_8_sig&apos; )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#datas = pd.read_csv(&apos;a.csv&apos;,encoding=&apos;gbk&apos;)</span><br><span class="line"># datas.to_csv(&apos;test12.csv&apos;, index=False,encoding=&apos;utf_8_sig&apos; )</span><br></pre></td></tr></table></figure><ul><li><p>将求出的数据存储在excel中的多个sheet中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from openpyxl import load_workbook</span><br><span class="line"> </span><br><span class="line">writer = pd.ExcelWriter(&apos;F:/notebooks/zy_zhoushuju/zhoushuju.xlsx&apos;)</span><br><span class="line"></span><br><span class="line">btn_navigation.to_excel(writer, sheet_name = &apos;底部导航&apos;)</span><br><span class="line">shouye_top20.to_excel(writer, sheet_name = &apos;首页top20&apos;)</span><br><span class="line">shouyedier_top2.to_excel(writer, sheet_name = &apos;首页第二屏top20&apos;)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure></li><li><p>当文件特别大， 1个多G时， 可以用for循环查看数据</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in data:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>查看大文件有多少列</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = open(&apos;E:/电信活跃用户数/2018-09-01至2018-09-11全国活跃用户明细.csv&apos;)</span><br><span class="line">data1 = pd.read_csv(data, iterator=True)</span><br><span class="line">data2 = data1.get_chunk(5)</span><br><span class="line">print(data2)</span><br></pre></td></tr></table></figure><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html" target="_blank" rel="noopener">迭代器</a></p><h3 id="描述数据"><a href="#描述数据" class="headerlink" title="描述数据"></a>描述数据</h3><ol><li>表信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li>添加默认列名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果数据没有标题行，可用pandas添加默认的列名</span><br><span class="line">df = pd.read_excel(&apos;x.xlsx&apos;, header = None)</span><br></pre></td></tr></table></figure><ol start="6"><li>显示前数据前5行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(5)</span><br><span class="line">df[[&apos;标题&apos;, &apos;客户端uv&apos;]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(5)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;a&apos;]</span><br></pre></td></tr></table></figure><ol start="10"><li>修改索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.set_index[&apos;标题&apos;]</span><br></pre></td></tr></table></figure><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据有0， 是因对缺失值进行了填充</span><br><span class="line">df[&apos;经纪人级别&apos;].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span><br><span class="line">df = pd.read_excel(&apos;x.xlsx&apos;,skiprows=[2] )</span><br></pre></td></tr></table></figure><ol start="13"><li>对缺失值进行识别</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 所有缺失值显示为True</span><br><span class="line">pd.insull(df)  # df.isnull()</span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#计算此data的数量</span><br><span class="line">df[&apos;data&apos;].value_counts()</span><br><span class="line"></span><br><span class="line"># 升序计数</span><br><span class="line">df[&apos;data&apos;].value_counts(ascending = True)</span><br><span class="line"></span><br><span class="line"># 升序计数并分组</span><br><span class="line">df[&apos;data&apos;].value_counts(ascending = True, bins = 2)</span><br><span class="line"></span><br><span class="line"># 计数</span><br><span class="line">df[&apos;data&apos;].count()</span><br></pre></td></tr></table></figure><h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><ol><li>删除空值 （dropna函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(how=&apos;any&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>填充空值（fillna函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 空值用0填充</span><br><span class="line">df.fillna(value=0)</span><br><span class="line"></span><br><span class="line"># 用均值对空值进行填充</span><br><span class="line">df[&apos;经纪人响应时长&apos;].fillna(df[&apos;经纪人响应时长&apos;].mean())</span><br></pre></td></tr></table></figure><ol start="3"><li>更改数据格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将数据格式int64,改为float格式</span><br><span class="line">df[&apos;大区&apos;].astype(&apos;float64&apos;)</span><br></pre></td></tr></table></figure><ol start="4"><li>更改列名称, 修改列名。 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data2.columns = [[&apos;导航&apos;,&apos;uv&apos;, &apos;pv&apos;,&apos;户均点击&apos;]]</span><br><span class="line"></span><br><span class="line">df.rename(columns=&#123;&apos;IM渠道&apos;: &apos;渠道&apos;&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>找到重复值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="6"><li>删除重复值</li></ol><p><a href="https://www.cnblogs.com/cocowool/p/8421997.html" target="_blank" rel="noopener">https://www.cnblogs.com/cocowool/p/8421997.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 默认第一次出现的保留，其余删除</span><br><span class="line">df[&apos;门店&apos;].drop_duplicates()</span><br><span class="line"></span><br><span class="line">最后一次出现的保留，其余删除</span><br><span class="line">df[&apos;门店&apos;].drop_duplicates(keep = &apos;last&apos;)</span><br></pre></td></tr></table></figure><ol start="7"><li>对列表内的值进行替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;客户UCID&apos;].replace(&apos;10531975&apos;, &apos;110&apos;)</span><br></pre></td></tr></table></figure><ol start="8"><li>找出异常值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data.describe())</span><br><span class="line"># 对异常值进行删除</span><br></pre></td></tr></table></figure><ol start="9"><li>修改数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 修改结果</span><br><span class="line">df.replace(参数)</span><br><span class="line"></span><br><span class="line"># 修改索引</span><br><span class="line">df.rename(参数)</span><br><span class="line"></span><br><span class="line"># 增加, 将一列数据添加到另一列数据后。 </span><br><span class="line">df.append(参数)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">def df[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line">df.drop([&apos;a&apos;, &apos;b&apos;], inplace = True)</span><br></pre></td></tr></table></figure><h3 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h3><ol><li>对两个数据进行合并- mearge, join, concat函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># 按照轴把多个对象拼接起来</span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span><br><span class="line"></span><br><span class="line"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;&apos;key&apos;:[&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;key2&apos; : [&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;A&apos; :[&apos;ao&apos;,&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos; ],</span><br><span class="line">                     &apos;B&apos; : [&apos;bo&apos;,&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos; ]&#125;)</span><br><span class="line"></span><br><span class="line">right =pd.DataFrame(&#123;&apos;key&apos;:[&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;key2&apos; : [&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k4&apos;],</span><br><span class="line">                     &apos;c&apos; :[&apos;co&apos;,&apos;c1&apos;,&apos;c2&apos;,&apos;c3&apos; ],</span><br><span class="line">                     &apos;d&apos; : [&apos;do&apos;,&apos;d1&apos;,&apos;d2&apos;,&apos;d3&apos; ]&#125;)</span><br><span class="line"></span><br><span class="line"># 将left和right进行合并</span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"># 指定以key为键进行合并</span><br><span class="line">pd.merge(left, right, on = &apos;key&apos;)</span><br><span class="line"> pd.merge(name_3, name_1, left_on = [&apos;ming&apos;], right_on = [&apos;标记&apos;])</span><br><span class="line"></span><br><span class="line"># key2列不相同的部分会直接舍弃掉</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;])</span><br><span class="line"></span><br><span class="line"># 保留key2列不相同的部分</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;], how = &apos;outer&apos;)</span><br><span class="line"></span><br><span class="line"># 不相同的部分指定以左表为基准</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;], how = &apos;left&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>将 list 格式转化成 DataFrame 格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = [&apos;省份&apos;, &apos;按钮名称&apos;, &apos;uv&apos;, &apos;pv&apos;] )</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data =pd.DataFrame(&#123; &apos;group&apos;:[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;a&apos;],</span><br><span class="line">                  &apos;data&apos; : [4, 2, 5, 6, 7, 8, 2, 9, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 在保证group列降序的情况下，对data列进行升序处理</span><br><span class="line">data.sort_values(by = [&apos;group&apos;, &apos;data&apos;],ascending = [False, True], inplace = True)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组——excel中的数据透视表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1</span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(&apos;网&apos;) for x in df[&apos;客户注册渠道&apos;]),</span><br><span class="line">                index=df.index,columns=[&apos;客户注册渠道&apos;,&apos;size&apos;])</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bins = [1,3,6,9]</span><br><span class="line">data_cut = pd.cut(data[&apos;data&apos;], bins)</span><br></pre></td></tr></table></figure><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 取到小数点后3位</span><br><span class="line">for i in a :</span><br><span class="line">      print(&quot;)</span><br></pre></td></tr></table></figure><h3 id="对数据进行提取-筛选"><a href="#对数据进行提取-筛选" class="headerlink" title="对数据进行提取,筛选"></a>对数据进行提取,筛选</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;&apos;A&apos;:[7,8,9,20, 10, 11, 14, 13, 14],</span><br><span class="line">                     &apos;B&apos; : [1,2,3,4,5, 6, 7, 7, 8]&#125;)</span><br></pre></td></tr></table></figure><ol><li>按条件进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 选出B列的值大于3的数</span><br><span class="line">df[df[&apos;B&apos;]&gt;3]</span><br><span class="line"></span><br><span class="line"># 当 A列的值大于13时， 显示B，c列的值</span><br><span class="line">df[[&apos;B&apos;,&apos;C&apos;]][df[&apos;A&apos;]&gt;13]</span><br><span class="line"></span><br><span class="line"># 用isin函数进行判断</span><br><span class="line"></span><br><span class="line"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span><br><span class="line">df[df.A.isin((10, 13))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断经纪人级别是否为A3</span><br><span class="line">df[&apos;经纪人级别&apos;].isin([&apos;A3&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # 先判断结果，将结果为True的提取</span><br><span class="line">#先判断经纪人级别列里是否包含A3和M4，然后将复合条件的数据提取出来。</span><br><span class="line">df.loc[df[&apos;经纪人级别&apos;].isin([&apos;A3&apos;,&apos;M4&apos;])]</span><br><span class="line"></span><br><span class="line"># 使用&amp;（并）与| （或）操作符或者特定的函数实现多条件筛选 </span><br><span class="line"></span><br><span class="line"># A列值大于10， 并且B列值大于5</span><br><span class="line">df[(df[&apos;A&apos;] &gt; 10) &amp; (df[&apos;B&apos;] &gt;5)]</span><br><span class="line">df[np.logical_and(df[&apos;A&apos;] &gt; 10, df[&apos;B&apos;] &gt; 5)]</span><br><span class="line"></span><br><span class="line"># A列值大于10，或 B列值大于5</span><br><span class="line">df[(df[&apos;A&apos;] &gt; 10) | (df[&apos;C&apos;] &gt;20)]</span><br><span class="line">df[np.logical_or(df[&apos;A&apos;] &gt; 10, df[&apos;C&apos;] &gt; 20)]</span><br></pre></td></tr></table></figure><ol start="2"><li>按索引进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 按标签索引</span><br><span class="line">df[1:4]</span><br><span class="line"></span><br><span class="line"># 传入列名</span><br><span class="line">df[[&apos;A&apos;, &apos;B&apos;]]</span><br><span class="line"></span><br><span class="line"># loc函数</span><br><span class="line"># 知道column names 和index(这里df的index没有指定，是默认生成的下标)，且两者都很好输入，可以选择 .loc同时进行行列选择</span><br><span class="line"></span><br><span class="line"># 根据标签取第一行， 显示为DataFrame格式</span><br><span class="line">df.loc[:0]</span><br><span class="line"></span><br><span class="line"># 取标签为2,3,4， A列的数据， 显示为Series格式</span><br><span class="line">df.loc[2:4, &apos;A&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># iloc函数</span><br><span class="line"># 行和列都用index来进行提取</span><br><span class="line">df.iloc[0:5, 1:3] </span><br><span class="line"></span><br><span class="line"># 返回第一行 </span><br><span class="line">df.iloc[0,:]</span><br><span class="line"></span><br><span class="line"># 返回第一列的第一个元素</span><br><span class="line">df.iloc[0,0]</span><br><span class="line"></span><br><span class="line">#[0, 2, 5] 代表指定的行，[ 4, 5 ] 代表指定的列</span><br><span class="line">df.iloc[[0,2,5],[4,5]]</span><br><span class="line"></span><br><span class="line"># ix</span><br><span class="line">#ix的功能更加强大，参数既可以是索引，也可以是名称，相当于，loc和iloc的合体</span><br><span class="line"></span><br><span class="line">df.ix[1:3, [&apos;A&apos;, &apos;B&apos;]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># at函数</span><br><span class="line">根据指定行index及列label，快速定位DataFrame的元素，选择列时仅支持列名</span><br><span class="line">df.at[3, &apos;A&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># iat函数</span><br><span class="line">选择时只使用索引参数</span><br><span class="line">df.iat[3, 2]</span><br></pre></td></tr></table></figure><ol start="3"><li>按日期进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import pandas</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line"># 重新设置索引</span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line">#设置日期为索引</span><br><span class="line">df=df.set_index(&apos;日期&apos;)</span><br><span class="line"></span><br><span class="line">#提取2016年11月2号的数据</span><br><span class="line">df[&apos;2016-11-02&apos; : &apos;2016-11-02&apos;]</span><br><span class="line"></span><br><span class="line">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span><br><span class="line">print(dt_time)</span><br><span class="line"></span><br><span class="line">#构造时间</span><br><span class="line">ts = pd.Timestamp(&apos;2018-09-17 22:43:00&apos;)</span><br><span class="line">ts = pd.to_datetime(&apos;2018-09-17 22:43:00&apos;)</span><br><span class="line">ts = pd.to_datetime(&apos;17/09/2018 22:43:00&apos;)</span><br><span class="line"></span><br><span class="line"># 月份</span><br><span class="line">ts.month</span><br><span class="line"></span><br><span class="line">#日期</span><br><span class="line">ts.day</span><br><span class="line"></span><br><span class="line"># 加日期</span><br><span class="line">ts + pd.Timedelta(&apos; 10 days&apos;)</span><br><span class="line"></span><br><span class="line">ts.hour</span><br><span class="line"></span><br><span class="line"># 构造时间序列， 构造十个日期， 每12分钟一次</span><br><span class="line">pd.Series(pd.date_range(start = &apos;2018-09-17 22:43:00&apos;, periods = 10, freq = &apos;12min&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">读取文件， 有时间列， 先将时间字符串转换成时间格式， 再进行处理</span><br><span class="line">或当读取数据时， 就对数据格式进行修改</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(&apos;.../db.csv&apos;, index_col = 0, parse_dates = True)</span><br><span class="line"></span><br><span class="line"># 读取时间为2013年的所有数据</span><br><span class="line">data[&apos;2013&apos;]</span><br><span class="line"></span><br><span class="line"># 取所有8点到12点之间的数据, 不包含8点和12点</span><br><span class="line">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span><br><span class="line"></span><br><span class="line"># 包含8点到12点</span><br><span class="line">data.between_time(&apos;08:00&apos;, &apos;12:00&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 时间序列的重采样-看每月的平均值</span><br><span class="line">data.resample(&apos;M&apos;).mean()</span><br></pre></td></tr></table></figure><hr><h3 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h3><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建数组</span><br><span class="line">df = pd.DataFrame(&#123;&apos;key&apos; : [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;],</span><br><span class="line">                    &apos;data&apos; : [0, 2, 4, 5, 6, 7, 8, 9, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 分别计算a, b, c 的和</span><br><span class="line">df.groupby(&apos;key&apos;)[&apos;data&apos;].sum()</span><br><span class="line"></span><br><span class="line">df.groupby(&apos;key&apos;)[&apos;data&apos;].mean()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = pd.Series([1, 2, 3,1, 2, 3],[8,7,6,8,7,6])</span><br><span class="line"></span><br><span class="line"># 对索引进行排序</span><br><span class="line">grouped = s.groupby(level = 0， sort =False)</span><br><span class="line">grouped.first()</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;&apos;x&apos;:[&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;b&apos;],</span><br><span class="line">                   &apos;y&apos; : [1, 2, 3, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 只关注x中的b</span><br><span class="line">df3 = df2.groupby([&apos;x&apos;]).get_group(&apos;b&apos;)</span><br><span class="line"></span><br><span class="line"># 查看个数</span><br><span class="line">df2.size()</span><br></pre></td></tr></table></figure><p>2, 对数据进行透视, 相当于Excel中的数据透视表功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pd.pivot_table(data, values=None, index=None, columns=None, aggfunc=&apos;mean&apos;)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&quot;A&quot;: [&quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;,</span><br><span class="line">                          &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;],</span><br><span class="line">                    &quot;B&quot;: [&quot;one&quot;, &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;,</span><br><span class="line">                          &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;],</span><br><span class="line">                    &quot;C&quot;: [&quot;small&quot;, &quot;large&quot;, &quot;large&quot;, &quot;small&quot;,</span><br><span class="line">                          &quot;small&quot;, &quot;large&quot;, &quot;small&quot;, &quot;small&quot;,</span><br><span class="line">                          &quot;large&quot;],</span><br><span class="line">                    &quot;D&quot;: [1, 2, 2, 3, 3, 4, 5, 6, 7]&#125;)</span><br><span class="line"></span><br><span class="line">table = pd.pivot_table(df, values=&apos;D&apos;, index=[&apos;A&apos;, &apos;B&apos;],</span><br><span class="line">                     columns=[&apos;C&apos;], aggfunc=np.sum)</span><br></pre></td></tr></table></figure></p><ol start="3"><li>对数据进行映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper)</span><br></pre></td></tr></table></figure><h3 id="数据统计"><a href="#数据统计" class="headerlink" title="数据统计"></a>数据统计</h3><ol><li>数据采样</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="2"><li>统计计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 描述统计 describe函数</span><br><span class="line"></span><br><span class="line">#自动生成数据的数量，均值，标准差等数据</span><br><span class="line">#round（2）,显示小数点后面2位数，T转置</span><br><span class="line"></span><br><span class="line">df.describe().round(2).T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标准差std()</span><br><span class="line">df[&apos;经纪人响应时长&apos;].std()</span><br><span class="line"></span><br><span class="line"># 协方差cov</span><br><span class="line">df[&apos;经纪人当天发送消息数&apos;].cov(df[&apos;客户当天发送消息数&apos;]</span><br><span class="line"></span><br><span class="line"># 相关性分析corr</span><br><span class="line">df[&apos;客户当天发送消息数&apos;].corr(df[&apos;经纪人当天发送消息数&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 中位数</span><br><span class="line">df.median()</span><br></pre></td></tr></table></figure><hr><h3 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h3><ol><li>大小写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li>去除空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="4"><li>替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns.str.replace(&apos; &apos;, &apos;_&apos;)</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列、 合并</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#切分</span><br><span class="line">a.split(&apos;_&apos;)</span><br><span class="line"></span><br><span class="line"># 切分， 且成为新列</span><br><span class="line">a.split(&apos;_&apos;, expand = True)</span><br><span class="line"></span><br><span class="line"># 对切分进行限制, 只切1次</span><br><span class="line">a.split(&apos;_&apos;, expand = True, n=1)</span><br><span class="line"></span><br><span class="line"># 查看是否包含</span><br><span class="line">a.str.contains(&apos;A&apos;)</span><br><span class="line"></span><br><span class="line"># 分列</span><br><span class="line">s.str.get_dummies(sep= &apos;|&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对两列数据进行合并</span><br><span class="line">df[&apos;省份_名称&apos;] = df[&apos;省份&apos;].str.cat(df[&apos;名称&apos;],sep = &apos;_&apos;)</span><br></pre></td></tr></table></figure><h3 id="读取excel-中的各个sheeht名称，并且进行合并"><a href="#读取excel-中的各个sheeht名称，并且进行合并" class="headerlink" title="读取excel 中的各个sheeht名称，并且进行合并"></a>读取excel 中的各个sheeht名称，并且进行合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rbook = []</span><br><span class="line">kong_data = os.listdir(r&apos;F:\zy_data\省资源位数据\3月省资源位数据\省资源位&apos;)</span><br><span class="line">for file_name in kong_data:</span><br><span class="line">    data_excel = pd.ExcelFile(r&apos;F:\zy_data\省资源位数据\3月省资源位数据\省资源位\\&apos;+file_name)</span><br><span class="line">    sheet = data_excel.sheet_names</span><br><span class="line">    for i in sheet:</span><br><span class="line">        data_button_rest = pd.read_excel(r&apos;F:\zy_data\省资源位数据\3月省资源位数据\省资源位\\&apos;+file_name, sheet_name= i )</span><br><span class="line">        rbook.append(data_button_rest)</span><br><span class="line">        result_df =pd.concat(rbook)</span><br><span class="line">datas_excel = pd.DataFrame(result_df)</span><br></pre></td></tr></table></figure><h3 id="将运行的所有数据都展现出来，-而不是只展现最后一条"><a href="#将运行的所有数据都展现出来，-而不是只展现最后一条" class="headerlink" title="将运行的所有数据都展现出来， 而不是只展现最后一条"></a>将运行的所有数据都展现出来， 而不是只展现最后一条</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from  IPython.core.interactiveshell import InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = &quot;all&quot;</span><br></pre></td></tr></table></figure><h3 id="字符和数值之间的转化"><a href="#字符和数值之间的转化" class="headerlink" title="字符和数值之间的转化"></a>字符和数值之间的转化</h3><p><code></code><br>int()  # 转化成整数<br>float() # 转化成浮点数<br>str() # 转化成字符<br>type() # 查看格式</p><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/woainishifu/article/details/76105667&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;python中的单引号，双引号，三引号的不同作用&lt;/a&gt;&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
      <category term="编程语言" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>数据分析常见缩写</title>
    <link href="https://zhangandyu.github.io/2018/09/27/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%B8%B8%E8%A7%81%E7%BC%A9%E5%86%99/"/>
    <id>https://zhangandyu.github.io/2018/09/27/数据分析常见缩写/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2019-03-23T06:16:04.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见缩写"><a href="#常见缩写" class="headerlink" title="常见缩写"></a>常见缩写</h1><ol><li>ROI —— 投资回报率 = 年利润 / 投资总额 * 100%</li></ol><p><a href="https://www.zzidc.com/info/dsyy/1575.html" target="_blank" rel="noopener">https://www.zzidc.com/info/dsyy/1575.html</a></p><ol start="2"><li><p>DAU —— 日活</p></li><li><p>MAU —— 月活</p></li><li><p>PP —— 英文percent point的简称，意思为百分比</p></li><li><p>UGC —— 用户原创内容</p></li><li><p>OLAP 与 OLTP<br>当今的数据处理大致可以分成两大类：联机事务处理OLTP、联机分析处理OLAP。<br>OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。<br>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p></li></ol><ol start="7"><li><p>CTR —— 点击通过率<br>点击次数/曝光次数， 是衡量广告效果的重要指标。 </p></li><li><p>SEO —— 搜索引擎优化</p></li><li><p>CR —— 转化率 ： 衡量转化环节的好坏</p></li><li><p>pv —— 页面浏览量</p></li><li><p>uv —— 页面访问人数</p></li><li><p>visit —— 用户访问次数 ： 用户来到网站-关闭网站页面</p></li><li><p>Landing Page  —— 着陆页 ： 用户从外部链接直接跳转到的第一个页面</p></li><li><p>Bounce Rate —— 跳出率 ： 用户来到网站，没有做任何行为就指标离开网站。</p></li><li><p>退出率 —— 用户访问某网站的某个页面之后，就从浏览器将与此网站相关的所有页面全部关闭</p></li><li><p>平均停留时长 —— 某个页面被用户访问后，在页面停留时长的平均值。衡量页面内容的质量。</p></li><li><p>重复购买率</p></li><li><p>Referrer —— 引荐流量</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常见缩写&quot;&gt;&lt;a href=&quot;#常见缩写&quot; class=&quot;headerlink&quot; title=&quot;常见缩写&quot;&gt;&lt;/a&gt;常见缩写&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;ROI —— 投资回报率 = 年利润 / 投资总额 * 100%&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="数据分析" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="术语" scheme="https://zhangandyu.github.io/tags/%E6%9C%AF%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>一个好用的插件</title>
    <link href="https://zhangandyu.github.io/2018/09/25/%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
    <id>https://zhangandyu.github.io/2018/09/25/好用的插件工具/</id>
    <published>2018-09-24T16:00:00.000Z</published>
    <updated>2019-01-07T14:37:34.348Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一个好用的插件神器"><a href="#一个好用的插件神器" class="headerlink" title="一个好用的插件神器"></a>一个好用的插件神器</h1><p>最近发现了一个特别能够提高生活幸福感的插件：<a href="https://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>, 中文翻译过来叫做油猴。 </p><p><img src="https://i.loli.net/2018/09/25/5baa2c1e20259.png" alt="a"></p><p>安装好这个插件最大的作用， 就是我们可以从<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站来安装我们需要的脚本， 从而极大的提高浏览器的使用效率。</p><p>比如：我们在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>网站找到<a href="https://greasyfork.org/zh-CN/scripts/35251-%E6%99%BA%E8%83%BD%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91" target="_blank" rel="noopener">智能划词翻译</a>这个脚本， 然后点击安装脚本即可。<br><img src="https://i.loli.net/2018/09/25/5baa2f1ca7ec9.png" alt="智能划词翻译"><br>安装完成脚本之后， 我们打开一个英文网页，对需要翻译的段落进行框选，点击翻译按钮，就可实现在原网页查看中文翻译， 对于我这种英语不好的人来说，  有很大的帮助。<br> <img src="https://i.loli.net/2018/09/25/5baa2fafa467c.png" alt> </p><p>我们还可以安装<a href="https://greasyfork.org/zh-CN/scripts/3249-yet-another-weibo-filter" target="_blank" rel="noopener">微博过滤设置</a>脚本，来对微博页面进行个性化设置， 自己设置完成后的微博页面是这个样，相对于原版网页来说简洁了不少。<img src="https://i.loli.net/2018/09/25/5baa3127ae4e8.png" alt></p><p>也可安装<a href="https://greasyfork.org/zh-CN/scripts/4233-miniblogimgpop-%E5%BE%AE%E5%8D%9A%E6%B5%AE%E5%9B%BE" target="_blank" rel="noopener">微博浮图</a>脚本， 查看微博图片也比较方便， 只需把鼠标光标放在图片上即可<img src="https://i.loli.net/2018/09/25/5baa316b9fc84.png" alt></p><p>如果想找资料或电影资源的话， 也可以下载<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>, 或<a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E5%8A%A0%E9%80%9F%E7%89%88" target="_blank" rel="noopener">百度网盘直接下载助手</a>等脚本， 当然，有能力还是要支持正版。</p><p>例如：安装<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>脚本后， 打开豆瓣电影网页， 页面是这个样子。<br><img src="https://i.loli.net/2018/09/25/5baa328561727.png" alt="豆瓣页面"></p><p>在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站还有很多别人写好的脚本， 比如<a href="https://greasyfork.org/zh-CN/scripts/369861-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E5%AD%97%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener">百度文库文字复制</a>、<a href="https://greasyfork.org/zh-CN/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E9%A2%86%E5%8F%96%E6%B7%98%E5%AE%9D%E5%86%85%E9%83%A8%E5%88%B8" target="_blank" rel="noopener">购物党自动比价工具</a>、 <a href="https://greasyfork.org/zh-CN/scripts/8426-download-youtube-videos-and-subtitles" target="_blank" rel="noopener">Download Youtube videos and subtitles</a>等好用的脚本， 可以根据自己的需要进行安装。 </p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一个好用的插件神器&quot;&gt;&lt;a href=&quot;#一个好用的插件神器&quot; class=&quot;headerlink&quot; title=&quot;一个好用的插件神器&quot;&gt;&lt;/a&gt;一个好用的插件神器&lt;/h1&gt;&lt;p&gt;最近发现了一个特别能够提高生活幸福感的插件：&lt;a href=&quot;https://tam
      
    
    </summary>
    
      <category term="工具" scheme="https://zhangandyu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="网站" scheme="https://zhangandyu.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>关于工作和成长的建议（脱不花）</title>
    <link href="https://zhangandyu.github.io/2018/09/02/%E5%85%B3%E4%BA%8E%E4%BA%BA%E7%94%9F%E5%92%8C%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%BB%BA%E8%AE%AE/"/>
    <id>https://zhangandyu.github.io/2018/09/02/关于人生和工作的建议/</id>
    <published>2018-09-01T16:00:00.000Z</published>
    <updated>2019-04-18T13:53:48.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面对批评"><a href="#面对批评" class="headerlink" title="面对批评"></a>面对批评</h1><ol><li>面对批评，得体的第一反应是“不急于解释， 不反唇相讥”。</li><li>很多批评的发生时是因为误会。所以，首先建立情感层面的信任，其次澄清事实，然后才是消除误会。这三步能解决大部分因批评带来的关系问题。</li><li>被批评时，思考的重点应该是“我应该从哪里入手解决问题”，而不是“对不对”。</li><li>对“评论”不理不睬，对“批评”高度重视。</li><li>如果对批评有不同意见或者不明之处，直接问当事人的完整意见。别回避。</li></ol><hr><a id="more"></a><h1 id="关于单身生活"><a href="#关于单身生活" class="headerlink" title="关于单身生活"></a>关于单身生活</h1><ol><li>单身过得不愉快，有伴侣之后也不会愉快。</li><li>单身且愉快，一个重要前提是有较高收入且未来可期。</li><li>单身时最值得花时间去做的是投资一切长本事长能耐的事儿：学习、进修、放纵好奇心。因为有伴侣以后很难再有大块时间可以自由支配。</li><li>拥有联系非常紧密的至交好友，且能够共同成长，两个条件缺一不可。 不够紧密则对彼此生活缺少实际支持，不能同步成长则无法长期维持关系。</li><li>建立自己的生活秩序， 但要有弹性。 弹性是指随时可以接纳一个因伴侣而带来的新秩序。很多人被动长期单身的原因是因为沉浸在自己的世界里、过度缺乏弹性以至于无法接纳别人。 </li><li>积极参加有意思的社交活动，认识陌生人，多交朋友。</li><li>选择偏保守的理财方式，给自己买足额的大病保险，小心对待自己的钱。</li><li>和婚姻生活质量较高的人交朋友，人在面临重大选择时需要榜样和示范。</li><li>不要上来就用长期关系的标准要求对方，关系是递进的：可见、可约、可睡、可长期交往，然后才是可固定长期关系。在不同阶段，标准不一样。</li><li>主动点。对一切事。</li></ol><hr><h1 id="关于个人形象管理"><a href="#关于个人形象管理" class="headerlink" title="关于个人形象管理"></a>关于个人形象管理</h1><ol><li>对普通人来说，“好看”的意思其实等同于“体面”。做到体面，完全是任何人能力范围内的事情。并非苛求。</li><li>清洁是最低标准。对于现代化城市工作生活的职场人来说，清洁的定义就是每天洗澡每天换衣服搽皮鞋。</li><li>你看起来像什么地位，你就是什么地位。</li><li>把衣服的数量最小化，然后把单价提高到力所能及范围内的最高。</li><li>尽快找出自己的“基本形象”：任何人都会有一个最佳穿衣模式，固定下来。</li><li>健身可以帮助你更好的认知自己的身体，再贵的衣服也纠正不了驼背弯腰的仪态。</li><li>一个人从里到外让人有“看起来好干净”的感觉，是一种极高的形象水平。</li><li>那些质疑个人形象管理重要性的人，从来都不会知道因为糟糕的形象而损失了什么。</li></ol><hr><h1 id="关于重大选择"><a href="#关于重大选择" class="headerlink" title="关于重大选择"></a>关于重大选择</h1><ol><li>尽自己最大努力做到有钱、好看、有本事、受欢迎。手里的牌多一些，做选择的主动性就高一些。</li><li>选择大于能力。有人管这个叫“命运”。其实是一种长期被忽略的能力：关键时刻快速做出最优选择的能力。</li><li>最优选择就是对个人远期价值最大化的选择。过于关注当下利益往往是人生的大坑。那些抱着要给未来的孩子找个好爸爸的女生，在婚姻生活中往往过得比寻找最佳男朋友的女生要好，就是这个原理。</li><li>成大事者不纠结。一旦决定，全力以赴。</li><li>掌握“概率权”。 两张牌，一张掀起来保证给你一百万美金，另一张有百分之五十的概率有1个亿美金，或者为零。想清楚，选哪张？怎么选？</li><li>可以征求别人的意见。但是这个“别人”是特指那些你由衷佩服和学习的对象。</li><li>无论别人给你什么意见，都要记住决定是你自己的。不要依赖别人，更不要把后果归罪于外。</li><li>远离安全的舒适区。</li><li>远离颠倒梦想，乐于动手做具体事，少想，多干。</li><li>做选择时不要只看自己，要看如果做了一个决定之后，你会跟什么样的人混在一起。事业选择这一点尤为重要。</li></ol><hr><h1 id="关于人际关系"><a href="#关于人际关系" class="headerlink" title="关于人际关系"></a>关于人际关系</h1><ol><li>良性的人际关系只有一种， 叫做独立自主、强强联合。从来就没有抱团取暖这回事。</li><li>做到对别人有价值， 是建立良性人际关系的前提。 哪怕是暂时只创造了微小的价值，也是价值。</li><li>所有关系中最多正向循环最少事后负担的， 是交易关系。市场最残酷但也最善意。</li><li>所有关系中最危险最有破坏力的， 是纯感情关系。<blockquote><p>所以， 一段关系想要良性发展，要有能力从纯感情喂养，发展成“复合材料”： 比如就婚姻而言，激情不长久，但是双方可以成为共同成长的伙伴，或者某个具体目标的合作者。甚至就亲子关系而言，也可以发展出协同学习的伙伴关系。 </p></blockquote></li><li>不成为别人的负担。 这包活了不成为别人的心理和时间负担，接受别人对自己的不接受。</li><li>对自己负责。这包括了对自己的选择和决定负责，承受由之而来的任何后果。</li><li>定期梳理和剖析自己的原生家庭和亲密关系。<blockquote><p>适度学习一点帮助自我认知的方法，清楚认识并且正面接受自己在人际关系中的短板和问题。<br>大量的人际关系能力缺陷是在原生家庭中已经形成，无需自卑或者自责，因为正面接受自己是战胜这一问题的开始。而且大部分人的大部分心理障碍是可以被消除的。 </p></blockquote></li><li>第一反应是选择信任别人， 但是同时保持独立思考的能力。 </li><li>人际关系不仅有交互频率这一个维度，还有交互深度。 熟人未必是知己。</li><li>远离巨婴、远离不具有建设性能力的人。</li><li>人际关系是一个人真实自我的外在镜像。 </li></ol><hr><h1 id="关于命中贵人"><a href="#关于命中贵人" class="headerlink" title="关于命中贵人"></a>关于命中贵人</h1><ol><li>贵人是那些在关键时刻给出关键点拨的人。 他们有能力呈现世界的本来面目。路原来就在那里，但是没有他们的指路你就看不见。</li><li>他们之所有原因帮你是因为他们的修行，而不是因为我的能耐和好处。</li><li>对他们最好的回报是努力成为和他们一样的人。</li><li>贵人不是等到的，是寻到的和求到的。前提是对他们而言至少你不是减分项。</li><li>以求道之心与人交往。</li><li>举手之劳、锦上添花，才是良性关系。不要求人雪中送炭。跟世态炎凉没关系，有则感谢珍惜，无则检讨自己。</li><li>务必定期让人看到帮助你的结果，分享喜悦和成果。</li><li>逢年过节快递两盒点心，送一辈子，也不算有礼。若想要感谢对方，花心思观察，送出终身难忘的礼物。</li><li>不要黏着对方，不要成为别人的负担。要让对方感觉掌握关系的主动权。人家帮过你，但最怕被要求帮你一辈子。</li><li>有机会帮别人的时候，姿态放低再放低，尽量不让对方有心理压力。帮完之后，对方不提，自己不提。</li><li>也许终有一天你会超过那些你生命中曾经那么重要的人，往前看，别害怕。 既往不恋。</li></ol><hr><h1 id="关于压力管理"><a href="#关于压力管理" class="headerlink" title="关于压力管理"></a>关于压力管理</h1><ol><li>压力是公平的。 真正在入世过活的人，没有人能够置身事外。坚信这一点，不易起怨懑(men)之心。</li><li>职场压力和生活压力无法互相消解。因此不要把压力释放错了地方。</li><li>做一个乐观的悲观主义者。因上努力，果上随缘。</li><li>充分想象最坏的结果，如果认为是无法承受的后果，一定源自自身的贪婪，果断踩刹车。君子不立危墙之下。</li><li>压力无法被替代，注意力可以被转移。到难以承受之际，刷一小时消消乐，剧烈运动两小时，都可以回血。问题依然还在，但不妨缓口气再来。</li><li>有无话不说且旗鼓相当的朋友。说出来可能是最有效的减压之道，并非有人可以安慰你，而是因为站在别人的视角重新看一遍问题会简单很多。</li><li>做不到上一条，就试着把压力和问题写下来，只给自己看。然后会发现其实没有那么复杂。</li><li>永远用最直接的方式面对压力源。拖延和迂回只会让压力变大。</li><li>永远不做任何不能让别人知道的决定和交易， 无论好处有多大。</li><li>把压力想象成一个具体的形象，比如一只怪兽，每处理一步，就在脑海里给丫一拳。</li></ol><hr><h1 id="关于工作习惯"><a href="#关于工作习惯" class="headerlink" title="关于工作习惯"></a>关于工作习惯</h1><ol><li>自己最受益的工作习惯是做笔记。 最佩服的是会面后最先共享笔记的人。</li><li>当日事当日毕能提升工作中的幸福感。</li><li>有关人的问题，都不可拖延，不要心存侥幸，认为可以避免直面冲突或对方可以心领神会。越晚着手，问题会恶化的越严重。<strong>难听的话必须当面说、尽早说、直接说。</strong></li><li>个人行动养成彩排的习惯。打腹稿、做预案。认真准备，就能发现达到一个目标的N种途径，行动中灵活不纠结。</li><li>团队作业养成复盘的习惯。不追究具体人责任，着眼于我们学到了什么。</li><li>每天琢磨核心数据。问出好问题。</li><li>与人面对面交流时不刷手机。</li><li>开会时敢于并善于终结无实质意义的对话，直切主题。致力于达成行动共识。</li><li>准时参加与别人的约会，不迟到。</li><li>每天早中晚三次集中时间段处理社交媒体、邮件等方面的信息。不要随刷随到。这是最节省时间的办法。</li><li>购置最好的工作装备。</li><li>睁大双眼找个好搭档，和聪明人一起工作。</li></ol><hr><h1 id="关于自我成长"><a href="#关于自我成长" class="headerlink" title="关于自我成长"></a>关于自我成长</h1><ol><li>早晚你会知道，这个世界上没有别人。你所看到的都是，你自己的认知模式创造的镜像。</li><li>与此同时你会知道，这个世界上全是别人。所谓反复追寻的“真我”实在是小到不能再小的东西。</li><li>同时知道并接受上述两点，自我成长这件事才真正开始。</li><li>最难的在于不断建立更高的标准。为了解决这一问题最有效的方法是，不断结识更好的榜样。</li><li>在人际关系中做一个能力型“势利眼”， 向上看、向前看，与比自己优秀的人交往。</li><li>既往不恋，不回头，不怀旧，不惋惜。</li><li>以真实的、认识的人为榜样，而不是“传说”中的。因为真人会在每天的交往中给你真实的压力。</li><li>慎独。守心如镜。</li><li>每天独处时问问自己，今天有什么是比前一天做的好的</li><li>不做负面表达，负面包括讽刺、抱怨、指责、争论、批评、牢骚、大话、评价议论。凡事从建设性出发。</li><li>认真记录并揣摩与别人的交往。</li><li>尽可能扩大自己的阅读面。 文科生多阅读点科学著作，理科生不妨研究点文学艺术。阅读是为了理解人。</li><li>带徒弟是逼迫个人成长的绝招。</li><li>不相信“适当的年龄”这件事。除了生孩子，想做任何事情都不会被年龄限制。</li></ol><hr><h1 id="关于机会和陷阱"><a href="#关于机会和陷阱" class="headerlink" title="关于机会和陷阱"></a>关于机会和陷阱</h1><ol><li>世界上最大的陷阱，叫做“机会型陷阱”。</li><li>评估一下这件事对多少人有利？越是多赢的局面，越可能是个机会，反之如果只有你占尽便宜，那肯定不是机会。</li><li>想想这件事是不是很容易做到？有两种事。一种是机灵事：开头就炸，但是越来越没劲。另一种是苦逼事：开头特难，但是越干门槛越高。前者是陷阱，后者是机会。结硬寨、打呆仗是不变的真理，很容易实现的事情，是技巧，不是机会。</li><li>看忽悠你干这个事的人跟这事的关系。如果对他在精力上只是业务兼职，在财富上只是锦上添花，而你要付出全部精力，搭上全部身家。那么，要警惕是个陷阱。</li><li>周边人赞成与否不重要，但是否出手帮你很重要。一旦开始干，帮你的人越来越多的事，机会。反之，陷阱。</li><li>因资源而启动的事，容易翻转为陷阱。因顺势而发生的事，容易找到机会。</li><li>推动社会新分工的事，也就是越来越多的人靠这事吃饭养活一家老小的事，机会。在各种裂缝中套利，除了你谁都没好处的事，陷阱。</li><li>做成之后，容易被巨无霸们摘果子的事，陷阱。做成之后，自成体系的事，机会。换句话说，南瓜不会结在树上。有命长出来，没命hold住。</li><li>就算做成了，也有后遗症的事，陷阱。就算做不成，也长本事长江湖地位的事，机会。</li><li>摊在桌上打明牌也能干的事儿，机会。必须遮遮掩掩唯恐别人知道的事儿，陷阱。</li><li>你孩子长大了为你骄傲的事，机会。 反之，陷阱。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面对批评&quot;&gt;&lt;a href=&quot;#面对批评&quot; class=&quot;headerlink&quot; title=&quot;面对批评&quot;&gt;&lt;/a&gt;面对批评&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;面对批评，得体的第一反应是“不急于解释， 不反唇相讥”。&lt;/li&gt;
&lt;li&gt;很多批评的发生时是因为误会。所以，首先建立情感层面的信任，其次澄清事实，然后才是消除误会。这三步能解决大部分因批评带来的关系问题。&lt;/li&gt;
&lt;li&gt;被批评时，思考的重点应该是“我应该从哪里入手解决问题”，而不是“对不对”。&lt;/li&gt;
&lt;li&gt;对“评论”不理不睬，对“批评”高度重视。&lt;/li&gt;
&lt;li&gt;如果对批评有不同意见或者不明之处，直接问当事人的完整意见。别回避。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="逻辑" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E9%80%BB%E8%BE%91/"/>
    
    
      <category term="转载" scheme="https://zhangandyu.github.io/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>个人资料收集</title>
    <link href="https://zhangandyu.github.io/2018/08/05/%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
    <id>https://zhangandyu.github.io/2018/08/05/资源汇总/</id>
    <published>2018-08-04T16:00:00.000Z</published>
    <updated>2019-01-13T06:57:59.122Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h1><ul><li><p><a href="https://www.bilibili.com/video/av21376839/?p=25" target="_blank" rel="noopener">科普-计算机科学速成课</a></p></li><li><p><a href="https://www.bilibili.com/video/av8717782/?from=search&amp;seid=16602645838444177167" target="_blank" rel="noopener">纪录片-设计的艺术</a></p></li><li><p><a href="https://pan.baidu.com/s/1ge6mejh" target="_blank" rel="noopener">纪录片-小兵小赵</a></p></li><li><p><a href="https://www.youtube.com/watch?v=MCvU61Qoty0" target="_blank" rel="noopener">访谈-子夜.大学之殇</a></p></li><li><p><a href="https://aeon.co/videos/soar-around-the-moon-carried-by-the-music-of-debussy-in-this-breathtaking-space-flight" target="_blank" rel="noopener">月球视频</a></p></li><li><p><a href="https://www.youtube.com/watch?v=V22yKlUt4F4&amp;t=8s" target="_blank" rel="noopener">最后的演讲</a></p></li><li><p><a href="http://open.163.com/movie/2016/6/I/9/MBO0V0FG3_MBO0V9CI9.html" target="_blank" rel="noopener">性，死亡与生命的意义</a></p></li><li><p><a href="https://www.youtube.com/watch?v=sxQaBpKfDRk&amp;index=2&amp;list=PL8dPuuaLjXtNM_Y-bUAhblSAdWRnmBUcr" target="_blank" rel="noopener">统计学：statistics —— CrashCourse</a></p></li><li><p><a href="https://www.youtube.com/channel/UCJqMGrR9fX7Pfw_8JgeRqCA" target="_blank" rel="noopener">锵锵行天下</a></p></li><li><p><a href="https://v.qq.com/x/cover/t6udtxyvbhbbxv2/z0024xgmy6h.html" target="_blank" rel="noopener">蓝色星球</a></p></li><li><p><a href="https://v.qq.com/x/cover/jx7g4sm320sqm7i/b0028lgmlwa.html" target="_blank" rel="noopener">风味人间</a></p></li><li><p><a href="https://v.qq.com/x/page/x073074frri.html" target="_blank" rel="noopener">成功的原则</a></p></li><li><p><a href="https://www.youtube.com/channel/UCvn_XCl_mgQmt3sD753zdJA" target="_blank" rel="noopener">youtube视频：Rachel’s English</a></p></li><li><p><a href="https://www.youtube.com/watch?v=gJ0XxJVhf1Q&amp;list=PLnVWId4y5-smswI2kNgeeS4gbfJTmhIpe" target="_blank" rel="noopener">纪录片-生门</a></p></li><li><p><a href="https://www.youtube.com/watch?v=G_BrFk9i3xQ&amp;t=717s" target="_blank" rel="noopener">电影-生门</a></p></li></ul><h1 id="书："><a href="#书：" class="headerlink" title="书："></a>书：</h1><ul><li><p><a href="https://book.douban.com/subject/2995759/" target="_blank" rel="noopener">The Non-Designer’s Design Book (4th Edition)</a></p></li><li><p><a href="http://www.freetechbooks.com/" target="_blank" rel="noopener">英文原版免费编程书籍</a></p></li></ul><h1 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h1><ul><li><p><a href="https://feedly.com/i/my" target="_blank" rel="noopener">RSS收集网站</a></p></li><li><p><a href="http://www.zhibimo.com/" target="_blank" rel="noopener">知笔墨</a></p></li><li><p><a href="https://natick.research.microsoft.com/" target="_blank" rel="noopener">微软海底机房摄像头直播</a></p></li><li><p><a href="https://www.earthcam.com/" target="_blank" rel="noopener">全球免费摄像头直播</a></p></li><li><p><a href="https://dribbble.com/" target="_blank" rel="noopener">设计类网站</a></p></li><li><p><a href="https://www.artstation.com/about" target="_blank" rel="noopener">漫画-海报</a></p></li><li><p><a href="https://ourworldindata.org/" target="_blank" rel="noopener">Our the in World</a></p></li><li><p><a href="http://cnki.net/" target="_blank" rel="noopener">中国知网</a></p></li><li><p><a href="https://www.gapminder.org/tools/#$chart-type=bubbles" target="_blank" rel="noopener">统计学可视化</a></p></li></ul><p>cnki免费下载文献：账号：hqwytsg015 密码：cnki015</p><ul><li><p><a href="https://www.douban.com/note/376297328/" target="_blank" rel="noopener">北京值得去的地方</a></p></li><li><p><a href="https://www.youtube.com/watch?v=dKOuUo3pZSE" target="_blank" rel="noopener">纪录片——AlphaGo</a></p></li><li><p><a href="https://www.bestyoutubechannels.info/" target="_blank" rel="noopener">youtube最受欢迎的频道</a></p></li><li><p><a href="http://md.aclickall.com/" target="_blank" rel="noopener">写作网站</a></p></li><li></li></ul><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li><p><a href="https://ayearofreadingtheworld.com/" target="_blank" rel="noopener">TED:阅读全世界</a></p></li><li><p><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰的个人网站</a></p></li><li><p><a href="https://betterexplained.com/" target="_blank" rel="noopener">追求对知识概念和原理进行更合适的描述</a></p></li><li><p><a href="http://www.storytellingwithdata.com/" target="_blank" rel="noopener">《用数据讲故事》作者博客</a></p></li><li><p><a href="https://www.geekonomics10000.com/" target="_blank" rel="noopener">万维钢的博客</a></p></li><li><p><a href="http://w4lle.com/" target="_blank" rel="noopener">w4lle’s Notes = android技术博客</a></p></li><li><p><a href="http://stormzhang.com/posts/" target="_blank" rel="noopener">stormzhang</a></p></li><li><p><a href="https://www.liaohuqiu.net/" target="_blank" rel="noopener">廖祜秋的博客</a></p></li></ul><h1 id="数据分析类网站"><a href="#数据分析类网站" class="headerlink" title="数据分析类网站"></a>数据分析类网站</h1><ul><li><p><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a></p></li><li><p><a href="https://cosx.org/archives/" target="_blank" rel="noopener">统计之都</a></p></li><li><p><a href="http://jiyang.me/" target="_blank" rel="noopener">纪杨的网站数据分析笔记</a></p></li><li><p><a href="http://bluewhale.cc/" target="_blank" rel="noopener">蓝鲸的网站分析笔记</a></p></li><li><p><a href="http://cloga.info/" target="_blank" rel="noopener">Cloga的互联网笔记</a></p></li><li><p><a href="https://www.hellobi.com/u/chenlaoshi/articles" target="_blank" rel="noopener">陈老师的天善智能博客文章</a></p></li><li><p><a href="http://www.woshipm.com/u/159343" target="_blank" rel="noopener">秦路-文章</a></p></li><li><p><a href="https://datavizproject.com/" target="_blank" rel="noopener">数据可视化网站</a></p></li><li><p><a href="http://www.17bigdata.com/" target="_blank" rel="noopener">一起大数据</a></p></li><li><p><a href="http://www.datathinking.com/index.php" target="_blank" rel="noopener">数据分析问答</a></p></li><li><p><a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn" target="_blank" rel="noopener">数学公式转换MD格式</a></p></li><li><p><a href="https://infogram.com/" target="_blank" rel="noopener">信息图制作</a></p></li></ul><h1 id="TED"><a href="#TED" class="headerlink" title="TED"></a>TED</h1><ul><li><p><a href="http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html" target="_blank" rel="noopener">如何掌控你的自由时间 —— 时间=选择</a></p></li><li><p><a href="http://open.163.com/movie/2016/6/4/J/MBOR278SK_MBP8E2U4J.html" target="_blank" rel="noopener">提升自信的技巧 —— 除非你做到了，否则没有人相信你</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/J/G/MDQLF803V_MDQLQ6BJG.html" target="_blank" rel="noopener">【TED】科技公司如何控制你的注意力</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/C/J/MDR9R6RCV_MDR9RFPCJ.html" target="_blank" rel="noopener">我从生活和写作中学到了12个真理 - 一个一个写，改初稿， 如果不知道写什么，就写你自己经历的事情</a></p></li></ul><ul><li><p><a href="http://open.163.com/movie/2018/9/R/Q/MDQJ11FL3_MDQJ2Q6RQ.html" target="_blank" rel="noopener">收入如何影响人们的生活方式——世界各国， 收入水平导致的生活条件改变都差不多</a><br><a href="http://lectures.dollarstreet.org/matrix?thing=Families&amp;countries=World&amp;regions=World&amp;zoom=4&amp;row=1&amp;lowIncome=26&amp;highIncome=15000&amp;lang=en" target="_blank" rel="noopener">官方网站</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/G/I/MDRK5FS99_MDRK5KCGI.html" target="_blank" rel="noopener">图表的魔力——图表能够让人更快的理解信息</a></p></li><li><p><a href="http://open.163.com/movie/2016/1/E/V/MBCBMP41R_MBCBN6SEV.html" target="_blank" rel="noopener">如何利用大数据做出正确的判断-用大量数据去做分析， 去深入了解， 但要想成功， 就需要冒一定的风险</a></p></li><li><p><a href="http://open.163.com/movie/2018/8/I/P/MDO5I27P8_MDO5J0AIP.html" target="_blank" rel="noopener">大数据时代：如何避免数据迷信？-不光要依靠大数据， 也要依靠厚数据，让解决问题的方法更加多元化</a></p></li><li><p><a href="http://open.163.com/movie/2018/8/3/H/MDO81R1TR_MDO820N3H.html" target="_blank" rel="noopener">李开复：人工智能如何拯救人类-ai让我们明白我们为何为人</a></p></li><li><p><a href="http://open.163.com/movie/2016/1/O/9/MB9RVGAJ5_MBA4K69O9.html" target="_blank" rel="noopener">开启情绪识别的大门-用算法来识别人类情绪</a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li><li><p><a href></a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;视频：&quot;&gt;&lt;a href=&quot;#视频：&quot; class=&quot;headerlink&quot; title=&quot;视频：&quot;&gt;&lt;/a&gt;视频：&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/av21376839/?p=25&quot;
      
    
    </summary>
    
      <category term="工具" scheme="https://zhangandyu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="网站" scheme="https://zhangandyu.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="书籍" scheme="https://zhangandyu.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="视频" scheme="https://zhangandyu.github.io/tags/%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>python基础</title>
    <link href="https://zhangandyu.github.io/2018/07/25/python%E5%9F%BA%E7%A1%80/"/>
    <id>https://zhangandyu.github.io/2018/07/25/python基础/</id>
    <published>2018-07-24T16:00:00.000Z</published>
    <updated>2019-02-14T13:25:51.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数"><a href="#数" class="headerlink" title="数"></a>数</h1><ol><li>整数-int</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line"># 查看变量的类型</span><br><span class="line">type(i)</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>浮点数-float</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.2 * 0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0.020000000000000004</span><br></pre></td></tr></table></figure><blockquote><p>浮点数在计算机中表输入的十进制浮点数仅由实际存储在计算机中的近似的二进制浮点数表示,二进制来表达 1/10 是一个无限循环小数:0.0001100110011001100110011001100110011001100110011…,Python 只打印机器中存储的二进制值的十进制近似值。</p></blockquote><blockquote><p>如何限制显示的小数点个数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;&#123;:.4f&#125;&quot;.format(0.1*0.4))</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>字符串-str</li></ol><p>字符串的表示方式：</p><ul><li><p>python中有3种表示字符串的方式——单引号，双引号，三引号。</p></li><li><p>单引号和双引号的作用是相同的, 但双引号中可以将包含的特殊字符单引号输出，而单引号要输出’需要/转义</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos; \&apos;hello world\&apos; &apos;</span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">str = &quot;&apos;hello python&apos;&quot;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><ul><li>三引号的用法特殊，三引号中可以输入单引号、双引号或换行符等字符,也可用作制作文档字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos;&apos;&apos;&apos;hello&apos;/&quot;world&quot;&apos;&apos;&apos;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><p>常用的字符串处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 重复字符串</span><br><span class="line">sta = &apos;hi&apos;</span><br><span class="line">print (sta * 2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 切片</span><br><span class="line">sta = &apos;1234567890&apos;</span><br><span class="line">print(sta[2:9:2])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#去除空格</span><br><span class="line">name = &apos;   zhang yu    &apos;</span><br><span class="line"># 去除左侧空格</span><br><span class="line">print(name.lstrip())</span><br><span class="line"># 去除右侧空格</span><br><span class="line">print(name.rstrip())</span><br><span class="line"># 去除两侧空格</span><br><span class="line">print(name.strip())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 分割字符串</span><br><span class="line"></span><br><span class="line">#split()函数通过制定分隔符对字符串进行切片</span><br><span class="line">name = &quot;zhang  and  yu  and  han&quot;</span><br><span class="line">print(name.split())</span><br><span class="line">print(name.split(&apos;  &apos;,2))</span><br><span class="line">print(name.split(&apos;  and  &apos;))</span><br><span class="line"></span><br><span class="line"># partition()函数将目标字符串分割为两个部分，返回一个三元元组（head,sep,tail），包含分割符</span><br><span class="line">url = &quot;https://zhangandyu.github.io//2018&quot;</span><br><span class="line">print( url.partition(&quot;//&quot;))</span><br><span class="line">print(url.rpartition(&quot;//&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 替换字符串</span><br><span class="line"></span><br><span class="line">#str.replace(old, new,max)</span><br><span class="line"># max 可选字符串不能超过max次</span><br><span class="line">str = &quot;this is a apple&quot;</span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;))     </span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;, 1))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拼接字符串</span><br><span class="line">a = &apos;_&apos;</span><br><span class="line">name = (&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br><span class="line">print(a.join(name))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查找字符串是否包含子字符串</span><br><span class="line">#str.find(str, beg=0, end=len(string))</span><br><span class="line">a = &apos; this is a apple&apos;</span><br><span class="line">b = &apos;is&apos;</span><br><span class="line"></span><br><span class="line">#从下标3开始，查找在字符串里第一个出现的子串，返回结果：3</span><br><span class="line">print(a.find(b,2)) </span><br><span class="line"></span><br><span class="line">#从下标5开始，查找在字符串里第一个出现的子串，返回结果：6</span><br><span class="line">print(a.find(b,5))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#判断字符串是否以指定的前后缀结尾</span><br><span class="line"># str.startswith(str, beg=0,end=len(string))</span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;th&apos;</span><br><span class="line">c = &apos;is&apos;</span><br><span class="line">print(a.startswith(b))</span><br><span class="line">print(a.startswith(c,2))</span><br><span class="line"></span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;le&apos;</span><br><span class="line">c = &apos;app&apos;</span><br><span class="line">print(a.endswith(b))</span><br><span class="line">print(a.endswith(b,10))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#其他函数</span><br><span class="line"># 检测数字</span><br><span class="line">str.isdigit()    # 检测字符串是否只由数字组成</span><br><span class="line">str.isnumeric()  # 检测字符串是否只由数字组成,这种方法是只针对unicode对象</span><br><span class="line">str.isdecimal()  # 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</span><br><span class="line"># 检测字母</span><br><span class="line">str.isalpha()   # 检测字符串是否只由字母组成</span><br><span class="line"># 检测字母和数字</span><br><span class="line">str.isalnum()   # 检测字符串是否由字母和数字组成</span><br><span class="line"># 检测其他</span><br><span class="line">str.isspace()   # 检测字符串是否只由空格组成</span><br><span class="line">str.islower()   # 检测字符串是否由小写字母组成</span><br><span class="line">str.isupper()   # 检测字符串中所有的字母是否都为大写</span><br><span class="line">str.istitle()   # 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</span><br><span class="line"></span><br><span class="line">str.capitalize()   # 将字符串的第一个字母变成大写,其他字母变小写</span><br><span class="line">str.lower()        # 转换字符串中所有大写字符为小写</span><br><span class="line">str.upper()        # 将字符串中的小写字母转为大写字母</span><br><span class="line">str.swapcase()     # 对字符串的大小写字母进行转换</span><br><span class="line">max(str)    # 返回字符串 str 中最大的字母</span><br><span class="line">min(str)    # 返回字符串 str 中最小的字母</span><br><span class="line">len(str)    # 返回字符串的长度</span><br><span class="line">str(arg) # 将 arg 转换为 string</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>布尔值</li></ol><ul><li>and-逻辑与</li><li>or-逻辑或</li><li>not-逻辑非</li></ul><blockquote><p> not的优先级大于and和or的优先级，而and和or的优先级相等。<br> 逻辑运算符的优先级低于关系运算符，必须先计算关系运算符，再计算逻辑运算符。</p></blockquote><hr><ol start="5"><li>变量命名规则</li></ol><ul><li>只能包含字母、数字和下划线</li><li>不能包含空格</li><li>不能将python关键字和函数名用作变量名</li><li>变量名应简短又具有描述性</li><li>慎用小写字母l和大写字母O</li></ul><hr><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><ol><li>什么是序列</li></ol><ul><li>序列是Python中最基本的数据结构。</li><li>python中有6个序列的内置类型,包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。</li></ul><p>对于序列，都可以使用一下操作：</p><ul><li>索引</li><li>切片</li><li>加</li><li>乘</li><li>成员检查<br>in和not in</li><li>计算序列的长度<br>len()</li><li>取序列中的最大、最小值<br>max()和min()</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><ul><li>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现</li><li>列表适合用于存储在程序运行期间可能变化的数据集。 列表是可以修改的， 这对处理网站的用户列表或游戏中的角色列表至关重要。</li></ul></blockquote><ul><li>列表对象方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.append(x)</span><br><span class="line"># 把一个元素添加到列表的结尾</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.extend(x)</span><br><span class="line"># 将一个给定列表中的所有元素都添加到另一个列表中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.insert(i,x)</span><br><span class="line"># 在指定位置插入一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(x)</span><br><span class="line"># 删除列表中值为 x 的第一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.pop(i)</span><br><span class="line"># 从列表的指定位置删除元素，并将其返回</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.clear()</span><br><span class="line"># 从列表中删除所有元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.index(x)</span><br><span class="line"># 返回列表中第一个值为 x 的元素的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.count(x)</span><br><span class="line"># 返回 x 在列表中出现的次数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.sort()</span><br><span class="line"># 对列表中的元素进行排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.sorted()</span><br><span class="line"># 对列表中的元素进行临时排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br><span class="line"># 倒排列表中的元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.copy()</span><br><span class="line"># 返回列表的一个浅拷贝</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.len(x)</span><br><span class="line">#返回列表的长度</span><br></pre></td></tr></table></figure><ol start="3"><li>用列表实现栈和列队</li></ol><ul><li>栈是一种后进先出的数据结构，我们可以使用列表的append()和pop()方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2]</span><br><span class="line">a.append(3)  #入栈</span><br><span class="line">a.pop() # 最后一个元素出栈</span><br></pre></td></tr></table></figure><ul><li>队列是一种先进先出的数据结构，我们可以使用列表的append()和pop(0)方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [2,1]</span><br><span class="line">a.append(1)  # 入队列</span><br><span class="line">a.pop(0) # 第0个元素出队列</span><br></pre></td></tr></table></figure><ol start="4"><li>列表推导式</li></ol><ul><li><p>为从序列中创建列表提供了一个简单的方法。</p></li><li><p>普通方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">for i in range(20):</span><br><span class="line">    a.append(i ** 2)</span><br><span class="line">print(a)</span><br><span class="line"># i 依然存在</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b = []</span><br><span class="line">for x in [1,2,3,4]:</span><br><span class="line">    for y in [2,3,4]:</span><br><span class="line">        if x !=y:</span><br><span class="line">            b.append((x,y))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li>推导式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [i**2 for i in range(20)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(x,y) for x in [1,2,3,4] for y in [2,3,4] if x !=y]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from math import pi</span><br><span class="line">[str(round(pi, i)) for i in range(1, 16)]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [1, 2, 3, 4],</span><br><span class="line">    [5, 6, 7, 8],</span><br><span class="line">    [9, 10, 11, 12]]</span><br><span class="line">[[row[i] for row in matrix] for i in range(4)]</span><br></pre></td></tr></table></figure><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>元组为不可变得列表， 在需要创建一系列不可修改的元素时使用。 </p></blockquote><ol><li>只有一个元素<br>元组中只包含一个元素时， 需要在元素后面添加逗号，否则括号会被当做运算符使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zy = (2,)</span><br><span class="line">zy[0]</span><br></pre></td></tr></table></figure><ol start="2"><li>修改元组</li></ol><ul><li>对元组进行连接组合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;z&apos;, &apos;y&apos;)</span><br><span class="line">me = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">name = na + me</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><ul><li>给元组变量赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;zy&apos;, &apos;yu&apos;)</span><br><span class="line">na = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">print(na)</span><br></pre></td></tr></table></figure><ul><li>元组运算符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 计算元组个数</span><br><span class="line">len((2,45, 67, 8, 9))</span><br><span class="line"></span><br><span class="line"># 连接</span><br><span class="line">(1,2,3, 4) + (4, 5, 6)</span><br><span class="line"></span><br><span class="line"># 复制</span><br><span class="line">(1,2,3, 4)* 3</span><br><span class="line"></span><br><span class="line">#迭代</span><br><span class="line"> for i in (12, 3,4 , 5):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><ul><li>将列表转换为元组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [ &apos;z&apos;, 1, 2, 3, 4, &apos;u&apos;]</span><br><span class="line">tup = tuple(list)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="映射和集合"><a href="#映射和集合" class="headerlink" title="映射和集合"></a>映射和集合</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><blockquote><p>字典：将相关信息关联起来</p></blockquote><ul><li>访问字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">print(man[&apos;name&apos;])</span><br></pre></td></tr></table></figure><ul><li>添加键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man[&apos;home&apos;] = &apos;xian&apos;</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">man[&apos;hige&apos;] = 170</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>删除键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">del man[&apos;xingbie&apos;]</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>遍历所有的键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key, value in man.items():</span><br><span class="line">    print( key,&quot;:&quot; ,  value)</span><br></pre></td></tr></table></figure><ul><li>分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key in man.keys():</span><br><span class="line">    print( key)</span><br><span class="line">    </span><br><span class="line">for value in man.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><ul><li>按倒序顺序遍历分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in sorted(man.keys()):</span><br><span class="line">    print( key)</span><br></pre></td></tr></table></figure><ul><li>字典列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line">alien = &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;:5&#125;</span><br><span class="line">computer = &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 40&#125;</span><br><span class="line"></span><br><span class="line">alients = [man, alien, computer]</span><br><span class="line"></span><br><span class="line">for i in alients:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;name&apos;:[&apos;zhangyu&apos;, &apos;han&apos;, &apos;dou&apos;],</span><br><span class="line">    &apos;home&apos;:[&apos;xian&apos;, &apos;beijing&apos;],</span><br><span class="line">    &apos;hige&apos;:[165, 170, 370, 2389]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for na, las in province.items():</span><br><span class="line">    for la in las:</span><br><span class="line">        print(na, la)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;man&apos; :&#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;,</span><br><span class="line">    &apos;alien&apos; : &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;: 5&#125;,</span><br><span class="line">    &apos;computer&apos; : &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 10&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i, a  in province.items():</span><br><span class="line">    print(i, a)</span><br></pre></td></tr></table></figure><ul><li>字典键的特性<blockquote><p>不允许同一键出现两次，创建时如果同一键被赋值两次， 后一个值会被记住。<br>键必须不可变， 可以用数字，字符串，或元组充当，但不能用列表</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&apos;name&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict</span><br></pre></td></tr></table></figure><ul><li>python中关于字典的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 删除字典内所有元素</span><br><span class="line">dict.clear()</span><br><span class="line"></span><br><span class="line">#返回一个字典的浅复制</span><br><span class="line">dict.copy()</span><br><span class="line"></span><br><span class="line"># 创建字典</span><br><span class="line">seq = (&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;)</span><br><span class="line">dict = dict.fromkeys(seq,10)</span><br><span class="line">dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#返回指定键的值，如果值不在字典中返回设定值</span><br><span class="line">dict1.get(&apos;Google&apos;, 40)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#和get()类似, 但如果键不存在于字典中，将会添加键并将值设为设定值</span><br><span class="line">dict1.setdefault(&apos;google&apos;, &apos;20&apos;)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#把字典dict2的键/值对更新到dict里</span><br><span class="line">dict1=&#123;&apos;Google&apos;: 10, &apos;Runoob&apos;: 10, &apos;Taobao&apos;: 10&#125;</span><br><span class="line">dict2 =&#123;&apos;na&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line">#以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">dict.items()</span><br><span class="line"></span><br><span class="line">#以列表返回一个字典所有的键</span><br><span class="line">dict.keys()</span><br><span class="line"></span><br><span class="line">#以列表返回字典中的所有值</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><blockquote><p>集合是一个无序的，不重复的数据集合。集合作用有以下两点：</p></blockquote><ol><li>去重： 把一个还有重复元素的列表或元组等数据类型变成集合， 其中的重复元素只出现一次，用set()方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#使用大括号之间创建集合</span><br><span class="line">f = &#123;1, 2, 2, 2, &apos;a&apos;&#125;</span><br><span class="line">print(f)</span><br><span class="line">print(type(f))</span><br><span class="line"></span><br><span class="line"># 用set()方法</span><br><span class="line">a = [1, 2, 2, &apos;a&apos;, &apos;a&apos;]</span><br><span class="line">b = (1,2,2, &apos;a&apos;, &apos;a&apos;)</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line">e = set()</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><ol start="2"><li>进行关系测试：测试两组数据之间的交集，差集，并集等数据关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查看集合的相关函数</span><br><span class="line">help(set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;d&apos;,&apos;e&apos;]</span><br><span class="line">b = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;b&apos;]</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line"></span><br><span class="line"># 取交集</span><br><span class="line">e = c.intersection(d)</span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line"># 取并集</span><br><span class="line">f = c.union(d)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"># 取差集（无重复）</span><br><span class="line">g = c.difference(d)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">#对称差集&quot;（不同时在c,d中存在）</span><br><span class="line">h = c.symmetric_difference(d)</span><br><span class="line">print(h)</span><br><span class="line"></span><br><span class="line">#判读是否为子集</span><br><span class="line">i = c.issubset(d)</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"># &quot;判读是否为超集&quot;</span><br><span class="line">j = c.issuperset(d) </span><br><span class="line"></span><br><span class="line">#检查是否有相同元素,没有返回True</span><br><span class="line">k = c.isdisjoint(d)</span><br></pre></td></tr></table></figure><h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ol><li>if-else语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 17</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print( &quot;you can seee six video&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li>if-elif-else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif age&gt; 18:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>多个elif</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = 80</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif 18&lt;age&lt;30:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">elif 30&lt; age &lt; 60:</span><br><span class="line">    print( &quot;you should go to work&quot;)</span><br><span class="line">elif age&gt; 60:</span><br><span class="line">    print(&quot;you should go to tourism&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="4"><li>if语句中的and和or</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = 9</span><br><span class="line">if num &gt;= 0 and num &lt;= 10: </span><br><span class="line">    print (&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">num = 10</span><br><span class="line">if num &lt;= 0 or num &gt;= 10:</span><br><span class="line">    print(&apos;zy&apos;)</span><br></pre></td></tr></table></figure><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><ol><li>for循环主要用于遍历迭代的对象， while循环主要用于条件判断</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="2"><li>continue 用于跳过该次循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="3"><li>break 用于退出循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><ol start="4"><li>循环使用 else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 5:</span><br><span class="line">   print (count, &quot; is  less than 5&quot;)</span><br><span class="line">   count = count + 1</span><br><span class="line">else:</span><br><span class="line">   print (count,&quot; is not less than 5&quot; )</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for 循环可以遍历任何序列的项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;:</span><br><span class="line">    print(letter)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>函数是组织好， 可重复使用的，用来实现有关功能的代码段。函数能提高应用的模块行，和代码的重复利用率。</li></ul><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def zhangyu():</span><br><span class="line">    &quot;&quot;&quot;显示名称&quot;&quot;&quot;</span><br><span class="line">    print(&quot;zhangandyu&quot;)</span><br><span class="line"> #   return[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line"> zhangyu()</span><br></pre></td></tr></table></figure><ul><li>向函数传入参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def zy(name):</span><br><span class="line">    print(&apos;Hello, &apos; + name.title() + &apos;!&apos;)</span><br><span class="line"></span><br><span class="line">zy(&apos;zhangyu&apos;)</span><br><span class="line"></span><br><span class="line"># name 为形参</span><br><span class="line">#&apos;zhangyu&apos;为实参</span><br></pre></td></tr></table></figure><ul><li>位置实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(&apos;dog&apos;, &apos;huabao&apos;)</span><br><span class="line"># 警惕位置混淆</span><br><span class="line">describe_pet(&apos;huabao&apos;, &apos;dog&apos;)</span><br></pre></td></tr></table></figure><ul><li>关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(name = &apos;huabao&apos;, animal_type = &apos;dog&apos;)</span><br><span class="line"># 位置混淆也没有关系</span><br></pre></td></tr></table></figure><ul><li>设置默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(name,animal_type=&apos;dog&apos;):</span><br><span class="line">    &quot;&quot;&quot;设置animal_type的默认参数是dog&quot;&quot;&quot;</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数不改变</span><br><span class="line">describe_pet(name = &apos;huabao&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数改变</span><br><span class="line">describe_pet(&apos;huxbao&apos;, &apos;cat&apos;)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数返回的值可以使用return语句将值返回到调用函数的代码行中。从而将程序的大部分繁重工作移到函数中取完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name):</span><br><span class="line">    name = first_name + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>让实参变成可选的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name, middle_name =&apos; &apos;):</span><br><span class="line">    if middle_name:</span><br><span class="line">        name = first_name +&apos; &apos;+ last_name +&apos; &apos; +  middle_name</span><br><span class="line">    else:</span><br><span class="line">        name = first_name + &apos; &apos; + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>返回字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def build_person(first_name, last_name, age=&apos;&apos;):</span><br><span class="line">    person = &#123;&apos;first&apos; : first_name, &apos;last&apos;: last_name&#125;</span><br><span class="line">    if age:</span><br><span class="line">        person[&apos;age&apos;] = age</span><br><span class="line">    return person</span><br><span class="line"></span><br><span class="line">build_person(&apos;zhang&apos;, &apos;yu&apos;, age=25)</span><br></pre></td></tr></table></figure><ul><li>传递列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_user(names):</span><br><span class="line">    for name in names:</span><br><span class="line">        print(name.title())</span><br><span class="line">zy = [&apos;a&apos;, &apos;b&apos;, &apos;v&apos;]</span><br><span class="line">get_user(zy)</span><br></pre></td></tr></table></figure><ul><li>传递任意数据的实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_world(* names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">get_world(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用位置实参和任意数量实参</li></ul><p>必须将接纳任意数量实参的形参放到最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_world(size, *names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(str(size) + i)</span><br><span class="line">get_world( 1,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用任意数量的关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_user(**user_info):</span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    for key, value in user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    return profile</span><br><span class="line">user_profile = get_user(location = &apos;princeton&apos;, field = &apos;physics&apos;, home = &apos;xian&apos;)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>如果一个函数在函数内部，调用自己本身，这个函数就是递归函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fan(n):</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return n * fan (n-1)</span><br></pre></td></tr></table></figure><p>但递归函数在数特别大的情况下会导致栈溢出， 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fan(10000)</span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li>局部作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    name = &quot;zhangyu&quot;</span><br><span class="line"></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>运行报错， 因为name变量只在func()函数中生效，而在全局无法调用。</p><ul><li>作用域链</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;lzl&quot;</span><br><span class="line">def f1():</span><br><span class="line">    name = &quot;Eric&quot;</span><br><span class="line">    def f2():</span><br><span class="line">        name = &quot;Snor&quot;</span><br><span class="line">        print(name)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>f1()函数执行，最后输出snor，Python中有作用域链， 变量会由内到外找，先去自己作用域找，自己没有再去上级找，直到找不到报错。</p><ul><li>终极作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;zhang&apos;</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    name = &apos;yu&apos;</span><br><span class="line">    return f1</span><br><span class="line">    </span><br><span class="line">ret = f2()</span><br><span class="line">ret()</span><br></pre></td></tr></table></figure><p>输出结果为zhang, 分析可知， f2()函数执行结果为函数f1的内存地址。执行ret()就是执行f1()，name =’zhang’与fi()在一个作用域链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 新浪面试题</span><br><span class="line">li  = [lambda : x for x in range(10)]</span><br><span class="line">print(type(li))</span><br><span class="line">print(type(li[0]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#lambada 面试题 </span><br><span class="line">li = [lambda :x for x in range(10)]</span><br><span class="line">res = li[0]()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><blockquote><p>Numpy是科学计算库,特点是有N维数组对象ndarray，是Scipy、Pandas等的基础</p></blockquote><ol><li>array结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 给列表每个元素增加1</span><br><span class="line">zy = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">zy = zy + 1</span><br><span class="line"># 错误， 因为列表不支持这样的错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用array函数</span><br><span class="line">zy = np.array(zy)</span><br><span class="line">zy += 1</span><br><span class="line">zy</span><br><span class="line"></span><br><span class="line"># 计算</span><br><span class="line">by = np.array([ 2, 3, 4, 5, 6])</span><br><span class="line">zy + by</span><br><span class="line">zy * by</span><br><span class="line">zy ** by</span><br><span class="line"></span><br><span class="line"># 取值</span><br><span class="line">zy[0]  </span><br><span class="line">zy[2:]</span><br></pre></td></tr></table></figure><ol start="2"><li>底层为创建ndarray对象，有丰富的可选参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zy.shape    # 多维数组的形状</span><br><span class="line">type(zy)    # 类型</span><br><span class="line">zy.dtype    # 数组中元素的类型, array内部必须为同一类型， 不同类型会默认进行转换</span><br><span class="line">zy.size     # 数组中元素个数</span><br><span class="line">zy.ndim     # 数组的维度</span><br></pre></td></tr></table></figure><ol start="3"><li>索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tang_array = np.array([[1, 2, 3],</span><br><span class="line">                        [3, 4, 5],</span><br><span class="line">                        [6, 7, 8]])</span><br><span class="line"></span><br><span class="line">tang_array[1]</span><br><span class="line">tang_array[1, 1]</span><br><span class="line">tang_array[:,1]</span><br><span class="line">tang_array[1,0:2]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tang_array2 = tang_array</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line"># 将tang_array2中的4 改为10</span><br><span class="line">tang_array2[1,1] = 10</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line">tang_array</span><br><span class="line"># tang_array 中的4也改为了10， 修改tang_array2,实际是指向了tang_array中的内存</span><br><span class="line"></span><br><span class="line"># 要想修改tang_array2 而不改tang_arra, 需要用copy()</span><br></pre></td></tr></table></figure><ol start="4"><li>巧用布尔类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 构造等差数组</span><br><span class="line">zy = np.arange(0, 100, 10)</span><br><span class="line">zy</span><br><span class="line"># array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构造布尔类型</span><br><span class="line">by = np.array([0, 0, 1, 0, 1, 1, 1, 0, 1, 0], dtype=bool)</span><br><span class="line">by</span><br><span class="line"># array([False, False,  True, False,  True,  True,  True, False,  True,False])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy[by]</span><br><span class="line"># array([20, 40, 50, 60, 80])</span><br></pre></td></tr></table></figure><ol start="5"><li>array数组的数值计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">zy = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">#所有数据求和 </span><br><span class="line">np.sum(zy)</span><br><span class="line"></span><br><span class="line"># 指定要按什么维度进行计算</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 0)</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 1)</span><br><span class="line"></span><br><span class="line"># 所有数据乘积</span><br><span class="line">zy.prod()</span><br><span class="line"></span><br><span class="line">zy.prod(axis = 0)</span><br><span class="line">zy.prod(axis = -1)</span><br><span class="line"></span><br><span class="line"># 最小最大值</span><br><span class="line">zy.min(axis = 0)</span><br><span class="line">zy.max()</span><br><span class="line"></span><br><span class="line"># 最大值的索引</span><br><span class="line">zy.argmax()</span><br><span class="line"></span><br><span class="line"># 均值</span><br><span class="line">zy.mean()</span><br><span class="line">zy.mean(axis = 0)</span><br><span class="line"></span><br><span class="line"># 标准差</span><br><span class="line">zy.std(axis = 1)</span><br><span class="line"></span><br><span class="line"># 方差</span><br><span class="line">zy.var()</span><br><span class="line"></span><br><span class="line"># 进行限制， 小于3的值都变成3， 大于7的值都变成7</span><br><span class="line">zy.clip(3, 7)</span><br><span class="line"></span><br><span class="line"># 进行四舍五入</span><br><span class="line">zy.round()</span><br><span class="line"></span><br><span class="line"># 进行四舍五入到第一个小数点</span><br><span class="line">zy.round(decimals = 1)</span><br></pre></td></tr></table></figure><ol start="6"><li>排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">tang_array = np.array([[1.1, 4.3, 5.2 , 5.1],</span><br><span class="line">                      [5.2, 6.4, 2.3, 4.6]])</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">np.sort(tang_array)</span><br><span class="line"></span><br><span class="line">np.sort(tang_array, axis = 0)</span><br></pre></td></tr></table></figure><ol start="7"><li>数组形状操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num</span><br><span class="line"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2, 5</span><br><span class="line">zy_num</span><br><span class="line"></span><br><span class="line"># array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num.reshape(1,10)</span><br><span class="line">#array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 增加维度</span><br><span class="line"></span><br><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line">zy_num = zy_num[np.newaxis, :]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(1, 10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num = zy_num[ :, np.newaxis]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10, 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 压缩维度</span><br><span class="line"></span><br><span class="line">zy_num = zy_num.squeeze()</span><br><span class="line">zy_num</span><br><span class="line">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 转置</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2,5</span><br><span class="line"></span><br><span class="line">zy_num</span><br><span class="line">#array([[0, 1, 2, 3, 4],</span><br><span class="line">       [5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line">zy_num.transpose()   # zy_num.T</span><br><span class="line">#array([[0, 5],[1, 6], [2, 7], [3, 8], [4, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数组的连接</span><br><span class="line"></span><br><span class="line">a = np.array([[1,2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line">b = np.array([[0, 3, 5, 7], [8, 0, 10, 21]])</span><br><span class="line"></span><br><span class="line">c = np.concatenate((a, b))</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"># array([[ 1,  2,  3,  4], [ 5,  6,  7,  8],[ 0,  3,  5,  7], [ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = np.confatenate((a, b), axis = 1)</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">np.vstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4],[ 5,  6,  7,  8],[ 0,  3,  5,  7],[ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line">np.hstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4,  0,  3,  5,  7],[ 5,  6,  7,  8,  8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a</span><br><span class="line"># array([[1, 2, 3, 4],[5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">a.flatten()</span><br><span class="line">a.ravel()</span><br><span class="line"># array([1, 2, 3, 4, 5, 6, 7, 8])</span><br></pre></td></tr></table></figure><ol start="8"><li>生成数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">np.arange(10)</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2)</span><br><span class="line"># array([ 2,  4,  6,  8, 10, 12, 14, 16, 18])</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2, dtype= np.float32)</span><br><span class="line"># array([ 2.,  4.,  6.,  8., 10., 12., 14., 16., 18.], dtype=float32)</span><br><span class="line"></span><br><span class="line"># 构造等距数组</span><br><span class="line">np.linspace(0, 10, 5)</span><br><span class="line"># array([ 0. ,  2.5,  5. ,  7.5, 10. ])</span><br><span class="line"></span><br><span class="line"># 构造行向量，列向量</span><br><span class="line">np.r_[0:10:1]</span><br><span class="line">np.c_[0:10:1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.zeros(3)</span><br><span class="line"># array([0., 0., 0.])</span><br><span class="line"></span><br><span class="line">np.zeros((3,3))</span><br><span class="line"></span><br><span class="line">np.ones(3)</span><br><span class="line"># array([1., 1., 1.])</span><br><span class="line"></span><br><span class="line">np.ones((3,3)) * 8</span><br><span class="line"></span><br><span class="line">zy_num = np.array([1,2,3, 4])</span><br><span class="line">np.zeros_like(zy_num)</span><br><span class="line"># array([0, 0, 0, 0])</span><br></pre></td></tr></table></figure><ol start="9"><li>运算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 乘法</span><br><span class="line">x = np.array([5,5])</span><br><span class="line">y = np.array([2,3])</span><br><span class="line"></span><br><span class="line">np.multiply(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">np.dot(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 1])</span><br><span class="line">y = np.array([[1, 2, 3],[4, 5, 6]])</span><br><span class="line"></span><br><span class="line">print(x * y)</span><br><span class="line">#[[1 2 3] [4 5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 2])</span><br><span class="line">y = np.array([1, 1, 1])</span><br><span class="line">x == y</span><br><span class="line"># array([ True,  True, False])</span><br><span class="line"></span><br><span class="line">np.logical_and(x,y)</span><br><span class="line">np.logical_or(x,y)</span><br><span class="line">np.logical_not(x,y)</span><br></pre></td></tr></table></figure><ol start="10"><li>随机模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 随机浮点数</span><br><span class="line">np.random.rand(3,2)</span><br><span class="line"></span><br><span class="line"># 随机整数</span><br><span class="line">np.random.randint(10, size = (2,4))</span><br><span class="line"># array([[4, 6, 7, 8], [7, 6, 2, 3]])</span><br><span class="line"></span><br><span class="line"># 随机数</span><br><span class="line">np.random.rand()</span><br><span class="line">np.random.random_sample()</span><br><span class="line"></span><br><span class="line"># 0-10中随机找三个数</span><br><span class="line">np.random.randint(0, 10, 3)</span><br><span class="line"># array([8, 6, 9])</span><br><span class="line"></span><br><span class="line"># 随机高斯分布</span><br><span class="line">mu, sigma = 0, 0.2</span><br><span class="line">np.random.normal(mu, sigma, 5)</span><br><span class="line"></span><br><span class="line"># 设置数字精度, 输出数精度为小数点后3位</span><br><span class="line">np.set_printoptions(precision = 3 )</span><br><span class="line"></span><br><span class="line"># 洗牌， 打乱排列顺序</span><br><span class="line">zy_num = np.arange(15)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</span><br><span class="line"></span><br><span class="line">np.random.shuffle(zy_num)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 1,  5,  4, 11, 14,  9,  8,  6,  7,  3,  0,  2, 10, 12, 13])</span><br></pre></td></tr></table></figure><ol start="11"><li>读取写入文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 写一个名为tang的txt文件</span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1 2 3 4 5 6 </span><br><span class="line">2 3 4 5 5 7</span><br><span class="line"></span><br><span class="line"># 读取tang文件</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;)</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line"># array([[1., 2., 3., 4., 5., 6.],[2., 3., 4., 5., 5., 7.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">a, b, c, d, e, f</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line"># 不读取第一行</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1)</span><br><span class="line"></span><br><span class="line"># 指定使用哪几列</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1, usecols = (0,1, 4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写入数组文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num)</span><br><span class="line"></span><br><span class="line"># 保存成指定格式</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;)</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%.2f&apos;)</span><br><span class="line"></span><br><span class="line"># 指定分隔符</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读写文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.save(&apos;zy_num.npy&apos;, zy_num)</span><br><span class="line"></span><br><span class="line">zy_num = np.load(&apos;zy_num.npy&apos;)</span><br><span class="line"></span><br><span class="line"># 将两个文件保存在同一文件夹，并进行读写</span><br><span class="line">zy_num2 = np.arange(10)</span><br><span class="line">np.savez(&apos;zy_npz&apos;, a = zy_num, b = zy_num2)</span><br><span class="line"></span><br><span class="line">data = np.load(&apos;zy.npz&apos;)</span><br><span class="line">data.keys()</span><br><span class="line"># [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">data[&apos;a&apos;]</span><br><span class="line"># array([[1, 2, 3],[4, 5, 6]])</span><br></pre></td></tr></table></figure><h3 id="pandas库"><a href="#pandas库" class="headerlink" title="pandas库"></a>pandas库</h3><h4 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h4><p>Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， <strong>Series</strong>和<strong>DataFrame</strong>，Series用于存储一维数据， 而DataFrame存储多维数据。</p><h5 id="常用的软件"><a href="#常用的软件" class="headerlink" title="常用的软件"></a>常用的软件</h5><p>Anaconda是数据分析中运行python的一款利器， 安装教程可参考<br><a href="https://www.jianshu.com/p/169403f7e40c" target="_blank" rel="noopener">Anaconda入门使用指南</a></p><h4 id="Series对象"><a href="#Series对象" class="headerlink" title="Series对象"></a>Series对象</h4><p>Series用于存储一维数据，由两个相互关联的数组组成， 主数组用来存放数据。主数据每个元素都有一个与之关联的标签，这些标签存储在另一个叫Index的数组中。 </p><p><img src="https://i.loli.net/2018/09/28/5bae40d9057a1.png" alt="Series"></p><ol><li>创建Series对象</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zy = pd.Series([2, 3, 4, 6, 7, 4], index = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;, &apos;f&apos;])</span><br></pre></td></tr></table></figure><ol start="2"><li>查看Series对象的两个数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看元素</span><br><span class="line">zy.values</span><br><span class="line"></span><br><span class="line"># 查看索引</span><br><span class="line">zy.index</span><br></pre></td></tr></table></figure><ol start="3"><li>查看元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将zy看做Numpy数组，智定键</span><br><span class="line">zy[2]</span><br><span class="line">zy[0:2]</span><br><span class="line"></span><br><span class="line"># 指定标签</span><br><span class="line">zy[&apos;c&apos;]</span><br><span class="line">zy[[&apos;b&apos;, &apos;c&apos;]]</span><br></pre></td></tr></table></figure><ol start="4"><li>筛选元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zy[zy &gt;3]</span><br></pre></td></tr></table></figure><ol start="5"><li>查看组成元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 查看包含的不同元素</span><br><span class="line">zy.unique()</span><br><span class="line">zy.value_counts()</span><br></pre></td></tr></table></figure><ol start="6"><li>通过字典来创建</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zy=Series(&#123;&apos;a&apos;:1,&apos;b&apos;:2,&apos;c&apos;:3&#125;)</span><br></pre></td></tr></table></figure><hr><h5 id="DataFrame对象"><a href="#DataFrame对象" class="headerlink" title="DataFrame对象"></a>DataFrame对象</h5><p><img src="https://i.loli.net/2018/09/28/5bae41224d1a0.png" alt="DataFrame"></p><p> 读取与写入Excel数据</p><ol><li>读取文件夹的内容</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(r&apos;E:\工作文件\周报\周数据\测试\0902-0908&apos;)</span><br><span class="line">print(file_list, &apos;\t&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(&apos;E:/工作文件/周报/周数据/测试/0902-0908/an-商品汇总-uv.xls&apos;)</span><br><span class="line">df = pd.read_excel(r&apos;E:\工作文件\周报\周数据\测试\0902-0908\an-商品汇总-uv.xls&apos;)</span><br></pre></td></tr></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(&apos;E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.scsv&apos;)</span><br></pre></td></tr></table></figure><ol start="4"><li>读取txt格式数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;)</span><br><span class="line"></span><br><span class="line">with open(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;, &apos;r&apos;) as f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(r&apos;C:\Users\Administrator\Desktop\haha.txt&apos;)  # 将txt文件存为numpy数组</span><br></pre></td></tr></table></figure><ol start="5"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data.to_excel(&apos;C:/Users/Administrator/Desktop/&apos;+&apos;商品分类.xlsx&apos;)</span><br><span class="line">data.to_excel(r&apos;C:\Users\Administrator\Desktop\\&apos;+&apos;商品分类.xlsx&apos;)</span><br><span class="line">data.to_excel(r&apos;C:\Users\Administrator\Desktop/&apos;+&apos;商品分类.xlsx&apos;)</span><br></pre></td></tr></table></figure><ol start="6"><li><p>其他数据格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 从SQL表/库导入数据 </span><br><span class="line">pd.read_sql(query, connection_object)</span><br><span class="line"></span><br><span class="line"># 从JSON格式的字符串导入数据 </span><br><span class="line">pd.read_json(json_string)</span><br><span class="line"></span><br><span class="line"># 解析URL、字符串或者HTML文件，抽取其中的tables表格 </span><br><span class="line">pd.read_html(url)</span><br><span class="line"></span><br><span class="line"># 从你的粘贴板获取内容，并传给read_table() </span><br><span class="line">pd.read_clipboard()</span><br><span class="line"></span><br><span class="line"># 从字典对象导入数据，Key是列名，Value是数据</span><br><span class="line">pd.DataFrame(dict)</span><br><span class="line"></span><br><span class="line"># 导出数据到SQL表 </span><br><span class="line">df.to_sql(table_name, connection_object)</span><br><span class="line"></span><br><span class="line"># 以Json格式导出数据到文本文件</span><br><span class="line">df.to_json(filename)</span><br></pre></td></tr></table></figure><p>描述数据</p></li></ol><ol><li>表信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li>添加默认列名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 如果数据没有标题行，可用pandas添加默认的列名</span><br><span class="line">df = pd.read_excel(&apos;x.xlsx&apos;, header = None)</span><br></pre></td></tr></table></figure><ol start="6"><li>显示前数据前5行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(5)</span><br><span class="line">df[[&apos;标题&apos;, &apos;客户端uv&apos;]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(5)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;a&apos;]</span><br></pre></td></tr></table></figure><ol start="10"><li>修改索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = df.set_index[&apos;标题&apos;]</span><br></pre></td></tr></table></figure><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 数据有0， 是因对缺失值进行了填充</span><br><span class="line">df[&apos;经纪人级别&apos;].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span><br><span class="line">df = pd.read_excel(&apos;x.xlsx&apos;,skiprows=[2] )</span><br></pre></td></tr></table></figure><ol start="13"><li>对缺失值进行识别</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 所有缺失值显示为True</span><br><span class="line">pd.insull(df)  # df.isnull()</span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#计算此data的数量</span><br><span class="line">df[&apos;data&apos;].value_counts()</span><br><span class="line"></span><br><span class="line"># 升序计数</span><br><span class="line">df[&apos;data&apos;].value_counts(ascending = True)</span><br><span class="line"></span><br><span class="line"># 升序计数并分组</span><br><span class="line">df[&apos;data&apos;].value_counts(ascending = True, bins = 2)</span><br><span class="line"></span><br><span class="line"># 计数</span><br><span class="line">df[&apos;data&apos;].count()</span><br></pre></td></tr></table></figure><p>  数据清洗</p><ol><li>删除空值 （dropna函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dropna(how=&apos;any&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>填充空值（fillna函数）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 空值用0填充</span><br><span class="line">df.fillna(value=0)</span><br><span class="line"></span><br><span class="line"># 用均值对空值进行填充</span><br><span class="line">df[&apos;经纪人响应时长&apos;].fillna(df[&apos;经纪人响应时长&apos;].mean())</span><br></pre></td></tr></table></figure><ol start="3"><li>更改数据格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将数据格式int64,改为float格式</span><br><span class="line">df[&apos;大区&apos;].astype(&apos;float64&apos;)</span><br></pre></td></tr></table></figure><ol start="4"><li>更改列名称</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;&apos;IM渠道&apos;: &apos;渠道&apos;&#125;)</span><br></pre></td></tr></table></figure><ol start="5"><li>找到重复值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="6"><li>删除重复值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 默认第一次出现的保留，其余删除</span><br><span class="line">df[&apos;门店&apos;].drop_duplicates()</span><br><span class="line"></span><br><span class="line">最后一次出现的保留，其余删除</span><br><span class="line">df[&apos;门店&apos;].drop_duplicates(keep = &apos;last&apos;)</span><br></pre></td></tr></table></figure><ol start="7"><li>对列表内的值进行替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;客户UCID&apos;].replace(&apos;10531975&apos;, &apos;110&apos;)</span><br></pre></td></tr></table></figure><ol start="8"><li>找出异常值</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(data.describe())</span><br><span class="line"># 对异常值进行删除</span><br></pre></td></tr></table></figure><ol start="9"><li>修改数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 修改结果</span><br><span class="line">df.replace(参数)</span><br><span class="line"></span><br><span class="line"># 修改索引</span><br><span class="line">df.rename(参数)</span><br><span class="line"></span><br><span class="line"># 增加</span><br><span class="line">df.append(参数)</span><br><span class="line"></span><br><span class="line"># 删除</span><br><span class="line">def df[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line">df.drop([&apos;a&apos;, &apos;b&apos;], inplace = True)</span><br></pre></td></tr></table></figure><p>  对数据进行处理</p><ol><li>对两个数据进行合并- mearge, join, concat函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 按照轴把多个对象拼接起来</span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span><br><span class="line"></span><br><span class="line"># merge函数，根据一个或多个键连接多行</span><br><span class="line"></span><br><span class="line">left = pd.DataFrame(&#123;&apos;key&apos;:[&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;key2&apos; : [&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;A&apos; :[&apos;ao&apos;,&apos;a1&apos;,&apos;a2&apos;,&apos;a3&apos; ],</span><br><span class="line">                     &apos;B&apos; : [&apos;bo&apos;,&apos;b1&apos;,&apos;b2&apos;,&apos;b3&apos; ]&#125;)</span><br><span class="line"></span><br><span class="line">right =pd.DataFrame(&#123;&apos;key&apos;:[&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k3&apos;],</span><br><span class="line">                     &apos;key2&apos; : [&apos;ko&apos;,&apos;k1&apos;,&apos;k2&apos;,&apos;k4&apos;],</span><br><span class="line">                     &apos;c&apos; :[&apos;co&apos;,&apos;c1&apos;,&apos;c2&apos;,&apos;c3&apos; ],</span><br><span class="line">                     &apos;d&apos; : [&apos;do&apos;,&apos;d1&apos;,&apos;d2&apos;,&apos;d3&apos; ]&#125;)</span><br><span class="line"></span><br><span class="line"># 将left和right进行合并</span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"># 指定以key为键进行合并</span><br><span class="line">pd.merge(left, right, on = &apos;key&apos;)</span><br><span class="line"></span><br><span class="line"># key2列不相同的部分会直接舍弃掉</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;])</span><br><span class="line"></span><br><span class="line"># 保留key2列不相同的部分</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;], how = &apos;outer&apos;)</span><br><span class="line"></span><br><span class="line"># 不相同的部分指定以左表为基准</span><br><span class="line">pd.merge(left, right, on = [&apos;key&apos;, &apos;key2&apos;], how = &apos;left&apos;)</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data =pd.DataFrame(&#123; &apos;group&apos;:[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;a&apos;],</span><br><span class="line">                  &apos;data&apos; : [4, 2, 5, 6, 7, 8, 2, 9, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 在保证group列降序的情况下，对data列进行升序处理</span><br><span class="line">data.sort_values(by = [&apos;group&apos;, &apos;data&apos;],ascending = [False, True], inplace = True)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组——excel中的数据透视表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1</span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(&apos;网&apos;) for x in df[&apos;客户注册渠道&apos;]),</span><br><span class="line">                index=df.index,columns=[&apos;客户注册渠道&apos;,&apos;size&apos;])</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bins = [1,3,6,9]</span><br><span class="line">data_cut = pd.cut(data[&apos;data&apos;], bins)</span><br></pre></td></tr></table></figure><p>对数据进行提取,筛选</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;&apos;A&apos;:[7,8,9,20, 10, 11, 14, 13, 14],</span><br><span class="line">                     &apos;B&apos; : [1,2,3,4,5, 6, 7, 7, 8]&#125;)</span><br></pre></td></tr></table></figure><ol><li>按条件进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 选出B列的值大于3的数</span><br><span class="line">df[df[&apos;B&apos;]&gt;3]</span><br><span class="line"></span><br><span class="line"># 当 A列的值大于13时， 显示B，c列的值</span><br><span class="line">df[[&apos;B&apos;,&apos;C&apos;]][df[&apos;A&apos;]&gt;13]</span><br><span class="line"></span><br><span class="line"># 用isin函数进行判断</span><br><span class="line"></span><br><span class="line"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span><br><span class="line">df[df.A.isin((10, 13))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 判断经纪人级别是否为A3</span><br><span class="line">df[&apos;经纪人级别&apos;].isin([&apos;A3&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> # 先判断结果，将结果为True的提取</span><br><span class="line">#先判断经纪人级别列里是否包含A3和M4，然后将复合条件的数据提取出来。</span><br><span class="line">df.loc[df[&apos;经纪人级别&apos;].isin([&apos;A3&apos;,&apos;M4&apos;])]</span><br><span class="line"></span><br><span class="line"># 使用&amp;（并）与| （或）操作符或者特定的函数实现多条件筛选 </span><br><span class="line"></span><br><span class="line"># A列值大于10， 并且B列值大于5</span><br><span class="line">df[(df[&apos;A&apos;] &gt; 10) &amp; (df[&apos;B&apos;] &gt;5)]</span><br><span class="line">df[np.logical_and(df[&apos;A&apos;] &gt; 10, df[&apos;B&apos;] &gt; 5)]</span><br><span class="line"></span><br><span class="line"># A列值大于10，或 B列值大于5</span><br><span class="line">df[(df[&apos;A&apos;] &gt; 10) | (df[&apos;C&apos;] &gt;20)]</span><br><span class="line">df[np.logical_or(df[&apos;A&apos;] &gt; 10, df[&apos;C&apos;] &gt; 20)]</span><br></pre></td></tr></table></figure><ol start="2"><li>按索引进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 按标签索引</span><br><span class="line">df[1:4]</span><br><span class="line"></span><br><span class="line"># 传入列名</span><br><span class="line">df[[&apos;A&apos;, &apos;B&apos;]]</span><br><span class="line"></span><br><span class="line"># loc函数</span><br><span class="line"># 知道column names 和index(这里df的index没有指定，是默认生成的下标)，且两者都很好输入，可以选择 .loc同时进行行列选择</span><br><span class="line"></span><br><span class="line"># 根据标签取第一行， 显示为DataFrame格式</span><br><span class="line">df.loc[:0]</span><br><span class="line"></span><br><span class="line"># 取标签为2,3,4， A列的数据， 显示为Series格式</span><br><span class="line">df.loc[2:4, &apos;A&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># iloc函数</span><br><span class="line"># 行和列都用index来进行提取</span><br><span class="line">df.iloc[0:5, 1:3] </span><br><span class="line"></span><br><span class="line"># 返回第一行 </span><br><span class="line">df.iloc[0,:]</span><br><span class="line"></span><br><span class="line"># 返回第一列的第一个元素</span><br><span class="line">df.iloc[0,0]</span><br><span class="line"></span><br><span class="line">#[0, 2, 5] 代表指定的行，[ 4, 5 ] 代表指定的列</span><br><span class="line">df.iloc[[0,2,5],[4,5]]</span><br><span class="line"></span><br><span class="line"># ix</span><br><span class="line">#ix的功能更加强大，参数既可以是索引，也可以是名称，相当于，loc和iloc的合体</span><br><span class="line"></span><br><span class="line">df.ix[1:3, [&apos;A&apos;, &apos;B&apos;]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># at函数</span><br><span class="line">根据指定行index及列label，快速定位DataFrame的元素，选择列时仅支持列名</span><br><span class="line">df.at[3, &apos;A&apos;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># iat函数</span><br><span class="line">选择时只使用索引参数</span><br><span class="line">df.iat[3, 2]</span><br></pre></td></tr></table></figure><ol start="3"><li>按日期进行提取</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import pandas</span><br><span class="line">import datetime as dt</span><br><span class="line"></span><br><span class="line"># 重新设置索引</span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line">#设置日期为索引</span><br><span class="line">df=df.set_index(&apos;日期&apos;)</span><br><span class="line"></span><br><span class="line">#提取2016年11月2号的数据</span><br><span class="line">df[&apos;2016-11-02&apos; : &apos;2016-11-02&apos;]</span><br><span class="line"></span><br><span class="line">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span><br><span class="line">print(dt_time)</span><br><span class="line"></span><br><span class="line">#构造时间</span><br><span class="line">ts = pd.Timestamp(&apos;2018-09-17 22:43:00&apos;)</span><br><span class="line">ts = pd.to_datetime(&apos;2018-09-17 22:43:00&apos;)</span><br><span class="line">ts = pd.to_datetime(&apos;17/09/2018 22:43:00&apos;)</span><br><span class="line"></span><br><span class="line"># 月份</span><br><span class="line">ts.month</span><br><span class="line"></span><br><span class="line">#日期</span><br><span class="line">ts.day</span><br><span class="line"></span><br><span class="line"># 加日期</span><br><span class="line">ts + pd.Timedelta(&apos; 10 days&apos;)</span><br><span class="line"></span><br><span class="line">ts.hour</span><br><span class="line"></span><br><span class="line"># 构造时间序列， 构造十个日期， 每12分钟一次</span><br><span class="line">pd.Series(pd.date_range(start = &apos;2018-09-17 22:43:00&apos;, periods = 10, freq = &apos;12min&apos;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">读取文件， 有时间列， 先将时间字符串转换成时间格式， 再进行处理</span><br><span class="line">或当读取数据时， 就对数据格式进行修改</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(&apos;.../db.csv&apos;, index_col = 0, parse_dates = True)</span><br><span class="line"></span><br><span class="line"># 读取时间为2013年的所有数据</span><br><span class="line">data[&apos;2013&apos;]</span><br><span class="line"></span><br><span class="line"># 取所有8点到12点之间的数据, 不包含8点和12点</span><br><span class="line">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span><br><span class="line"></span><br><span class="line"># 包含8点到12点</span><br><span class="line">data.between_time(&apos;08:00&apos;, &apos;12:00&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 时间序列的重采样-看每月的平均值</span><br><span class="line">data.resample(&apos;M&apos;).mean()</span><br></pre></td></tr></table></figure><hr><p> 数据汇总</p><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建数组</span><br><span class="line">df = pd.DataFrame(&#123;&apos;key&apos; : [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;],</span><br><span class="line">                    &apos;data&apos; : [0, 2, 4, 5, 6, 7, 8, 9, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 分别计算a, b, c 的和</span><br><span class="line">df.groupby(&apos;key&apos;)[&apos;data&apos;].sum()</span><br><span class="line"></span><br><span class="line">df.groupby(&apos;key&apos;)[&apos;data&apos;].mean()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = pd.Series([1, 2, 3,1, 2, 3],[8,7,6,8,7,6])</span><br><span class="line"></span><br><span class="line"># 对索引进行排序</span><br><span class="line">grouped = s.groupby(level = 0， sort =False)</span><br><span class="line">grouped.first()</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;&apos;x&apos;:[&apos;a&apos;, &apos;b&apos;, &apos;a&apos;, &apos;b&apos;],</span><br><span class="line">                   &apos;y&apos; : [1, 2, 3, 4]&#125;)</span><br><span class="line"></span><br><span class="line"># 只关注x中的b</span><br><span class="line">df3 = df2.groupby([&apos;x&apos;]).get_group(&apos;b&apos;)</span><br><span class="line"></span><br><span class="line"># 查看个数</span><br><span class="line">df2.size()</span><br></pre></td></tr></table></figure><p>2, 对数据进行透视<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pd.pivot_table(data, values=None, index=None, columns=None, aggfunc=&apos;mean&apos;)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;&quot;A&quot;: [&quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;, &quot;foo&quot;,</span><br><span class="line">                          &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;, &quot;bar&quot;],</span><br><span class="line">                    &quot;B&quot;: [&quot;one&quot;, &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;,</span><br><span class="line">                          &quot;one&quot;, &quot;one&quot;, &quot;two&quot;, &quot;two&quot;],</span><br><span class="line">                    &quot;C&quot;: [&quot;small&quot;, &quot;large&quot;, &quot;large&quot;, &quot;small&quot;,</span><br><span class="line">                          &quot;small&quot;, &quot;large&quot;, &quot;small&quot;, &quot;small&quot;,</span><br><span class="line">                          &quot;large&quot;],</span><br><span class="line">                    &quot;D&quot;: [1, 2, 2, 3, 3, 4, 5, 6, 7]&#125;)</span><br><span class="line"></span><br><span class="line">table = pd.pivot_table(df, values=&apos;D&apos;, index=[&apos;A&apos;, &apos;B&apos;],</span><br><span class="line">                     columns=[&apos;C&apos;], aggfunc=np.sum)</span><br></pre></td></tr></table></figure></p><ol start="3"><li>对数据进行映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper)</span><br></pre></td></tr></table></figure><p>  数据统计</p><ol><li>数据采样</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="2"><li>统计计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 描述统计 describe函数</span><br><span class="line"></span><br><span class="line">#自动生成数据的数量，均值，标准差等数据</span><br><span class="line">#round（2）,显示小数点后面2位数，T转置</span><br><span class="line"></span><br><span class="line">df.describe().round(2).T</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标准差std()</span><br><span class="line">df[&apos;经纪人响应时长&apos;].std()</span><br><span class="line"></span><br><span class="line"># 协方差cov</span><br><span class="line">df[&apos;经纪人当天发送消息数&apos;].cov(df[&apos;客户当天发送消息数&apos;]</span><br><span class="line"></span><br><span class="line"># 相关性分析corr</span><br><span class="line">df[&apos;客户当天发送消息数&apos;].corr(df[&apos;经纪人当天发送消息数&apos;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 中位数</span><br><span class="line">df.median()</span><br></pre></td></tr></table></figure><hr><p> 对字符串进行操作</p><ol><li>大小写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li>去除空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="4"><li>替换</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.columns.str.replace(&apos; &apos;, &apos;_&apos;)</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#切分</span><br><span class="line">a.split(&apos;_&apos;)</span><br><span class="line"># 切分， 且成为新列</span><br><span class="line">a.split(&apos;_&apos;, expand = True)</span><br><span class="line"># 对切分进行限制, 只切1次</span><br><span class="line">a.split(&apos;_&apos;, expand = True, n=1)</span><br><span class="line"># 查看是否包含</span><br><span class="line">a.str.contains(&apos;A&apos;)</span><br><span class="line"># 分列</span><br><span class="line">s.str.get_dummies(sep= &apos;|&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数&quot;&gt;&lt;a href=&quot;#数&quot; class=&quot;headerlink&quot; title=&quot;数&quot;&gt;&lt;/a&gt;数&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;整数-int&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="编程语言" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫</title>
    <link href="https://zhangandyu.github.io/2018/07/12/Python%E7%88%AC%E8%99%AB/"/>
    <id>https://zhangandyu.github.io/2018/07/12/Python爬虫/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2019-01-07T14:42:33.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="爬取英雄联盟-英雄皮肤图片"><a href="#爬取英雄联盟-英雄皮肤图片" class="headerlink" title="爬取英雄联盟-英雄皮肤图片"></a>爬取英雄联盟-英雄皮肤图片</h1><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>最近自己在学爬虫， 有天朋友问我能否爬取英雄联盟的皮肤图片到本地，好实现快速浏览，折腾了半个小时，终于成功了。</p><h2 id="2-过程"><a href="#2-过程" class="headerlink" title="2. 过程"></a>2. 过程</h2><h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><h4 id="找到皮肤图片链接，-研究规律"><a href="#找到皮肤图片链接，-研究规律" class="headerlink" title="找到皮肤图片链接， 研究规律"></a>找到皮肤图片链接， 研究规律</h4><p>在抓取图片之前，我们需要分析网址链接的构成， 以便找到其中的规律。</p><p><img src="https://i.loli.net/2018/07/17/5b4e086d05abd.png" alt="英雄联盟图片"></p><p>打开英雄联盟网站, 点击其中的一个英雄， 我们可以看到一个英雄有1-6个皮肤甚至更多，且我们很容易从每个皮肤链接中找到规律。</p><p><img src="https://i.loli.net/2018/07/17/5b4e09769c56a.png" alt="英雄皮肤"><br><img src="https://i.loli.net/2018/07/17/5b4e0ac67e187.png" alt="狐狸皮肤"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 英雄1</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266002.jpg</span><br><span class="line"></span><br><span class="line"># 英雄2</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103002.jp</span><br></pre></td></tr></table></figure><p>从以上的链接中，我们可以知道英雄皮肤的链接规律为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;http://ossweb-img.qq.com/images/lol/web201310/skin/small&quot; + &quot;英雄代号&quot; + &quot;0&quot; + &quot;01-10&quot;</span><br></pre></td></tr></table></figure></p><h4 id="找到每个英雄对应的数字代号"><a href="#找到每个英雄对应的数字代号" class="headerlink" title="找到每个英雄对应的数字代号"></a>找到每个英雄对应的数字代号</h4><p>那么我们需要解决的问题就变成了到每个英雄对应的代号是多少？</p><p>通过搜索，我们发现每个英雄对应的代号存在champion.js文件中</p><p><img src="https://i.loli.net/2018/07/17/5b4e0df090d6c.png" alt="英雄对应的代号"></p><p>从Headers中， 我们可以看到champion.js 对应的url为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://lol.qq.com/biz/hero/champion.js</span><br></pre></td></tr></table></figure></p><p>我们通过正则表达式， 把js中对应的英雄代号提取出来。</p><p>通过以上把链接拼凑起来，我们就可以把链接对应的图片皮肤下载到本地了。</p><h2 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import json</span><br><span class="line">import urllib</span><br><span class="line">url = &quot;http://lol.qq.com/biz/hero/champion.js&quot;</span><br><span class="line">hd =&#123;&apos;User-Agent&apos;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0&quot;&#125;</span><br><span class="line">data = requests.get(url,headers = hd).content</span><br><span class="line">datas = data.decode()</span><br><span class="line">pat = &apos;&quot;keys&quot;:(.*?),&quot;data&quot;&apos;</span><br><span class="line">imglist = re.findall(pat,datas)</span><br><span class="line">datass = json.loads(imglist[0])</span><br><span class="line">for i in datass:</span><br><span class="line">    try:</span><br><span class="line">        for j in range(12):</span><br><span class="line">            try:</span><br><span class="line">                num = str(j)</span><br><span class="line">                # print(num)</span><br><span class="line">                if len(num) == 1:</span><br><span class="line">                    hero_num = &quot;00&quot; + num</span><br><span class="line">                elif len(num) ==2:</span><br><span class="line">                    hero_num = &quot;0&quot; + num</span><br><span class="line">                numstr = i + hero_num</span><br><span class="line">                urls = &apos;http://ossweb-img.qq.com/images/lol/web201310/skin/big&apos;+ numstr +&apos;.jpg&apos;</span><br><span class="line">                localfile = &quot;E:/张宇个人文件/英雄联盟/&quot; + str(i) + str(num) +  &quot;.jpg&quot;</span><br><span class="line">                urllib.request.urlretrieve(urls, filename = localfile)</span><br><span class="line">            except Exception as err:</span><br><span class="line">                pass</span><br><span class="line">    except Exception as err:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><hr><h1 id="爬取王者荣耀-英雄图片"><a href="#爬取王者荣耀-英雄图片" class="headerlink" title="爬取王者荣耀-英雄图片"></a>爬取王者荣耀-英雄图片</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 用python爬取王者荣耀皮肤</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">url = &quot;http://pvp.qq.com/web201605/herolist.shtml&quot;</span><br><span class="line">hd =&#123;&apos;User-Agent&apos;:&quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0&quot;&#125;</span><br><span class="line">data = requests.get(url,headers = hd)</span><br><span class="line">pat = &apos;a href=&quot;herodetail/(.*?).shtml&apos;</span><br><span class="line">imglist = re.compile(pat, re.S).findall(data.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i in imglist:</span><br><span class="line">    # print(i)</span><br><span class="line">    try:</span><br><span class="line">        for j in [1,2,3,4,5,6]:</span><br><span class="line">            try:</span><br><span class="line">                numstr = str(i)+&apos;/&apos; +str(i)+&apos;-mobileskin-&apos;+ str(j)</span><br><span class="line">                # print(numstr)</span><br><span class="line">                urls = &apos;https://game.gtimg.cn/images/yxzj/img201606/heroimg/&apos;+numstr+&apos;.jpg&apos;</span><br><span class="line">                print(urls)</span><br><span class="line">                localfile = &quot;E:/张宇个人文件/官网图片/&quot; + str(i)+ str(j)+  &quot;.jpg&quot;</span><br><span class="line">                urllib.request.urlretrieve(urls, filename = localfile)</span><br><span class="line">            except Exception as err: </span><br><span class="line">                pass</span><br><span class="line">    except Exception as err:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><hr><h1 id="爬取网站美女图片"><a href="#爬取网站美女图片" class="headerlink" title="爬取网站美女图片"></a>爬取网站美女图片</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><h3 id="构建用户代理池"><a href="#构建用户代理池" class="headerlink" title="构建用户代理池"></a>构建用户代理池</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 这里可以随意加多个浏览器</span><br><span class="line">uapools = [</span><br><span class="line">    &quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2&quot;,</span><br><span class="line">    &quot;Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0 Safari/537.36 OPR/15.0&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (X11; CrOS armv7l 3428.193.0) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.126 Safari/537.22&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/533.9 (KHTML, like Gecko) Maxthon/3.0 Safari/533.9&quot;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="爬取并下载图片"><a href="#爬取并下载图片" class="headerlink" title="爬取并下载图片"></a>爬取并下载图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line">import urllib.request</span><br><span class="line"># uapools 如上所示</span><br><span class="line">for ua in uapools:</span><br><span class="line">    hd =&#123;&apos;User-Agent&apos;:ua&#125;</span><br><span class="line">    i = uapools.index(ua)</span><br><span class="line">    # 限制爬取页数， 我们爬取前10页</span><br><span class="line">    if i &gt; 10:</span><br><span class="line">        break</span><br><span class="line">    try:</span><br><span class="line">        url = &quot;http://www.iyuanqi.com/home/funimg/fun_list/m/Home/cp_uid/all/sort/30hot/p/&quot;+str(i)+&quot;.html&quot;</span><br><span class="line">        data = requests.get(url, headers = hd)</span><br><span class="line">        pat = &apos;class=&quot;lazy-img&quot; src=&quot;(.*?)&quot; data-original=&quot;&apos;</span><br><span class="line">        imglist = re.compile(pat, re.S).findall(data.text)</span><br><span class="line">        for j in range(0, len(imglist)):</span><br><span class="line">            try:</span><br><span class="line">                thisimg = imglist[j]</span><br><span class="line">                thisimgurl = thisimg</span><br><span class="line">                localfile = &quot;E:/张宇个人文件/网络图片/&quot; + str(i) + str(j) + &quot;.jpg&quot;</span><br><span class="line">                urllib.request.urlretrieve(thisimgurl, filename = localfile)</span><br><span class="line">            except Exception as err:</span><br><span class="line">                pass</span><br><span class="line">    except Exception as err:</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure><hr><h1 id="爬取天善课程数据表存储到MYSQL"><a href="#爬取天善课程数据表存储到MYSQL" class="headerlink" title="爬取天善课程数据表存储到MYSQL"></a>爬取天善课程数据表存储到MYSQL</h1><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>天善智能是一个商业智能与大数据在线社区，有很多很好的学习课程。我们用爬虫来爬取网站的所有课程并存储到MYSQL数据库中， 以便于进一步的分析。</p><h4 id="用python在MYSQL中创建名为zhanhyu的数据库"><a href="#用python在MYSQL中创建名为zhanhyu的数据库" class="headerlink" title="用python在MYSQL中创建名为zhanhyu的数据库"></a>用python在MYSQL中创建名为zhanhyu的数据库</h4><ul><li>用python连接MYSQL数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 因为本地mysql没有设置密码， 所以没有加password参数</span><br><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306)</span><br><span class="line"></span><br><span class="line"># 用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</span><br><span class="line">cursor = db.cursor()</span><br></pre></td></tr></table></figure><ul><li>创建一个新的数据库， 名字叫做zhangyu</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</span><br><span class="line">cursor.execute(&quot;CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8&quot;)</span><br></pre></td></tr></table></figure><h4 id="在zhangyu库中创建tianshan2-datas的数据表"><a href="#在zhangyu库中创建tianshan2-datas的数据表" class="headerlink" title="在zhangyu库中创建tianshan2_datas的数据表"></a>在zhangyu库中创建tianshan2_datas的数据表</h4><ul><li>指定在zhangyu这个数据库中运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306, db=&apos;zhangyu&apos;)</span><br><span class="line">cursor = db.cursor()</span><br></pre></td></tr></table></figure><ul><li>用sql语句创建名为tianshan2_datas的表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sql = &apos;CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))&apos;</span><br><span class="line"></span><br><span class="line">curosr.exectute(sql)</span><br><span class="line"></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><h4 id="爬取天善智能网站的数据"><a href="#爬取天善智能网站的数据" class="headerlink" title="爬取天善智能网站的数据"></a>爬取天善智能网站的数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(1,5):</span><br><span class="line">    # 观察天善课程链接， 找出规律</span><br><span class="line">    thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1)</span><br><span class="line">    # 用requests库抓取数据</span><br><span class="line">    hd =&#123;&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;&#125;</span><br><span class="line">    data = requests.get(thisurl, headers = hd)</span><br><span class="line">    #用正则表达式进行解析</span><br><span class="line">    title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos;</span><br><span class="line">    price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    title = re.compile(title_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(title)&gt;0):</span><br><span class="line">        title = title[0]</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br><span class="line">    price = re.compile(price_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(price)&gt;0):</span><br><span class="line">        price = price[0]</span><br><span class="line">    else:</span><br><span class="line">        price = &apos;免费&apos;</span><br><span class="line">    numb = re.compile(numb_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(numb)&gt;0):</span><br><span class="line">        numb = numb[0]</span><br><span class="line">    else:</span><br><span class="line">        numb = &apos;缺失&apos;</span><br></pre></td></tr></table></figure><h4 id="将爬取的数据存储到名为zhangyu数据库的tianshan2-datas表中"><a href="#将爬取的数据存储到名为zhangyu数据库的tianshan2-datas表中" class="headerlink" title="将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中"></a>将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)</span><br><span class="line">cursor = con.cursor()</span><br><span class="line"></span><br><span class="line">sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;</span><br><span class="line">try:</span><br><span class="line">    cursor.execute(sql, (title, price, numb))</span><br><span class="line">    con.commit()</span><br><span class="line">except:</span><br><span class="line">    con.rollback()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure><hr><p>这样，我们就成功的把爬取的数据保存到mysql数据库中，方便我们查询使用。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import pymysql</span><br><span class="line"></span><br><span class="line"># 因为本地mysql没有设置密码， 所以没有加password参数</span><br><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306)</span><br><span class="line"></span><br><span class="line"># 用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</span><br><span class="line">cursor = db.cursor()</span><br><span class="line"></span><br><span class="line"># cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</span><br><span class="line">cursor.execute(&quot;CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8&quot;)</span><br><span class="line"></span><br><span class="line">db = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;,  port = 3306, db=&apos;zhangyu&apos;)</span><br><span class="line">cursor = db.cursor()</span><br><span class="line">sql = &apos;CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))&apos;</span><br><span class="line">cursor.execute(sql)</span><br><span class="line">db.close()</span><br><span class="line"></span><br><span class="line">import re</span><br><span class="line">import pymysql</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">for i in range(0,284):</span><br><span class="line">    thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1)</span><br><span class="line">    hd =&#123;&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;&#125;</span><br><span class="line">    data = requests.get(thisurl, headers = hd)</span><br><span class="line">    title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos;</span><br><span class="line">    price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos;</span><br><span class="line">    title = re.compile(title_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(title)&gt;0):</span><br><span class="line">        title = title[0]</span><br><span class="line">    else:</span><br><span class="line">        continue</span><br><span class="line">    price = re.compile(price_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(price)&gt;0):</span><br><span class="line">        price = price[0]</span><br><span class="line">    else:</span><br><span class="line">        price = &apos;免费&apos;</span><br><span class="line">    numb = re.compile(numb_pat, re.S).findall(data.text)</span><br><span class="line">    if(len(numb)&gt;0):</span><br><span class="line">        numb = numb[0]</span><br><span class="line">    else:</span><br><span class="line">        numb = &apos;缺失&apos;</span><br><span class="line">        </span><br><span class="line">    con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)</span><br><span class="line">    cursor = con.cursor()</span><br><span class="line"></span><br><span class="line">    sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;</span><br><span class="line">    try:</span><br><span class="line">        cursor.execute(sql, (title, price, numb))</span><br><span class="line">        con.commit()</span><br><span class="line">    except:</span><br><span class="line">        con.rollback()</span><br><span class="line">    con.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;爬取英雄联盟-英雄皮肤图片&quot;&gt;&lt;a href=&quot;#爬取英雄联盟-英雄皮肤图片&quot; class=&quot;headerlink&quot; title=&quot;爬取英雄联盟-英雄皮肤图片&quot;&gt;&lt;/a&gt;爬取英雄联盟-英雄皮肤图片&lt;/h1&gt;&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot;
      
    
    </summary>
    
      <category term="编程语言" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="Python" scheme="https://zhangandyu.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/Python/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
      <category term="爬虫" scheme="https://zhangandyu.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>刻意练习</title>
    <link href="https://zhangandyu.github.io/2018/04/16/%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://zhangandyu.github.io/2018/04/16/《刻意练习》读书笔记/</id>
    <published>2018-04-15T16:00:00.000Z</published>
    <updated>2019-01-07T14:38:14.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-什么是刻意练习"><a href="#1-什么是刻意练习" class="headerlink" title="1. 什么是刻意练习"></a>1. <strong>什么是刻意练习</strong></h1><ul><li>刻意练习是一个在已经有明确方法论的行业内， 个人通过制定一系列明确的目标， 不断进行刚好超出他们能力范围的练习， 并通过检验反馈不断地对练习进行调整， 从而创建有效的知识晶体， 保存在长时记忆中， 以便以后遇到问题及时响应。</li></ul><h1 id="2-刻意练习背后的原理是什么"><a href="#2-刻意练习背后的原理是什么" class="headerlink" title="2. 刻意练习背后的原理是什么"></a>2. <strong>刻意练习背后的原理是什么</strong></h1><ul><li><p><strong>利用身体偏爱稳定的倾向，进行刚好超出能力范围的练习</strong><br>我们人类的身体天生偏爱稳定性， 我们的身体通过各种各样的反馈机制来保持身体各项指标的稳定性。当身体系统长时间的感受到压力，原来的平衡再无法保持时， 身体便会开始响应那些变化，让那些变化更加容易，  进而达到重新的平衡。但在过长的时间内过分的逼迫自己， 可能导致倦怠和低效。 </p><blockquote><p>例如：<br>对于跑步锻炼来说， 如果你短时间剧烈的运动，导致身体中的能量与氧气下降， 身体就会通过心跳加速以提高氧气供给，并将储存在不同部位的能量拿来给肌肉供给，以达到平衡状态。只要体育锻炼并未让身体平衡机制无法正常运转，就很难引起身体上的生理变化。</p><p>因此， 你需要足够努力的锻炼并保持足够长的时间，才能让身体形成新的平衡。要想要改变不断地进行下去， 你就需要不断地加码：跑的更远，更快，负重跑等。 一旦你不给自己在跑步方面施加压力， 你将停止改进的脚步，停留在新的平衡内。 但如果你一上来玩命的跑， 可能只让自己受伤。 </p><p>同理，对大脑进行长时间的锻炼， 大脑也会以各种不同的方式来重新布置神经元之间的连接，以达到快速地相应。 </p></blockquote></li><li><p><strong>为了创建有效的知识晶体</strong></p><p><code>知识晶体就是我们思考某件事物时心理所创建的知识结构。</code></p><p>刻意练习的目的之一就是<strong>创建有效的知识晶体</strong>。 信息预先存在这些晶体中，并长时间保存在记忆之中，当生活中遇到类似的情况可快速地进行响应。</p><p>行业内的杰出人物正式由于他们经过多年的积累，针对行业中可能遇到的不同局面，创建了高度复杂和精密的知识晶体。反过来这些知识晶体让他们更好地在一系列事物中找到规律，更好地理解信息，指定计划，高效的学习。</p><blockquote><p>比如： 你听到‘猫’这个词就会想到毛茸茸可爱的猫，它的样子，叫声等具体的内容。你在生活中对‘猫’这个词创建了包括图像， 气味，声音等一系列的晶体结构。</p><p>同理，我们要想更好地创建对某一动物的知识晶体，最好的方法就是花一点点的时间来了解它们，摸摸它的毛发，和它玩耍，并且细心地观察它的一举一动。 </p></blockquote></li></ul><h1 id="3-如何在一个行业中进行刻意练习"><a href="#3-如何在一个行业中进行刻意练习" class="headerlink" title="3. 如何在一个行业中进行刻意练习"></a>3. <strong>如何在一个行业中进行刻意练习</strong></h1><ul><li><p>找到一位好的导师</p><p> 如果可以的话， 找到一个好的导师能够让自己的练习事半功倍。 好的导师能够了解什么样的行为会带来进步，能带来及时的反馈。 </p></li></ul><ul><li><p>找行业中的大牛</p><p>  我们在现实中很难找到一个好的导师， 但我们在互联网中可以很容易找到行业中的大牛。 我们<strong>首先确定大牛的指标都有哪些， 然后调查思考谁符合这些指标</strong>，算的上是真正的大牛。</p><blockquote><p>在数据分析行业， 称为大牛的特征有：有多年的行业积累，  有大厂的工作经历。 有较大的行业影响力， 愿意传播教授 技能。 通过搜索，我们可以知道：数据挖掘与数据分析博主-邓凯是数据分析里的大牛， 他在数据分析行业工作多年， 并在京东这样的大厂担任数据负责人， 微信公众号有数十万粉丝，现在成立了爱数圈这样的学习团体。 </p></blockquote></li><li><p>观察大牛都做了什么</p><p><strong>观察他们是做了什么让他们如此的杰出，运用了哪些方法让他们如此的卓越</strong>。 </p><blockquote><ul><li>不断的通过工作业务磨练自己的数据分析思维，建立了良好的互联网分析能力。</li><li>他不断地写数据分析的相关文章，总结输出，让自己不断扩大影响力。<br>这些方法途径，也是自己在进行技能学习时可以学习借鉴的方法。</li></ul></blockquote></li><li><p>学会分解目标</p><p><strong>找到一种适合自己的练习方法，并将漫长的目标分解成一个一个的小目标</strong>，每次练习都只专注于这一个目标，当达到目标时， 给自己一个小小的奖赏</p><blockquote><p>最重要的是盯紧自己的目标。</p></blockquote></li><li><p>找到自己的练习规律</p><p><strong>保证自己在短的时间内能够集中全部的注意力去练习</strong>。 一旦自己发现自己不能够保持专注力，就停下来休息。 </p><blockquote><p>经过自己这段时间的统计发现，自己能够保持专注学习的时间为一个小时， 超过一个小时自己就看不进去了。 这个时候，自己停下来放松10分钟再看，效果会好的多。 </p></blockquote></li></ul><ul><li><p>在工作中需要必要的反馈</p><p> 给自己设计某种必要的反馈， 让自己能够随着时间的推移， 不断的纠正错误和精进技巧。 </p><blockquote><p>如何创建反馈， 我觉得可以通过写作来给自己提供反馈，通过输出来倒逼输入， 在写作中发现自己的问题， 比如自己在写这篇读书笔记时就发现自己有很多的概念没有理解。 </p></blockquote></li></ul><ul><li><p>创建自己对于这个技能的知识晶体</p><p> 将工作中的项目经验和学到的知识相结合，构成强大的晶体结构。培养自己能够遇到问题迅速的响应能力。多培养自己遇到问题的解决思路。 </p><blockquote><p>隐形知识</p></blockquote></li><li><p>寻求建议</p><p>  当遇到停滞阶段时， 稍微给自己加强练习的强度，找出到底是在哪里让你停滞不前， 然后<strong>尝试换一种方法专门针对这个缺点来进行练习，或向大牛寻求建议</strong>。 </p><blockquote><p>自己的打字速度现在停滞不前</p></blockquote></li><li><p>在练习的过程中保持动机</p><p>给自己制定一个专门的时间点来进行练习，并想办法把干扰你的事物控制到最小。坚定自己可以通过刻意练习可以进步的信念。有可能的话， 加入一个社区进行学习比自己单独学习更容易坚持 </p><blockquote><p>比如：把手机调静音，去图书馆学习防止网络对自己的影响。 保持充足的睡眠，加入一个数据分析的圈子进行学习。 </p></blockquote></li><li><p>保证错误是低风险的。这样自己才能敢于犯错。 </p><blockquote><p>练习， 试错， 反馈，修正</p></blockquote></li></ul><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><ul><li>当自己在进行学习时， 自己总是会想到刻意练习里的一个观点， 就是在学习过程中必须脱离自己的舒适区，让学习的内容稍微难一点， 这样的学习才会让自己进步。 每当这样想， 自己就不会抵触学习的过程了， 也让自己能够长久的坚持。</li></ul><p>–2018-12-08</p><h1 id="刻意练习区别与其他练习的特征是什么"><a href="#刻意练习区别与其他练习的特征是什么" class="headerlink" title="刻意练习区别与其他练习的特征是什么"></a>刻意练习区别与其他练习的特征是什么</h1><ol><li><p>有定义明确的特定目标<br>把大目标分解成每一个小目标，制定计划，在达成每一个小目标的过程中，纠正自己的行为方式，解决面临的问题。</p></li><li><p>具有专注的练习状态<br>尽力保持专注，集中精力，不会走神</p></li><li><p>练习包含反馈<br>你必须知道自己做的对不对，如果不对，又错在哪里。</p></li><li><p>走出舒适区</p></li></ol><h1 id="刻意练习的原则"><a href="#刻意练习的原则" class="headerlink" title="刻意练习的原则"></a>刻意练习的原则</h1><p>专注、反馈、纠正、足够的重复次数</p><hr><p>延伸：</p><ul><li>TED演讲： <a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about" target="_blank" rel="noopener">《how to get better at the things you care about》</a></li><li><a href="http://www.yangzhiping.com/column/deliberate-practice.html" target="_blank" rel="noopener">刻意练习的本质-阳志平</a><br>公众号：心智工具箱<br>网站：<a href="http://www.yangzhiping.com/" target="_blank" rel="noopener">http://www.yangzhiping.com/</a></li><li>论文：<a href="https://scholar.google.com.tw/scholar?q=the+role+of+Deliberate+Practice+in+the+Acquisition+of+Expert+Performance&amp;hl=zh-CN&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart" target="_blank" rel="noopener">the role of Deliberate Practice in the Acquisition of Expert Performance</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-什么是刻意练习&quot;&gt;&lt;a href=&quot;#1-什么是刻意练习&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是刻意练习&quot;&gt;&lt;/a&gt;1. &lt;strong&gt;什么是刻意练习&lt;/strong&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;刻意练习是一个在已经有明确方法论的
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习方法" scheme="https://zhangandyu.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《刻意学习》读书笔记</title>
    <link href="https://zhangandyu.github.io/2018/02/17/%E3%80%8A%E5%88%BB%E6%84%8F%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20/"/>
    <id>https://zhangandyu.github.io/2018/02/17/《刻意学习》读书笔记 /</id>
    <published>2018-02-16T16:00:00.000Z</published>
    <updated>2019-02-21T15:24:34.388Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>如果要对一个话题展开连续的深入思考，我的思维就很容易中断。造成此现象的原因是， 我把大量的时间花在微博、公众号和各路社交媒体上。以为自己走在时代的最前言，其实没有想到这种碎片化的输入对于构建完整的思考体系而言，简直是致命伤害。 </p></li><li><p>但是写作，尤其是写长文，并且时以分析论理风格的长文，可以强迫我将思路呈现在纸上，从而有了目标，可进行自我剖析。这是一个非常有效的思维训练方法。 </p></li><li><p>你必须先遵守才能谈自由与灵活。而事情的残酷在于，灵活性往往最容易出现在半途而废的时候，有些人明明是做不到，却说是为了灵活性和自由，从而心安理得地放弃。</p></li><li><p>每个人都是自己生活轨迹的制定者，每个人成长的主旋律都在自己手中，要做的事情必须独立承担，任何评价都无法代替我们要面对的事情。 </p></li><li><p>0-300天：感受到“我要做的”和“我能做的”之间的差距， 厘清当前的处境。在这个阶段，每个人的特性会全面暴露。我们会发现自己有那么多不懂的东西，越深入就很发现越多不懂，内心一片灰暗；然后就想偷懒，想放水，想交差，甚至会产生退缩的念头，感觉这样做没有意义。</p></li><li><p>300-600天： 基于结构构建。缺什么补什么，有困难解决困难，直接硬上， 用时间换空间，用耐心换进步。抵御“放弃”的诱惑，有时候你会感到无趣，但拼的就是坚持。<br>同时，在初始阶段基本稳定后，开始加载任务。标准： 在原有任务能保持每天做到位并有所进步的基础上，仍然有足够多的心智和力量完成更多的任务。 </p></li><li><p>600-1000天：解决三个问题：1. 路径依赖问题。 2. 思维惯性问题。 3. 自我摧毁问题。</p></li></ol><hr><ol start="8"><li><p>对于一本书， 你能消化多少，不是由采取的方法决定，而是由你自身“消化系统”的能力决定，而这个“消化系统”， 就是学以致用的能力。 </p></li><li><p>习惯就是每天都做，如何你哪一天不做这件事了， 就不再是习惯了。 </p></li><li><p>自己想明白最宝贵，哪怕书上早写了。 对于写作的一个观点： 我写我心，我写我情，我写我世界。 对我而言，写作是用来整理自己的世界，当你把自己梳理好以后，你写的文章也会变得清晰明了，容易理解。而我们的写作，也就顺理成章地变成了一种对我们内心世界的推演。于是你会得到一些结论，而这些结论正是你身体力行、复盘总结、升华提炼后的结果。写作的意义在于，你自己想明白的，就是你的。书上的只是书上的，终究不是你的。 自己想明白的，是从你的体系中萌芽生长出来的；而从书中看到的，非常容易停留在做个笔记画个线，自以为懂了的层面。 </p></li><li><p>只有从原理级别、行动层面、复盘角度综合学习并且全面吸收而掌握的知识、技能，才能真正成为我们所需要的武器。</p></li></ol><hr><ol start="12"><li><p>行动是一个“主动发起、投入资源、外界交互、内部梳理、产出结果”的过程。 当我们说行动的时候，要主动承担一些责任，投入资源。这代表了，一方面我们要与外部世界进行交互，另一方面又要把自己的内心建设好，还有最重要的是，要产出一些结果。</p></li><li><p>从外部来看，思考和犹豫纠结的区别就在于你有没有出活，有没有输出，有没有行动。 如果在一段时间里， 你做出了决策并有所行动，那这就不算犹豫。如果在这段时间内，你只是“思考”，却没有任何实质的行动，那这可能就只是一种纯粹的犹豫。</p></li><li><p>持续行动的意思就是将行动延续下去、无间隔、连续不断地行动。 第一：当我们说自己每天要做什么，那么我们就把这个事情做到了，这就是符合自己的预期。第二：持续行动有一个最基本的节奏就是每天做，做足够长的时间，而且要保持稳定。</p></li></ol><hr><ol start="15"><li><p>现在我们每个人的环境都承载了所有前辈的过去，包括出生的家庭环境、所处的城市，都是前辈逐渐积攒的结果。这是我们无法选择的“默认参数”，我们一出生，<br>身上就带了这些参数，需要背着它不断去优化，走完此生。 </p></li><li><p>对现状感到不满，对未来感到迷茫，压力很大。而且我们往往会把这些现状当成原因，来指导我们的行动。我迷茫，所以我要如何。 但在某种程度上，更多<br>的是结果而不是原因。我们只是在还过去欠下的债而已。过去的某个时刻我们没有全力投入，没有付出更多的心思，没有做更多的事情，尝试更多的可能性。于是，我们就按照默认的配置，来到当下。 </p></li><li><p>当我们一无所有的时候，能选择的也就是每天都行动了。 这是我们唯一能够把握的， 因为唯一相对公平的筹码就是每个人的时间，而我们能做的就是把自己有限的时间投入到某个方面，不断积累，提升形成优势，然后去市场上做交换。我们要把时间持续的、长期稳定地专注在一个点上，并且在这一点上形成自己的优势资源。这其实是一种通过持续行动为自己的成长“复利”的行为。 </p></li></ol><hr><ol start="18"><li><p>如果你每天都让自己做一些事情，又保持着进步的势头，慢慢积累就会发现，那些你以为需要技巧才能解决的问题，很多时候根本就不需要技巧了；</p></li><li><p>那些对我们来说很重要的事情，往往都是复杂系统。 比如我们的能力、身体状况、收入处境、家庭幸福…..这些都需要花费大量时间、长期稳定的投入，才会有效果。就像一个生态系统一样，不能今天种两棵树，明天就指望有片热带雨林。  </p></li><li><p>核心技能是没法通过强及时反馈来构建的，也就是你要做好坐冷板凳的准备。而且你也要相信，在这个过程中是不可能天天有强及时反馈的。如何你能守住这种寂寞，<br>就能拨云见日；受不住的话，就是低水平重复建设了。 反馈从来都是漫长的，成长从来都不是一蹴而就的。</p></li></ol><hr><ol start="21"><li>我们内心可能有很多欲望和想法，如果沉下心，踏实干好一件事情，往往就足以打开局面了。 但问题在于，我们往往这也想要，那也想要，相当于同事要解多道难题，但资源不够，精力分散，火力不够猛，自然也就解不出来。<br>于是我们迷茫、纠结、痛苦、忧愁…..进而看各种慰藉心灵的鸡汤故事，告诉你这是生活的正常状态，仍然可以闭着眼睛假装自己很幸福。但是事实上，我们搞不定，我们没得选，我们没办法。<br>我们要成长，就要做好心理准备：在解一类很难的问题时，是要消耗大量资源的。 </li></ol><hr><ol start="22"><li><p>在持续行动的时候，要做好即使没有任何外界反馈仍然能够继续前行的心理准备。反馈从来都是漫长的，成长从来都不是一蹴而就的。 </p></li><li><p>如果你总是期望外界给予一些东西才能走下去，以一种索取者的身份看待周围的所有人和事，把自己的不如意归结于所有环境，那你可能忽视了自己内心的一片荒芜。相反，如果你的目光往内心看，通过逻辑分析想清楚自己想法的来龙去脉，对于所做的事情，有清晰的认知，包括风险、核心、要点、挑战…..那你会走得非常坚定。而且这个时候，外界的反馈对你来说，只是一个顺带结果而已。</p></li></ol><hr><p>他最想要的是什么，你能给吗？<br>你最想要的是什么，她能给吗？</p><p>把这两个问题想明白，然后就去追吧。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果要对一个话题展开连续的深入思考，我的思维就很容易中断。造成此现象的原因是， 我把大量的时间花在微博、公众号和各路社交媒体上。以为自己走在时代的最前言，其实没有想到这种碎片化的输入对于构建完整的思考体系而言，简直是致命伤害。 &lt;/p&gt;
&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="个人系统" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="学习" scheme="https://zhangandyu.github.io/categories/%E4%B8%AA%E4%BA%BA%E7%B3%BB%E7%BB%9F/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="学习方法" scheme="https://zhangandyu.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>学习双拼输入法的心得</title>
    <link href="https://zhangandyu.github.io/2017/09/17/%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <id>https://zhangandyu.github.io/2017/09/17/双拼输入法/</id>
    <published>2017-09-16T16:00:00.000Z</published>
    <updated>2019-01-07T14:42:26.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code>hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/" target="_blank" rel="noopener">《把时间当朋友》</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-怎么接触到双拼的？&quot;&gt;&lt;a href=&quot;#1-怎么接触到双拼的？&quot; class=&quot;headerlink&quot; title=&quot;1. 怎么接触到双拼的？&quot;&gt;&lt;/a&gt;1. 怎么接触到双拼的？&lt;/h1&gt;&lt;p&gt;自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的
      
    
    </summary>
    
      <category term="工具" scheme="https://zhangandyu.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="双拼" scheme="https://zhangandyu.github.io/tags/%E5%8F%8C%E6%8B%BC/"/>
    
  </entry>
  
</feed>
