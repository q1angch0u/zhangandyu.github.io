<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>怪兽宇的小站</title>
  
  <subtitle>脚踏实地，仰望星空!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangandyu.github.io/"/>
  <updated>2020-05-22T08:54:18.123Z</updated>
  <id>https://zhangandyu.github.io/</id>
  
  <author>
    <name>怪兽宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hive-SQL学习</title>
    <link href="https://zhangandyu.github.io/2019/04/18/Hive-SQL%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhangandyu.github.io/2019/04/18/Hive-SQL学习/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2020-05-22T08:54:18.123Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库与表的增删改查"><a href="#数据库与表的增删改查" class="headerlink" title="数据库与表的增删改查"></a>数据库与表的增删改查</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>create database-创建新数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建zhang数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> zhang </span><br><span class="line"></span><br><span class="line"><span class="comment">--制定数据库的位置</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span>  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> zhang location <span class="string">'/zhang.db'</span></span><br></pre></td></tr></table></figure></li><li><p>alter database-修改数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---增加数据库属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> zhang <span class="keyword">set</span> dbproperties(<span class="string">"CTtime"</span>= <span class="string">"2020-05-01"</span>)</span><br></pre></td></tr></table></figure></li><li><p>drop database -删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---数据库下无表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> zhang;</span><br><span class="line"></span><br><span class="line"><span class="comment">---数据库下有表，-强制删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> zhang <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure></li><li><p>选择数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置默认数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">default</span> android;</span><br></pre></td></tr></table></figure></li><li><p>查看所在的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--模糊查询</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">"s%"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查询数据库信息</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">database</span>  zhang;</span><br><span class="line"><span class="comment">---查询数据库扩展属性</span></span><br><span class="line">desc database extended zhang;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><ul><li><p>create table-创建新表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">external</span>] <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] table_name </span><br><span class="line"></span><br><span class="line">[(col_name data_type [<span class="keyword">comment</span> col_comment],....)]</span><br><span class="line">[partitioned <span class="keyword">by</span> (col_name data_type [<span class="keyword">comment</span> col_comment],..)]</span><br><span class="line">[clustered <span class="keyword">by</span> (col_name, col_name, ...)]</span><br><span class="line">[<span class="keyword">row</span> <span class="keyword">format</span> row_format]</span><br><span class="line">[<span class="keyword">stored</span> <span class="keyword">as</span> file_format]</span><br><span class="line">[location hdfs_path]</span><br><span class="line"></span><br><span class="line"><span class="comment">--- create table 创建指定名称的表，如果相同名称的表已存在，则用if not exists 选项来忽略这个异常。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--extername 关键字让用户创建一个外部表</span></span><br><span class="line"><span class="comment">---partitioned by  分区：分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过where子句的表达式来选择查询所需的指定分区，提高查询效率。</span></span><br><span class="line"><span class="comment">--clustered by 分桶</span></span><br><span class="line"><span class="comment">--row format  字段之间的分隔符</span></span><br><span class="line"><span class="comment">---stored as 文件存储格式</span></span><br><span class="line"><span class="comment">--location， 指定表在HDFS上的存储位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---在zhang库中创建test表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> dept(</span><br><span class="line">    deptid <span class="built_in">int</span>, </span><br><span class="line">    dname <span class="keyword">string</span>, </span><br><span class="line">    loc <span class="built_in">int</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br></pre></td></tr></table></figure></li><li><p>update-更新数据库中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span>  需更新的列名<span class="number">1</span>= 新值<span class="number">1</span>, 需更新的列名<span class="number">2</span>=新值<span class="number">2</span>,...</span><br><span class="line"><span class="keyword">where</span>  列名 = 某个原有的值</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Websites </span><br><span class="line"><span class="keyword">SET</span> alexa=<span class="string">'5000'</span>, country=<span class="string">'USA'</span> <span class="comment">--更新的数据</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'菜鸟教程'</span>;</span><br></pre></td></tr></table></figure></li><li><p>insert into() -向数据库中插入新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名（列名<span class="number">1</span>,列名<span class="number">2</span>,列名<span class="number">3.</span>..)</span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..)</span><br></pre></td></tr></table></figure></li><li><p>delete-从数据库中删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">column</span> = value...</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'Facebook'</span> <span class="keyword">AND</span> country=<span class="string">'USA'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表中所有的行，表结果不变</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure></li><li><p>alter table- 修改数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--清楚表中数据,删除掉指定分区</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> shphonefeature <span class="keyword">DROP</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">PARTITION</span>(<span class="keyword">year</span> = <span class="number">2015</span>, <span class="keyword">month</span> = <span class="number">10</span>, <span class="keyword">day</span> = <span class="number">1</span>);</span><br><span class="line"><span class="comment">---lter table test.mon_mau_list drop partition (hit_mon = '&#123;0&#125;')</span></span><br></pre></td></tr></table></figure></li><li><p>drop table - 删除表</p></li><li>create index -创建索引</li><li>drop index -删除索引</li><li><p>refresh table 表名 - 刷新数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh table computer_log.client_ios_log</span><br></pre></td></tr></table></figure></li><li><p>查看当前使用的数据库中有哪些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看非当前使用的数据库中有哪些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">in</span> myhive;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库中以 android 开头的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">'android*'</span></span><br></pre></td></tr></table></figure></li><li><p>查看表的详细信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted android</span><br></pre></td></tr></table></figure></li><li><p>查询分区表有多少分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> dept_partition;</span><br></pre></td></tr></table></figure></li><li><p>查看分区表结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted dept_partition</span><br></pre></td></tr></table></figure></li><li><p>增加分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table dept_partition add partition(month=&apos;201705&apos;) partition(month=&apos;201704&apos;)</span><br></pre></td></tr></table></figure></li><li><p>删除分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table dept_partition drop partition (month=&apos;201705&apos;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="内部表与外部表"><a href="#内部表与外部表" class="headerlink" title="内部表与外部表"></a>内部表与外部表</h2><ul><li><p>内部表(管理表)：默认创建内部表， 删除表会删除所有数据</p></li><li><p>外部表： 删除表不会删除这份数据，不过描述表的元数据信息会被删除掉。</p></li><li><p>原始日志数据应该建立外部表（避免误删）， 用到的中间表、结果表使用内部表存储。 </p></li><li><p>查看表是内部表还是外部表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看表信息</span></span><br><span class="line">desc  formatted  table_name</span><br></pre></td></tr></table></figure></li><li><p>内部表与外部表的相互转换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---内部表转换为外部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">set</span> tblproperties(<span class="string">'EXTERNAL'</span> = <span class="string">'true'</span>) <span class="comment">---单引号、大小写不能变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---外部表转化为内部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">set</span> tbproperties(<span class="string">'EXTERNAL'</span> = <span class="string">'false'</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="select…from…"><a href="#select…from…" class="headerlink" title="select…from…"></a>select…from…</h2><ul><li><p>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, subord[<span class="number">0</span>] <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure></li><li><p>可以使用 “点” 符号， 类似：表的别名 . 列名 这样的用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">name</span>, address.city  <span class="keyword">from</span>  employees;</span><br></pre></td></tr></table></figure></li><li><p>使用正则表达式，可以选出所有列名以 price 作为前缀的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="string">'price.*'</span>  <span class="keyword">from</span>  stocks;</span><br></pre></td></tr></table></figure></li><li><p>使用列值进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>), <span class="keyword">avg</span>(salary) <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure></li><li><p>使用别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">count</span>(<span class="keyword">distinct</span> acount) <span class="keyword">as</span> uv   <span class="keyword">from</span>   employees;</span><br></pre></td></tr></table></figure></li><li><p>如果用 distinct, select 后面必须直接跟 distinct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  distinct user_account, province from    computer_viedata</span><br></pre></td></tr></table></figure></li></ul><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>关系型运算符优先级高到低为：not - and - or</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country = <span class="string">'us'</span> <span class="keyword">and</span> state = <span class="string">'ca'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country  <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'us'</span>, <span class="string">'china'</span>)</span><br></pre></td></tr></table></figure><ul><li>数学运算符与关系运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>&amp;</td><td>与</td></tr><tr><td>\</td><td>或</td></tr><tr><td>^</td><td>异或</td></tr><tr><td>~</td><td>取反</td></tr><tr><td><strong>操作符</strong></td><td><strong>描述</strong></td></tr><tr><td>A=B</td><td>如果A=B，则返回True,否则返回False</td></tr><tr><td>A&lt;=&gt;B</td><td>如果A和B都为NULL，则返回True,其他的和等号操作结果一致，如果任意为Null,则结果为null</td></tr><tr><td>A&lt;&gt;B,A!=B</td><td>A或B为Null, 则返回Null,如果A不等于B，则返回True,否则返回False</td></tr><tr><td>A&lt;B</td><td>–</td></tr><tr><td>A&lt;=B</td><td>–</td></tr><tr><td>A&gt;B</td><td>–</td></tr><tr><td>A&gt;=b</td><td>–</td></tr><tr><td>A[not] between  B and C</td><td>—</td></tr><tr><td>A is null</td><td>—</td></tr><tr><td>A is not null</td><td>—</td></tr><tr><td>in</td><td>–</td></tr><tr><td>A [NOT] like B</td><td>–</td></tr><tr><td>A rlike B, A REGEXP B</td><td>—</td></tr><tr><td><strong>逻辑运算</strong></td><td><strong>描述</strong></td></tr><tr><td>and</td><td>—</td></tr><tr><td>or</td><td>–</td></tr><tr><td>not</td><td>—</td></tr></tbody></table><ul><li>like、rlike</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---like、 rlike </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">rlike</span> <span class="string">'.*(beijing|shanghai).*'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">like</span> <span class="string">'%beijing%'</span> <span class="keyword">or</span> address.street <span class="keyword">like</span> <span class="string">'%shanghai%'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配0个或任意多个字符</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr><tr><td>escape</td><td>转义字符，可匹配%和_。如SELECT * FROM table_name WHERE column_name LIKE ‘/%/_%_’ ESCAPE’/‘</td></tr><tr><td>—</td><td>—</td></tr><tr><td>.</td><td>匹配任意单个字 符</td></tr><tr><td>*</td><td>匹配0个或多个前一个得到的字符</td></tr><tr><td>[]</td><td>含有任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串。</td></tr><tr><td>^</td><td>匹配开头，如^s匹配以s或者S开头的字符串</td></tr><tr><td>$</td><td>匹配结尾，如s$匹配以s结尾的字符串。</td></tr><tr><td>{n}</td><td>匹配前一个字符反复n次。</td></tr></tbody></table><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 对结果进行分类</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;  <span class="comment">--desc 从高到低排列</span></span><br></pre></td></tr></table></figure><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--对查询的所有结果进行排序, 可在字段加 DESC 关键字， 进行降序排序。 （默认 ASC， 升序）</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--先对code进行排序，然后对code里的姓名进行排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a <span class="keyword">order</span> <span class="keyword">by</span> code, <span class="keyword">name</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- having 子句来限制输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查找平均工资大于3000的部门</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">avg</span>(salary) <span class="keyword">as</span> average </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    average &gt; <span class="number">3000</span></span><br></pre></td></tr></table></figure><ul><li>having 与 where 的区别：<ul><li>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。</li><li>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</li></ul></li></ul><h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---使用limit语句限制返回的行数，只显示 10 行</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv  <span class="keyword">from</span>  employees  <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt></p><ul><li>对于多张表进行连接查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---为什么条件内不将表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close, c.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line">      <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.ymd = c.ymd</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a. symbol = <span class="string">'Apple'</span>  <span class="keyword">AND</span> b.symbol = <span class="string">'Ibm'</span> <span class="keyword">AND</span> c.symbol = <span class="string">'Google'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="并集：union-与-union-all"><a href="#并集：union-与-union-all" class="headerlink" title="并集：union 与 union all"></a>并集：union 与 union all</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><ul><li>union 与 union all 的不同：<ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul></li></ul><h3 id="交集：intersect"><a href="#交集：intersect" class="headerlink" title="交集：intersect"></a>交集：intersect</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">intersect</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><h3 id="差集：except"><a href="#差集：except" class="headerlink" title="差集：except"></a>差集：except</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><!-- https://wing324.github.io/2017/10/20/Hive%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/ --><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>count(distinct  )</td><td>统计去重之后的个数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>sum(distinct )</td><td>去重之后的和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>avg(distinct)</td><td>去重之后的平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>stddev_pop()</td><td>标准偏差</td></tr><tr><td>stddev_samp()</td><td>标准样本偏差</td></tr><tr><td>covar_pop(A, B)</td><td>协方差</td></tr><tr><td>covar_samp(A, B)</td><td>样本协方差</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><ul><li><p>count(1)、count(*)、count(column) 之间的区别</p><ul><li><p>执行效果上：<br>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL<br>count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL<br>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。</p></li><li><p>执行效率上：<br>列名为主键，count(列名)会比count(1)快<br>列名不为主键，count(1)会比count(列名)快<br>如果表多个列并且没有主键，则 count(1) 的执行效率优于count(*)<br>如果有主键，则 select count(主键)的执行效率是最优的<br>如果表只有一个字段，则 select count(*)最优。</p></li></ul></li></ul><hr><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><table><thead><tr><th>函数名</th><th>定义</th><th>语句</th></tr></thead><tbody><tr><td>NOW ( )</td><td>当前时间</td><td>select now()</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>date_add()</td><td>时间相加</td><td>date_add(dt,interval 1 day )</td></tr><tr><td>date_sub(date,INTERVAL expr（时间间隔） type（时间类型，天、月、年）)</td><td>时间相减</td><td>date_sub(‘2018-05-01’,interval -1 year)</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td><td>date_format(hit_date, “%Y-%m-%d)</td></tr><tr><td>datename()</td><td>返回日期部分的参数</td></tr><tr><td>datepart()</td><td>返回日期、时间的单独部分</td></tr></tbody></table><h3 id="求留存率"><a href="#求留存率" class="headerlink" title="求留存率"></a>求留存率</h3><ul><li><p>datediff-求留存率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---一次性求次1日，次3日， 次7日留存，此方法不能计算pv，会造成笛卡尔积</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>date_add 求留存率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---步骤1：统计每天的uv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---步骤2： - 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-25'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.hit_date =  <span class="keyword">date_add</span>(a1.hit_date, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.hit_date</span><br><span class="line"></span><br><span class="line"><span class="comment">--步骤3：计算留存率</span></span><br></pre></td></tr></table></figure></li><li><p>计算留存率的其他写法-迷神</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 留存sql优化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> userid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> t1.userid,</span><br><span class="line">                t1.statdate</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            table1 t1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.statdate = $&#123;上<span class="number">30</span>天日期&#125;</span><br><span class="line">            <span class="keyword">and</span> t1.statdate &lt;= $&#123;上一天日期&#125;</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            t1.userid,</span><br><span class="line">            t1.statdate</span><br><span class="line">        ) s1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        userid</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>)  <span class="number">2</span></span><br><span class="line">    ) R1</span><br><span class="line"></span><br><span class="line"><span class="comment">--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=$&#123;上一天日期&#125;。 </span></span><br><span class="line"><span class="comment">--另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</span></span><br></pre></td></tr></table></figure></li><li><p>留存率的另一种写法-勇哥</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">hit_date,</span><br><span class="line">user_account,</span><br><span class="line"><span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> hit_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2020-04-01'</span> <span class="keyword">and</span>  <span class="string">'2020-04-07'</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">btn_navigation  <span class="keyword">like</span> <span class="string">"%查询办理%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">hit_date,</span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> hit_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2020-04-01'</span> <span class="keyword">and</span>  <span class="string">'2020-04-07'</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">btn_navigation  <span class="keyword">like</span> <span class="string">"%查询办理%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date <span class="keyword">as</span> one,</span><br><span class="line">a2.hit_date <span class="keyword">as</span> two,</span><br><span class="line"><span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) <span class="keyword">as</span> cha,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a2.user_account),</span><br><span class="line"><span class="keyword">sum</span>(a2.hit_count)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    cha &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>计算月留存率的简单写法：筛选出在两个月份出现的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">month</span> (hit_date)) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view.client_android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2019-03-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> user_account</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">  c = <span class="number">2</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">month</span> (hit_date)) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view.client_ios_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2019-03-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> user_account</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">  c = <span class="number">2</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br></pre></td></tr></table></figure></li></ul><h2 id="条件判断：case-when-与-if"><a href="#条件判断：case-when-与-if" class="headerlink" title="条件判断：case when 与 if"></a>条件判断：case when 与 if</h2><ol><li><strong>IF( expr , v1 , v2 )函数</strong></li></ol><ul><li>查出班级所有学生，如果年龄小于20，就标准为少年，否则标记为青年。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    * </span><br><span class="line">     <span class="keyword">if</span>(age&lt;<span class="number">20</span>,<span class="string">'少年'</span>,<span class="string">'青年'</span>) <span class="keyword">AS</span> ifage </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    student</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>ifnull(V1,V2)函数</strong></li></ol><ul><li>如果v1不为空，则直接返回v1;如果v1为空，则返回参数v2<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">ifnull</span>(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">ifnull</span>(<span class="literal">null</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>case when 函数</strong></li></ol><ul><li><p>对不同字母进行省份转换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> province ,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) uv,</span><br><span class="line">    <span class="keyword">count</span>(page_name) pv</span><br><span class="line"><span class="keyword">from</span> android_log</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;&#125;'</span></span><br><span class="line"><span class="keyword">and</span> page_name <span class="keyword">like</span> <span class="string">'%Kefujh%'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">limit</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></li><li><p>统计各部门男女分别有多少人</p></li></ul><table><thead><tr><th>姓名</th><th>部门</th><th>性别</th></tr></thead><tbody><tr><td>甲</td><td>A</td><td>男</td></tr><tr><td>乙</td><td>A</td><td>男</td></tr><tr><td>丙</td><td>B</td><td>女</td></tr><tr><td>丁</td><td>A</td><td>女</td></tr><tr><td>张</td><td>B</td><td>男</td></tr><tr><td>赵</td><td>B</td><td>女</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    部门，</span><br><span class="line">    <span class="keyword">sum</span> (<span class="keyword">case</span> 性别 <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> male_count,</span><br><span class="line">    <span class="keyword">sum</span> (<span class="keyword">case</span> 性别 <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> male_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 部门</span><br></pre></td></tr></table></figure><ul><li>范围转换<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> population &lt; <span class="number">250</span> <span class="keyword">then</span> <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">250</span> <span class="keyword">and</span> population &lt; <span class="number">500</span> <span class="keyword">then</span> <span class="string">'2'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">500</span> <span class="keyword">and</span> population &lt; <span class="number">750</span> <span class="keyword">then</span> <span class="string">'3'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">750</span> <span class="keyword">then</span> <span class="string">'4'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> <span class="keyword">as</span> pop_classs,</span><br><span class="line">        <span class="keyword">count</span>(*) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    district;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h2><ol><li>函数</li></ol><ul><li><strong>case when</strong></li><li><strong>concat</strong>(string A/col, string B/col…) ：函数在连接字符串时，只要其中一个是NUll，则返回NUll</li><li><strong>concat_ws</strong>(separator, str1, str2,…): 函数需要指定分隔符，只能接收 string或string类型的数组，只要有一个字符串不是NUll， 则不会返回NULL。</li><li><strong>collect_set</strong>(col): 函数值接受基本数据类型，主要作用是将某字段的值进行去重汇总，产生array类型字段。</li></ul><ol start="2"><li>案例</li></ol><ul><li>多行转多列</li></ul><table><thead><tr><th>年</th><th>季度</th><th>销售量</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table><p>查询结果如下：</p><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    年,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">1</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 一季度,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">2</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 二季度,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">3</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 三季度,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">4</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 四季度,</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    sales</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    年</span><br></pre></td></tr></table></figure><ul><li>多行转单列</li></ul><table><thead><tr><th>省-城市</th><th>uv</th></tr></thead><tbody><tr><td>河北省-保定</td><td>11189</td></tr><tr><td>山西省-阳泉市</td><td>13</td></tr><tr><td>河南省-信阳</td><td>7462</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">concat</span>(province,<span class="string">'-'</span>, city), uv </span><br><span class="line"><span class="comment">--concat_ws('-', province, city), uv </span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    city,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date = <span class="string">'2020-03-01'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">province, city)</span><br></pre></td></tr></table></figure><ul><li>多行转单列-复杂</li></ul><table><thead><tr><th>name</th><th>contellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>猪八戒</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>唐僧</td><td>白羊座</td><td>A</td></tr><tr><td>张帅</td><td>射手座</td><td>A</td></tr></tbody></table><p>把星座和血型一样的人归类到一起：</p><table><thead><tr><th>。。。</th><th>。。。</th></tr></thead><tbody><tr><td>射手座,A</td><td>猪八戒\张帅</td></tr><tr><td>白羊座，A</td><td>孙悟空\唐僧</td></tr><tr><td>白羊座，B</td><td>宋</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"> t1.c_b</span><br><span class="line"> <span class="keyword">concat_ws</span>(<span class="string">"\", collect_set (t1.name))</span></span><br><span class="line"><span class="string">from (</span></span><br><span class="line"><span class="string">    select </span></span><br><span class="line"><span class="string">        concat_ws(',', constellation, blood_type) c_b,</span></span><br><span class="line"><span class="string">        name</span></span><br><span class="line"><span class="string">    from </span></span><br><span class="line"><span class="string">        person_info) t1</span></span><br><span class="line"><span class="string">group by </span></span><br><span class="line"><span class="string">    t1.c_b;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure><ul><li><p>求将每个省的城市列出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    collect_set(city)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date = <span class="string">'2020-03-01'</span></span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">province</span><br><span class="line"></span><br><span class="line"><span class="comment">---辽宁省["营口市","大连","大连市","抚顺市","铁岭","盘锦","锦州","沈阳市","辽阳","鞍山","铁岭市","本溪市","丹东市","丹东","沈阳","朝阳市","锦州市","辽阳市","阜新市","鞍山市","盘锦市","葫芦岛","营口","抚顺","葫芦岛市","阜新","本溪","朝阳"]</span></span><br></pre></td></tr></table></figure></li><li><p>求出一个月内活跃天数大于20天的用户数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--先列出每个用户的所有登陆时间</span></span><br><span class="line"><span class="comment">--选出需要的时间段</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        collect_set(hit_date) <span class="keyword">as</span> t</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        apache_computer_view.client_android_log </span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2020-03-01'</span> <span class="keyword">and</span> <span class="string">'2020-03-31'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        user_account) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">size</span>(a.t) &gt;= <span class="number">20</span></span><br><span class="line"><span class="comment">--手机号对应日期长度 &gt;= 20</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h2><ol><li>函数</li></ol><ul><li><p>explode(col): 将hive列中复杂的array或者map结构拆分成多行</p></li><li><p><strong>lateral view</strong><br>用法： lateral view udtf(expression) tableAlias as columnAlias<br>说明： 用户和split,explode 等UDTF一起使用，能够将一列数据拆分成多行数据， 在此基础上可以对拆分的数据进行聚合计算.   形成一个新的表，并对原来的表进行侧写</p></li></ul><ol start="2"><li>案例</li></ol><ul><li>需求1</li></ul><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《lie to me》</td><td>警匪,动作,心理</td></tr></tbody></table><p>要求：</p><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑</td></tr><tr><td>《疑犯追踪》</td><td>动作</td></tr><tr><td>《疑犯追踪》</td><td>科幻</td></tr><tr><td>《疑犯追踪》</td><td>剧情</td></tr><tr><td>《lie to me》</td><td>警匪</td></tr><tr><td>《lie to me》</td><td>动作</td></tr><tr><td>《lie to me》</td><td>心理</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    movie,</span><br><span class="line">    category_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    movie_info</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) tmpTable  <span class="keyword">as</span> category_name</span><br><span class="line"></span><br><span class="line"><span class="comment">---用分开的表，对要求的数据进行测写</span></span><br><span class="line"><span class="comment">-- select movie,explode(category) from movie_info 会生成笛卡尔积，不能执行</span></span><br></pre></td></tr></table></figure><ul><li>需求2： 将 表 table 中的 <code>adid_list</code> 转换为单独的行。 </li></ul><p>表-table：</p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><p> 输出结果为： </p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable  <span class="keyword">as</span> adid</span><br></pre></td></tr></table></figure><ul><li><p>需求3： 计算特定广告的展现次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为： </p><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><ul><li>需求4： 多个 lateral view 查询</li></ul><p>表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br></pre></td></tr></table></figure><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><ol><li>函数 </li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>over()</td><td>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化</td></tr><tr><td><strong>常跟的函数</strong></td><td><strong>说明</strong></td></tr><tr><td>—</td><td>—</td></tr><tr><td>current row</td><td>当前行</td></tr><tr><td>n preceding</td><td>往前n行数据</td></tr><tr><td>n following</td><td>往后n行数据</td></tr><tr><td>unbounded</td><td>起点</td></tr><tr><td>uvbounded preceding</td><td>表示从前面的起点开始</td></tr><tr><td>unbounded following</td><td>表示到后面的终点</td></tr><tr><td>lag(col, n)</td><td>往前第n行数据</td></tr><tr><td>lead(col, n)</td><td>往后第n行数据</td></tr><tr><td>ntile(n)</td><td>把有序分区中的行分发到指定数据的组中， 各个组有编号，编号从1开始，ntile返回此行所属组的编号</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr></tbody></table><ol start="2"><li>案例</li></ol><table><thead><tr><th>name</th><th>orderdate</th><th>cost</th></tr></thead><tbody><tr><td>jack</td><td>2017-01-01</td><td>10</td></tr><tr><td>tony</td><td>2017-01-02</td><td>15</td></tr><tr><td>jack</td><td>2017-01-03</td><td>23</td></tr><tr><td>tony</td><td>2017-01-04</td><td>29</td></tr><tr><td>jack</td><td>2017-01-05</td><td>46</td></tr><tr><td>jack</td><td>2017-04-06</td><td>42</td></tr><tr><td>tony</td><td>2017-01-07</td><td>50</td></tr><tr><td>jack</td><td>2017-01-08</td><td>55</td></tr><tr><td>mart</td><td>2017-04-08</td><td>62</td></tr><tr><td>mart</td><td>2017-04-09</td><td>68</td></tr><tr><td>neil</td><td>2017-05-10</td><td>12</td></tr><tr><td>mart</td><td>2017-04-11</td><td>75</td></tr><tr><td>neil</td><td>2017-06-12</td><td>80</td></tr><tr><td>mart</td><td>2017-04-13</td><td>94</td></tr></tbody></table><ul><li>查询在2017年4月购买的顾客及总人数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span>,<span class="keyword">count</span>(<span class="number">1</span>)<span class="keyword">over</span>() <span class="comment">----over全量， 如果不加over，就会按照name来划分</span></span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    business</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    substring_index(orderdate,<span class="string">'-'</span>,<span class="number">2</span>) = <span class="string">'2017-04'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">name</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>name</th><th>c1</th><th>不加over</th></tr></thead><tbody><tr><td>jack</td><td>2</td><td>1</td></tr><tr><td>mart</td><td>2</td><td>4</td></tr></tbody></table><ul><li><p>查询顾客的购买明细及月购买总额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">distribute</span> <span class="keyword">by</span> <span class="keyword">month</span>(orderdate))</span><br><span class="line"><span class="comment">--- sum(cost) over (partition by month(orderdate))</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>要将cost按照日期进行累加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>按照日期进行排序，并将当前日期和前一天、后一天数据求和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>求每个人将按照日期进行累加的消费金额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span> )</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>要将cost按照日期进行倒序累加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span>  orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="keyword">now</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span> )</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>查询顾客上次购买的时间, 与下次购买时间。相邻两个时间戳如何相减，求时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    lag(orderdate, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate),</span><br><span class="line">    <span class="keyword">lead</span>(orderdate,<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>查询前20%时间的订单信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">            <span class="keyword">name</span>, orderdate, <span class="keyword">cost</span>, ntile(<span class="number">5</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate) gid</span><br><span class="line">        <span class="keyword">from</span> </span><br><span class="line">            business</span><br><span class="line">    ) t</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    git =<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://www.cnblogs.com/52xf/p/4209211.html" target="_blank" rel="noopener">ntile函数详解</a></strong><br>ntile函数可以将有序数据，根据指定的组数进行分组处理。 编号从1开始，对于每一行，ntile将返回此行所属的组编号。<br>ntile函数的分组依据：</p><ul><li>每组包含的数据个数不能大于它上一组 包含的数据个数</li><li>计算规则：1. 检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配完成分组。2. 若不能，则会先分出一个组，此组个数为（总个数/总组数）+1。3. 分配之后系统会继续比较余下的记录数与未分配的组数能不能进行平均分配，若不能，则根据上面条件再分配。</li><li>例如：将6个记录分为4组， 不能平均分配则，第一组记录数为 （6/4)+1 = 2条记录。剩余4条记录分为3组，不能平均分配，则第二组记录数为（4/3)+1=2条记录。剩余2条记录分为2组，则剩余2组各1条记录。 </li></ul></li></ul><h2 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h2><ol><li>函数 </li></ol><p>SQl 中用于排序的函数有：rank、dense_rank、row_number、ntile函数,其语法为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rank() over ([partition by A] order by B  DESC)</span><br><span class="line"></span><br><span class="line">dense_rank() over ([partition by A] order by B DESC)</span><br><span class="line"></span><br><span class="line">row_number() over ([partition by A] order by B DESC )</span><br><span class="line"></span><br><span class="line">ntile() over([partition by A] order by B desc)</span><br><span class="line"><span class="comment">-- partition by A 表示 按照A进行分区。</span></span><br><span class="line"><span class="comment">-- order by B 表示按照B进行排序。</span></span><br><span class="line"><span class="comment">-- DESC 表示 从大到小降序排列。</span></span><br><span class="line"><span class="comment">-- 其中[partition by col1]若不需要则可省略不写。</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>明确各函数之间的不同点</strong><br>rank函数， 数值相等的排序则会留下空位： 1、2、2、4<br>dense_rank函数，数值相等的排序不会留下空位: 1、2、2、3<br>row_number函数，则不区分数值是否相等，默认排序为： 1、2、3、4<br>ntile函数，对有序行进行分组处理</li></ul><p>**2.需求</p><ul><li><p>如何找出各省点击人数Top10的按钮？</p><p>对于这个问题，首先要理清自己的思路：1. 取出 省份、按钮和 uv;2. 各省分组内，按照uv进行从大到小排序，并输出一列排序序号;3. 根据排序序号，取出排序前10的按钮和省份。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    nbtn_name </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province,  <span class="comment">--省份</span></span><br><span class="line">    nbtn_name, <span class="comment">--按钮 </span></span><br><span class="line">    uv,        <span class="comment">--uv</span></span><br><span class="line">    <span class="keyword">dense_rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> province <span class="keyword">order</span> <span class="keyword">by</span> uv <span class="keyword">DESC</span>) <span class="keyword">as</span> ran <span class="comment">--排序</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    province,</span><br><span class="line">    nbtn_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view.client_android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>  </span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    hit_date = <span class="string">'2020-03-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    province,</span><br><span class="line">    nbtn_name))</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    ran &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>求连续4个月活跃的用户数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---1月活跃的用户数， 在2月、3月、4月一直活跃的用户有多少？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  user_account , <span class="keyword">month</span>(hit_date) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> compu_view.ios_log_view</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_account, <span class="keyword">month</span>(hit_date) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    user_account,a1.month,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  user_account <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> px</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.px = <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>求4月连续7天进行签到的用户数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ol><li>函数</li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat()</td><td>拼接字符串</td></tr><tr><td>length()</td><td>计算字符串的长度，一个汉字算三个字符</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr><tr><td>lcase()</td><td>转换成小写</td></tr><tr><td>left(string2 ,length )</td><td>从string2中的左边起取length个字符</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>replace()</td><td>替换字符</td></tr><tr><td>split()</td><td>hive字符串分割函数</td></tr><tr><td>substr()</td><td>返回字符串A从start位置开始，长度为len的字符串</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substring_index()</td><td>通过截取获取不同索引位的字符</td></tr><tr><td>LTRIM (string2 )</td><td>去除前端空格</td></tr><tr><td>RTRIM (string2 )</td><td>去除后端空格</td></tr></tbody></table><ol start="2"><li>函数详解</li></ol><p><strong>substr函数与 substring函数用法相同:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr/substring( A, k开始截取的位置，截取长度)</span><br></pre></td></tr></table></figure><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">substr(string,4): 从右第4位置截取到最后，结果为：ing</span><br><span class="line">substr(string,1,3):取左边第1位置起，3字长的字符串，结果为：str</span><br><span class="line">substr(string,-3,3):取右边第1位置起，3字长的字符串,右边第一位置往右不够3字长，结果为：g</span><br><span class="line">substr(string,-3,3):取右边第1位置起，3字长的字符串，结果为：ing</span><br></pre></td></tr></table></figure></p><p><strong>substring_index函数</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substring_index(A, 分割的字符,截取字符的位置)</span><br></pre></td></tr></table></figure></p><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,1)：取第一个逗号前面的字符串，结果为：15</span><br><span class="line"></span><br><span class="line">substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,2)：取第二个逗号前面部分，结果为：15,151</span><br><span class="line"></span><br><span class="line">substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,-1)：取目标字符串中最后一个含 “,” 位子的后的部分，结果为：16</span><br><span class="line"></span><br><span class="line">substring_index(substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,2),&apos;,&apos;,-1):取第二个逗号前面部分,然后最后逗号的前面部分，结果为：151</span><br><span class="line"></span><br><span class="line">substring_index(substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,-2),&apos;,&apos;,1)：取倒数第二个逗号后面部分字符串，再去这部分里第一个都号前的部分，结果为：152</span><br></pre></td></tr></table></figure></p><p><strong>split函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split(A, 分割的字符)</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">split(&apos;a,b,c,d&apos;,&apos;,&apos;):根据逗号进行分割，结果为： [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line"></span><br><span class="line">split(&apos;a,b,c,d&apos;,&apos;,&apos;)[0]： 取结果数组中的某一项，结果为： a</span><br><span class="line"></span><br><span class="line">split(&apos;192.168.0.1&apos;,&apos;\\.&apos;)： 点号这种特殊字符的时候需要做特殊的处理，结果为：[&quot;192&quot;,&quot;168&quot;,&quot;0&quot;,&quot;1&quot;]</span><br><span class="line"></span><br><span class="line">&quot;....  split(&apos;192.168.0.1&apos;,&apos;\\\\.&apos;) ... &quot;: split包含在 &quot;&quot; 之中时 需要加4个\,不然得到的值是null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">同样的 | 等特殊符号也需要做类似 处理。</span><br></pre></td></tr></table></figure><p>3.区分函数之前的区别</p><ul><li>substr函数与 substring函数是根据截取的位置来进行分割。</li><li>substring_index和split是根据特定的字符来进行分割。</li></ul><ol start="4"><li>需求 </li></ol><ul><li>将一些字段拆解出来进行使用，比如：Syjh-sjsy-zygn-3_1字段，我们只需要Syjh-sjsy-zygn位置的所有按钮。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    substring_index(nbtn_position, &apos;-&apos;,3) as position,</span><br><span class="line">    count(distinct user_account) as uv </span><br><span class="line">from </span><br><span class="line">    apache_computer_view</span><br><span class="line">where </span><br><span class="line">    hit_date = &apos;2020-03-01&apos;</span><br><span class="line">    and </span><br><span class="line">    nbtn_position like &apos;%Syjh%&apos;</span><br><span class="line">group by </span><br><span class="line">    substring_index(nbtn_position, &apos;-&apos;,3)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="空字段赋值"><a href="#空字段赋值" class="headerlink" title="空字段赋值"></a>空字段赋值</h2><p>NVL：给值为NULL的数据赋值，格式为NVL（string1, replace_with),功能为：如果string1为null，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都为NULL，则返回NULL。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nvl(comm, <span class="number">-1</span>) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><h2 id="查看系统内置函数"><a href="#查看系统内置函数" class="headerlink" title="查看系统内置函数"></a>查看系统内置函数</h2><ol><li><p>查看系统自带的函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> functions</span><br></pre></td></tr></table></figure></li><li><p>显示自带的函数的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc function 函数名;</span><br></pre></td></tr></table></figure></li><li><p>详细显示自带的函数用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc function extended 函数名</span><br></pre></td></tr></table></figure></li></ol><h1 id="Hive避免数据倾斜"><a href="#Hive避免数据倾斜" class="headerlink" title="Hive避免数据倾斜"></a>Hive避免数据倾斜</h1><ul><li><p>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</p></li><li><p>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</p></li></ul><h2 id="小表Join大表"><a href="#小表Join大表" class="headerlink" title="小表Join大表"></a>小表Join大表</h2><ul><li><p>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。因此，我们在查询时，要保证连续查询中的表的大小从左到右依次是增加的。  </p></li><li><p>假如，在 a, b 两个表中，b表最小， 则 写sql时需让b表在左，a表在右：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'APPLE'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---Hive支持使用/*+STREAMTALBE*/语法指定哪张表是大表， 不需要排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">/*+3`'LKLLGFG Streamtable(a)*/</span> a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> B <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="大表JOIN大表"><a href="#大表JOIN大表" class="headerlink" title="大表JOIN大表"></a>大表JOIN大表</h2><ol><li><p>空key过滤<br>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在sql语句中进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    a <span class="keyword">Join</span>  b</span><br><span class="line"><span class="keyword">On</span></span><br><span class="line">     a.user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">And</span> </span><br><span class="line">    a.user_id = b.user_id</span><br><span class="line"><span class="keyword">Union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.user_id <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><p>空key转换<br>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机值，是的数据随机均匀地分布到不同的reducer上。 </p><ul><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li><li>需要用到Case When … Else…End语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> n.*</span><br><span class="line"><span class="keyword">from</span>  nullidtable n <span class="keyword">full</span> <span class="keyword">join</span> bigtable o <span class="keyword">on</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> n.id <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="keyword">concat</span>(<span class="string">'hive'</span>, <span class="keyword">rand</span>()) <span class="keyword">else</span> n.id <span class="keyword">end</span>  = o.id;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="count-distinct-去重统计"><a href="#count-distinct-去重统计" class="headerlink" title="count(distinct) 去重统计"></a>count(distinct) 去重统计</h2><ul><li>数据量大时，由于count distinct 操作需要用一个 reduce task 来完成， 这一个reduce 需要处理的数据量太大，会导致整个job很难完成，一般 count distinct 使用先group by 再 count的方式替换。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">id</span>) <span class="keyword">from</span> bigtable</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> bigtable <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>) a</span><br></pre></td></tr></table></figure></li></ul><h2 id="避免笛卡尔积"><a href="#避免笛卡尔积" class="headerlink" title="避免笛卡尔积"></a>避免笛卡尔积</h2><p>尽量避免产生笛卡尔积，如join时不加on条件，或无效的on条件。hive只能使用1个reducer来完成笛卡尔积</p><h2 id="行列过滤"><a href="#行列过滤" class="headerlink" title="行列过滤"></a>行列过滤</h2><ol><li><p>列处理： 在查询中， 避免使用 select *, 使用条件限制取需要的列。</p></li><li><p>行处理： 在分区剪裁中，当使用join外关联时，如果将副表的过滤条件写在where后面，那么就会先全表关联，之后再过滤, 这样会耗费资源。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">from</span> bigtable b </span><br><span class="line"><span class="keyword">join</span> ori o on.id = b.id </span><br><span class="line"><span class="keyword">where</span> o.id &lt;=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> b.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> ori <span class="keyword">where</span> <span class="keyword">id</span> &lt;=<span class="number">10</span>) o <span class="keyword">on</span> b.id = o.id)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.symbol = <span class="string">'APPLE'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--正确的写法是将 where 条件写在 on 后面</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> ( b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol <span class="keyword">and</span> s.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><h2 id="union-all-子查询避免中使用-group-by等"><a href="#union-all-子查询避免中使用-group-by等" class="headerlink" title="union all 子查询避免中使用 group by等"></a>union all 子查询避免中使用 group by等</h2><ul><li>union all 子查询避免中使用 group by【替换 count(distinct) 除外】、count(distinct)、max、min等。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><h2 id="避免不同数据类型进行关联"><a href="#避免不同数据类型进行关联" class="headerlink" title="避免不同数据类型进行关联"></a>避免不同数据类型进行关联</h2><ul><li>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    a.price_close,</span><br><span class="line">    b.price_close</span><br><span class="line">from</span><br><span class="line">    a join b  on a.user_id = cast(b.user_id as string)</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-11-01&apos; and &apos;2018-11-02&apos;</span><br><span class="line">    and </span><br><span class="line">    a.symbol = &apos;apple&apos;</span><br></pre></td></tr></table></figure></li></ul><p>Hive的查询注意事项以及优化总结：</p><ol><li><p>尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段</p></li><li><p>对历史库的计算经验</p></li><li><p>尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑</p></li><li><p>join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗</p></li><li><p>如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50%</p></li></ol><h1 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h1><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。 </p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。</p><ol><li><p>首先， 用Python连接数据库</p><p>对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">conn = hive.Connection(host=<span class="string">'ip地址'</span>, port=<span class="number">10000</span>, username=<span class="string">'用户名'</span>, database = <span class="string">'default'</span>, auth=<span class="string">'NOSASL'</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 获得连接的游标</span></span><br></pre></td></tr></table></figure></li><li><p>设置开始和结束时间<br>可以用python中的time函数设置时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startdate = <span class="string">'2018-09-01'</span></span><br><span class="line">enddate   = <span class="string">'2018-09-19'</span></span><br></pre></td></tr></table></figure></li><li><p>用Python中的format函数将日期传入{}中</p><ul><li><p>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。</p></li><li><p>日期用两个{}来代替， 用format函数将开始日期与结束日期传入</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取积分类uv,pv数据</span></span><br><span class="line"></span><br><span class="line">sql_jifenxinxi_an = <span class="string">"""select </span></span><br><span class="line"><span class="string">    count(distinct user_account) as uv, </span></span><br><span class="line"><span class="string">    count(1) as pv </span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    computer_view.data </span></span><br><span class="line"><span class="string">where </span></span><br><span class="line"><span class="string">    hit_date between "&#123;&#125;" and "&#123;&#125;" </span></span><br><span class="line"><span class="string">    and </span></span><br><span class="line"><span class="string">    (btn_position like "服务-查询-积分信息%" </span></span><br><span class="line"><span class="string">    or </span></span><br><span class="line"><span class="string">    btn_home = "积分-扇形左" </span></span><br><span class="line"><span class="string">    ) </span></span><br><span class="line"><span class="string">limit 1000"""</span>.format(startdate,enddate)</span><br><span class="line"><span class="comment"># format 插入时间</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql_jifenxinxi_an)</span><br><span class="line"><span class="comment"># 运行此语句</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment">#fetchall():接收全部的返回结果行.</span></span><br></pre></td></tr></table></figure><p>我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 </p></li></ol><hr><h1 id="其他拓展"><a href="#其他拓展" class="headerlink" title="其他拓展"></a>其他拓展</h1><h2 id="group-by-升级版"><a href="#group-by-升级版" class="headerlink" title="group by 升级版"></a><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g" target="_blank" rel="noopener">group by 升级版</a></h2><ol><li>需求背景</li></ol><p>通过 a1 明细表，获得每个店铺，每个城市，每个省份，每个大区以及全国5月的份的成交量情况。</p><table><thead><tr><th>order_id</th><th>shop</th><th>city</th><th>province</th><th>area</th><th>hit_date</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>西安</td><td>陕西</td><td>西北大区</td><td>2019-05-04</td></tr><tr><td>2</td><td>B</td><td>上海</td><td>上海</td><td>华东大区</td><td>2019-05-01</td></tr><tr><td>3</td><td>C</td><td>安康</td><td>陕西</td><td>西北大区</td><td>2019-05-02</td></tr><tr><td>4</td><td>D</td><td>北京</td><td>北京</td><td>华中大区</td><td>2019-05-21</td></tr><tr><td>5</td><td>E</td><td>延安</td><td>陕西</td><td>西北大区</td><td>2019-05-03</td></tr><tr><td>6</td><td>F</td><td>成都</td><td>四川</td><td>西南大区</td><td>2019-05-19</td></tr><tr><td>7</td><td>G</td><td>汉中</td><td>陕西</td><td>西北大区</td><td>2019-06-04</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>10000</td><td>H</td><td>郑州</td><td>河南</td><td>西北大区</td><td>2019-05-29</td></tr></tbody></table><ol start="2"><li><p>解法1：</p><p>分别写5个sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全国成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 大区成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 省成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 城市成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 店铺成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop</span><br></pre></td></tr></table></figure><p>这种方法太低效了， 还需要在excel中进行合并，比较麻烦。</p><ol start="3"><li>解法2：</li></ol><p>通过 union 和 union all 对查询结果进行纵向合并<br> union: 对合并后的结果进行去重处理<br> union all : 返回合并后的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, <span class="literal">null</span> , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,shop, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city, shop</span><br></pre></td></tr></table></figure><p> 上述式中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt></p><ol start="4"><li>解法3：</li></ol><p>利用 <code>union all</code> 比写出5个sql 再在 Excel 中处理简单很多，但是代码比较冗余。可以用<code>grouping sets</code>来进行优化。 此函数可以根据不同维度组合进行聚合。</p><p>将<code>union all</code> 语句用<code>grouping sets</code> 进行改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop</span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span></span><br><span class="line">    (<span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    (area,province),</span><br><span class="line">    (area,province,city),</span><br><span class="line">    (area,province,city,shop)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。</p><p><code>grouping_id</code>表示每个分组的序号。 1 表示第一个分组、2表示第二个分组。我们可以根据<code>grouping_id</code> 选取我们需要的组合。如果我们需要全国的成交量，则让 <code>grouping_id = 1</code>, 需要每个省的成交量，让 <code>grouping_id = 3</code>。</p><ol start="5"><li>解法4：</li></ol><p><code>cube</code>函数， 对<code>group by</code>的维度的所有组合进行聚合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">cube</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe78ba58dfb91072.png" alt></p><p>以上代码对区域和省份进行了聚合， <code>cube</code> 会先对全部数据进行聚合，即 <code>null, null</code>， 再对<code>area,null</code>进行聚合，然后再对<code>null, province</code>进行聚合，最后再对<code>area,province</code>进行聚合。</p><ol start="6"><li>解法5：<br><code>rollup</code>函数， 和<code>cube</code>类似，是针对 <code>group by</code>所有维度的部分组合。 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">rollup</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe79320dfb423235.png" alt></p><p>对比<code>cube</code>和<code>rollup</code>得到的结果，我们发现<code>rollup</code>少了<code>null province</code> 这个组合，<code>rollup</code> 是以最左侧指标为主进行组合聚合。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g" target="_blank" rel="noopener">讲讲 group 的plus版-张俊红</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/f3uqAVsOxsM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><!-- ## 在 spark 中写 hive 循环, 工具 zeppelim<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">%spark</span><br><span class="line"></span><br><span class="line">for( a &lt;- 0 until 30)&#123;</span><br><span class="line">        // val sql= s&quot;&quot;&quot;use default&quot;&quot;&quot;</span><br><span class="line">    // spark.sql(sql)</span><br><span class="line">    val sql = s&quot;&quot;&quot;</span><br><span class="line">    with a1 as (</span><br><span class="line">    select</span><br><span class="line">        user_account</span><br><span class="line">    from</span><br><span class="line">        computer_view.data</span><br><span class="line">    where</span><br><span class="line">         hit_date between &quot;2018-11-01&quot; and date_add(&quot;2018-11-01&quot;,$&#123;a&#125;)</span><br><span class="line">    union all </span><br><span class="line">        select</span><br><span class="line">        user_account</span><br><span class="line">    from</span><br><span class="line">        computer_view.data</span><br><span class="line">    where</span><br><span class="line">         hit_date between &quot;2018-11-01&quot; and date_add(&quot;2018-11-01&quot;,$&#123;a&#125;))</span><br><span class="line">    select</span><br><span class="line">        count(distinct user_account) as uv</span><br><span class="line">    from</span><br><span class="line">        a1</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    val data = spark.sql(sql)</span><br><span class="line">    println(&quot;day:&quot;, a, &quot;uv:&quot;, data.show())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- # 对用户进行标注</span><br></pre></td></tr></table></figure><p>with a1 as(<br>select<br>    hit_date,<br>    user_account,<br>    hit_mon,<br>    first_login<br>from<br>    test.day_dau<br>where<br>    hit_date between ‘{0}-01’ and ‘{0}-31’),<br>a2 as(<br>select<br>    user_account<br>from<br>    test.mon_new_user<br>where<br>    hit_mon = ‘{0}’),<br>a3 as(<br>select<br>    a1.hit_date,<br>    a1.user_account,<br>    a1.hit_mon,<br>    a1.first_login,<br>    a2.user_account as if_new<br>from<br>    a1 left join a2 on<br>    a1.user_account = a2.user_account)<br>insert into table test.dau_ifnew<br>select<br>    user_account,<br>    (case when if_new is not null and hit_date = first_login then ‘new’ else ‘old’ end) as user_label,<br>    hit_date,<br>    hit_mon<br>from<br>    a3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line">##   取 pv &gt; 3 的用户量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">with a1 as (</span><br><span class="line">SELECT</span><br><span class="line">user_account</span><br><span class="line">FROM</span><br><span class="line">computer_view.data</span><br><span class="line">WHERE</span><br><span class="line">nbtn_name is not null </span><br><span class="line">and</span><br><span class="line">hit_date between &apos;&#123;&#125;&apos; and &apos;&#123;&#125;&apos;</span><br><span class="line">union all </span><br><span class="line">SELECT</span><br><span class="line">user_account</span><br><span class="line">FROM</span><br><span class="line">computer_view.data</span><br><span class="line">WHERE</span><br><span class="line">nbtn_name is not null </span><br><span class="line">and</span><br><span class="line">hit_date between &apos;&#123;&#125;&apos; and &apos;&#123;&#125;&apos;),</span><br><span class="line">a2 as (SELECT</span><br><span class="line"> user_account,</span><br><span class="line">count(user_account) as pv</span><br><span class="line">from </span><br><span class="line">a1</span><br><span class="line">group by </span><br><span class="line">user_account</span><br><span class="line">having</span><br><span class="line">count(user_account) &gt; 3)</span><br><span class="line">SELECT</span><br><span class="line">    count(distinct user_account) as uv</span><br><span class="line">from </span><br><span class="line">a2</span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##   创建临时表</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">use default;</span><br><span class="line">create table test.nine_android_user_version_10</span><br><span class="line">select</span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br><span class="line">from</span><br><span class="line">    computer_view.data</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-09-01&apos; and &apos;2018-09-30&apos;</span><br><span class="line">    and</span><br><span class="line">    user_account is not null</span><br><span class="line">    and</span><br><span class="line">    app_version is not null</span><br><span class="line">group by</span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br></pre></td></tr></table></figure></p><h2 id="原始日志中取数"><a href="#原始日志中取数" class="headerlink" title="原始日志中取数"></a>原始日志中取数</h2><p><code>`</code>sql<br>use default;<br>create table test.nine_user_version_10<br>select<br>    url_par(url_query,’account’) as user_account,<br>    split(url_par(url_query,’AppID’),’ ‘)[1] as app_version<br>from<br>    apache_log.client_ios_sensor<br>where<br>    dt between ‘2018-10-01’ and ‘2018-10-20’<br>    and<br>    url_par(url_query,’account’) is not null<br>    and<br>    url_par(url_query,’AppID’) is not null<br>group by<br>    url_par(url_query,’account’),<br>    split(url_par(url_query,’AppID’),’ ‘)[1]</p><p><code>`</code>  –&gt;</p><hr>-->]]></content>
    
    <summary type="html">
    
      工作中常见的 Hive-SQL 查询语法。
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Hive" scheme="https://zhangandyu.github.io/tags/Hive/"/>
    
      <category term="sql" scheme="https://zhangandyu.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Python-Pandas库学习</title>
    <link href="https://zhangandyu.github.io/2018/09/27/%E6%8A%80%E8%83%BD-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhangandyu.github.io/2018/09/27/技能-pandas库学习/</id>
    <published>2018-09-26T16:00:00.000Z</published>
    <updated>2020-03-30T03:39:26.630Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h1><ul><li><p>Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， Series和DataFrame，Series用于存储一维数据， 而DataFrame存储多维数据。</p></li><li><p>常用的软件-Anaconda是数据分析中运行python的一款利器， 安装教程可参考Anaconda入门使用指南</p></li></ul><h1 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h1><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995" target="_blank" rel="noopener">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(<span class="string">r'E:\工作文件\周报\周数据\测试\0902-0908'</span>)</span><br><span class="line">print(file_list, <span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取当前文件夹地址</span></span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'E:/工作文件/an-商品汇总-uv.xls'</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xls'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv文件，并用 分隔符分割</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, sep = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读取文件前两行</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, nrows = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>读取显示编码错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示错误为：</span></span><br><span class="line"><span class="comment"># UnicodeDecodeError: 'utf-8' codec can not decode byte 0xb5 in position 0: invalid start byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式</span></span><br><span class="line">df = pd.read_csv(path + <span class="string">'登记用户 20191127.csv'</span>,encoding=<span class="string">"gbk"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'登记用户 20191127.csv'</span>, engine = <span class="string">'python'</span>, encoding = <span class="string">'utf-8-sig'</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>读取txt格式数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, sep = <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>)  <span class="comment"># 将txt文件存为numpy数组</span></span><br></pre></td></tr></table></figure><ol start="5"><li>读取excel中的sheet名称</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="string">'sheet1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入sheet的顺序，从0开始计数</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet,并制定文件中的第几行做行索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>, index_col = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\商品汇总.xlsx'</span>, sheet_name = <span class="number">0</span>, head = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\商品汇总.xlsx'</span>, usecols = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># uescols = [0,2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取excel中所有sheet，并进行合并</span></span><br><span class="line">rbook = []</span><br><span class="line">kong_data = os.listdir(<span class="string">r'F:\省资源位'</span>)</span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> kong_data:</span><br><span class="line">    data_excel = pd.ExcelFile(<span class="string">r'F:\省资源位\\'</span>+file_name)</span><br><span class="line">    sheet = data_excel.sheet_names</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sheet:</span><br><span class="line">        data_button_rest = pd.read_excel(<span class="string">r'F:\省资源位\\'</span>+file_name, sheet_name= i )</span><br><span class="line">        rbook.append(data_button_rest)</span><br><span class="line">        result_df =pd.concat(rbook)</span><br><span class="line">datas_excel = pd.DataFrame(result_df)</span><br></pre></td></tr></table></figure><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br></pre></td></tr></table></figure><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/Administrator/Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop\\'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据，且不带索引</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置要导出的列</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="keyword">False</span>,</span><br><span class="line">           columns = [<span class="string">'ID'</span>, <span class="string">'销量’])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置编码格式</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           encoding = '</span>utf<span class="number">-8</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 缺失值、无穷值处理</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           na_rep = 0, # 缺失值用0填充</span></span><br><span class="line"><span class="string">           inf_rep = 0 # 无穷之用0填充</span></span><br><span class="line"><span class="string">           )</span></span><br><span class="line"><span class="string"># 导出csv文件，设置分隔符</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">            sep = '</span>,<span class="string">'</span></span><br><span class="line"><span class="string">           )</span></span><br></pre></td></tr></table></figure><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"> </span><br><span class="line">writer = pd.ExcelWriter(<span class="string">'F:/notebooks/zhoushuju.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">btn_navigation.to_excel(writer, sheet_name = <span class="string">'底部导航'</span>)</span><br><span class="line">shouye_top20.to_excel(writer, sheet_name = <span class="string">'首页top20'</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><ol start="7"><li>其他数据格式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从SQL表/库导入数据 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">eng = pymysql.connet(host= <span class="string">'100.129'</span>, user = <span class="string">'root'</span>, password = <span class="string">'1234'</span>, df = <span class="string">'db'</span>, charset = <span class="string">'ugf8'</span>)</span><br><span class="line"></span><br><span class="line">query = <span class="string">"""select * from android_log """</span></span><br><span class="line"></span><br><span class="line">df = pd.read_sql(query, eng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出数据到SQL表 </span></span><br><span class="line">df.to_sql(table_name, eng)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 常见问题</span><br><span class="line"></span><br><span class="line">* 当文件有中文时， 可能会出现错误：Initializing <span class="keyword">from</span> file failed 有中文， 可以用此方法解决</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">f = open(‘我的文件.csv’)</span><br><span class="line">res = pd.read_csv(f)</span><br></pre></td></tr></table></figure><ul><li>查看大文件有多少列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = open(<span class="string">'E:/用户明细.csv'</span>)</span><br><span class="line">data1 = pd.read_csv(data, iterator=<span class="keyword">True</span>)</span><br><span class="line">data2 = data1.get_chunk(<span class="number">5</span>)</span><br><span class="line">print(data2)</span><br></pre></td></tr></table></figure><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html" target="_blank" rel="noopener">迭代器</a></p><h1 id="对输出数据进行处理"><a href="#对输出数据进行处理" class="headerlink" title="对输出数据进行处理"></a>对输出数据进行处理</h1><p><a href="https://www.jianshu.com/p/5c0aa1fa19af" target="_blank" rel="noopener">pandas的数据输出显示设置</a></p><ol><li>对表中某一列元素进行相同操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;金额&apos;].apply(lambda x:x+1)</span><br><span class="line"></span><br><span class="line">df[&apos;金额&apos;] +2</span><br></pre></td></tr></table></figure><ol start="2"><li>对表中每一个元素进行相同操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.applymap(lambda x:x+1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line"><span class="comment"># pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示</span></span><br><span class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">100</span>) <span class="comment">#数据显示总宽度</span></span><br><span class="line">pd.set_option(<span class="string">'max_rows'</span>, <span class="number">100</span>) <span class="comment">#显示最多行数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_columns'</span>, <span class="number">100</span>) <span class="comment">#显示最多列数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_colwidth'</span>, <span class="number">16</span>) <span class="comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'large_repr'</span>, <span class="string">'truncate'</span>) <span class="comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span></span><br><span class="line">pd.set_option(<span class="string">'show_dimensions'</span>, <span class="keyword">True</span>) <span class="comment">#当数据带省略号显示时，是否在最后显示数据的维度</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">'max_info_columns'</span>, <span class="number">100</span>) <span class="comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span></span><br><span class="line">print(df.info())</span><br></pre></td></tr></table></figure><ul><li>将数据变成小数形式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">inputfile = <span class="string">'../data/electricity_data.xls'</span></span><br><span class="line">outputfile = <span class="string">'./electricity_data_analyze1.xls'</span></span><br><span class="line"> </span><br><span class="line">data = pd.read_excel(inputfile)</span><br><span class="line">data[<span class="string">u'线损率'</span>] = (data[<span class="string">u'供入电量'</span>]-data[<span class="string">u'供出电量'</span>])/data[<span class="string">u'供入电量'</span>]    <span class="comment">#data[u'线损率']的类型为series； data[u'线损率']为小数</span></span><br><span class="line">data[<span class="string">u'线损率'</span>] = data[<span class="string">u'线损率'</span>].apply(<span class="keyword">lambda</span> x: format(x, <span class="string">'.2%'</span>))    <span class="comment">#Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数</span></span><br><span class="line"> </span><br><span class="line">data.to_excel(outputfile, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="描述数据"><a href="#描述数据" class="headerlink" title="描述数据"></a>描述数据</h1><ol><li>表信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li>添加默认列名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果数据没有标题行，可用pandas添加默认的列名</span></span><br><span class="line">df = pd.read_excel(<span class="string">'x.xlsx'</span>, header = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>显示前数据前5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(<span class="number">5</span>)</span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><ol start="10"><li>找到重复值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据有0， 是因对缺失值进行了填充</span></span><br><span class="line">df[<span class="string">'经纪人级别'</span>].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span></span><br><span class="line">df = pd.read_excel(<span class="string">'x.xlsx'</span>,skiprows=[<span class="number">2</span>] )</span><br></pre></td></tr></table></figure><ol start="13"><li>对缺失值进行识别</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有缺失值显示为True</span></span><br><span class="line">pd.insull(df)  <span class="comment"># df.isnull()</span></span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算此data的数量</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts(ascending = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数并分组</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts(ascending = <span class="keyword">True</span>, bins = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数</span></span><br><span class="line">df[<span class="string">'data'</span>].count()</span><br></pre></td></tr></table></figure><ol start="15"><li><p>字符和数值之间的转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int()  <span class="comment"># 转化成整数</span></span><br><span class="line">float() <span class="comment"># 转化成浮点数</span></span><br><span class="line">str() <span class="comment"># 转化成字符</span></span><br><span class="line">type() <span class="comment"># 查看格式</span></span><br></pre></td></tr></table></figure></li><li><p>获取数据分布情况</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><h1 id="数据清晰"><a href="#数据清晰" class="headerlink" title="数据清晰"></a>数据清晰</h1><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812" target="_blank" rel="noopener">DataFrame中的空值处理</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.dropna(how=<span class="string">'any'</span>)</span><br><span class="line"></span><br><span class="line">df.dropna(how = <span class="string">'all'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">labels 就是要删除的行列的名字，用列表给定</span><br><span class="line">axis 默认为0，指删除行，因此删除columns时要指定axis=1；</span><br><span class="line">index 直接指定要删除的行</span><br><span class="line">columns 直接指定要删除的列</span><br><span class="line">inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；</span><br><span class="line">inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除包含 集团 二字 的行</span><br><span class="line"></span><br><span class="line">read_data = df[- df[&apos;所属省份名称&apos;].isin([&apos;集团&apos;])]</span><br></pre></td></tr></table></figure><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列, axis=1表示删除列</span></span><br><span class="line">df.drop([<span class="string">"销售额"</span>, <span class="string">"ID"</span>], axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">df.drop(columns = [<span class="string">"销售额"</span>, <span class="string">"ID"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入列位置</span></span><br><span class="line">df.drop(df.columns[[<span class="number">4</span>,<span class="number">5</span>]], axis =<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>删除行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 删除行，筛选行名</span><br><span class="line">df.drop([&apos;一&apos;,&apos;二&apos;], axis = 0)</span><br><span class="line"></span><br><span class="line">df.drop(index = [&apos;一&apos;, &apos;二&apos;])</span><br><span class="line"></span><br><span class="line"># 删除行，筛选行索引</span><br><span class="line">df.drop(df.index[[0,1]], axis = 0)</span><br><span class="line"></span><br><span class="line"># 只要年龄小于40的用户</span><br><span class="line"></span><br><span class="line">df[df[&apos;ID&apos;] &lt; 40]</span><br></pre></td></tr></table></figure><ol start="3"><li>填充（fillna函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空值用0填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>)</span><br><span class="line">df.replace(np.NaN, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值对空值进行填充</span></span><br><span class="line">df[<span class="string">'时长'</span>].fillna(df[<span class="string">'时长'</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照不同列进行填充</span></span><br><span class="line">df.fillna(&#123;<span class="string">'性别'</span> : <span class="string">'男'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>更改数据格式，更改数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据格式int64,改为float格式</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'大区'</span>].astype(<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>更改列名称, 修改列名。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [[<span class="string">'导航'</span>,<span class="string">'uv'</span>, <span class="string">'pv'</span>,<span class="string">'户均点击'</span>]]</span><br><span class="line"></span><br><span class="line">df.rename(columns=&#123;<span class="string">'IM渠道'</span>: <span class="string">'渠道'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>添加修改索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加索引</span></span><br><span class="line">df.index = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改索引,重新设置</span></span><br><span class="line">df = df.set_index[<span class="string">'标题'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名索引</span></span><br><span class="line">df.rename (index = &#123;<span class="number">1</span>: <span class="string">'一'</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="微信图片_20191221153932.jpg"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.reset_index(level=<span class="keyword">None</span>, drop=<span class="keyword">False</span>, inplace=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将所有index转化成columns</span></span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将第0级索引转化为 columns</span></span><br><span class="line">df.reset_index(level=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将原索引删除，不加入columns</span></span><br><span class="line">df.reset_index(drop = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><ol start="7"><li><p>删除重复值</p><p><a href="https://www.cnblogs.com/cocowool/p/8421997.html" target="_blank" rel="noopener">Pandas删除数据的几种情况</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认第一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates(keep = <span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列去重</span></span><br><span class="line">df.drop_duplicates(subset = [<span class="string">'姓名'</span>, <span class="string">'唯一识别码'</span>])</span><br></pre></td></tr></table></figure><ol start="8"><li>对列表内的值进行替换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一对一替换</span></span><br><span class="line">df[<span class="string">'ID'</span>].replace(<span class="string">'1053'</span>, <span class="string">'110'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对一替换</span></span><br><span class="line">df[<span class="string">'ID'</span>].replace(&#123;<span class="string">'1053'</span>: <span class="string">'110'</span>, <span class="string">'230'</span>: <span class="string">'33'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.columns.str.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><h1 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h1><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照轴把多个对象拼接起来</span></span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span></span><br><span class="line"><span class="comment"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将left和right进行合并</span></span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定以key为键进行合并</span></span><br><span class="line">pd.merge(left, right, on = <span class="string">'key'</span>)</span><br><span class="line"> pd.merge(name_3, name_1, left_on = [<span class="string">'ming'</span>], right_on = [<span class="string">'标记'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># key2列不相同的部分会直接舍弃掉</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留key2列不相同的部分</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>], how = <span class="string">'outer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不相同的部分指定以左表为基准</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>], how = <span class="string">'left'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复列名处理</span></span><br><span class="line"><span class="comment"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span></span><br><span class="line">pd.merge(df1,df2, on = <span class="string">'id'</span>, suffixes= [<span class="string">'_L'</span>, <span class="string">'_R'</span>])</span><br></pre></td></tr></table></figure><ul><li>concat函数, 按照标题进行拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通合并</span></span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引设置</span></span><br><span class="line">pd.concat([df1, df2], ignore_index= <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后删除重复值</span></span><br><span class="line">pd.concat([df1, df2], ignore_index = <span class="keyword">True</span>).drop_duplicates()</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照ID进行升序排列</span></span><br><span class="line"><span class="comment"># 按照ID进行降序排列</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>], ascending = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在保证销售额列降序的情况下，对ID列进行升序处理</span></span><br><span class="line">data.sort_values(by = [<span class="string">'销售额'</span>, <span class="string">'ID'</span>],ascending = [<span class="keyword">False</span>, <span class="keyword">True</span>], inplace = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将ID是缺失值的列显示在最后面</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ID是缺失值的列显示在最前面</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>], na_position = <span class="string">'first'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数值进行排名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应Excel中的 rank.avg函数</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method= <span class="string">'average'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按值在所有的排列数据中出现的先后顺序排名</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  与Excel中rank.eq 函数的功能一样</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'min'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与min相反，取重复值对应的最大排名</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'max'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1</span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(<span class="string">'网'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'客户注册渠道'</span>]),</span><br><span class="line">                index=df.index,columns=[<span class="string">'客户注册渠道'</span>,<span class="string">'size'</span>])</span><br><span class="line"></span><br><span class="line">&lt;!-- df = pd.DataFrame((x.split(<span class="string">'.'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> 首页jhrj_1[<span class="string">'所属省份编码'</span>]),</span><br><span class="line">                index=df.index,columns=['客户注册渠道','size']) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列完对数据进行合并</span></span><br><span class="line">df1 = pd.merge(首页jhrj_1, df, left_index = <span class="keyword">True</span>, right_index = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 指明切分区间</span><br><span class="line">pd.cut(df[&apos;年龄&apos;], bins = [0,3,6,10])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将数据切成3份</span><br><span class="line">pd.qcut(df[&apos;年龄&apos;],3 )</span><br></pre></td></tr></table></figure><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 取到小数点后3位</span><br><span class="line">for i in a :</span><br><span class="line">    print(&quot;%.3f&quot;%c)</span><br><span class="line"></span><br><span class="line"># 设置小数点位数，四舍五入</span><br><span class="line">df[&apos;cnts&apos;].round( decimals = 2)</span><br></pre></td></tr></table></figure><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = [&apos;省份&apos;, &apos;按钮名称&apos;, &apos;uv&apos;, &apos;pv&apos;] )</span><br></pre></td></tr></table></figure><h1 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h1><ol><li>选择某一列/ 某几列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 普通索引- 根据名称进行选择</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'客户端uv'</span>]</span><br><span class="line"></span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引 / 切片索引， 根据所在第几列进行选择</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span></span><br><span class="line">df.iloc[:, [<span class="number">0</span>,<span class="number">2</span>]] <span class="comment"># 获取第1列和第3列的数值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>选择某一行/某几行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通索引-loc</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'第一行'</span>]</span><br><span class="line"></span><br><span class="line">df.log[[<span class="string">'第一行'</span>, <span class="string">'第二行'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引，切片索引</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 选择第一行</span></span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第一行和第二行</span></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><ol start="3"><li>根据指定条件进行筛选</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择年龄小于200的数据</span></span><br><span class="line">df[df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#年龄小于200，且id小于300</span></span><br><span class="line">df[(df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>) &amp;   (df[<span class="string">'id'</span>] &lt; <span class="number">300</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_and(df[<span class="string">'年龄'</span>] &gt; <span class="number">10</span>, df[<span class="string">'id'</span>] &gt; <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A列值大于10，或 B列值大于5</span></span><br><span class="line">df[(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>) | (df[<span class="string">'C'</span>] &gt;<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_or(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>, df[<span class="string">'C'</span>] &gt; <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 A列的值大于13时， 显示B，c列的值</span></span><br><span class="line">df[[<span class="string">'B'</span>,<span class="string">'C'</span>]][df[<span class="string">'A'</span>]&gt;<span class="number">13</span>]</span><br></pre></td></tr></table></figure><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[[<span class="string">'第一行'</span>, <span class="string">'第三行'</span>], [<span class="string">'订单号’, '</span>ID<span class="string">']]</span></span><br></pre></td></tr></table></figure><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>布尔索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">'年龄'</span>]&lt; <span class="number">200</span>][[<span class="string">'订单编号'</span>, <span class="string">'ID'</span>]]</span><br></pre></td></tr></table></figure><ul><li>切片索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.ix[<span class="number">0</span>:<span class="number">2</span>, [<span class="string">'订单变化'</span>, <span class="string">'ID'</span>]]</span><br></pre></td></tr></table></figure><ol start="5"><li>按条件进行提取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 用isin函数进行判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span></span><br><span class="line">df[df.A.isin((<span class="number">10</span>, <span class="number">13</span>))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看这一列是否包含某个值</span></span><br><span class="line">df[<span class="string">'级别'</span>].isin([<span class="string">'A3'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 先判断是否包含，然后将符合条件的数据提取出来。</span></span><br><span class="line">df.loc[df[<span class="string">'级别'</span>].isin([<span class="string">'A3'</span>,<span class="string">'M4'</span>])]</span><br></pre></td></tr></table></figure><hr><h1 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h1><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照某列分组求和</span></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照多列分组求和</span></span><br><span class="line">df.groupby([<span class="string">'渠道'</span>, <span class="string">'ID'</span>]).sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组后的结果进行重新索引</span></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).sum().reset_index()</span><br></pre></td></tr></table></figure><ol start="2"><li>aggregate方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对同一列 先做计数汇总运算，再做汇总运算</span></span><br><span class="line"></span><br><span class="line">df.group(<span class="string">'渠道'</span>).aggregate([<span class="string">'count'</span>, <span class="string">'sum'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不同的列做不同的汇总运算</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).aggregate(&#123;<span class="string">'ID'</span> : <span class="string">'count'</span>,</span><br><span class="line">                              <span class="string">'销量'</span> : <span class="string">'sum'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>pivot_table-数据透视表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为方便处理， 一般需要对结果进行重置索引</span></span><br><span class="line">pd.pivot_table(df, values = <span class="string">'ID'</span>, columns = <span class="string">'渠道'</span>,</span><br><span class="line">                index = <span class="string">'客户分类'</span>, aggfun = <span class="string">'count'</span>).reset_index()</span><br></pre></td></tr></table></figure><p>pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote></li></ol><ol start="4"><li>对数据进行映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper)</span><br></pre></td></tr></table></figure><ol start="5"><li>数据采样</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="6"><li>统计计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算每一列的个数</span></span><br><span class="line">df.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每一行的个数</span></span><br><span class="line">df.count(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.sum()</span><br><span class="line"></span><br><span class="line">df.sum(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">df.median()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值</span></span><br><span class="line">df.max()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最小值</span></span><br><span class="line">df.min()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求众数</span></span><br><span class="line">df.mode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求方差</span></span><br><span class="line">df.var()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求标准差</span></span><br><span class="line">df.std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求分位数</span></span><br><span class="line">df.quantile(<span class="number">0.75</span>, axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述统计 describe函数</span></span><br><span class="line"><span class="comment">#自动生成数据的数量，均值，标准差等数据</span></span><br><span class="line"><span class="comment">#round（2）,显示小数点后面2位数，T转置</span></span><br><span class="line"></span><br><span class="line">df.describe().round(<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准差std()</span></span><br><span class="line">df[<span class="string">'经纪人响应时长'</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 协方差cov</span></span><br><span class="line">df[<span class="string">'经纪人当天发送消息数'</span>].cov(df[<span class="string">'客户当天发送消息数'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关性分析corr</span></span><br><span class="line">df[<span class="string">'客户当天发送消息数'</span>].corr(df[<span class="string">'经纪人当天发送消息数'</span>])</span><br></pre></td></tr></table></figure><ol start="7"><li>数值计数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看不同值出现的次数， #默认进行排列</span></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比, #默认进行排列</span></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts(normalize = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比， 不进行排列</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts(normalize = <span class="keyword">True</span>, sort = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>插入数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span></span><br><span class="line">df.insert(<span class="number">2</span>, <span class="string">'销售品id'</span>, [<span class="string">'01'</span>, <span class="string">'02'</span>])</span><br></pre></td></tr></table></figure><ol start="9"><li>对数据进行转置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.T</span><br></pre></td></tr></table></figure><ol start="10"><li>索引重塑</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将表格型数据转化成树形数据</span></span><br><span class="line">df.stack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将树形数据转化成表格型数据</span></span><br><span class="line">df.stack().unstack()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="说明"></p><ol start="11"><li>长宽表转换</li></ol><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="微信图片_20191222025318.jpg"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="微信图片_20191222025313.jpg"></li></ul><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index = [<span class="string">'computer'</span>,<span class="string">'name'</span>], columns = <span class="string">'year'</span>, values = <span class="string">'sale'</span>)</span><br></pre></td></tr></table></figure><ul><li>将宽表转换成长表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： melt()</span></span><br><span class="line">df.melt(id_vars = [<span class="string">'company'</span>, <span class="string">'name'</span>], var_name = <span class="string">'year'</span>, value_name = <span class="string">'sale'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： stack()</span></span><br><span class="line"><span class="comment"># 在保持行索引不变的前提下，将列索引转化成行索引</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="微信图片_20191222025324.jpg"></p><hr><h1 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h1><ol><li>大小写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li>去除空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列、 合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切分</span></span><br><span class="line">a.split(<span class="string">'_'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分， 且成为新列</span></span><br><span class="line">a.split(<span class="string">'_'</span>, expand = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对切分进行限制, 只切1次</span></span><br><span class="line">a.split(<span class="string">'_'</span>, expand = <span class="keyword">True</span>, n=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否包含</span></span><br><span class="line">a.str.contains(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列</span></span><br><span class="line">s.str.get_dummies(sep= <span class="string">'|'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = 首页jhrj_1[<span class="string">'所属省份编码'</span>].str.split(<span class="string">'.'</span>)  <span class="comment"># expand=True  可以把用分割的内容直接分列</span></span><br><span class="line">首页jhrj_1[<span class="string">"所属省份编码1"</span>]=df[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分并在原表中进行合并</span></span><br><span class="line">首页jhrj_2 = pd.merge(首页jhrj_1, pd.DataFrame(首页jhrj_1[<span class="string">'所属省份编码'</span>].str.split(<span class="string">'.'</span>, expand = <span class="keyword">True</span>) ),</span><br><span class="line">               how = <span class="string">'left'</span>, left_index = <span class="keyword">True</span>, right_index = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas对dataframe中的某一列使用split做字符串切割：</span></span><br><span class="line"><span class="comment"># words = df['col'].split()</span></span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line"><span class="comment"># AttributeError: 'Series' object has no attribute 'split'</span></span><br><span class="line"><span class="comment"># 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span></span><br><span class="line"><span class="comment"># words = df['col'].str.split()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对两列数据进行合并</span><br><span class="line">df[<span class="string">'省份_名称'</span>] = df[<span class="string">'省份'</span>].str.cat(df[<span class="string">'名称'</span>],sep = <span class="string">'_'</span>)</span><br><span class="line">首页jdt_1[<span class="string">'省份_标题'</span>] = 首页jdt_1[<span class="string">'所属省份编码'</span>].astype(str).str.cat(首页jdt_1[<span class="string">'标题'</span>],sep = <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><h1 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h1><ul><li><p>当前日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期和时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的年</span></span><br><span class="line">datetime.now().year</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的月份</span></span><br><span class="line">datetime.now().month</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期的日期</span></span><br><span class="line">datetime.now().day</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时刻在周几</span></span><br><span class="line"><span class="comment"># python周几默认是从0开始的</span></span><br><span class="line">datatime.now.weekeday() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间所在周的周数</span></span><br><span class="line">datatime.now.isocalendar()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>返回指定日期</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只展现日期</span></span><br><span class="line">datetime.now.date()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只展示时间</span></span><br><span class="line">datetime.now.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前日期</span></span><br><span class="line">datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment">#2018-12-22</span></span><br><span class="line"></span><br><span class="line">datetime.now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将时间格式转化成字符串格式</span></span><br><span class="line"><span class="string">now=str( datetime.now())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将字符串格式转化为时间格式</span></span><br><span class="line"><span class="string">parse(str_now)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># 往后推一天</span></span><br><span class="line"><span class="string">date+ Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往后推一个小时</span></span><br><span class="line"><span class="string">date + Hour(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往前推一天</span></span><br><span class="line"><span class="string">date - Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 昨天</span></span><br><span class="line"><span class="string">ysd = now - timedelta(days = 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#本月第一天</span></span><br><span class="line"><span class="string">ysd = now.replace(day = now.day-1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#  上月最后一天</span></span><br><span class="line"><span class="string">lastmonth_end = now.replace(day = now.day-1) - timedelta(days=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 上月第一天</span></span><br><span class="line"><span class="string">lastmonth_first = now.replace(month = now.month-1, day =1)</span></span><br><span class="line"><span class="string">lastmonth_first = lastmonth_end.replace(day=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#提取2016年11月2号的数据</span></span><br><span class="line"><span class="string">df['</span><span class="number">2016</span><span class="number">-11</span><span class="number">-02</span><span class="string">' : '</span><span class="number">2016</span><span class="number">-11</span><span class="number">-02</span><span class="string">']</span></span><br><span class="line"><span class="string">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 构造时间序列， 构造十个日期， 每12分钟一次</span></span><br><span class="line"><span class="string">pd.Series(pd.date_range(start = '</span><span class="number">2018</span><span class="number">-09</span><span class="number">-17</span> <span class="number">22</span>:<span class="number">43</span>:<span class="number">00</span><span class="string">', periods = 10, freq = '</span><span class="number">12</span>min<span class="string">'))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 取所有8点到12点之间的数据, 不包含8点和12点</span></span><br><span class="line"><span class="string">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 包含8点到12点</span></span><br><span class="line"><span class="string">data.between_time('</span><span class="number">08</span>:<span class="number">00</span><span class="string">', '</span><span class="number">12</span>:<span class="number">00</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import datetime</span></span><br><span class="line"><span class="string">from dateutil.relativedelta import relativedelta </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">begin = datetime.date(2019,1,1)</span></span><br><span class="line"><span class="string">end = datetime.date(2019,1,31)</span></span><br><span class="line"><span class="string">for i in range(1,10):</span></span><br><span class="line"><span class="string">    first = d + relativedelta(months=i)</span></span><br><span class="line"><span class="string">    last = end + relativedelta(months=i)</span></span><br></pre></td></tr></table></figure><ul><li>处理月与月之间时间不连续问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time,timedelta</span><br><span class="line"><span class="comment"># 指定昨天</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 月初第一天</span></span><br><span class="line">startdates = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">enddates = (df - timedelta(days = num)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment"># 上月第一天</span></span><br><span class="line">last_moth_f = df.replace(month =df.month<span class="number">-1</span>, day=<span class="number">1</span>).__format__(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line"><span class="comment"># 上月最后一天</span></span><br><span class="line">last_moth_e = df.replace(month = df.month<span class="number">-1</span>, day =<span class="number">1</span>).strftime(<span class="string">'%Y-%m-31'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标值月份</span></span><br><span class="line">mubiao_dates = startdates[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line">day1 = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">'2019-11-%d'</span>)</span><br><span class="line">first = datetime.strptime(day1, <span class="string">"%Y-%m-%d"</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="自动发送邮件"><a href="#自动发送邮件" class="headerlink" title="自动发送邮件"></a>自动发送邮件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email import encoders</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg" alt="123.jpg"><br><img src="https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg" alt="456.jpg"></p>]]></content>
    
    <summary type="html">
    
      工作中常用的 Python-Pandas 语句总结。
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python基础学习</title>
    <link href="https://zhangandyu.github.io/2018/07/25/%E6%8A%80%E8%83%BD-python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhangandyu.github.io/2018/07/25/技能-python基础学习/</id>
    <published>2018-07-24T16:00:00.000Z</published>
    <updated>2020-03-22T04:01:05.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数"><a href="#数" class="headerlink" title="数"></a>数</h1><ol><li>整数-int</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line"># 查看变量的类型</span><br><span class="line">type(i)</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>浮点数-float</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.2 * 0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0.020000000000000004</span><br></pre></td></tr></table></figure><blockquote><p>浮点数在计算机中表输入的十进制浮点数仅由实际存储在计算机中的近似的二进制浮点数表示,二进制来表达 1/10 是一个无限循环小数:0.0001100110011001100110011001100110011001100110011…,Python 只打印机器中存储的二进制值的十进制近似值。</p></blockquote><p> 如何限制显示的小数点个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;&#123;:.4f&#125;&quot;.format(0.1*0.4))</span><br></pre></td></tr></table></figure><hr><ol start="3"><li><p>字符串-str</p><p>字符串的表示方式：</p><ul><li><p>python中有3种表示字符串的方式——单引号，双引号，三引号。</p></li><li><p>单引号和双引号的作用是相同的, 但双引号中可以将包含的特殊字符单引号输出，而单引号要输出’需要/转义</p></li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos; \&apos;hello world\&apos; &apos;</span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">str = &quot;&apos;hello python&apos;&quot;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><ul><li>三引号的用法特殊，三引号中可以输入单引号、双引号或换行符等字符,也可用作制作文档字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos;&apos;&apos;&apos;hello&apos;/&quot;world&quot;&apos;&apos;&apos;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><p>常用的字符串处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 重复字符串</span><br><span class="line">sta = &apos;hi&apos;</span><br><span class="line">print (sta * 2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 切片</span><br><span class="line">sta = &apos;1234567890&apos;</span><br><span class="line">print(sta[2:9:2])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#去除空格</span><br><span class="line">name = &apos;   zhang yu    &apos;</span><br><span class="line"># 去除左侧空格</span><br><span class="line">print(name.lstrip())</span><br><span class="line"># 去除右侧空格</span><br><span class="line">print(name.rstrip())</span><br><span class="line"># 去除两侧空格</span><br><span class="line">print(name.strip())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 分割字符串</span><br><span class="line"></span><br><span class="line">#split()函数通过制定分隔符对字符串进行切片</span><br><span class="line">name = &quot;zhang  and  yu  and  han&quot;</span><br><span class="line">print(name.split())</span><br><span class="line">print(name.split(&apos;  &apos;,2))</span><br><span class="line">print(name.split(&apos;  and  &apos;))</span><br><span class="line"></span><br><span class="line"># partition()函数将目标字符串分割为两个部分，返回一个三元元组（head,sep,tail），包含分割符</span><br><span class="line">url = &quot;https://zhangandyu.github.io//2018&quot;</span><br><span class="line">print( url.partition(&quot;//&quot;))</span><br><span class="line">print(url.rpartition(&quot;//&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 替换字符串</span><br><span class="line"></span><br><span class="line">#str.replace(old, new,max)</span><br><span class="line"># max 可选字符串不能超过max次</span><br><span class="line">str = &quot;this is a apple&quot;</span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;))     </span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;, 1))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拼接字符串</span><br><span class="line">a = &apos;_&apos;</span><br><span class="line">name = (&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br><span class="line">print(a.join(name))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查找字符串是否包含子字符串</span><br><span class="line">#str.find(str, beg=0, end=len(string))</span><br><span class="line">a = &apos; this is a apple&apos;</span><br><span class="line">b = &apos;is&apos;</span><br><span class="line"></span><br><span class="line">#从下标3开始，查找在字符串里第一个出现的子串，返回结果：3</span><br><span class="line">print(a.find(b,2)) </span><br><span class="line"></span><br><span class="line">#从下标5开始，查找在字符串里第一个出现的子串，返回结果：6</span><br><span class="line">print(a.find(b,5))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#判断字符串是否以指定的前后缀结尾</span><br><span class="line"># str.startswith(str, beg=0,end=len(string))</span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;th&apos;</span><br><span class="line">c = &apos;is&apos;</span><br><span class="line">print(a.startswith(b))</span><br><span class="line">print(a.startswith(c,2))</span><br><span class="line"></span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;le&apos;</span><br><span class="line">c = &apos;app&apos;</span><br><span class="line">print(a.endswith(b))</span><br><span class="line">print(a.endswith(b,10))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#其他函数</span><br><span class="line"># 检测数字</span><br><span class="line">str.isdigit()    # 检测字符串是否只由数字组成</span><br><span class="line">str.isnumeric()  # 检测字符串是否只由数字组成,这种方法是只针对unicode对象</span><br><span class="line">str.isdecimal()  # 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</span><br><span class="line"># 检测字母</span><br><span class="line">str.isalpha()   # 检测字符串是否只由字母组成</span><br><span class="line"># 检测字母和数字</span><br><span class="line">str.isalnum()   # 检测字符串是否由字母和数字组成</span><br><span class="line"># 检测其他</span><br><span class="line">str.isspace()   # 检测字符串是否只由空格组成</span><br><span class="line">str.islower()   # 检测字符串是否由小写字母组成</span><br><span class="line">str.isupper()   # 检测字符串中所有的字母是否都为大写</span><br><span class="line">str.istitle()   # 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</span><br><span class="line"></span><br><span class="line">str.capitalize()   # 将字符串的第一个字母变成大写,其他字母变小写</span><br><span class="line">str.lower()        # 转换字符串中所有大写字符为小写</span><br><span class="line">str.upper()        # 将字符串中的小写字母转为大写字母</span><br><span class="line">str.swapcase()     # 对字符串的大小写字母进行转换</span><br><span class="line">max(str)    # 返回字符串 str 中最大的字母</span><br><span class="line">min(str)    # 返回字符串 str 中最小的字母</span><br><span class="line">len(str)    # 返回字符串的长度</span><br><span class="line">str(arg) # 将 arg 转换为 string</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>布尔值</li></ol><ul><li>and-逻辑与</li><li>or-逻辑或</li><li>not-逻辑非</li></ul><blockquote><p> not的优先级大于and和or的优先级，而and和or的优先级相等。<br> 逻辑运算符的优先级低于关系运算符，必须先计算关系运算符，再计算逻辑运算符。</p></blockquote><hr><ol start="5"><li>变量命名规则</li></ol><ul><li>只能包含字母、数字和下划线</li><li>不能包含空格</li><li>不能将python关键字和函数名用作变量名</li><li>变量名应简短又具有描述性</li><li>慎用小写字母l和大写字母O</li></ul><hr><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><ol><li>什么是序列</li></ol><ul><li>序列是Python中最基本的数据结构。</li><li>python中有6个序列的内置类型,包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。</li></ul><p>对于序列，都可以使用一下操作：</p><ul><li>索引</li><li>切片</li><li>加</li><li>乘</li><li>成员检查<br>in和not in</li><li>计算序列的长度<br>len()</li><li>取序列中的最大、最小值<br>max()和min()</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><ul><li>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现</li><li>列表适合用于存储在程序运行期间可能变化的数据集。 列表是可以修改的， 这对处理网站的用户列表或游戏中的角色列表至关重要。</li></ul></blockquote><ul><li>列表对象方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.append(x)</span><br><span class="line"># 把一个元素添加到列表的结尾</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.extend(x)</span><br><span class="line"># 将一个给定列表中的所有元素都添加到另一个列表中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.insert(i,x)</span><br><span class="line"># 在指定位置插入一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(x)</span><br><span class="line"># 删除列表中值为 x 的第一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.pop(i)</span><br><span class="line"># 从列表的指定位置删除元素，并将其返回</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.clear()</span><br><span class="line"># 从列表中删除所有元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.index(x)</span><br><span class="line"># 返回列表中第一个值为 x 的元素的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.count(x)</span><br><span class="line"># 返回 x 在列表中出现的次数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.sort()</span><br><span class="line"># 对列表中的元素进行排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.sorted()</span><br><span class="line"># 对列表中的元素进行临时排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br><span class="line"># 倒排列表中的元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.copy()</span><br><span class="line"># 返回列表的一个浅拷贝</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.len(x)</span><br><span class="line">#返回列表的长度</span><br></pre></td></tr></table></figure><ol start="3"><li>用列表实现栈和列队</li></ol><ul><li>栈是一种后进先出的数据结构，我们可以使用列表的append()和pop()方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2]</span><br><span class="line">a.append(3)  #入栈</span><br><span class="line">a.pop() # 最后一个元素出栈</span><br></pre></td></tr></table></figure><ul><li>队列是一种先进先出的数据结构，我们可以使用列表的append()和pop(0)方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [2,1]</span><br><span class="line">a.append(1)  # 入队列</span><br><span class="line">a.pop(0) # 第0个元素出队列</span><br></pre></td></tr></table></figure><ol start="4"><li>列表推导式</li></ol><ul><li><p>为从序列中创建列表提供了一个简单的方法。</p></li><li><p>普通方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">for i in range(20):</span><br><span class="line">    a.append(i ** 2)</span><br><span class="line">print(a)</span><br><span class="line"># i 依然存在</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b = []</span><br><span class="line">for x in [1,2,3,4]:</span><br><span class="line">    for y in [2,3,4]:</span><br><span class="line">        if x !=y:</span><br><span class="line">            b.append((x,y))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li>推导式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [i**2 for i in range(20)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(x,y) for x in [1,2,3,4] for y in [2,3,4] if x !=y]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from math import pi</span><br><span class="line">[str(round(pi, i)) for i in range(1, 16)]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [1, 2, 3, 4],</span><br><span class="line">    [5, 6, 7, 8],</span><br><span class="line">    [9, 10, 11, 12]]</span><br><span class="line">[[row[i] for row in matrix] for i in range(4)]</span><br></pre></td></tr></table></figure><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>元组为不可变得列表， 在需要创建一系列不可修改的元素时使用。 </p></blockquote><ol><li>只有一个元素<br>元组中只包含一个元素时， 需要在元素后面添加逗号，否则括号会被当做运算符使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zy = (2,)</span><br><span class="line">zy[0]</span><br></pre></td></tr></table></figure><ol start="2"><li>修改元组</li></ol><ul><li>对元组进行连接组合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;z&apos;, &apos;y&apos;)</span><br><span class="line">me = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">name = na + me</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><ul><li>给元组变量赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;zy&apos;, &apos;yu&apos;)</span><br><span class="line">na = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">print(na)</span><br></pre></td></tr></table></figure><ul><li>元组运算符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 计算元组个数</span><br><span class="line">len((2,45, 67, 8, 9))</span><br><span class="line"></span><br><span class="line"># 连接</span><br><span class="line">(1,2,3, 4) + (4, 5, 6)</span><br><span class="line"></span><br><span class="line"># 复制</span><br><span class="line">(1,2,3, 4)* 3</span><br><span class="line"></span><br><span class="line">#迭代</span><br><span class="line"> for i in (12, 3,4 , 5):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><ul><li>将列表转换为元组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [ &apos;z&apos;, 1, 2, 3, 4, &apos;u&apos;]</span><br><span class="line">tup = tuple(list)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="映射和集合"><a href="#映射和集合" class="headerlink" title="映射和集合"></a>映射和集合</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><blockquote><p>字典：将相关信息关联起来</p></blockquote><ul><li>访问字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">print(man[&apos;name&apos;])</span><br></pre></td></tr></table></figure><ul><li>添加键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man[&apos;home&apos;] = &apos;xian&apos;</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">man[&apos;hige&apos;] = 170</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>删除键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">del man[&apos;xingbie&apos;]</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>遍历所有的键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key, value in man.items():</span><br><span class="line">    print( key,&quot;:&quot; ,  value)</span><br></pre></td></tr></table></figure><ul><li>分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key in man.keys():</span><br><span class="line">    print( key)</span><br><span class="line">    </span><br><span class="line">for value in man.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><ul><li>按倒序顺序遍历分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in sorted(man.keys()):</span><br><span class="line">    print( key)</span><br></pre></td></tr></table></figure><ul><li>字典列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line">alien = &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;:5&#125;</span><br><span class="line">computer = &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 40&#125;</span><br><span class="line"></span><br><span class="line">alients = [man, alien, computer]</span><br><span class="line"></span><br><span class="line">for i in alients:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;name&apos;:[&apos;zhangyu&apos;, &apos;han&apos;, &apos;dou&apos;],</span><br><span class="line">    &apos;home&apos;:[&apos;xian&apos;, &apos;beijing&apos;],</span><br><span class="line">    &apos;hige&apos;:[165, 170, 370, 2389]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for na, las in province.items():</span><br><span class="line">    for la in las:</span><br><span class="line">        print(na, la)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;man&apos; :&#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;,</span><br><span class="line">    &apos;alien&apos; : &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;: 5&#125;,</span><br><span class="line">    &apos;computer&apos; : &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 10&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i, a  in province.items():</span><br><span class="line">    print(i, a)</span><br></pre></td></tr></table></figure><ul><li>字典键的特性<blockquote><p>不允许同一键出现两次，创建时如果同一键被赋值两次， 后一个值会被记住。<br>键必须不可变， 可以用数字，字符串，或元组充当，但不能用列表</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&apos;name&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict</span><br></pre></td></tr></table></figure><ul><li>python中关于字典的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 删除字典内所有元素</span><br><span class="line">dict.clear()</span><br><span class="line"></span><br><span class="line">#返回一个字典的浅复制</span><br><span class="line">dict.copy()</span><br><span class="line"></span><br><span class="line"># 创建字典</span><br><span class="line">seq = (&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;)</span><br><span class="line">dict = dict.fromkeys(seq,10)</span><br><span class="line">dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#返回指定键的值，如果值不在字典中返回设定值</span><br><span class="line">dict1.get(&apos;Google&apos;, 40)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#和get()类似, 但如果键不存在于字典中，将会添加键并将值设为设定值</span><br><span class="line">dict1.setdefault(&apos;google&apos;, &apos;20&apos;)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#把字典dict2的键/值对更新到dict里</span><br><span class="line">dict1=&#123;&apos;Google&apos;: 10, &apos;Runoob&apos;: 10, &apos;Taobao&apos;: 10&#125;</span><br><span class="line">dict2 =&#123;&apos;na&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line">#以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">dict.items()</span><br><span class="line"></span><br><span class="line">#以列表返回一个字典所有的键</span><br><span class="line">dict.keys()</span><br><span class="line"></span><br><span class="line">#以列表返回字典中的所有值</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><blockquote><p>集合是一个无序的，不重复的数据集合。集合作用有以下两点：</p></blockquote><ol><li>去重： 把一个还有重复元素的列表或元组等数据类型变成集合， 其中的重复元素只出现一次，用set()方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#使用大括号之间创建集合</span><br><span class="line">f = &#123;1, 2, 2, 2, &apos;a&apos;&#125;</span><br><span class="line">print(f)</span><br><span class="line">print(type(f))</span><br><span class="line"></span><br><span class="line"># 用set()方法</span><br><span class="line">a = [1, 2, 2, &apos;a&apos;, &apos;a&apos;]</span><br><span class="line">b = (1,2,2, &apos;a&apos;, &apos;a&apos;)</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line">e = set()</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><ol start="2"><li>进行关系测试：测试两组数据之间的交集，差集，并集等数据关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查看集合的相关函数</span><br><span class="line">help(set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;d&apos;,&apos;e&apos;]</span><br><span class="line">b = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;b&apos;]</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line"></span><br><span class="line"># 取交集</span><br><span class="line">e = c.intersection(d)</span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line"># 取并集</span><br><span class="line">f = c.union(d)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"># 取差集（无重复）</span><br><span class="line">g = c.difference(d)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">#对称差集&quot;（不同时在c,d中存在）</span><br><span class="line">h = c.symmetric_difference(d)</span><br><span class="line">print(h)</span><br><span class="line"></span><br><span class="line">#判读是否为子集</span><br><span class="line">i = c.issubset(d)</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"># &quot;判读是否为超集&quot;</span><br><span class="line">j = c.issuperset(d) </span><br><span class="line"></span><br><span class="line">#检查是否有相同元素,没有返回True</span><br><span class="line">k = c.isdisjoint(d)</span><br></pre></td></tr></table></figure><h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ol><li>if-else语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 17</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print( &quot;you can seee six video&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li>if-elif-else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif age&gt; 18:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>多个elif</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = 80</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif 18&lt;age&lt;30:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">elif 30&lt; age &lt; 60:</span><br><span class="line">    print( &quot;you should go to work&quot;)</span><br><span class="line">elif age&gt; 60:</span><br><span class="line">    print(&quot;you should go to tourism&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="4"><li>if语句中的and和or</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = 9</span><br><span class="line">if num &gt;= 0 and num &lt;= 10: </span><br><span class="line">    print (&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">num = 10</span><br><span class="line">if num &lt;= 0 or num &gt;= 10:</span><br><span class="line">    print(&apos;zy&apos;)</span><br></pre></td></tr></table></figure><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><ol><li>for循环主要用于遍历迭代的对象， while循环主要用于条件判断</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="2"><li>continue 用于跳过该次循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="3"><li>break 用于退出循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><ol start="4"><li>循环使用 else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 5:</span><br><span class="line">   print (count, &quot; is  less than 5&quot;)</span><br><span class="line">   count = count + 1</span><br><span class="line">else:</span><br><span class="line">   print (count,&quot; is not less than 5&quot; )</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for 循环可以遍历任何序列的项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;:</span><br><span class="line">    print(letter)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>函数是组织好， 可重复使用的，用来实现有关功能的代码段。函数能提高应用的模块行，和代码的重复利用率。</li></ul><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def zhangyu():</span><br><span class="line">    &quot;&quot;&quot;显示名称&quot;&quot;&quot;</span><br><span class="line">    print(&quot;zhangandyu&quot;)</span><br><span class="line"> #   return[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line"> zhangyu()</span><br></pre></td></tr></table></figure><ul><li>向函数传入参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def zy(name):</span><br><span class="line">    print(&apos;Hello, &apos; + name.title() + &apos;!&apos;)</span><br><span class="line"></span><br><span class="line">zy(&apos;zhangyu&apos;)</span><br><span class="line"></span><br><span class="line"># name 为形参</span><br><span class="line">#&apos;zhangyu&apos;为实参</span><br></pre></td></tr></table></figure><ul><li>位置实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(&apos;dog&apos;, &apos;huabao&apos;)</span><br><span class="line"># 警惕位置混淆</span><br><span class="line">describe_pet(&apos;huabao&apos;, &apos;dog&apos;)</span><br></pre></td></tr></table></figure><ul><li>关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(name = &apos;huabao&apos;, animal_type = &apos;dog&apos;)</span><br><span class="line"># 位置混淆也没有关系</span><br></pre></td></tr></table></figure><ul><li>设置默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(name,animal_type=&apos;dog&apos;):</span><br><span class="line">    &quot;&quot;&quot;设置animal_type的默认参数是dog&quot;&quot;&quot;</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数不改变</span><br><span class="line">describe_pet(name = &apos;huabao&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数改变</span><br><span class="line">describe_pet(&apos;huxbao&apos;, &apos;cat&apos;)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数返回的值可以使用return语句将值返回到调用函数的代码行中。从而将程序的大部分繁重工作移到函数中取完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name):</span><br><span class="line">    name = first_name + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>让实参变成可选的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name, middle_name =&apos; &apos;):</span><br><span class="line">    if middle_name:</span><br><span class="line">        name = first_name +&apos; &apos;+ last_name +&apos; &apos; +  middle_name</span><br><span class="line">    else:</span><br><span class="line">        name = first_name + &apos; &apos; + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>返回字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def build_person(first_name, last_name, age=&apos;&apos;):</span><br><span class="line">    person = &#123;&apos;first&apos; : first_name, &apos;last&apos;: last_name&#125;</span><br><span class="line">    if age:</span><br><span class="line">        person[&apos;age&apos;] = age</span><br><span class="line">    return person</span><br><span class="line"></span><br><span class="line">build_person(&apos;zhang&apos;, &apos;yu&apos;, age=25)</span><br></pre></td></tr></table></figure><ul><li>传递列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_user(names):</span><br><span class="line">    for name in names:</span><br><span class="line">        print(name.title())</span><br><span class="line">zy = [&apos;a&apos;, &apos;b&apos;, &apos;v&apos;]</span><br><span class="line">get_user(zy)</span><br></pre></td></tr></table></figure><ul><li>传递任意数据的实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_world(* names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">get_world(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用位置实参和任意数量实参</li></ul><p>必须将接纳任意数量实参的形参放到最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_world(size, *names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(str(size) + i)</span><br><span class="line">get_world( 1,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用任意数量的关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_user(**user_info):</span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    for key, value in user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    return profile</span><br><span class="line">user_profile = get_user(location = &apos;princeton&apos;, field = &apos;physics&apos;, home = &apos;xian&apos;)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>如果一个函数在函数内部，调用自己本身，这个函数就是递归函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fan(n):</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return n * fan (n-1)</span><br></pre></td></tr></table></figure><p>但递归函数在数特别大的情况下会导致栈溢出， 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fan(10000)</span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li>局部作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    name = &quot;zhangyu&quot;</span><br><span class="line"></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>运行报错， 因为name变量只在func()函数中生效，而在全局无法调用。</p><ul><li>作用域链</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;lzl&quot;</span><br><span class="line">def f1():</span><br><span class="line">    name = &quot;Eric&quot;</span><br><span class="line">    def f2():</span><br><span class="line">        name = &quot;Snor&quot;</span><br><span class="line">        print(name)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>f1()函数执行，最后输出snor，Python中有作用域链， 变量会由内到外找，先去自己作用域找，自己没有再去上级找，直到找不到报错。</p><ul><li>终极作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;zhang&apos;</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    name = &apos;yu&apos;</span><br><span class="line">    return f1</span><br><span class="line">    </span><br><span class="line">ret = f2()</span><br><span class="line">ret()</span><br></pre></td></tr></table></figure><p>输出结果为zhang, 分析可知， f2()函数执行结果为函数f1的内存地址。执行ret()就是执行f1()，name =’zhang’与fi()在一个作用域链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 新浪面试题</span><br><span class="line">li  = [lambda : x for x in range(10)]</span><br><span class="line">print(type(li))</span><br><span class="line">print(type(li[0]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#lambada 面试题 </span><br><span class="line">li = [lambda :x for x in range(10)]</span><br><span class="line">res = li[0]()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><blockquote><p>Numpy是科学计算库,特点是有N维数组对象ndarray，是Scipy、Pandas等的基础</p></blockquote><ol><li>array结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 给列表每个元素增加1</span><br><span class="line">zy = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">zy = zy + 1</span><br><span class="line"># 错误， 因为列表不支持这样的错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用array函数</span><br><span class="line">zy = np.array(zy)</span><br><span class="line">zy += 1</span><br><span class="line">zy</span><br><span class="line"></span><br><span class="line"># 计算</span><br><span class="line">by = np.array([ 2, 3, 4, 5, 6])</span><br><span class="line">zy + by</span><br><span class="line">zy * by</span><br><span class="line">zy ** by</span><br><span class="line"></span><br><span class="line"># 取值</span><br><span class="line">zy[0]  </span><br><span class="line">zy[2:]</span><br></pre></td></tr></table></figure><ol start="2"><li>底层为创建ndarray对象，有丰富的可选参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zy.shape    # 多维数组的形状</span><br><span class="line">type(zy)    # 类型</span><br><span class="line">zy.dtype    # 数组中元素的类型, array内部必须为同一类型， 不同类型会默认进行转换</span><br><span class="line">zy.size     # 数组中元素个数</span><br><span class="line">zy.ndim     # 数组的维度</span><br></pre></td></tr></table></figure><ol start="3"><li>索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tang_array = np.array([[1, 2, 3],</span><br><span class="line">                        [3, 4, 5],</span><br><span class="line">                        [6, 7, 8]])</span><br><span class="line"></span><br><span class="line">tang_array[1]</span><br><span class="line">tang_array[1, 1]</span><br><span class="line">tang_array[:,1]</span><br><span class="line">tang_array[1,0:2]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tang_array2 = tang_array</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line"># 将tang_array2中的4 改为10</span><br><span class="line">tang_array2[1,1] = 10</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line">tang_array</span><br><span class="line"># tang_array 中的4也改为了10， 修改tang_array2,实际是指向了tang_array中的内存</span><br><span class="line"></span><br><span class="line"># 要想修改tang_array2 而不改tang_arra, 需要用copy()</span><br></pre></td></tr></table></figure><ol start="4"><li>巧用布尔类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 构造等差数组</span><br><span class="line">zy = np.arange(0, 100, 10)</span><br><span class="line">zy</span><br><span class="line"># array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构造布尔类型</span><br><span class="line">by = np.array([0, 0, 1, 0, 1, 1, 1, 0, 1, 0], dtype=bool)</span><br><span class="line">by</span><br><span class="line"># array([False, False,  True, False,  True,  True,  True, False,  True,False])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy[by]</span><br><span class="line"># array([20, 40, 50, 60, 80])</span><br></pre></td></tr></table></figure><ol start="5"><li>array数组的数值计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">zy = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">#所有数据求和 </span><br><span class="line">np.sum(zy)</span><br><span class="line"></span><br><span class="line"># 指定要按什么维度进行计算</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 0)</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 1)</span><br><span class="line"></span><br><span class="line"># 所有数据乘积</span><br><span class="line">zy.prod()</span><br><span class="line"></span><br><span class="line">zy.prod(axis = 0)</span><br><span class="line">zy.prod(axis = -1)</span><br><span class="line"></span><br><span class="line"># 最小最大值</span><br><span class="line">zy.min(axis = 0)</span><br><span class="line">zy.max()</span><br><span class="line"></span><br><span class="line"># 最大值的索引</span><br><span class="line">zy.argmax()</span><br><span class="line"></span><br><span class="line"># 均值</span><br><span class="line">zy.mean()</span><br><span class="line">zy.mean(axis = 0)</span><br><span class="line"></span><br><span class="line"># 标准差</span><br><span class="line">zy.std(axis = 1)</span><br><span class="line"></span><br><span class="line"># 方差</span><br><span class="line">zy.var()</span><br><span class="line"></span><br><span class="line"># 进行限制， 小于3的值都变成3， 大于7的值都变成7</span><br><span class="line">zy.clip(3, 7)</span><br><span class="line"></span><br><span class="line"># 进行四舍五入</span><br><span class="line">zy.round()</span><br><span class="line"></span><br><span class="line"># 进行四舍五入到第一个小数点</span><br><span class="line">zy.round(decimals = 1)</span><br></pre></td></tr></table></figure><ol start="6"><li>排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">tang_array = np.array([[1.1, 4.3, 5.2 , 5.1],</span><br><span class="line">                      [5.2, 6.4, 2.3, 4.6]])</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">np.sort(tang_array)</span><br><span class="line"></span><br><span class="line">np.sort(tang_array, axis = 0)</span><br></pre></td></tr></table></figure><ol start="7"><li>数组形状操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num</span><br><span class="line"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2, 5</span><br><span class="line">zy_num</span><br><span class="line"></span><br><span class="line"># array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num.reshape(1,10)</span><br><span class="line">#array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 增加维度</span><br><span class="line"></span><br><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line">zy_num = zy_num[np.newaxis, :]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(1, 10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num = zy_num[ :, np.newaxis]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10, 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 压缩维度</span><br><span class="line"></span><br><span class="line">zy_num = zy_num.squeeze()</span><br><span class="line">zy_num</span><br><span class="line">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 转置</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2,5</span><br><span class="line"></span><br><span class="line">zy_num</span><br><span class="line">#array([[0, 1, 2, 3, 4],</span><br><span class="line">       [5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line">zy_num.transpose()   # zy_num.T</span><br><span class="line">#array([[0, 5],[1, 6], [2, 7], [3, 8], [4, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数组的连接</span><br><span class="line"></span><br><span class="line">a = np.array([[1,2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line">b = np.array([[0, 3, 5, 7], [8, 0, 10, 21]])</span><br><span class="line"></span><br><span class="line">c = np.concatenate((a, b))</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"># array([[ 1,  2,  3,  4], [ 5,  6,  7,  8],[ 0,  3,  5,  7], [ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = np.confatenate((a, b), axis = 1)</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">np.vstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4],[ 5,  6,  7,  8],[ 0,  3,  5,  7],[ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line">np.hstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4,  0,  3,  5,  7],[ 5,  6,  7,  8,  8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a</span><br><span class="line"># array([[1, 2, 3, 4],[5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">a.flatten()</span><br><span class="line">a.ravel()</span><br><span class="line"># array([1, 2, 3, 4, 5, 6, 7, 8])</span><br></pre></td></tr></table></figure><ol start="8"><li>生成数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">np.arange(10)</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2)</span><br><span class="line"># array([ 2,  4,  6,  8, 10, 12, 14, 16, 18])</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2, dtype= np.float32)</span><br><span class="line"># array([ 2.,  4.,  6.,  8., 10., 12., 14., 16., 18.], dtype=float32)</span><br><span class="line"></span><br><span class="line"># 构造等距数组</span><br><span class="line">np.linspace(0, 10, 5)</span><br><span class="line"># array([ 0. ,  2.5,  5. ,  7.5, 10. ])</span><br><span class="line"></span><br><span class="line"># 构造行向量，列向量</span><br><span class="line">np.r_[0:10:1]</span><br><span class="line">np.c_[0:10:1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.zeros(3)</span><br><span class="line"># array([0., 0., 0.])</span><br><span class="line"></span><br><span class="line">np.zeros((3,3))</span><br><span class="line"></span><br><span class="line">np.ones(3)</span><br><span class="line"># array([1., 1., 1.])</span><br><span class="line"></span><br><span class="line">np.ones((3,3)) * 8</span><br><span class="line"></span><br><span class="line">zy_num = np.array([1,2,3, 4])</span><br><span class="line">np.zeros_like(zy_num)</span><br><span class="line"># array([0, 0, 0, 0])</span><br></pre></td></tr></table></figure><ol start="9"><li>运算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 乘法</span><br><span class="line">x = np.array([5,5])</span><br><span class="line">y = np.array([2,3])</span><br><span class="line"></span><br><span class="line">np.multiply(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">np.dot(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 1])</span><br><span class="line">y = np.array([[1, 2, 3],[4, 5, 6]])</span><br><span class="line"></span><br><span class="line">print(x * y)</span><br><span class="line">#[[1 2 3] [4 5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 2])</span><br><span class="line">y = np.array([1, 1, 1])</span><br><span class="line">x == y</span><br><span class="line"># array([ True,  True, False])</span><br><span class="line"></span><br><span class="line">np.logical_and(x,y)</span><br><span class="line">np.logical_or(x,y)</span><br><span class="line">np.logical_not(x,y)</span><br></pre></td></tr></table></figure><ol start="10"><li>随机模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 随机浮点数</span><br><span class="line">np.random.rand(3,2)</span><br><span class="line"></span><br><span class="line"># 随机整数</span><br><span class="line">np.random.randint(10, size = (2,4))</span><br><span class="line"># array([[4, 6, 7, 8], [7, 6, 2, 3]])</span><br><span class="line"></span><br><span class="line"># 随机数</span><br><span class="line">np.random.rand()</span><br><span class="line">np.random.random_sample()</span><br><span class="line"></span><br><span class="line"># 0-10中随机找三个数</span><br><span class="line">np.random.randint(0, 10, 3)</span><br><span class="line"># array([8, 6, 9])</span><br><span class="line"></span><br><span class="line"># 随机高斯分布</span><br><span class="line">mu, sigma = 0, 0.2</span><br><span class="line">np.random.normal(mu, sigma, 5)</span><br><span class="line"></span><br><span class="line"># 设置数字精度, 输出数精度为小数点后3位</span><br><span class="line">np.set_printoptions(precision = 3 )</span><br><span class="line"></span><br><span class="line"># 洗牌， 打乱排列顺序</span><br><span class="line">zy_num = np.arange(15)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</span><br><span class="line"></span><br><span class="line">np.random.shuffle(zy_num)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 1,  5,  4, 11, 14,  9,  8,  6,  7,  3,  0,  2, 10, 12, 13])</span><br></pre></td></tr></table></figure><ol start="11"><li>读取写入文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 写一个名为tang的txt文件</span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1 2 3 4 5 6 </span><br><span class="line">2 3 4 5 5 7</span><br><span class="line"></span><br><span class="line"># 读取tang文件</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;)</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line"># array([[1., 2., 3., 4., 5., 6.],[2., 3., 4., 5., 5., 7.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">a, b, c, d, e, f</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line"># 不读取第一行</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1)</span><br><span class="line"></span><br><span class="line"># 指定使用哪几列</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1, usecols = (0,1, 4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写入数组文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num)</span><br><span class="line"></span><br><span class="line"># 保存成指定格式</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;)</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%.2f&apos;)</span><br><span class="line"></span><br><span class="line"># 指定分隔符</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读写文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.save(&apos;zy_num.npy&apos;, zy_num)</span><br><span class="line"></span><br><span class="line">zy_num = np.load(&apos;zy_num.npy&apos;)</span><br><span class="line"></span><br><span class="line"># 将两个文件保存在同一文件夹，并进行读写</span><br><span class="line">zy_num2 = np.arange(10)</span><br><span class="line">np.savez(&apos;zy_npz&apos;, a = zy_num, b = zy_num2)</span><br><span class="line"></span><br><span class="line">data = np.load(&apos;zy.npz&apos;)</span><br><span class="line">data.keys()</span><br><span class="line"># [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">data[&apos;a&apos;]</span><br><span class="line"># array([[1, 2, 3],[4, 5, 6]])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      python 基础知识点学习总结。
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫学习</title>
    <link href="https://zhangandyu.github.io/2018/07/12/%E6%8A%80%E8%83%BD-python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
    <id>https://zhangandyu.github.io/2018/07/12/技能-python爬虫学习/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2020-03-21T03:09:31.386Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="爬取英雄联盟-英雄皮肤图片"><a href="#爬取英雄联盟-英雄皮肤图片" class="headerlink" title="爬取英雄联盟-英雄皮肤图片"></a>爬取英雄联盟-英雄皮肤图片</h1><ol><li><p>前言</p><blockquote><p>最近自己在学爬虫， 有天朋友问我能否爬取英雄联盟的皮肤图片到本地，好实现快速浏览，折腾了半个小时，终于成功了。</p></blockquote></li><li><p>过程</p></li></ol><ul><li>分析过程<blockquote><p>找到皮肤图片链接， 研究规律。</p><blockquote><p>在抓取图片之前，我们需要分析网址链接的构成， 以便找到其中的规律。</p></blockquote><blockquote><p><img src="https://i.loli.net/2018/07/17/5b4e086d05abd.png" alt="英雄联盟图片"></p></blockquote><p>打开英雄联盟网站, 点击其中的一个英雄， 我们可以看到一个英雄有1-6个皮肤甚至更多，且我们很容易从每个皮肤链接中找到规律。</p><p><img src="https://i.loli.net/2018/07/17/5b4e09769c56a.png" alt="英雄皮肤"></p><p><img src="https://i.loli.net/2018/07/17/5b4e0ac67e187.png" alt="狐狸皮肤"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 英雄1</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266002.jpg</span><br><span class="line"></span><br><span class="line"># 英雄2</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103002.jp</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>从以上的链接中，我们可以知道英雄皮肤的链接规律为：</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;http://ossweb-img.qq.com/images/lol/web201310/skin/small&quot; + &quot;英雄代号&quot; + &quot;0&quot; + &quot;01-10&quot;</span><br></pre></td></tr></table></figure><ul><li>找到每个英雄对应的数字代号<blockquote><p>那么我们需要解决的问题就变成了到每个英雄对应的代号是多少？</p><p>通过搜索，我们发现每个英雄对应的代号存在champion.js文件中</p><p><img src="https://i.loli.net/2018/07/17/5b4e0df090d6c.png" alt="英雄对应的代号"></p><p>从Headers中， 我们可以看到champion.js 对应的url为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;我们通过正则表达式， 把js中对应的英雄代号提取出来。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 通过以上把链接拼凑起来，我们就可以把链接对应的图片皮肤下载到本地了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>import requests<br>import re<br>import json<br>import urllib<br>url = “<a href="http://lol.qq.com/biz/hero/champion.js&quot;" target="_blank" rel="noopener">http://lol.qq.com/biz/hero/champion.js&quot;</a><br>hd ={‘User-Agent’:”Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0”}<br>data = requests.get(url,headers = hd).content<br>datas = data.decode()<br>pat = ‘“keys”:(.*?),”data”‘<br>imglist = re.findall(pat,datas)<br>datass = json.loads(imglist[0])<br>for i in datass:<br>    try:<br>        for j in range(12):<br>            try:<br>                num = str(j)</p><pre><code>            # print(num)            if len(num) == 1:                hero_num = &quot;00&quot; + num            elif len(num) ==2:                hero_num = &quot;0&quot; + num            numstr = i + hero_num            urls = &apos;http://ossweb-img.qq.com/images/lol/web201310/skin/big&apos;+ numstr +&apos;.jpg&apos;            localfile = &quot;E:/张宇个人文件/英雄联盟/&quot; + str(i) + str(num) +  &quot;.jpg&quot;            urllib.request.urlretrieve(urls, filename = localfile)        except Exception as err:            passexcept Exception as err:    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 爬取王者荣耀-英雄图片</span><br><span class="line"></span><br><span class="line">1. 代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="用python爬取王者荣耀皮肤"><a href="#用python爬取王者荣耀皮肤" class="headerlink" title="用python爬取王者荣耀皮肤"></a>用python爬取王者荣耀皮肤</h1><p>import requests<br>import re<br>import urllib</p><p>url = “<a href="http://pvp.qq.com/web201605/herolist.shtml&quot;" target="_blank" rel="noopener">http://pvp.qq.com/web201605/herolist.shtml&quot;</a><br>hd ={‘User-Agent’:”Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0”}<br>data = requests.get(url,headers = hd)<br>pat = ‘a href=”herodetail/(.*?).shtml’<br>imglist = re.compile(pat, re.S).findall(data.text)</p><p>for i in imglist:</p><pre><code># print(i)try:    for j in [1,2,3,4,5,6]:        try:            numstr = str(i)+&apos;/&apos; +str(i)+&apos;-mobileskin-&apos;+ str(j)            # print(numstr)            urls = &apos;https://game.gtimg.cn/images/yxzj/img201606/heroimg/&apos;+numstr+&apos;.jpg&apos;            print(urls)            localfile = &quot;E:/张宇个人文件/官网图片/&quot; + str(i)+ str(j)+  &quot;.jpg&quot;            urllib.request.urlretrieve(urls, filename = localfile)        except Exception as err:             passexcept Exception as err:    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"># 爬取网站图片</span><br><span class="line">1. 代码</span><br><span class="line">* 构建用户代理池</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="这里可以随意加多个浏览器"><a href="#这里可以随意加多个浏览器" class="headerlink" title="这里可以随意加多个浏览器"></a>这里可以随意加多个浏览器</h1><p>uapools = [<br>    “Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)”,<br>    “Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)”,<br>    “Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko”,<br>    “Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2”,<br>    “Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0 Safari/537.36 OPR/15.0”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17”,<br>    “Mozilla/5.0 (X11; CrOS armv7l 3428.193.0) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.126 Safari/537.22”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2”,<br>    “Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/533.9 (KHTML, like Gecko) Maxthon/3.0 Safari/533.9”,<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 爬取并下载图片</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import re<br>import requests<br>import urllib.request</p><h1 id="uapools-如上所示"><a href="#uapools-如上所示" class="headerlink" title="uapools 如上所示"></a>uapools 如上所示</h1><p>for ua in uapools:<br>    hd ={‘User-Agent’:ua}<br>    i = uapools.index(ua)</p><pre><code># 限制爬取页数， 我们爬取前10页if i &gt; 10:    breaktry:    url = &quot;http://www.iyuanqi.com/home/funimg/fun_list/m/Home/cp_uid/all/sort/30hot/p/&quot;+str(i)+&quot;.html&quot;    data = requests.get(url, headers = hd)    pat = &apos;class=&quot;lazy-img&quot; src=&quot;(.*?)&quot; data-original=&quot;&apos;    imglist = re.compile(pat, re.S).findall(data.text)    for j in range(0, len(imglist)):        try:            thisimg = imglist[j]            thisimgurl = thisimg            localfile = &quot;E:/张宇个人文件/网络图片/&quot; + str(i) + str(j) + &quot;.jpg&quot;            urllib.request.urlretrieve(thisimgurl, filename = localfile)        except Exception as err:            passexcept Exception as err:    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 爬取天善课程数据表存储到MYSQL</span><br><span class="line"></span><br><span class="line">1. 前言</span><br><span class="line">&gt; 天善智能是一个商业智能与大数据在线社区，有很多很好的学习课程。我们用爬虫来爬取网站的所有课程并存储到MYSQL数据库中， 以便于进一步的分析。</span><br><span class="line"></span><br><span class="line">2. 用python在MYSQL中创建名为zhanhyu的数据库</span><br><span class="line"></span><br><span class="line"> * 用python连接MYSQL数据库</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import pymysql</p><h1 id="因为本地mysql没有设置密码，-所以没有加password参数"><a href="#因为本地mysql没有设置密码，-所以没有加password参数" class="headerlink" title="因为本地mysql没有设置密码， 所以没有加password参数"></a>因为本地mysql没有设置密码， 所以没有加password参数</h1><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306)</p><h1 id="用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句"><a href="#用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句" class="headerlink" title="用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句"></a>用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</h1><p>cursor = db.cursor()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> * 创建一个新的数据库， 名字叫做zhangyu</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="cursor-execute-执行真正的sql语句-DEFAULT-指定默认值"><a href="#cursor-execute-执行真正的sql语句-DEFAULT-指定默认值" class="headerlink" title="cursor.execute 执行真正的sql语句, DEFAULT 指定默认值"></a>cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</h1><p>cursor.execute(“CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.  在zhangyu库中创建tianshan2_datas的数据表</span><br><span class="line"></span><br><span class="line"> * 指定在zhangyu这个数据库中运行</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306, db=’zhangyu’)<br>cursor = db.cursor()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 用sql语句创建名为tianshan2_datas的表</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>sql = ‘CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))’</p><p>curosr.exectute(sql)</p><p>db.close()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">4. 爬取天善智能网站的数据</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import re<br>import requests</p><p>for i in range(1,5):</p><pre><code># 观察天善课程链接， 找出规律thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1)# 用requests库抓取数据hd ={&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;}data = requests.get(thisurl, headers = hd)#用正则表达式进行解析title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos;price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos;numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos;title = re.compile(title_pat, re.S).findall(data.text)if(len(title)&gt;0):    title = title[0]else:    continueprice = re.compile(price_pat, re.S).findall(data.text)if(len(price)&gt;0):    price = price[0]else:    price = &apos;免费&apos;numb = re.compile(numb_pat, re.S).findall(data.text)if(len(numb)&gt;0):    numb = numb[0]else:    numb = &apos;缺失&apos;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)cursor = con.cursor()sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;try:    cursor.execute(sql, (title, price, numb))    con.commit()except:    con.rollback()con.close()</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----</span><br><span class="line">&gt; 这样，我们就成功的把爬取的数据保存到mysql数据库中，方便我们查询使用。</span><br><span class="line"></span><br><span class="line">6. 完整代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import pymysql</p><h1 id="因为本地mysql没有设置密码，-所以没有加password参数-1"><a href="#因为本地mysql没有设置密码，-所以没有加password参数-1" class="headerlink" title="因为本地mysql没有设置密码， 所以没有加password参数"></a>因为本地mysql没有设置密码， 所以没有加password参数</h1><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306)</p><h1 id="用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句-1"><a href="#用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句-1" class="headerlink" title="用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句"></a>用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</h1><p>cursor = db.cursor()</p><h1 id="cursor-execute-执行真正的sql语句-DEFAULT-指定默认值-1"><a href="#cursor-execute-执行真正的sql语句-DEFAULT-指定默认值-1" class="headerlink" title="cursor.execute 执行真正的sql语句, DEFAULT 指定默认值"></a>cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</h1><p>cursor.execute(“CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8”)</p><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306, db=’zhangyu’)<br>cursor = db.cursor()<br>sql = ‘CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))’<br>cursor.execute(sql)<br>db.close()</p><p>import re<br>import pymysql<br>import requests</p><p>for i in range(0,284):<br>    thisurl = “<a href="https://edu.hellobi.com/course/&quot;" target="_blank" rel="noopener">https://edu.hellobi.com/course/&quot;</a> + str(i+1)<br>    hd ={“user-agent”: “Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36”}<br>    data = requests.get(thisurl, headers = hd)<br>    title_pat = ‘<li class="active">(.<em>?)</em></li>‘<br>    price_pat = ‘class=”price-expense”&gt;<sub>￥</sub>(.?)‘<br>    numb_pat = ‘class=”course-view”&gt;(.*?)‘<br>    title = re.compile(title_pat, re.S).findall(data.text)<br>    if(len(title)&gt;0):<br>        title = title[0]<br>    else:<br>        continue<br>    price = re.compile(price_pat, re.S).findall(data.text)<br>    if(len(price)&gt;0):<br>        price = price[0]<br>    else:<br>        price = ‘免费’<br>    numb = re.compile(numb_pat, re.S).findall(data.text)<br>    if(len(numb)&gt;0):<br>        numb = numb[0]<br>    else:<br>        numb = ‘缺失’</p><pre><code>con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)cursor = con.cursor()sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;try:    cursor.execute(sql, (title, price, numb))    con.commit()except:    con.rollback()con.close()</code></pre><p><code>`</code></p>]]></content>
    
    <summary type="html">
    
      学习Python爬虫知识总结。
    
    </summary>
    
      <category term="数据分析技能" scheme="https://zhangandyu.github.io/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/"/>
    
    
      <category term="Python" scheme="https://zhangandyu.github.io/tags/Python/"/>
    
  </entry>
  
</feed>
