<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据异常分析方法</title>
      <link href="/2019/08/03/%E6%96%B9%E6%B3%95-%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
      <url>/2019/08/03/%E6%96%B9%E6%B3%95-%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何针对异常数据进行分析"><a href="#如何针对异常数据进行分析" class="headerlink" title="如何针对异常数据进行分析"></a>如何针对异常数据进行分析</h1><p>作为一名数据分析师， 在工作中我们经常要对异常数据进行原因分析， 那么异常排查的方法都有哪些， 今天我们就来谈一谈。 </p><p>首先，在进行分析前，我们需要做到以下几点：</p><ol><li><p><strong>对此数据的业务理解是否准确。</strong> 比如：APP的日活是如何定义的， 是用户只要启动APP，还是用户必须在APP中有点击行为。</p></li><li><p><strong>数据的指标口径是否统一。</strong>  比如：某活动页面的 uv，是通过统计用户的手机号，还是统计用户 tracking_id 。不同的统计口径会导致数据出现差异。</p></li><li><p><strong>数据的产出过程是否明确。</strong> 比如：数据是如何从日志中进行清洗，是否会存在多发或漏发数据情况。</p></li><li><p><strong>寻找相关运营或产品人员进行沟通。</strong>询问运营人员关于此数据异常的见解，往往能够提高我们的分析效率。</p></li></ol><p>接下来就是对异常原因的排查，常见的影响因素和方法有：</p><ol><li><p><strong>外部因素</strong>：时间因素、节假日活动、热点事件、政策影响等。</p></li><li><p><strong>内部因素</strong>： 部门运营活动、产品功能上线、大盘整体趋势、页面性能、SQL逻辑错误、数据指标口径调整等。</p></li><li><p><strong>多维度拆解法。</strong>从各个维度进行细分拆解，定位问题。比如：某产品活跃用户下降，那我们可以把活跃用户拆分成新用户、老用户、回流用户，然后针对不同的用户再进行细拆分析。</p></li></ol><p>在查找出异常原因之后，我们还需要做到以下两点：</p><ol><li><p><strong>持续跟踪后续数据是否再次异常。</strong>在排查出原因并采取相应措施之后，我们需要持续跟踪数据，如果数据再次异常，那么说明给出的异常原因可能是错误的。</p></li><li><p><strong>对异常原因进行梳理，文档化。</strong></p><blockquote><ol><li><strong>问题描述</strong>：什么时间、什么指标异常、异常幅度</li><li><strong>主要结论</strong>：异常因素有哪些，各自的影响程度如何</li><li><strong>后续跟进</strong>：后续的解决方案是什么，解决时间，再次验证是否异常。</li><li><strong>具体分析过程</strong>：分析过程与详细分析数据</li></ol></blockquote></li></ol><p>以上就是自己总结的数据异常原因分析，你还有哪些好用的分析方法，欢迎留言交流。</p><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s/xO2lrEXr-lCkD6ZhQluCNQ" target="_blank" rel="noopener">数据异常求生指南</a><br><a href="https://mp.weixin.qq.com/s/SW0y1zOOMdJ01REk2hprvQ" target="_blank" rel="noopener">数据分析之数据异常分析</a><br><a href="https://mp.weixin.qq.com/s/_WhFj4u9ptZa22jk2WLxDQ" target="_blank" rel="noopener">日思619.数据异常了，如何分析？</a></p><hr><h1 id="工作中存在的分析问题"><a href="#工作中存在的分析问题" class="headerlink" title="工作中存在的分析问题"></a>工作中存在的分析问题</h1><p>本周 话费账单组kpi考核同比突降67万， 领导让我分析数据异常的原因。 </p><p>在分析的过程中，自己主要犯了三个错误：</p><ol><li><p>自己一开始就对所有统计的按钮进行细拆， 而没有分功能模块进行细拆， 导致自己一开始只是看到 话费余额页面 和月账单页面下降， 而没有找到电子发票页面下降。 如果自己在细拆的对比中细心的话，自己也是可以找到的， 但是自己没有耐心做对比。 如果自己按照功能模块进行细拆对比， 就不会出现这样的情况。 </p></li><li><p>自己从一开始就没有搭建出一个整体的分析体系， 导致自己分析时，一会跑这个数据， 一会跑那个数据，从而使自己得出的结论没有说服力。<br>比如： 一开始，自己就跑话费余额数据， 但是跑着跑着发现口径有问题， 自己之前得出的结论竟然是错误的， 自己是先有了结论， 然后自己再找数据的， 这样会让自己再推翻自己的结论， 重新跑数据，特别的浪费时间。</p></li><li><p>数据的准确性不能保证， 自己跑的数据， 存在着比较明显的不合理之处， 口径不够明确， 给别人解释口径时不能够解释清楚。 </p></li></ol><hr><h1 id="如何分析业务数据"><a href="#如何分析业务数据" class="headerlink" title="如何分析业务数据"></a>如何分析业务数据</h1><p>问题陈述、产生假设、收集数据、分析数据、获取结论、采取行动</p><ol><li>评估和定位问题</li></ol><p>在深入研究任何类型的数据之前，应该快速找到你需要解决的真正问题，并用最简单的话定义它</p><p>如果无法用简单的语言解释你要解决的业务问题，那么任何数据分析都无法解决问题。</p><ol start="2"><li>快速评估和定位问题的三问：</li></ol><ul><li><p>这是否是系统异常导致的问题？</p><blockquote><p>下载量下跌，但激活量没有，也许是下载数据没有埋点或埋点错误？</p></blockquote></li><li><p>这是更大问题的预兆吗？</p><blockquote><p>注册号码的下降是网站故障的指示吗？</p></blockquote></li><li><p>你在看一个重要的度量指标吗？</p><blockquote><p>如果网站的转化率下降，但原始注册量没有下降， 那么就从一个紧急事件变成了一个谜团待揭开</p></blockquote></li></ul><ol start="3"><li>确定潜在原因</li></ol><ul><li><p>经验检索，快速寻找原因<br>根据经验，寻找任何明显的可能原因或问题的答案, 当你检查显示问题的来源或报告后，是否有任何异常原因立即浮现在脑海中？</p><blockquote><p>例如，你的电子商务网站的ssl认证可能过期，导致浏览器弹窗窗口警告数据不安全，从而显著降低购物车转化率</p></blockquote></li><li><p>询问相关人员原因<br>这个问题会影响和涉及其他团队吗？如果是这样，他们是否对可能的原因有任何了解？即使问题与其他团队之间没有明显的联系，也有必要咨询一下。</p><blockquote><p>营销经理可能会问客户支持： 我注意到注册数据下降了，你能否想一想过去几周你发现过什么相关的变化吗？</p></blockquote></li><li><p>创建假设<br>一个假设知识一个尚未得到证实的有根据的猜测。 在分析数据之前，清楚地说明问题的几个可能原因非常重要，这有助于防止常见的数据分析误区。</p></li></ul><blockquote><p>导致注册量突然下降的假设：</p><ul><li>某些地区的公众假期</li><li>最近对营销网站的更改</li><li>星期一网站中断导致注册过程中出现错误</li><li>转换率下降减少了注册量</li><li>产品页面在某搜索排名下降到搜索结果的第二页</li></ul></blockquote><p>技术思维的方法——科学假设需具备的条件：</p><ul><li>涉及一个自变量和一个因变量</li><li>它是可测试的</li><li>它是可证伪的</li></ul><blockquote><p>有时查看数据可能会产生一个新的假设，需要再次测试。最终，我们的假设会在下一步通过数据分析得到证实或反驳。</p></blockquote><ol start="4"><li>分析数据</li></ol><ul><li><p>分割并确定相关数据指标<br>根据你的假设，你需要查看哪些数据？哪些指标可以帮助你证明或者反驳假设？</p><blockquote><p>你可以按国家/地区， 渠道和网络会话持续时间细分注册次数，以测试你的假设</p></blockquote></li><li><p>注意你的数据<br>基于你已知的业务指标，你可以判断数据是否出现异常？如果无基准线，请用历史数据作为起点。</p><blockquote><p>app注册量同比下降20%</p></blockquote></li><li><p>评估异常或趋势的影响<br>经过前两个步骤，你要查看发现的趋势/异常是否足以解释问题</p></li></ul><blockquote><p>在寻找数据中的异常或趋势时，要注意这些异常或趋势不仅要具有统计意义，也要具有实际意义。我们需要弄清楚是什么会对我们发现的问题产生实际影响。</p></blockquote><p>统计显著性检验用于确定你注意到的异常是由于抽样误差还是适用于所有对象。 </p><hr><p>在上篇我们说到了如何对数据异常进行分析，这次我们来一道具体的数据分析面试问题。</p><p>以下是一家公司APP一周每天的活跃率，如何你是分析师：</p><ol><li>从数据中你看到了什么问题？你觉得背后的原因是什么？</li><li>如果你的老板要求你提一个运营运营改进计划，你会怎么做？</li></ol><p>分析答案：</p><ol><li><p>数据质量<br>数据采集， 数据接口， 数据存储</p></li><li><p>产品质量<br>版本更新， 版本BUG</p></li><li><p>渠道质量<br>渠道买量造假</p></li><li><p>活动质量<br>是否有重大活动</p></li><li><p>政策问题 –&gt;</p></li></ol><hr><h1 id="数据异常排查"><a href="#数据异常排查" class="headerlink" title="数据异常排查"></a>数据异常排查</h1><p>清楚以下三点：</p><ol><li>业务理解</li><li>指标口径</li><li>当前数据产出过程</li></ol><p>数据异常原因分析：</p><ol><li>数据有问题</li></ol><ul><li>将时间轴拉长，看数据是近期异常还是历史异常，对比近三个月数据。</li><li>查看和该指标关联的其他核心指标是否也异常，如果异常，也要一并查看。</li><li>核查埋点是否有问题， 数据是否存在多发情况。</li><li>业务口径是否有问题， 取的数据是不是真正需要的数据。</li><li>写的sql逻辑是否有误， 或者android 和 ios 数据没有相加。 </li></ul><ol start="2"><li>业务发生了变化</li></ol><ul><li>同口径下，同比环比数据是否异常， 在长时间轴的条件下进行对比</li><li>进行细拆， 看到底是哪个指标的数据出现了异常， 将该指标和相关的指标一起进行对比</li><li>与负责此指标的负责人进行沟通， 询问他们近期是否做了推广活动。</li><li>产品最近是否发布了新版本，或者某个功能改版存在缺陷问题。 </li></ul><ol start="3"><li>其他因素影响</li></ol><ul><li>假期效应： 开学季， 暑期， 四大节日，当地节日</li><li>热点事件：常规热点如运动会，世界杯，其他热点事件</li><li>活动影响： 双11， 618， 支付宝送红包</li><li>政策影响： 金融监管</li><li>底层系统故障： 服务器迁移导致数据丢失</li><li>存在外部刷量作弊情况</li><li>统计口径： 业务逻辑进行了更改， 之前某业务有统计， 但现在不统计了。  数据计算方式改变</li></ul><p>要对异常排查进行闭环</p><ol><li>持续跟踪后期数据是否再次异常<br>比如7.0版本数据存在多发现象， 但7.1版本开发说已更改， 当7.1版本发布之后， 要及时去查看数据是否再次异常。 </li><li>对数据异常一定要记录， 对异常口径要留文档。</li><li>邮件化， 当数据异常排查原因查明， 并且确认更改之后， 发邮件给相关方， 描述数据异常的影响范围和主要结论。 </li></ol><p>作为一名数据分析师， 一定要经常去看这三种报表，培养自己的数据敏感度，了解业务的各种核心指标。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 异常分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用环境来辅助自己进步</title>
      <link href="/2019/08/02/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5/"/>
      <url>/2019/08/02/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%88%A9%E7%94%A8%E7%8E%AF%E5%A2%83%E6%9D%A5%E8%BE%85%E5%8A%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BF%9B%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>自己下班或者周末在房间，总是把大量的时间用来刷微博或者刷剧。虽然一直刷一直爽，但自己总是有一种虚度时间的空虚感，如何改变自己下班和周末的状态，成了自己最近在思考的问题。 </p><p>最近在学习陈海贤的《自我发展心理学》，刚好说到了自己的这种现象，并给出了一种利用环境来促使改变的方法，对自己启发很大，今天就来介绍一下这种方法。</p><p>首先是融入到积极的环境中去。要想学习就去图书馆、自习室，要想锻炼就去体育场、健身房。我们心中其实都有一个关于“特定空间”的假设，在假设中，对于公司、图书馆这样的空间就是用来工作学习，对于自己寝室的假设肯定是用来休息娱乐的。如果你要让自己在宿舍这样的空间中好好学习工作，就得付出比在图书馆多几倍的努力才行，还不一定能学进去。所以，周末能去图书馆上自习就绝不在家办公， 让自己融入到特定的环境中去。</p><p>当然，如果要学习就要去图书馆，那也不现实。如何在自己的房间中也能被环境所带动呢，文中介绍了第二种方法，那就是在某个特定的环境中只做一件事情。</p><p>比如：你可以要求自己在这张书桌上只作跟工作学习有关的事情， 如果想刷微博，看电视，那就换个地方，可以坐沙发上。</p><p>背后其实也是利用了我们心中对“特定空间”的假设，如果你在这个书桌上进行娱乐活动，那么这个书桌作为你心中假设的环境就会破坏掉。平常在一个特定的空间里只做这一件事情， 慢慢这个习惯会形成稳定的心理预期，会给自己一种强烈的心理暗示，从而帮助自己进行改变。</p><p>这促使了我对之前行为的理解，当自己上完班回家之后，本身意志力就消磨的七七八八了，再要用所剩无几的意志力抵抗娱乐去学习，自己的大脑肯定不干。周末在房子里大脑肯定也是怎么舒服怎么来。</p><p>我自己针对性的采取了以下几种方法：</p><ol><li><p>最近下班回家之后，先休息一个小时左右，恢复一下意志力，再起来学习工作，感觉效率到提升了不少。</p></li><li><p>指定特定的桌子只用来办公和学习， 如果自己想刷微博或者刷剧， 不要在这张桌子上进行。 （还在努力实践中）</p></li><li><p>周末能去石景山图书馆就尽量不要在房子呆着。</p></li></ol><p>以上就是自己最近关于如何促进改变的一些小方法，你还有哪些好用的方法，欢迎留言交流。 </p>]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理 </tag>
            
            <tag> 方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用数据说话</title>
      <link href="/2019/07/29/%E6%96%B9%E6%B3%95-%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E6%8D%AE%E8%AF%B4%E8%AF%9D/"/>
      <url>/2019/07/29/%E6%96%B9%E6%B3%95-%E5%A6%82%E4%BD%95%E7%94%A8%E6%95%B0%E6%8D%AE%E8%AF%B4%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何用数据说话"><a href="#如何用数据说话" class="headerlink" title="如何用数据说话"></a>如何用数据说话</h1><p>背景-冲突-疑问-回答</p><p>作为一名数据分析师， 经常要写很多的运营分析报告， 但我发现自己写完的分析报告交给领导看， 总是被领导指正说报告的说服力不够。<br>经过这一段时间的磨练， 我也思考了如何才能增加报告的说服力。</p><p>一份运营分析报告， 看似简单，描述自己通过数据观察到的现象， 暴露公司运营中存在的问题， 但你揭露公司的问题， 同时也对相应的运营人员的结果的拷问， 人家肯定会质疑你报告的准确性， 如何才能让别人心服口服呢， 在最近的工作中，我总结出以下三点：</p><ol><li><strong>要用数据说话。</strong> 能用数据说明的，绝对不要用莫能两可的语言。 比如：本周活跃用户数比上周好。 这样的语言让人感觉很空洞， 就不如写成本周活跃用户较上周增长了20万用户， 增长表现良好。 要给出一个结论， 一定要有数据的支撑才行。 </li></ol><ol start="2"><li><p><strong>对复杂的数据口径进行说明。</strong> 不要以为运营人员能够能够很容易理解你的统计指标与口径， 要把他们当小白一样去对待才行。比如留存率是如何计算的， 有时你不必特意的去强调， 但是必要的标注还是得有。免得运营人员多次询问。</p></li><li><p><strong>对数据进行多维比较，佐证结论。</strong> 有时你通过一个维度的数据比较很难将问题说明清楚，需要多维比较。 比如， 本周用户环比上周下降了20%， 那么这能说明本周比上周运营的差吗， 会不会存在月初月末周期的影响。如果要排除这些因素的话， 其实还需要求上月同时间段的环比数据。 如果上月同时间段用户比上周只下降了5%， 那证明可能不是时间的原因。 </p></li><li><p><strong>对于别人给出的原因你也需要数据验证。</strong> 有时我们发现某个数据下降，然后去问运营的负责人情况， 在他说完情况之后， 我们应该再根据他的情况进行数据验证， 而不是轻信别人，直接将这个原因写到报告中去。 </p></li><li><p><strong>报告要有结论和建议。</strong> 一份分析报告中， 最难的部分就是分析的结论和建议， 很多时候，我们只是简单的描述统计，而要做到逻辑和建议， 其实是一件很难的事情。 </p></li><li><p><strong>报告的内容和布局要有逻辑性。</strong> 首先，对于分析的内容， 要保证逻辑正确，避免给出引导运营错误的结论。 比如：一个用户的行为路径分析， 必须保证一个路径下转化率必须是同一个口径。 而不能与第二个目的进行对比。避免引导运营错误。 其次，报告的整体排版必须遵循一定的逻辑， 不能说用户行为，突然就跳到用户充值了。</p></li></ol><p>最后， 把自己写好的分析报告给领导看下， 有时他们的建议能够弥补我们在思维视角上的缺陷， 更快的提高我们的分析撰写能力。 </p><p>当然， 以上步骤只是我工作中的一点总结，仅供参考。每个公司，每个团队不一样， 要求的分析报告的侧重点不一样，但我们撰写分析报告的目的都是一样的：希望能够指出部门运营中的不足，说服运营人员进行迭代改进。 </p><p>你还有哪些能够增加分析报告说服力的技巧， 欢迎一起分享交流。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改版分析</title>
      <link href="/2019/06/22/%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90/"/>
      <url>/2019/06/22/%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="频道改版分析"><a href="#频道改版分析" class="headerlink" title="频道改版分析"></a>频道改版分析</h1><h2 id="1-分析目的"><a href="#1-分析目的" class="headerlink" title="1.分析目的"></a>1.分析目的</h2><p>  新频道的效果怎么样？</p><h2 id="2-分析方向"><a href="#2-分析方向" class="headerlink" title="2.分析方向"></a>2.分析方向</h2><ol><li><p>新频道整体改版效果分析。</p></li><li><p>新频道各部分细拆分析<br>新频道各主要区域细拆，看各区域数据是上升还是下降。</p></li><li><p>新频道重点问题分析<br>主要功能点流量入口修改后，流量如何分布。</p></li></ol><h2 id="3-分析思路"><a href="#3-分析思路" class="headerlink" title="3. 分析思路"></a>3. 分析思路</h2><h3 id="3-1-新版本整体改版效果分析"><a href="#3-1-新版本整体改版效果分析" class="headerlink" title="3.1 新版本整体改版效果分析"></a>3.1 新版本整体改版效果分析</h3><ol><li><p>改版后，新频道是否受欢迎。<br>衡量参数：</p><ul><li>页面访问uv占比大盘</li><li>日均访问uv点击转化率</li><li>日均点击uv占比大盘</li><li>日均点击uv人均点击次数</li><li>次1日留存</li><li>次3日留存</li><li>次7日留存</li></ul><p>说明:</p><ul><li><p><strong>频道访问uv占比大盘</strong>，数据提升，说明频道改版后，用户更喜欢访问此频道。（用户访问此频道后，并不一定会在频道内产生点击）</p></li><li><p><strong>转化宽度： 日均访问uv点击转化率</strong> = 频道内点击uv / 频道内访问uv，点击转化率提升，说明用户查看此频道后，频道内功能点改版后对访问此频道的用户更有吸引力。</p></li><li><p><strong>日均点击uv占比大盘</strong>，数据提升，说明改版后吸引了更多的用户来进行点击。</p></li><li><p><strong>转化深度：日均点击uv人均点击次数</strong>，数据提升，说明改版后，用户的点击频率也有所增加。</p></li><li><p><strong>用户粘度：频道访问留存率提升</strong>， 说明改版后，此频道的用户粘性也在增加。</p></li></ul></li></ol><ol start="2"><li><p>改版后，频道留存率上升原因分析<br>主要为说明是某功能点使频道整体留存率上升。</p><p>公式：</p></li></ol><ul><li><p>频道留存率 = A用户数 <em> A留存率 + 其他用户数 </em> 其他留存率</p><p>举例：</p><ul><li>旧版次7日留存率 = 26.8%签到用户 <em> 46.7%留存率 + 73.2%其他用户 </em> 24.7%留存率 = 30.6%</li><li><p>新版次7日留存率 = 17.5%签到用户 <em> 48.8%留存率 + 82.5%其他用户 </em> 24.9留存率 = 29.1%</p></li><li><p>说明：新版本频道次7日留存率下降1.5，主要是由于9.3%的用户次7日留存率从46.7%下降到24.9%</p></li></ul></li></ul><h3 id="3-2-新频道各坑位细拆分析"><a href="#3-2-新频道各坑位细拆分析" class="headerlink" title="3.2 新频道各坑位细拆分析"></a>3.2 新频道各坑位细拆分析</h3><ol><li><p>对频道中相同功能点进行新旧版本对比, 衡量参数：</p><ul><li>各个坑位点击uv占比访问uv</li><li>各个坑位次7日留存率细拆</li></ul></li><li><p>对1中数据差异较大坑位进行具体原因分析</p><ul><li>对各模块坑位具体原因进行分析说明</li></ul></li></ol><h3 id="3-3-对改版后的某主要功能点的流量结构变化进行分析"><a href="#3-3-对改版后的某主要功能点的流量结构变化进行分析" class="headerlink" title="3.3 对改版后的某主要功能点的流量结构变化进行分析"></a>3.3 对改版后的某主要功能点的流量结构变化进行分析</h3><ul><li>对新旧不同版本的流量结构进行梳理，找出主要流量入口变化，并进行说明。 </li><li>用户究竟是如何使用产品新功能的，是否符合你预期设想的那样，还是说用户自己创造出了新的玩法</li></ul><h3 id="3-4-对产品流程转化率是否有提升"><a href="#3-4-对产品流程转化率是否有提升" class="headerlink" title="3.4 对产品流程转化率是否有提升"></a>3.4 对产品流程转化率是否有提升</h3><ul><li>去观察整个产品的流程转化率是否因为产品迭代改版而有所提升。</li><li>查看转化漏斗，改变前后，流程的转化数据是否发生变化，每个小环节的漏斗转化率有什么变化</li></ul><hr><!-- <!-- ## 其他具的操作只是帮你快速业务流程梳理出关键性的分析和指标体系，那么这些体系和指标的度量和之间的关系就要依靠统计学去界定和规范一个网站改版了，新版的页面没有改变原来的交互操作，只是改变了视觉样式，用户访问量和点击量变化了，这些变化是好是坏?1、我们已知的是改版前后点击量的数据和用户访问量的数据2 、我们想知道这个变化是好是坏要怎么做?算一下改版前后用户的百分比和点击量的百分，如果改版后用户量下降了，点击量下降了是不是改版就不成功?显然我们不能如此简单的看问题。要比较这两个样本，我们可以使用T检验。T检验(Student’s t test)是用于小样本(样本容量小于30，总体标准差σ未知的正态分布)的两个平均值差异程度的检验方法。我的置信区间是95%，所以如果sig<.05就代表差异显著。从表上看，改版前后点击量和用户数两项上差异并不显著，所以我们可以认为这次改版至少没引起什么不良的影响。当然现实问题往往更复杂，仅就改版为例，我们需要考虑很多问题，例如：1、改变了哪些内容? 外观还是交互方式?或者外观+交互方式?布局有什么变化?交互方式的变化对用户完成一个任务所需的步骤或点击次数是否有改变?2、改版前的数据采集了多少天?改版后的数据采集了多少天?3、改版前后的时期在每一年的相应劫夺，用户的访问量是否有显著变化?趋势是怎样的?  ---------------------<!-- # 8.  数据分析方法案例如何提高全站留存率？1. 选择高留存的行为，并选择其中比较容易扩大使用者面积的几个，在产品功能层面放大，让更多的人看到并发生转化，从而提升留存。2. 评估最终效果时，首先评估该功能的使用人群和占比是否有效提升，有则认为改进有效3. 以上主要因为产品在改进期间会同时发生很多其他改进，也会有各种不同的市场，运营活动，单纯用留存来评估，无法有效验证。例如：即刻产品的核心功能之一就是内容的分发，用户绝大多数的时间都在浏览关注、推荐和动态页的内容与评论。按照用户使用这些内容模块的行为，可以按其门槛和深浅分为路人行为（如浏览帖子）、围观行为（点击并查看评论）、普通参与行为（点赞、转发）、深度参与行为（发布评论）等。通过留存分析功能，发现行为深度越深，用户的留存就越高。但由于扩大发生参与行为的门槛过高，落地性也就较差。因此，选择围观行为，通过放大其面积来提升用户全站留存，所以，就在产品信息流列表页露出一条热评，一方面让更多的用户看到最精彩评论，另一方面更有力的引导用户点击查看更多内容。新增热评功能后，成功将阅读评论的用户比例提升，并且成功提高了全站留存 -->]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 改版分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建业务运营指标</title>
      <link href="/2019/05/12/%E6%96%B9%E6%B3%95-%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/"/>
      <url>/2019/05/12/%E6%96%B9%E6%B3%95-%E5%B8%B8%E7%94%A8%E6%8C%87%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>作为一名数据分析师，在工作中通常需要一些指标来衡量数据发展的好坏，毕竟，如果你不能衡量它，那么你就不能增长它。 那么数据分析中常见的指标都有哪些，如何在工作中制定业务指标呢，今天的文章来详细探讨一下。</p><h1 id="指标划分的整体思路"><a href="#指标划分的整体思路" class="headerlink" title="指标划分的整体思路"></a>指标划分的整体思路</h1><h2 id="1-明确公司目前的核心指标"><a href="#1-明确公司目前的核心指标" class="headerlink" title="1. 明确公司目前的核心指标"></a>1. 明确公司目前的核心指标</h2><p> 这也是一级指标，用来指引公司的战略目标。</p><ul><li>明确我们需要研究公司目前都有哪些业务， 这些业务在行业中有没有一些标准的指标？ 如大目标是营收， 那么更多的付费用户能带来营收，更长的生命周期能带来营收，更高的客单价能带来营收，将一级级指标分配个多个团队或多个时间段来执行。</li></ul><h2 id="2-明确部门的核心指标"><a href="#2-明确部门的核心指标" class="headerlink" title="2. 明确部门的核心指标"></a>2. 明确部门的核心指标</h2><p> 根据公司的一级指标进行拆解，明确公司各个部门的二级指标。</p><ul><li>我们要根据具体的职责来确定指标。 比如销售部门， 则gmv,客单价，客复购率等，都是我们需要追踪的指标。</li><li>认知阶段，很多都是市场部、品牌部、渠道从部负责，那么这样指标有问题，你就知道找谁背锅了。 </li></ul><h2 id="3-明确到个人的核心指标"><a href="#3-明确到个人的核心指标" class="headerlink" title="3. 明确到个人的核心指标"></a>3. 明确到个人的核心指标</h2><p> 根据对部门二级指标的拆解，明确部门个人的三级指标. </p><ul><li>比如某人负责推广，则推广的流量， 转化率则就需要进行追踪， 对于数据异常，则能够追踪到某个员工具体的行为。 </li></ul><h2 id="4-明确每个业务动作的指标"><a href="#4-明确每个业务动作的指标" class="headerlink" title="4. 明确每个业务动作的指标"></a>4. 明确每个业务动作的指标</h2><p> 每一个业务动作都话一个方框，注明什么动作，再补充这个动作需要哪些指标，使业务和指标之间的关系明确。</p><h2 id="5-学会跨部门背指标"><a href="#5-学会跨部门背指标" class="headerlink" title="5. 学会跨部门背指标"></a>5. 学会跨部门背指标</h2><p>  很多部门的指标比较单一，比如渠道部只负责拉点击，不负责注册，那么就需要通过指标的表现和系统性，考虑跨部门背指标，或者用权重的方式去解决，让领导去拍板。</p><h2 id="6-指标追踪"><a href="#6-指标追踪" class="headerlink" title="6 . 指标追踪"></a>6 . 指标追踪</h2><p> 通过日报、周报、月报的数据汇报，来说明业务运营的问题，促进公司业务更好的发展。</p><h1 id="对具体运营指标进行拆解-AARRR模型"><a href="#对具体运营指标进行拆解-AARRR模型" class="headerlink" title="对具体运营指标进行拆解-AARRR模型"></a>对具体运营指标进行拆解-AARRR模型</h1><h2 id="获取用户"><a href="#获取用户" class="headerlink" title="获取用户"></a>获取用户</h2><p> 核心： 找到获客成本较低且用户质量较高的渠道，通过砸钱让产品在某渠道进行曝光，并将用户转化成产品用户</p><p>常见的指标： </p><ul><li>安装用户数</li><li>激活用户数</li><li>一次会话用户数<br>  新用户下载完APP， 仅打开过产品一次，且该次使用时长在2分钟以内。（避免机器刷单）</li><li>CPM - 每千人成本<br>  广告展示时就向广告主收费，以曝光为目的，不强调实际获客效果。 倾向于保护流量主利益。</li><li>CAC - 每点击成本<br> 用户发生点击行为时向广告主收费。 CAC = 新增用户总投入 / 新增用户总数</li><li>CPA - 每行动成本<br> 以后端收费为主，也就是用户看到广告并点击后，有进一步了解的欲望，完成某些特定行为， 如下载APP、预约报名或购买了产品。  倾向于保护广告主利益。</li><li>CPPC - 每付费用户的获取成本 </li><li>CPS  - 以实际销售额换算广告金额<br> 类似销售提成</li><li>CPD - 每下载成本</li><li>CPT - 每时间段成本<br> 例如： 这个位置一个星期多少钱</li><li>ROI - 投资回报率<br> ROI = 销售所得利润 / 广告成本 * 100%</li></ul><hr><h2 id="提高用户活跃度"><a href="#提高用户活跃度" class="headerlink" title="提高用户活跃度"></a>提高用户活跃度</h2><p> 提高产品使用粘性，提升用户使用深度。</p><ul><li>DNU - 日新增用户数</li><li>DAU - 日活跃用户数</li><li>WAU - 周活跃用户数量</li><li>MAU - 月活跃用户数</li><li>ACU - 平均同时在线用户数</li><li>PCU - 最高同时在线用户数</li><li>UV - 访问用户数</li><li>PV - 点击量</li><li>人均点击次数 = 访问量/ 点击量</li><li>CTR - 点击率<br> 点击量 / 曝光量</li><li>TS - 用户平均在线时长</li><li>人均启动次数</li><li>N次操作占比</li><li>用户行为路径</li><li>用户访问频次</li><li>跳出率<br> 用户打开网站的某个网页， 然后直接退出网站。跳出率是直接衡量网页（网站）对“新用户”吸引力的重要指标<br> 例如： 100个人进入该页面，5个人直接从该页面离开该网站，则跳出率为5%。</li><li>退出率<br> 从该页面离开网站的次数占该网页总浏览次数的比例。退出率则是综合衡量用户离开网站行为的重要指标（也可能满足需求了就离开了）<br> 例如： 20个人从该页面离开网站，该页面的总浏览量为200次，则退出率为10%。</li><li>用户会话次数<br> 用户在时间窗口的所有行为集合。 例如：用户打开APP， 搜索商品，浏览商品，下单并支付，最后退出，整个算一次会话。<br> 会话时间，网页端用户超过30分钟再次操作，算第二次会话。 移动端的时间窗口为5分钟。 </li><li>功能渗透率<br> 功能使用用户数 占 总活跃用户数</li><li>新老访客占比：衡量网站的生命力</li><li>访客时间： 衡量内容质量</li><li>访客平均访问页数：衡量网站对访客的吸引力，访问深度</li><li>访客来源： 访客从哪里来</li><li>用户行为转化率</li><li>首页访客占比：衡量网页结构，对新用户导航是否友好</li><li>TGI ： [目标群体中具有某一特征的群体所占比例 / 总体中具有相同特征的群体所占比例] * 100<br>例如，在15-24岁的人群中，有8.9%的人过去一年内服用过斯达舒，而在总体人群中，服用过斯达舒的人数比例为6.6%，则斯达舒在15-24岁人群中的TGI指数是134.9，这说明，斯达舒主要定位在15-24岁的人群中。<br>TGI指数表征不同特征用户关注问题的差异情况，其中TGI指数等于100表示平均水平，高于100，代表该类用户对某类问题的关注程度高于整体水平</li></ul><hr><h2 id="提高留存率"><a href="#提高留存率" class="headerlink" title="提高留存率"></a>提高留存率</h2><p> 如何让用户不断的使用我们的产品， 减少用户的流失，提升用户的粘性。</p><ul><li>次日留存率</li><li>次3日留存率</li><li>次7日留存率</li><li>30日留存率</li><li>回流率<br>   用户在使用该App离开的N天/周/月之后，再次使用该App的比例</li><li>用户流失率</li><li>用户生命周期（周期/(1-周期内新增留存率))</li><li>功能使用率<br>   衡量产品功能是否受用户欢迎</li><li>用户忠诚指数<br>   忠诚指数是对活跃留存的再量化。活跃仅是产品的使用与否，A用户和B用户都是天天打开App，但是B产生了消费，那么B比A更忠诚。</li></ul><h2 id="提高收入"><a href="#提高收入" class="headerlink" title="提高收入"></a>提高收入</h2><ul><li>pu 付费用户</li><li>CR 付费转化率<br> 注册用户到付费用户的转化率</li><li>ARPU 平均每用户收入</li><li>ARPPU 平均每付费用户收入</li><li>APA 活跃付费用户</li><li>PUR 用户付费率  APA / AU</li><li>LTV 生命周期价值<br>   如果我们获取到1万个用户需要花10万元，那么，如果这1万个用户从安装到卸载能够给公司带来大于10万元的收益，则这个产品就是可盈利的。</li><li>PBP 回收期<br>   当我们预测到产品是可盈利的之后，所付出的成本需要多久才能收回，产品才能开始真正地盈利，这个时间就是回收期PBP，为了保证公司资金链不出问题，一般认为PBP能够在一年以内是最好的。</li><li>GMV 网站成交金额<br>  拍下订单的总金额，包含付款和未付款两部分</li><li>支付uv</li><li>支付pv</li><li>访购率</li><li>人均订单数</li><li>客单价<br>  总收入/订单数</li><li>复购率<br>   单位时间内，消费两次以上的用户数占购买总用户数</li><li>退货率</li><li>消费次数</li><li>消费频率</li><li>订单量</li><li>购买间隔</li><li>APPU 每个用户的平均利润</li></ul><hr><h2 id="用户推荐"><a href="#用户推荐" class="headerlink" title="用户推荐"></a>用户推荐</h2><p>  通过提升产品的竞争力， 使用户给其他人推荐此产品。</p><ul><li>分享率</li><li>分享次数</li><li>K因子<br> 即每一个用户能够带来几个新用户</li><li>病毒传播周期<br> 假设1000位种子用户在10天邀请了1500位用户，那么传播周期为10天，K因子为1.5。</li><li>NPS净推荐值<br> 计量某个客户将会向其他人推荐某个企业或服务可能性的指数<br> 净推荐值(NPS)=(推荐者数/总样本数)×100%-(贬损者数/总样本数)×100%</li></ul><ol start="6"><li>其他缩写</li></ol><ul><li>PP —— 英文percent point的简称，意思为百分比</li><li>UGC —— 用户原创内容</li><li>SEO —— 搜索引擎优化</li><li>CR —— 转化率 ： 衡量转化环节的好坏</li><li>visit —— 用户访问次数 ： 用户来到网站-关闭网站页面</li><li>Landing Page  —— 着陆页 ： 用户从外部链接直接跳转到的第一个页面</li><li>Bounce Rate —— 跳出率 ： 用户来到网站，没有做任何行为就指标离开网站。</li><li>Referrer —— 引荐流量</li><li>PR —— 公众关系， 组织机构与公众环境之间的沟通与传播关系。</li></ul><hr><p>参考资料：</p><blockquote><p><a href="https://mp.weixin.qq.com/s/TkLtvyAC-t2Nrv4ApGc1Qg" target="_blank" rel="noopener">学习数据分析，从了解方法论开始</a><br><a href="http://www.woshipm.com/operate/669526.html" target="_blank" rel="noopener">万字干货总结：最全的运营数据指标解读</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用指标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>营销活动分析</title>
      <link href="/2019/04/22/%E6%96%B9%E6%B3%95-%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E5%88%86%E6%9E%90/"/>
      <url>/2019/04/22/%E6%96%B9%E6%B3%95-%E8%90%A5%E9%94%80%E6%B4%BB%E5%8A%A8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="营销活动分析"><a href="#营销活动分析" class="headerlink" title="营销活动分析"></a>营销活动分析</h1><h2 id="营销活动分析介绍"><a href="#营销活动分析介绍" class="headerlink" title="营销活动分析介绍"></a>营销活动分析介绍</h2><p>互联网公司经常会做一些运营活动，比如比如当当网的限时优惠活动，春节期间支付宝的集五福活动等。这些活动花费了公司大量的人力与财力， 那么活动的效果该如何评估呢？<br>这就需要用数据来说话。 数据分析在营销活动中的任务，不仅是在活动后对数据进行分析， 更要在活动前、活动中、活动后三个方面来都进行跟踪。 </p><h2 id="活动前期："><a href="#活动前期：" class="headerlink" title="活动前期："></a>活动前期：</h2><ol><li>目的</li></ol><ul><li>和运营人员商定好本次活动的目标，这次活动主要是为了：拉新、促活还是品牌推广，没有目标的活动不是好的运营活动。 </li></ul><ol start="2"><li>埋点</li></ol><ul><li>和运营人员商定好这次活动都需要了解哪些数据，针对需要采集的页面位置，写好埋点方案：字段名、埋点位置、上报方式</li><li>和研发人员沟通埋点方案，数据埋点完成后，测试采集数据是否准确， 避免采集数据有误。 </li></ul><ol start="3"><li>搭建指标体系</li></ol><ul><li>写出这次活动自己都需要哪些指标，如何计算， 提前搭建好指标体系</li><li>提前订好这次活动自己需要输出哪些数据，用什么形式来进行展现， 定好数据的输出格式。 </li></ul><h2 id="活动中期"><a href="#活动中期" class="headerlink" title="活动中期"></a>活动中期</h2><ol><li>观察活动前3天的数据</li></ol><ul><li>观察活动第1天的数据， 详细查看各指标体系的报表数据是否有异常，对于发现的问题做到及时修改。</li><li>观察1-3天的数据趋势， 预估活动目标的完成度， 考虑活动目标是否需要调整。 </li></ul><ol start="2"><li>活动数据及时数据</li></ol><ul><li>定时输出活动战报，及时发现数据异常波动， 让运营人员和项目领导知道数据的实时动态。 </li><li>对于长期活动，第一周后需要进行一次复盘，将结论同步给管理层， 让更高视野的人给建议。 </li></ul><h2 id="活动后期"><a href="#活动后期" class="headerlink" title="活动后期"></a>活动后期</h2><ol><li>活动的效果</li></ol><ul><li><p>短期效果<br>活动对大盘的影响</p><ul><li>参与活动uv</li><li>打开APP， 首次进入活动uv</li><li>大盘的日环比、周同比</li></ul><p>新增用户<br>拉动低活跃用户重新活跃数<br>目标完成度<br>品牌传播指数</p></li></ul><ul><li>长期效果<br> 新增用户留存率<br>低活用户留存率</li></ul><ol start="2"><li>活动优化</li></ol><ul><li>活动主漏斗数据转化率</li><li>活动功能模块渗透率</li><li>用户反馈</li></ul><ol start="3"><li>活动报告</li></ol><ul><li>在活动结束1-2周内输出，要有时效性。</li><li>活动与活动之前的数据对比更能说明问题</li><li>思考每次活动的本质和意义。</li><li>敢于暴露问题， 把已知的事实告诉上级，邮件同步给运营负责人</li><li>涉及到钱的问题， 需要让业务方给， 邮件说明情况，钱问题比较敏感。</li></ul><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><p>支付宝集五福活动</p><ul><li>带来新增用户，提升用户的活跃度，品牌传播量</li></ul><p>在活动开始之前应该确定一个重点提升的核心数据。 这样的数据包括新用户注册、用户活跃度、用户付费转化、产品交易额、品牌知名度（百度指数、新浪指数等）等等。 </p><p>非商品交易类的互动性活动，需要关注：</p><ul><li>产品核心数据（日活、新用户) 的提升效果。</li><li>专题页面的uv、pv,</li><li>活动产生的用户互动量和人均互动次数、分享次数</li><li>老用户和新用户的互动比例</li></ul><p>交易类产品的促销活动：</p><ul><li>互动为平台带来的总交易额、购买人数、人均客单价（关键指标）</li><li>活动页面商品的 uv、pv、进入活动页面的人数占比（活动吸引力）</li><li>浏览-加入购物车-下单的转化率，分析潜在用户流失原因。</li><li>优惠券核销量/ 优惠券发放量</li><li>不同渠道用户的付费比例，单价，留存</li></ul><p><img src="https://i.loli.net/2019/02/24/5c721dbaacd7d.png" alt="营销活动分析"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 活动分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive-SQL学习</title>
      <link href="/2019/04/18/%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/04/18/%E6%8A%80%E8%83%BD-Hive-SQL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据库与表的增删改查"><a href="#数据库与表的增删改查" class="headerlink" title="数据库与表的增删改查"></a>数据库与表的增删改查</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li><p>create database-创建新数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建zhang数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> zhang </span><br><span class="line"></span><br><span class="line"><span class="comment">--制定数据库的位置</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span>  <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> zhang location <span class="string">'/zhang.db'</span></span><br></pre></td></tr></table></figure></li><li><p>alter database-修改数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---增加数据库属性</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> zhang <span class="keyword">set</span> dbproperties(<span class="string">"CTtime"</span>= <span class="string">"2020-05-01"</span>)</span><br></pre></td></tr></table></figure></li><li><p>drop database -删除数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---数据库下无表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> zhang;</span><br><span class="line"></span><br><span class="line"><span class="comment">---数据库下有表，-强制删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> zhang <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure></li><li><p>选择数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置默认数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">default</span> android;</span><br></pre></td></tr></table></figure></li><li><p>查看所在的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--模糊查询</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span> <span class="keyword">like</span> <span class="string">"s%"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查询数据库信息</span></span><br><span class="line"><span class="keyword">desc</span> <span class="keyword">database</span>  zhang;</span><br><span class="line"><span class="comment">---查询数据库扩展属性</span></span><br><span class="line">desc database extended zhang;</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据表"><a href="#数据表" class="headerlink" title="数据表"></a>数据表</h2><ul><li><p>create table-创建新表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> [<span class="keyword">external</span>] <span class="keyword">table</span> [<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span>] table_name </span><br><span class="line"></span><br><span class="line">[(col_name data_type [<span class="keyword">comment</span> col_comment],....)]</span><br><span class="line">[partitioned <span class="keyword">by</span> (col_name data_type [<span class="keyword">comment</span> col_comment],..)]</span><br><span class="line">[clustered <span class="keyword">by</span> (col_name, col_name, ...)]</span><br><span class="line">[<span class="keyword">row</span> <span class="keyword">format</span> row_format]</span><br><span class="line">[<span class="keyword">stored</span> <span class="keyword">as</span> file_format]</span><br><span class="line">[location hdfs_path]</span><br><span class="line"></span><br><span class="line"><span class="comment">--- create table 创建指定名称的表，如果相同名称的表已存在，则用if not exists 选项来忽略这个异常。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--extername 关键字让用户创建一个外部表</span></span><br><span class="line"><span class="comment">---partitioned by  分区：分目录，把一个大的数据集根据业务需要分割成小的数据集。在查询时通过where子句的表达式来选择查询所需的指定分区，提高查询效率。</span></span><br><span class="line"><span class="comment">--clustered by 分桶</span></span><br><span class="line"><span class="comment">--row format  字段之间的分隔符</span></span><br><span class="line"><span class="comment">---stored as 文件存储格式</span></span><br><span class="line"><span class="comment">--location， 指定表在HDFS上的存储位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---在zhang库中创建test表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> dept(</span><br><span class="line">    deptid <span class="built_in">int</span>, </span><br><span class="line">    dname <span class="keyword">string</span>, </span><br><span class="line">    loc <span class="built_in">int</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span></span><br></pre></td></tr></table></figure></li><li><p>update-更新数据库中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span>  需更新的列名<span class="number">1</span>= 新值<span class="number">1</span>, 需更新的列名<span class="number">2</span>=新值<span class="number">2</span>,...</span><br><span class="line"><span class="keyword">where</span>  列名 = 某个原有的值</span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> Websites </span><br><span class="line"><span class="keyword">SET</span> alexa=<span class="string">'5000'</span>, country=<span class="string">'USA'</span> <span class="comment">--更新的数据</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'菜鸟教程'</span>;</span><br></pre></td></tr></table></figure></li><li><p>insert into() -向数据库中插入新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名（列名<span class="number">1</span>,列名<span class="number">2</span>,列名<span class="number">3.</span>..)</span><br><span class="line"><span class="keyword">values</span>(值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3.</span>..)</span><br></pre></td></tr></table></figure></li><li><p>delete-从数据库中删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">column</span> = value...</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'Facebook'</span> <span class="keyword">AND</span> country=<span class="string">'USA'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除表中所有的行，表结果不变</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> table_name;</span><br></pre></td></tr></table></figure></li><li><p>alter table- 修改数据库表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--清楚表中数据,删除掉指定分区</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> shphonefeature <span class="keyword">DROP</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">PARTITION</span>(<span class="keyword">year</span> = <span class="number">2015</span>, <span class="keyword">month</span> = <span class="number">10</span>, <span class="keyword">day</span> = <span class="number">1</span>);</span><br><span class="line"><span class="comment">---lter table test.mon_mau_list drop partition (hit_mon = '&#123;0&#125;')</span></span><br></pre></td></tr></table></figure></li><li><p>drop table - 删除表</p></li><li>create index -创建索引</li><li>drop index -删除索引</li><li><p>refresh table 表名 - 刷新数据表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh table computer_log.client_ios_log</span><br></pre></td></tr></table></figure></li><li><p>查看当前使用的数据库中有哪些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看非当前使用的数据库中有哪些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">in</span> myhive;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库中以 android 开头的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">'android*'</span></span><br></pre></td></tr></table></figure></li><li><p>查看表的详细信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted android</span><br></pre></td></tr></table></figure></li><li><p>查询分区表有多少分区</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> dept_partition;</span><br></pre></td></tr></table></figure></li><li><p>查看分区表结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted dept_partition</span><br></pre></td></tr></table></figure></li><li><p>增加分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table dept_partition add partition(month=&apos;201705&apos;) partition(month=&apos;201704&apos;)</span><br></pre></td></tr></table></figure></li><li><p>删除分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table dept_partition drop partition (month=&apos;201705&apos;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="内部表与外部表"><a href="#内部表与外部表" class="headerlink" title="内部表与外部表"></a>内部表与外部表</h2><ul><li><p>内部表(管理表)：默认创建内部表， 删除表会删除所有数据</p></li><li><p>外部表： 删除表不会删除这份数据，不过描述表的元数据信息会被删除掉。</p></li><li><p>原始日志数据应该建立外部表（避免误删）， 用到的中间表、结果表使用内部表存储。 </p></li><li><p>查看表是内部表还是外部表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查看表信息</span></span><br><span class="line">desc  formatted  table_name</span><br></pre></td></tr></table></figure></li><li><p>内部表与外部表的相互转换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---内部表转换为外部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">set</span> tblproperties(<span class="string">'EXTERNAL'</span> = <span class="string">'true'</span>) <span class="comment">---单引号、大小写不能变</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---外部表转化为内部表</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">set</span> tbproperties(<span class="string">'EXTERNAL'</span> = <span class="string">'false'</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><h2 id="select…from…"><a href="#select…from…" class="headerlink" title="select…from…"></a>select…from…</h2><ul><li><p>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, subord[<span class="number">0</span>] <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure></li><li><p>可以使用 “点” 符号， 类似：表的别名 . 列名 这样的用法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span>  <span class="keyword">name</span>, address.city  <span class="keyword">from</span>  employees;</span><br></pre></td></tr></table></figure></li><li><p>使用正则表达式，可以选出所有列名以 price 作为前缀的列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="string">'price.*'</span>  <span class="keyword">from</span>  stocks;</span><br></pre></td></tr></table></figure></li><li><p>使用列值进行计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>), <span class="keyword">avg</span>(salary) <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure></li><li><p>使用别名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">count</span>(<span class="keyword">distinct</span> acount) <span class="keyword">as</span> uv   <span class="keyword">from</span>   employees;</span><br></pre></td></tr></table></figure></li><li><p>如果用 distinct, select 后面必须直接跟 distinct</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  distinct user_account, province from    computer_viedata</span><br></pre></td></tr></table></figure></li></ul><h2 id="where"><a href="#where" class="headerlink" title="where"></a>where</h2><ul><li>关系型运算符优先级高到低为：not - and - or</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country = <span class="string">'us'</span> <span class="keyword">and</span> state = <span class="string">'ca'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country  <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'us'</span>, <span class="string">'china'</span>)</span><br></pre></td></tr></table></figure><ul><li>数学运算符与关系运算符</li></ul><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/</td><td>除法</td></tr><tr><td>%</td><td>取余</td></tr><tr><td>&amp;</td><td>与</td></tr><tr><td>\</td><td>或</td></tr><tr><td>^</td><td>异或</td></tr><tr><td>~</td><td>取反</td></tr><tr><td><strong>操作符</strong></td><td><strong>描述</strong></td></tr><tr><td>A=B</td><td>如果A=B，则返回True,否则返回False</td></tr><tr><td>A&lt;=&gt;B</td><td>如果A和B都为NULL，则返回True,其他的和等号操作结果一致，如果任意为Null,则结果为null</td></tr><tr><td>A&lt;&gt;B,A!=B</td><td>A或B为Null, 则返回Null,如果A不等于B，则返回True,否则返回False</td></tr><tr><td>A&lt;B</td><td>–</td></tr><tr><td>A&lt;=B</td><td>–</td></tr><tr><td>A&gt;B</td><td>–</td></tr><tr><td>A&gt;=b</td><td>–</td></tr><tr><td>A[not] between  B and C</td><td>—</td></tr><tr><td>A is null</td><td>—</td></tr><tr><td>A is not null</td><td>—</td></tr><tr><td>in</td><td>–</td></tr><tr><td>A [NOT] like B</td><td>–</td></tr><tr><td>A rlike B, A REGEXP B</td><td>—</td></tr><tr><td><strong>逻辑运算</strong></td><td><strong>描述</strong></td></tr><tr><td>and</td><td>—</td></tr><tr><td>or</td><td>–</td></tr><tr><td>not</td><td>—</td></tr></tbody></table><ul><li>like、rlike</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---like、 rlike </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street <span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">rlike</span> <span class="string">'.*(beijing|shanghai).*'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">like</span> <span class="string">'%beijing%'</span> <span class="keyword">or</span> address.street <span class="keyword">like</span> <span class="string">'%shanghai%'</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>%</td><td>匹配0个或任意多个字符</td></tr><tr><td>_</td><td>匹配任意一个字符</td></tr><tr><td>escape</td><td>转义字符，可匹配%和_。如SELECT * FROM table_name WHERE column_name LIKE ‘/%/_%_’ ESCAPE’/‘</td></tr><tr><td>—</td><td>—</td></tr><tr><td>.</td><td>匹配任意单个字 符</td></tr><tr><td>*</td><td>匹配0个或多个前一个得到的字符</td></tr><tr><td>[]</td><td>含有任意一个[]内的字符，[ab]*可匹配空串、a、b、或者由任意个a和b组成的字符串。</td></tr><tr><td>^</td><td>匹配开头，如^s匹配以s或者S开头的字符串</td></tr><tr><td>$</td><td>匹配结尾，如s$匹配以s结尾的字符串。</td></tr><tr><td>{n}</td><td>匹配前一个字符反复n次。</td></tr></tbody></table><h2 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 对结果进行分类</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;  <span class="comment">--desc 从高到低排列</span></span><br></pre></td></tr></table></figure><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--对查询的所有结果进行排序, 可在字段加 DESC 关键字， 进行降序排序。 （默认 ASC， 升序）</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--先对code进行排序，然后对code里的姓名进行排序</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> a <span class="keyword">order</span> <span class="keyword">by</span> code, <span class="keyword">name</span> <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="having"><a href="#having" class="headerlink" title="having"></a>having</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- having 子句来限制输出结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--- 查找平均工资大于3000的部门</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">avg</span>(salary) <span class="keyword">as</span> average </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    average &gt; <span class="number">3000</span></span><br></pre></td></tr></table></figure><ul><li>having 与 where 的区别：<ul><li>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。</li><li>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</li></ul></li></ul><h2 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---使用limit语句限制返回的行数，只显示 10 行</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv  <span class="keyword">from</span>  employees  <span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h2><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt></p><ul><li>对于多张表进行连接查询<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---为什么条件内不将表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close, c.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line">      <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.ymd = c.ymd</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a. symbol = <span class="string">'Apple'</span>  <span class="keyword">AND</span> b.symbol = <span class="string">'Ibm'</span> <span class="keyword">AND</span> c.symbol = <span class="string">'Google'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="并集：union-与-union-all"><a href="#并集：union-与-union-all" class="headerlink" title="并集：union 与 union all"></a>并集：union 与 union all</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><ul><li>union 与 union all 的不同：<ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul></li></ul><h3 id="交集：intersect"><a href="#交集：intersect" class="headerlink" title="交集：intersect"></a>交集：intersect</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">intersect</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><h3 id="差集：except"><a href="#差集：except" class="headerlink" title="差集：except"></a>差集：except</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure><!-- https://wing324.github.io/2017/10/20/Hive%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/ --><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>count(distinct  )</td><td>统计去重之后的个数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>sum(distinct )</td><td>去重之后的和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>avg(distinct)</td><td>去重之后的平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>stddev_pop()</td><td>标准偏差</td></tr><tr><td>stddev_samp()</td><td>标准样本偏差</td></tr><tr><td>covar_pop(A, B)</td><td>协方差</td></tr><tr><td>covar_samp(A, B)</td><td>样本协方差</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><ul><li><p>count(1)、count(*)、count(column) 之间的区别</p><ul><li><p>执行效果上：<br>count(*)包括了所有的列，相当于行数，在统计结果的时候，不会忽略列值为NULL<br>count(1)包括了忽略所有列，用1代表代码行，在统计结果的时候，不会忽略列值为NULL<br>count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空（这里的空不是只空字符串或者0，而是表示null）的计数，即某个字段值为NULL时，不统计。</p></li><li><p>执行效率上：<br>列名为主键，count(列名)会比count(1)快<br>列名不为主键，count(1)会比count(列名)快<br>如果表多个列并且没有主键，则 count(1) 的执行效率优于count(*)<br>如果有主键，则 select count(主键)的执行效率是最优的<br>如果表只有一个字段，则 select count(*)最优。</p></li></ul></li></ul><hr><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><table><thead><tr><th>函数名</th><th>定义</th><th>语句</th></tr></thead><tbody><tr><td>NOW ( )</td><td>当前时间</td><td>select now()</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>date_add()</td><td>时间相加</td><td>date_add(dt,interval 1 day )</td></tr><tr><td>date_sub(date,INTERVAL expr（时间间隔） type（时间类型，天、月、年）)</td><td>时间相减</td><td>date_sub(‘2018-05-01’,interval -1 year)</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td><td>date_format(hit_date, “%Y-%m-%d)</td></tr><tr><td>datename()</td><td>返回日期部分的参数</td></tr><tr><td>datepart()</td><td>返回日期、时间的单独部分</td></tr></tbody></table><h3 id="求留存率"><a href="#求留存率" class="headerlink" title="求留存率"></a>求留存率</h3><ul><li><p>datediff-求留存率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---一次性求次1日，次3日， 次7日留存，此方法不能计算pv，会造成笛卡尔积</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></li><li><p>date_add 求留存率</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---步骤1：统计每天的uv</span></span><br><span class="line"></span><br><span class="line"><span class="comment">---步骤2： - 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-25'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.hit_date =  <span class="keyword">date_add</span>(a1.hit_date, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.hit_date</span><br><span class="line"></span><br><span class="line"><span class="comment">--步骤3：计算留存率</span></span><br></pre></td></tr></table></figure></li><li><p>计算留存率的其他写法-迷神</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 留存sql优化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> userid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> t1.userid,</span><br><span class="line">                t1.statdate</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            table1 t1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.statdate = $&#123;上<span class="number">30</span>天日期&#125;</span><br><span class="line">            <span class="keyword">and</span> t1.statdate &lt;= $&#123;上一天日期&#125;</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            t1.userid,</span><br><span class="line">            t1.statdate</span><br><span class="line">        ) s1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        userid</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>)  <span class="number">2</span></span><br><span class="line">    ) R1</span><br><span class="line"></span><br><span class="line"><span class="comment">--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=$&#123;上一天日期&#125;。 </span></span><br><span class="line"><span class="comment">--另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</span></span><br></pre></td></tr></table></figure></li><li><p>留存率的另一种写法-勇哥</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">hit_date,</span><br><span class="line">user_account,</span><br><span class="line"><span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> hit_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2020-04-01'</span> <span class="keyword">and</span>  <span class="string">'2020-04-07'</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">btn_navigation  <span class="keyword">like</span> <span class="string">"%查询办理%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">hit_date,</span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> hit_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2020-04-01'</span> <span class="keyword">and</span>  <span class="string">'2020-04-07'</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">btn_navigation  <span class="keyword">like</span> <span class="string">"%查询办理%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date <span class="keyword">as</span> one,</span><br><span class="line">a2.hit_date <span class="keyword">as</span> two,</span><br><span class="line"><span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) <span class="keyword">as</span> cha,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a2.user_account),</span><br><span class="line"><span class="keyword">sum</span>(a2.hit_count)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    cha &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>计算月留存率的简单写法：筛选出在两个月份出现的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">month</span> (hit_date)) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view.client_android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2019-03-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> user_account</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">  c = <span class="number">2</span></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">month</span> (hit_date)) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view.client_ios_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2019-03-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line"> user_account</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">  c = <span class="number">2</span></span><br><span class="line">    )</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br></pre></td></tr></table></figure></li></ul><h2 id="条件判断：case-when-与-if"><a href="#条件判断：case-when-与-if" class="headerlink" title="条件判断：case when 与 if"></a>条件判断：case when 与 if</h2><ol><li><strong>IF( expr , v1 , v2 )函数</strong></li></ol><ul><li>查出班级所有学生，如果年龄小于20，就标准为少年，否则标记为青年。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    * </span><br><span class="line">     <span class="keyword">if</span>(age&lt;<span class="number">20</span>,<span class="string">'少年'</span>,<span class="string">'青年'</span>) <span class="keyword">AS</span> ifage </span><br><span class="line"><span class="keyword">from</span>  </span><br><span class="line">    student</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>ifnull(V1,V2)函数</strong></li></ol><ul><li>如果v1不为空，则直接返回v1;如果v1为空，则返回参数v2<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">ifnull</span>(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">ifnull</span>(<span class="literal">null</span>,<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>case when 函数</strong></li></ol><ul><li><p>对不同字母进行省份转换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> province ,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) uv,</span><br><span class="line">    <span class="keyword">count</span>(page_name) pv</span><br><span class="line"><span class="keyword">from</span> android_log</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;&#125;'</span></span><br><span class="line"><span class="keyword">and</span> page_name <span class="keyword">like</span> <span class="string">'%Kefujh%'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">case</span> </span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'ah'</span> <span class="keyword">then</span> <span class="string">'安徽'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'fj'</span> <span class="keyword">then</span> <span class="string">'福建'</span></span><br><span class="line">        <span class="keyword">when</span> province <span class="keyword">like</span> <span class="string">'gd'</span> <span class="keyword">then</span> <span class="string">'广东'</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">'m'</span> </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">limit</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></li><li><p>统计各部门男女分别有多少人</p></li></ul><table><thead><tr><th>姓名</th><th>部门</th><th>性别</th></tr></thead><tbody><tr><td>甲</td><td>A</td><td>男</td></tr><tr><td>乙</td><td>A</td><td>男</td></tr><tr><td>丙</td><td>B</td><td>女</td></tr><tr><td>丁</td><td>A</td><td>女</td></tr><tr><td>张</td><td>B</td><td>男</td></tr><tr><td>赵</td><td>B</td><td>女</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    部门，</span><br><span class="line">    <span class="keyword">sum</span> (<span class="keyword">case</span> 性别 <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> male_count,</span><br><span class="line">    <span class="keyword">sum</span> (<span class="keyword">case</span> 性别 <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> male_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    table1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 部门</span><br></pre></td></tr></table></figure><ul><li>范围转换<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> population &lt; <span class="number">250</span> <span class="keyword">then</span> <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">250</span> <span class="keyword">and</span> population &lt; <span class="number">500</span> <span class="keyword">then</span> <span class="string">'2'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">500</span> <span class="keyword">and</span> population &lt; <span class="number">750</span> <span class="keyword">then</span> <span class="string">'3'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">750</span> <span class="keyword">then</span> <span class="string">'4'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> <span class="keyword">as</span> pop_classs,</span><br><span class="line">        <span class="keyword">count</span>(*) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    district;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="行转列"><a href="#行转列" class="headerlink" title="行转列"></a>行转列</h2><ol><li>函数</li></ol><ul><li><strong>case when</strong></li><li><strong>concat</strong>(string A/col, string B/col…) ：函数在连接字符串时，只要其中一个是NUll，则返回NUll</li><li><strong>concat_ws</strong>(separator, str1, str2,…): 函数需要指定分隔符，只能接收 string或string类型的数组，只要有一个字符串不是NUll， 则不会返回NULL。</li><li><strong>collect_set</strong>(col): 函数值接受基本数据类型，主要作用是将某字段的值进行去重汇总，产生array类型字段。</li></ul><ol start="2"><li>案例</li></ol><ul><li>多行转多列</li></ul><table><thead><tr><th>年</th><th>季度</th><th>销售量</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table><p>查询结果如下：</p><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    年,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">1</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 一季度,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">2</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 二季度,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">3</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 三季度,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">4</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span> ) <span class="keyword">as</span> 四季度,</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    sales</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    年</span><br></pre></td></tr></table></figure><ul><li>多行转单列</li></ul><table><thead><tr><th>省-城市</th><th>uv</th></tr></thead><tbody><tr><td>河北省-保定</td><td>11189</td></tr><tr><td>山西省-阳泉市</td><td>13</td></tr><tr><td>河南省-信阳</td><td>7462</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"><span class="keyword">concat</span>(province,<span class="string">'-'</span>, city), uv </span><br><span class="line"><span class="comment">--concat_ws('-', province, city), uv </span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    city,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date = <span class="string">'2020-03-01'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">province, city)</span><br></pre></td></tr></table></figure><ul><li>多行转单列-复杂</li></ul><table><thead><tr><th>name</th><th>contellation</th><th>blood_type</th></tr></thead><tbody><tr><td>孙悟空</td><td>白羊座</td><td>A</td></tr><tr><td>猪八戒</td><td>射手座</td><td>A</td></tr><tr><td>宋宋</td><td>白羊座</td><td>B</td></tr><tr><td>唐僧</td><td>白羊座</td><td>A</td></tr><tr><td>张帅</td><td>射手座</td><td>A</td></tr></tbody></table><p>把星座和血型一样的人归类到一起：</p><table><thead><tr><th>。。。</th><th>。。。</th></tr></thead><tbody><tr><td>射手座,A</td><td>猪八戒\张帅</td></tr><tr><td>白羊座，A</td><td>孙悟空\唐僧</td></tr><tr><td>白羊座，B</td><td>宋</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line"> t1.c_b</span><br><span class="line"> <span class="keyword">concat_ws</span>(<span class="string">"\"</span>, collect_set (t1.name))</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">concat_ws</span>(<span class="string">','</span>, constellation, blood_type) c_b,</span><br><span class="line">        <span class="keyword">name</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        person_info) t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    t1.c_b;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><p>求将每个省的城市列出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    collect_set(city)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">apache_computer_view.client_android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date = <span class="string">'2020-03-01'</span></span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">province</span><br><span class="line"></span><br><span class="line"><span class="comment">---辽宁省["营口市","大连","大连市","抚顺市","铁岭","盘锦","锦州","沈阳市","辽阳","鞍山","铁岭市","本溪市","丹东市","丹东","沈阳","朝阳市","锦州市","辽阳市","阜新市","鞍山市","盘锦市","葫芦岛","营口","抚顺","葫芦岛市","阜新","本溪","朝阳"]</span></span><br></pre></td></tr></table></figure></li><li><p>求出一个月内活跃天数大于20天的用户数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--先列出每个用户的所有登陆时间</span></span><br><span class="line"><span class="comment">--选出需要的时间段</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        collect_set(hit_date) <span class="keyword">as</span> t</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        apache_computer_view.client_android_log </span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2020-03-01'</span> <span class="keyword">and</span> <span class="string">'2020-03-31'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        user_account) <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">size</span>(a.t) &gt;= <span class="number">20</span></span><br><span class="line"><span class="comment">--手机号对应日期长度 &gt;= 20</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="列转行"><a href="#列转行" class="headerlink" title="列转行"></a>列转行</h2><ol><li>函数</li></ol><ul><li><p>explode(col): 将hive列中复杂的array或者map结构拆分成多行</p></li><li><p><strong>lateral view</strong><br>用法： lateral view udtf(expression) tableAlias as columnAlias<br>说明： 用户和split,explode 等UDTF一起使用，能够将一列数据拆分成多行数据， 在此基础上可以对拆分的数据进行聚合计算.   形成一个新的表，并对原来的表进行侧写</p></li></ul><ol start="2"><li>案例</li></ol><ul><li>需求1</li></ul><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑,动作,科幻,剧情</td></tr><tr><td>《lie to me》</td><td>警匪,动作,心理</td></tr></tbody></table><p>要求：</p><table><thead><tr><th>movie</th><th>category</th></tr></thead><tbody><tr><td>《疑犯追踪》</td><td>悬疑</td></tr><tr><td>《疑犯追踪》</td><td>动作</td></tr><tr><td>《疑犯追踪》</td><td>科幻</td></tr><tr><td>《疑犯追踪》</td><td>剧情</td></tr><tr><td>《lie to me》</td><td>警匪</td></tr><tr><td>《lie to me》</td><td>动作</td></tr><tr><td>《lie to me》</td><td>心理</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    movie,</span><br><span class="line">    category_name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    movie_info</span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(<span class="keyword">category</span>) tmpTable  <span class="keyword">as</span> category_name</span><br><span class="line"></span><br><span class="line"><span class="comment">---用分开的表，对要求的数据进行测写</span></span><br><span class="line"><span class="comment">-- select movie,explode(category) from movie_info 会生成笛卡尔积，不能执行</span></span><br></pre></td></tr></table></figure><ul><li>需求2： 将 表 table 中的 <code>adid_list</code> 转换为单独的行。 </li></ul><p>表-table：</p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><p> 输出结果为： </p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable  <span class="keyword">as</span> adid</span><br></pre></td></tr></table></figure><ul><li><p>需求3： 计算特定广告的展现次数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></table></figure></li></ul><p>输出结果为： </p><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><ul><li>需求4： 多个 lateral view 查询</li></ul><p>表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br></pre></td></tr></table></figure><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><ol><li>函数 </li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>over()</td><td>指定分析函数工作的数据窗口大小，这个数据窗口大小可能会随着行的变化而变化</td></tr><tr><td><strong>常跟的函数</strong></td><td><strong>说明</strong></td></tr><tr><td>—</td><td>—</td></tr><tr><td>current row</td><td>当前行</td></tr><tr><td>n preceding</td><td>往前n行数据</td></tr><tr><td>n following</td><td>往后n行数据</td></tr><tr><td>unbounded</td><td>起点</td></tr><tr><td>uvbounded preceding</td><td>表示从前面的起点开始</td></tr><tr><td>unbounded following</td><td>表示到后面的终点</td></tr><tr><td>lag(col, n)</td><td>往前第n行数据</td></tr><tr><td>lead(col, n)</td><td>往后第n行数据</td></tr><tr><td>ntile(n)</td><td>把有序分区中的行分发到指定数据的组中， 各个组有编号，编号从1开始，ntile返回此行所属组的编号</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr></tbody></table><ol start="2"><li>案例</li></ol><table><thead><tr><th>name</th><th>orderdate</th><th>cost</th></tr></thead><tbody><tr><td>jack</td><td>2017-01-01</td><td>10</td></tr><tr><td>tony</td><td>2017-01-02</td><td>15</td></tr><tr><td>jack</td><td>2017-01-03</td><td>23</td></tr><tr><td>tony</td><td>2017-01-04</td><td>29</td></tr><tr><td>jack</td><td>2017-01-05</td><td>46</td></tr><tr><td>jack</td><td>2017-04-06</td><td>42</td></tr><tr><td>tony</td><td>2017-01-07</td><td>50</td></tr><tr><td>jack</td><td>2017-01-08</td><td>55</td></tr><tr><td>mart</td><td>2017-04-08</td><td>62</td></tr><tr><td>mart</td><td>2017-04-09</td><td>68</td></tr><tr><td>neil</td><td>2017-05-10</td><td>12</td></tr><tr><td>mart</td><td>2017-04-11</td><td>75</td></tr><tr><td>neil</td><td>2017-06-12</td><td>80</td></tr><tr><td>mart</td><td>2017-04-13</td><td>94</td></tr></tbody></table><ul><li>查询在2017年4月购买的顾客及总人数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span>,<span class="keyword">count</span>(<span class="number">1</span>)<span class="keyword">over</span>() <span class="comment">----over全量， 如果不加over，就会按照name来划分</span></span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    business</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    substring_index(orderdate,<span class="string">'-'</span>,<span class="number">2</span>) = <span class="string">'2017-04'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">name</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>name</th><th>c1</th><th>不加over</th></tr></thead><tbody><tr><td>jack</td><td>2</td><td>1</td></tr><tr><td>mart</td><td>2</td><td>4</td></tr></tbody></table><ul><li><p>查询顾客的购买明细及月购买总额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">distribute</span> <span class="keyword">by</span> <span class="keyword">month</span>(orderdate))</span><br><span class="line"><span class="comment">--- sum(cost) over (partition by month(orderdate))</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>要将cost按照日期进行累加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>按照日期进行排序，并将当前日期和前一天、后一天数据求和</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="number">1</span> <span class="keyword">following</span>)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>求每个人将按照日期进行累加的消费金额</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">unbounded</span> <span class="keyword">preceding</span> <span class="keyword">and</span> <span class="keyword">current</span> <span class="keyword">row</span> )</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>要将cost按照日期进行倒序累加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    <span class="keyword">sum</span>(<span class="keyword">cost</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span>  orderdate <span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="keyword">now</span> <span class="keyword">and</span> <span class="keyword">unbounded</span> <span class="keyword">following</span> )</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>查询顾客上次购买的时间, 与下次购买时间。相邻两个时间戳如何相减，求时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    *,</span><br><span class="line">    lag(orderdate, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate),</span><br><span class="line">    <span class="keyword">lead</span>(orderdate,<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">order</span> <span class="keyword">by</span> orderdate)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    business</span><br></pre></td></tr></table></figure></li><li><p>查询前20%时间的订单信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">            <span class="keyword">name</span>, orderdate, <span class="keyword">cost</span>, ntile(<span class="number">5</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> orderdate) gid</span><br><span class="line">        <span class="keyword">from</span> </span><br><span class="line">            business</span><br><span class="line">    ) t</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    git =<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p><strong><a href="https://www.cnblogs.com/52xf/p/4209211.html" target="_blank" rel="noopener">ntile函数详解</a></strong><br>ntile函数可以将有序数据，根据指定的组数进行分组处理。 编号从1开始，对于每一行，ntile将返回此行所属的组编号。<br>ntile函数的分组依据：</p><ul><li>每组包含的数据个数不能大于它上一组 包含的数据个数</li><li>计算规则：1. 检查能不能对所有满足条件的记录进行平均分组，若能则直接平均分配完成分组。2. 若不能，则会先分出一个组，此组个数为（总个数/总组数）+1。3. 分配之后系统会继续比较余下的记录数与未分配的组数能不能进行平均分配，若不能，则根据上面条件再分配。</li><li>例如：将6个记录分为4组， 不能平均分配则，第一组记录数为 （6/4)+1 = 2条记录。剩余4条记录分为3组，不能平均分配，则第二组记录数为（4/3)+1=2条记录。剩余2条记录分为2组，则剩余2组各1条记录。 </li></ul></li></ul><h2 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h2><ol><li>函数 </li></ol><p>SQl 中用于排序的函数有：rank、dense_rank、row_number、ntile函数,其语法为：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rank() over ([partition by A] order by B  DESC)</span><br><span class="line"></span><br><span class="line">dense_rank() over ([partition by A] order by B DESC)</span><br><span class="line"></span><br><span class="line">row_number() over ([partition by A] order by B DESC )</span><br><span class="line"></span><br><span class="line">ntile() over([partition by A] order by B desc)</span><br><span class="line"><span class="comment">-- partition by A 表示 按照A进行分区。</span></span><br><span class="line"><span class="comment">-- order by B 表示按照B进行排序。</span></span><br><span class="line"><span class="comment">-- DESC 表示 从大到小降序排列。</span></span><br><span class="line"><span class="comment">-- 其中[partition by col1]若不需要则可省略不写。</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>明确各函数之间的不同点</strong><br>rank函数， 数值相等的排序则会留下空位： 1、2、2、4<br>dense_rank函数，数值相等的排序不会留下空位: 1、2、2、3<br>row_number函数，则不区分数值是否相等，默认排序为： 1、2、3、4<br>ntile函数，对有序行进行分组处理</li></ul><p>**2.需求</p><ul><li><p>如何找出各省点击人数Top10的按钮？</p><p>对于这个问题，首先要理清自己的思路：1. 取出 省份、按钮和 uv;2. 各省分组内，按照uv进行从大到小排序，并输出一列排序序号;3. 根据排序序号，取出排序前10的按钮和省份。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    nbtn_name </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province,  <span class="comment">--省份</span></span><br><span class="line">    nbtn_name, <span class="comment">--按钮 </span></span><br><span class="line">    uv,        <span class="comment">--uv</span></span><br><span class="line">    <span class="keyword">dense_rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> province <span class="keyword">order</span> <span class="keyword">by</span> uv <span class="keyword">DESC</span>) <span class="keyword">as</span> ran <span class="comment">--排序</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    province,</span><br><span class="line">    nbtn_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    apache_computer_view.client_android_log </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>  </span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    hit_date = <span class="string">'2020-03-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    province,</span><br><span class="line">    nbtn_name))</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    ran &lt;= <span class="number">10</span></span><br></pre></td></tr></table></figure></li><li><p>求连续4个月活跃的用户数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---1月活跃的用户数， 在2月、3月、4月一直活跃的用户有多少？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  user_account , <span class="keyword">month</span>(hit_date) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> compu_view.ios_log_view</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_account, <span class="keyword">month</span>(hit_date) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    user_account,a1.month,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  user_account <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> px</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.px = <span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>求4月连续7天进行签到的用户数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ol><li>函数</li></ol><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat()</td><td>拼接字符串</td></tr><tr><td>length()</td><td>计算字符串的长度，一个汉字算三个字符</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr><tr><td>lcase()</td><td>转换成小写</td></tr><tr><td>left(string2 ,length )</td><td>从string2中的左边起取length个字符</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>replace()</td><td>替换字符</td></tr><tr><td>split()</td><td>hive字符串分割函数</td></tr><tr><td>substr()</td><td>返回字符串A从start位置开始，长度为len的字符串</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substring_index()</td><td>通过截取获取不同索引位的字符</td></tr><tr><td>LTRIM (string2 )</td><td>去除前端空格</td></tr><tr><td>RTRIM (string2 )</td><td>去除后端空格</td></tr></tbody></table><ol start="2"><li>函数详解</li></ol><p><strong>substr函数与 substring函数用法相同:</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr/substring( A, k开始截取的位置，截取长度)</span><br></pre></td></tr></table></figure><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">substr(string,4): 从右第4位置截取到最后，结果为：ing</span><br><span class="line">substr(string,1,3):取左边第1位置起，3字长的字符串，结果为：str</span><br><span class="line">substr(string,-3,3):取右边第1位置起，3字长的字符串,右边第一位置往右不够3字长，结果为：g</span><br><span class="line">substr(string,-3,3):取右边第1位置起，3字长的字符串，结果为：ing</span><br></pre></td></tr></table></figure></p><p><strong>substring_index函数</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substring_index(A, 分割的字符,截取字符的位置)</span><br></pre></td></tr></table></figure></p><p>举例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,1)：取第一个逗号前面的字符串，结果为：15</span><br><span class="line"></span><br><span class="line">substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,2)：取第二个逗号前面部分，结果为：15,151</span><br><span class="line"></span><br><span class="line">substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,-1)：取目标字符串中最后一个含 “,” 位子的后的部分，结果为：16</span><br><span class="line"></span><br><span class="line">substring_index(substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,2),&apos;,&apos;,-1):取第二个逗号前面部分,然后最后逗号的前面部分，结果为：151</span><br><span class="line"></span><br><span class="line">substring_index(substring_index(&apos;15,151,152,16&apos;,&apos;,&apos;,-2),&apos;,&apos;,1)：取倒数第二个逗号后面部分字符串，再去这部分里第一个都号前的部分，结果为：152</span><br></pre></td></tr></table></figure></p><p><strong>split函数</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split(A, 分割的字符)</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">split(&apos;a,b,c,d&apos;,&apos;,&apos;):根据逗号进行分割，结果为： [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;]</span><br><span class="line"></span><br><span class="line">split(&apos;a,b,c,d&apos;,&apos;,&apos;)[0]： 取结果数组中的某一项，结果为： a</span><br><span class="line"></span><br><span class="line">split(&apos;192.168.0.1&apos;,&apos;\\.&apos;)： 点号这种特殊字符的时候需要做特殊的处理，结果为：[&quot;192&quot;,&quot;168&quot;,&quot;0&quot;,&quot;1&quot;]</span><br><span class="line"></span><br><span class="line">&quot;....  split(&apos;192.168.0.1&apos;,&apos;\\\\.&apos;) ... &quot;: split包含在 &quot;&quot; 之中时 需要加4个\,不然得到的值是null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">同样的 | 等特殊符号也需要做类似 处理。</span><br></pre></td></tr></table></figure><p>3.区分函数之前的区别</p><ul><li>substr函数与 substring函数是根据截取的位置来进行分割。</li><li>substring_index和split是根据特定的字符来进行分割。</li></ul><ol start="4"><li>需求 </li></ol><ul><li>将一些字段拆解出来进行使用，比如：Syjh-sjsy-zygn-3_1字段，我们只需要Syjh-sjsy-zygn位置的所有按钮。 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    substring_index(nbtn_position, &apos;-&apos;,3) as position,</span><br><span class="line">    count(distinct user_account) as uv </span><br><span class="line">from </span><br><span class="line">    apache_computer_view</span><br><span class="line">where </span><br><span class="line">    hit_date = &apos;2020-03-01&apos;</span><br><span class="line">    and </span><br><span class="line">    nbtn_position like &apos;%Syjh%&apos;</span><br><span class="line">group by </span><br><span class="line">    substring_index(nbtn_position, &apos;-&apos;,3)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="空字段赋值"><a href="#空字段赋值" class="headerlink" title="空字段赋值"></a>空字段赋值</h2><p>NVL：给值为NULL的数据赋值，格式为NVL（string1, replace_with),功能为：如果string1为null，则NVL函数返回replace_with的值，否则返回string1的值，如果两个参数都为NULL，则返回NULL。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> nvl(comm, <span class="number">-1</span>) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></p><h2 id="查看系统内置函数"><a href="#查看系统内置函数" class="headerlink" title="查看系统内置函数"></a>查看系统内置函数</h2><ol><li><p>查看系统自带的函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> functions</span><br></pre></td></tr></table></figure></li><li><p>显示自带的函数的用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc function 函数名;</span><br></pre></td></tr></table></figure></li><li><p>详细显示自带的函数用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc function extended 函数名</span><br></pre></td></tr></table></figure></li></ol><h1 id="Hive避免数据倾斜"><a href="#Hive避免数据倾斜" class="headerlink" title="Hive避免数据倾斜"></a>Hive避免数据倾斜</h1><ul><li><p>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</p></li><li><p>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</p></li></ul><h2 id="小表Join大表"><a href="#小表Join大表" class="headerlink" title="小表Join大表"></a>小表Join大表</h2><ul><li><p>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。因此，我们在查询时，要保证连续查询中的表的大小从左到右依次是增加的。  </p></li><li><p>假如，在 a, b 两个表中，b表最小， 则 写sql时需让b表在左，a表在右：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'APPLE'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">---Hive支持使用/*+STREAMTALBE*/语法指定哪张表是大表， 不需要排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">/*+3`'LKLLGFG Streamtable(a)*/</span> a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> B <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="大表JOIN大表"><a href="#大表JOIN大表" class="headerlink" title="大表JOIN大表"></a>大表JOIN大表</h2><ol><li><p>空key过滤<br>有时join超时是因为某些key对应的数据太多，而相同key对应的数据都会发送到相同的reducer上，从而导致内存不够。此时我们应该仔细分析这些异常的key，很多情况下，这些key对应的数据是异常数据，我们需要在sql语句中进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    a <span class="keyword">Join</span>  b</span><br><span class="line"><span class="keyword">On</span></span><br><span class="line">     a.user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">And</span> </span><br><span class="line">    a.user_id = b.user_id</span><br><span class="line"><span class="keyword">Union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.user_id <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></li><li><p>空key转换<br>有时虽然某个key为空对应的数据很多，但是相应的数据不是异常数据，必须要包含在join的结果中，此时我们可以表a中key为空的字段赋一个随机值，是的数据随机均匀地分布到不同的reducer上。 </p><ul><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li><li>需要用到Case When … Else…End语法<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> n.*</span><br><span class="line"><span class="keyword">from</span>  nullidtable n <span class="keyword">full</span> <span class="keyword">join</span> bigtable o <span class="keyword">on</span></span><br><span class="line"><span class="keyword">case</span> <span class="keyword">when</span> n.id <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="keyword">concat</span>(<span class="string">'hive'</span>, <span class="keyword">rand</span>()) <span class="keyword">else</span> n.id <span class="keyword">end</span>  = o.id;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="count-distinct-去重统计"><a href="#count-distinct-去重统计" class="headerlink" title="count(distinct) 去重统计"></a>count(distinct) 去重统计</h2><ul><li>数据量大时，由于count distinct 操作需要用一个 reduce task 来完成， 这一个reduce 需要处理的数据量太大，会导致整个job很难完成，一般 count distinct 使用先group by 再 count的方式替换。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">id</span>) <span class="keyword">from</span> bigtable</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">id</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> bigtable <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span>) a</span><br></pre></td></tr></table></figure></li></ul><h2 id="避免笛卡尔积"><a href="#避免笛卡尔积" class="headerlink" title="避免笛卡尔积"></a>避免笛卡尔积</h2><p>尽量避免产生笛卡尔积，如join时不加on条件，或无效的on条件。hive只能使用1个reducer来完成笛卡尔积</p><h2 id="行列过滤"><a href="#行列过滤" class="headerlink" title="行列过滤"></a>行列过滤</h2><ol><li><p>列处理： 在查询中， 避免使用 select *, 使用条件限制取需要的列。</p></li><li><p>行处理： 在分区剪裁中，当使用join外关联时，如果将副表的过滤条件写在where后面，那么就会先全表关联，之后再过滤, 这样会耗费资源。</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> o.id <span class="keyword">from</span> bigtable b </span><br><span class="line"><span class="keyword">join</span> ori o on.id = b.id </span><br><span class="line"><span class="keyword">where</span> o.id &lt;=<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> b.id <span class="keyword">from</span> bigtable b</span><br><span class="line"><span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">from</span> ori <span class="keyword">where</span> <span class="keyword">id</span> &lt;=<span class="number">10</span>) o <span class="keyword">on</span> b.id = o.id)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.symbol = <span class="string">'APPLE'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--正确的写法是将 where 条件写在 on 后面</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> ( b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol <span class="keyword">and</span> s.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><h2 id="union-all-子查询避免中使用-group-by等"><a href="#union-all-子查询避免中使用-group-by等" class="headerlink" title="union all 子查询避免中使用 group by等"></a>union all 子查询避免中使用 group by等</h2><ul><li>union all 子查询避免中使用 group by【替换 count(distinct) 除外】、count(distinct)、max、min等。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><h2 id="避免不同数据类型进行关联"><a href="#避免不同数据类型进行关联" class="headerlink" title="避免不同数据类型进行关联"></a>避免不同数据类型进行关联</h2><ul><li>使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    a.price_close,</span><br><span class="line">    b.price_close</span><br><span class="line">from</span><br><span class="line">    a join b  on a.user_id = cast(b.user_id as string)</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-11-01&apos; and &apos;2018-11-02&apos;</span><br><span class="line">    and </span><br><span class="line">    a.symbol = &apos;apple&apos;</span><br></pre></td></tr></table></figure></li></ul><p>Hive的查询注意事项以及优化总结：</p><ol><li><p>尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段</p></li><li><p>对历史库的计算经验</p></li><li><p>尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑</p></li><li><p>join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗</p></li><li><p>如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50%</p></li></ol><h1 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h1><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。 </p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。</p><ol><li><p>首先， 用Python连接数据库</p><p>对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">conn = hive.Connection(host=<span class="string">'ip地址'</span>, port=<span class="number">10000</span>, username=<span class="string">'用户名'</span>, database = <span class="string">'default'</span>, auth=<span class="string">'NOSASL'</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 获得连接的游标</span></span><br></pre></td></tr></table></figure></li><li><p>设置开始和结束时间<br>可以用python中的time函数设置时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startdate = <span class="string">'2018-09-01'</span></span><br><span class="line">enddate   = <span class="string">'2018-09-19'</span></span><br></pre></td></tr></table></figure></li><li><p>用Python中的format函数将日期传入{}中</p><ul><li><p>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。</p></li><li><p>日期用两个{}来代替， 用format函数将开始日期与结束日期传入</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提取积分类uv,pv数据</span></span><br><span class="line"></span><br><span class="line">sql_jifenxinxi_an = <span class="string">"""select </span></span><br><span class="line"><span class="string">    count(distinct user_account) as uv, </span></span><br><span class="line"><span class="string">    count(1) as pv </span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    computer_view.data </span></span><br><span class="line"><span class="string">where </span></span><br><span class="line"><span class="string">    hit_date between "&#123;&#125;" and "&#123;&#125;" </span></span><br><span class="line"><span class="string">    and </span></span><br><span class="line"><span class="string">    (btn_position like "服务-查询-积分信息%" </span></span><br><span class="line"><span class="string">    or </span></span><br><span class="line"><span class="string">    btn_home = "积分-扇形左" </span></span><br><span class="line"><span class="string">    ) </span></span><br><span class="line"><span class="string">limit 1000"""</span>.format(startdate,enddate)</span><br><span class="line"><span class="comment"># format 插入时间</span></span><br><span class="line"></span><br><span class="line">cursor.execute(sql_jifenxinxi_an)</span><br><span class="line"><span class="comment"># 运行此语句</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment">#fetchall():接收全部的返回结果行.</span></span><br></pre></td></tr></table></figure><p>我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 </p></li></ol><hr><h1 id="其他拓展"><a href="#其他拓展" class="headerlink" title="其他拓展"></a>其他拓展</h1><h2 id="group-by-升级版"><a href="#group-by-升级版" class="headerlink" title="group by 升级版"></a><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g" target="_blank" rel="noopener">group by 升级版</a></h2><ol><li>需求背景</li></ol><p>通过 a1 明细表，获得每个店铺，每个城市，每个省份，每个大区以及全国5月的份的成交量情况。</p><table><thead><tr><th>order_id</th><th>shop</th><th>city</th><th>province</th><th>area</th><th>hit_date</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>西安</td><td>陕西</td><td>西北大区</td><td>2019-05-04</td></tr><tr><td>2</td><td>B</td><td>上海</td><td>上海</td><td>华东大区</td><td>2019-05-01</td></tr><tr><td>3</td><td>C</td><td>安康</td><td>陕西</td><td>西北大区</td><td>2019-05-02</td></tr><tr><td>4</td><td>D</td><td>北京</td><td>北京</td><td>华中大区</td><td>2019-05-21</td></tr><tr><td>5</td><td>E</td><td>延安</td><td>陕西</td><td>西北大区</td><td>2019-05-03</td></tr><tr><td>6</td><td>F</td><td>成都</td><td>四川</td><td>西南大区</td><td>2019-05-19</td></tr><tr><td>7</td><td>G</td><td>汉中</td><td>陕西</td><td>西北大区</td><td>2019-06-04</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>10000</td><td>H</td><td>郑州</td><td>河南</td><td>西北大区</td><td>2019-05-29</td></tr></tbody></table><ol start="2"><li><p>解法1：</p><p>分别写5个sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全国成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 大区成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 省成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 城市成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 店铺成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop</span><br></pre></td></tr></table></figure><p>这种方法太低效了， 还需要在excel中进行合并，比较麻烦。</p><ol start="3"><li>解法2：</li></ol><p>通过 union 和 union all 对查询结果进行纵向合并<br> union: 对合并后的结果进行去重处理<br> union all : 返回合并后的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, <span class="literal">null</span> , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,shop, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city, shop</span><br></pre></td></tr></table></figure><p> 上述式中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt></p><ol start="4"><li>解法3：</li></ol><p>利用 <code>union all</code> 比写出5个sql 再在 Excel 中处理简单很多，但是代码比较冗余。可以用<code>grouping sets</code>来进行优化。 此函数可以根据不同维度组合进行聚合。</p><p>将<code>union all</code> 语句用<code>grouping sets</code> 进行改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop</span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span></span><br><span class="line">    (<span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    (area,province),</span><br><span class="line">    (area,province,city),</span><br><span class="line">    (area,province,city,shop)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。</p><p><code>grouping_id</code>表示每个分组的序号。 1 表示第一个分组、2表示第二个分组。我们可以根据<code>grouping_id</code> 选取我们需要的组合。如果我们需要全国的成交量，则让 <code>grouping_id = 1</code>, 需要每个省的成交量，让 <code>grouping_id = 3</code>。</p><ol start="5"><li>解法4：</li></ol><p><code>cube</code>函数， 对<code>group by</code>的维度的所有组合进行聚合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">cube</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe78ba58dfb91072.png" alt></p><p>以上代码对区域和省份进行了聚合， <code>cube</code> 会先对全部数据进行聚合，即 <code>null, null</code>， 再对<code>area,null</code>进行聚合，然后再对<code>null, province</code>进行聚合，最后再对<code>area,province</code>进行聚合。</p><ol start="6"><li>解法5：<br><code>rollup</code>函数， 和<code>cube</code>类似，是针对 <code>group by</code>所有维度的部分组合。 </li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">rollup</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe79320dfb423235.png" alt></p><p>对比<code>cube</code>和<code>rollup</code>得到的结果，我们发现<code>rollup</code>少了<code>null province</code> 这个组合，<code>rollup</code> 是以最左侧指标为主进行组合聚合。</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p><a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g" target="_blank" rel="noopener">讲讲 group 的plus版-张俊红</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/f3uqAVsOxsM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><hr><!-- ## 在 spark 中写 hive 循环, 工具 zeppelim<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">%spark</span><br><span class="line"></span><br><span class="line">for( a &lt;- 0 until 30)&#123;</span><br><span class="line">        // val sql= s&quot;&quot;&quot;use default&quot;&quot;&quot;</span><br><span class="line">    // spark.sql(sql)</span><br><span class="line">    val sql = s&quot;&quot;&quot;</span><br><span class="line">    with a1 as (</span><br><span class="line">    select</span><br><span class="line">        user_account</span><br><span class="line">    from</span><br><span class="line">        computer_view.data</span><br><span class="line">    where</span><br><span class="line">         hit_date between &quot;2018-11-01&quot; and date_add(&quot;2018-11-01&quot;,$&#123;a&#125;)</span><br><span class="line">    union all </span><br><span class="line">        select</span><br><span class="line">        user_account</span><br><span class="line">    from</span><br><span class="line">        computer_view.data</span><br><span class="line">    where</span><br><span class="line">         hit_date between &quot;2018-11-01&quot; and date_add(&quot;2018-11-01&quot;,$&#123;a&#125;))</span><br><span class="line">    select</span><br><span class="line">        count(distinct user_account) as uv</span><br><span class="line">    from</span><br><span class="line">        a1</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    val data = spark.sql(sql)</span><br><span class="line">    println(&quot;day:&quot;, a, &quot;uv:&quot;, data.show())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- # 对用户进行标注</span><br></pre></td></tr></table></figure><p>with a1 as(<br>select<br>    hit_date,<br>    user_account,<br>    hit_mon,<br>    first_login<br>from<br>    test.day_dau<br>where<br>    hit_date between ‘{0}-01’ and ‘{0}-31’),<br>a2 as(<br>select<br>    user_account<br>from<br>    test.mon_new_user<br>where<br>    hit_mon = ‘{0}’),<br>a3 as(<br>select<br>    a1.hit_date,<br>    a1.user_account,<br>    a1.hit_mon,<br>    a1.first_login,<br>    a2.user_account as if_new<br>from<br>    a1 left join a2 on<br>    a1.user_account = a2.user_account)<br>insert into table test.dau_ifnew<br>select<br>    user_account,<br>    (case when if_new is not null and hit_date = first_login then ‘new’ else ‘old’ end) as user_label,<br>    hit_date,<br>    hit_mon<br>from<br>    a3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line">##   取 pv &gt; 3 的用户量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">with a1 as (</span><br><span class="line">SELECT</span><br><span class="line">user_account</span><br><span class="line">FROM</span><br><span class="line">computer_view.data</span><br><span class="line">WHERE</span><br><span class="line">nbtn_name is not null </span><br><span class="line">and</span><br><span class="line">hit_date between &apos;&#123;&#125;&apos; and &apos;&#123;&#125;&apos;</span><br><span class="line">union all </span><br><span class="line">SELECT</span><br><span class="line">user_account</span><br><span class="line">FROM</span><br><span class="line">computer_view.data</span><br><span class="line">WHERE</span><br><span class="line">nbtn_name is not null </span><br><span class="line">and</span><br><span class="line">hit_date between &apos;&#123;&#125;&apos; and &apos;&#123;&#125;&apos;),</span><br><span class="line">a2 as (SELECT</span><br><span class="line"> user_account,</span><br><span class="line">count(user_account) as pv</span><br><span class="line">from </span><br><span class="line">a1</span><br><span class="line">group by </span><br><span class="line">user_account</span><br><span class="line">having</span><br><span class="line">count(user_account) &gt; 3)</span><br><span class="line">SELECT</span><br><span class="line">    count(distinct user_account) as uv</span><br><span class="line">from </span><br><span class="line">a2</span><br><span class="line">``` --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##   创建临时表</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">use default;</span><br><span class="line">create table test.nine_android_user_version_10</span><br><span class="line">select</span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br><span class="line">from</span><br><span class="line">    computer_view.data</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-09-01&apos; and &apos;2018-09-30&apos;</span><br><span class="line">    and</span><br><span class="line">    user_account is not null</span><br><span class="line">    and</span><br><span class="line">    app_version is not null</span><br><span class="line">group by</span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br></pre></td></tr></table></figure></p><h2 id="原始日志中取数"><a href="#原始日志中取数" class="headerlink" title="原始日志中取数"></a>原始日志中取数</h2><p><code>`</code>sql<br>use default;<br>create table test.nine_user_version_10<br>select<br>    url_par(url_query,’account’) as user_account,<br>    split(url_par(url_query,’AppID’),’ ‘)[1] as app_version<br>from<br>    apache_log.client_ios_sensor<br>where<br>    dt between ‘2018-10-01’ and ‘2018-10-20’<br>    and<br>    url_par(url_query,’account’) is not null<br>    and<br>    url_par(url_query,’AppID’) is not null<br>group by<br>    url_par(url_query,’account’),<br>    split(url_par(url_query,’AppID’),’ ‘)[1]</p><p><code>`</code>  –&gt;</p><hr>-->]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的分析思维方法</title>
      <link href="/2019/03/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据分析方法"><a href="#数据分析方法" class="headerlink" title="数据分析方法"></a>数据分析方法</h1><p> 使用频率按照顺序排列</p><h3 id="1-对比分析法"><a href="#1-对比分析法" class="headerlink" title="1.对比分析法"></a>1.对比分析法</h3><p> 对比分析是给单独的数据一个参考系， 否则孤立的数据毫无意义。 </p><ol><li><p>时间上的同比环比</p><ul><li>环比、环比增长率</li><li>同比、同比增长率</li></ul></li><li><p>竞争对手对比</p><ol start="3"><li>与其他维度结合，进行对比</li></ol><ul><li>活动促销前后的对比</li><li>细拆维度之间的对比</li><li>各渠道之间的对比等</li></ul></li></ol><h3 id="2-多维度拆解法"><a href="#2-多维度拆解法" class="headerlink" title="2.多维度拆解法"></a>2.多维度拆解法</h3><p> 多维分解是指从业务需求出发，将指标从多个维度进行拆分。</p><p> <img src="https://i.loli.net/2019/02/26/5c756008dedc0.png" alt="维度划分"></p><p> 说明：</p><p>为什么需要进行多维拆解?</p><ul><li><p>有时候一个非常笼统或者最终的指标你是看不出什么问题来的，但是进行拆分之后，很多细节问题就会浮现出来。</p><ul><li>举个例子，某网站的跳出率是0.47、平均访问深度是4.39、平均访问时长是0.55分钟。如果你要提升用户的参与度，显然这样的数据会让你无从下手;但是你对这些指标进行拆解之后就会发现很多思路。</li></ul><p>补充：<br>维度拆解不够， 容易导致<a href="https://wiki.mbalib.com/wiki/%E8%BE%9B%E6%99%AE%E6%A3%AE%E6%82%96%E8%AE%BA" target="_blank" rel="noopener">辛普森悖论</a></p></li></ul><h3 id="3-漏斗分析法"><a href="#3-漏斗分析法" class="headerlink" title="3. 漏斗分析法"></a>3. 漏斗分析法</h3><p>漏斗分析法， 还原用户转化的路径， 分析每一步的转化率， 针对性的优化和改善</p><p><img src="https://i.loli.net/2019/02/25/5c74047cc3522.jpg" alt="漏斗模型"></p><p> 说明：<br>漏斗分析是一套流程式数据分析，它能够科学反映用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。</p><p>漏斗分析模型已经广泛应用于网站用户行为分析和APP用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析的工作中</p><p>漏斗分析要注意的两个要点：</p><ul><li>不但要看总体的转化率，还要关注转化过程每一步的转化率;</li><li>漏斗分析也需要进行多维度拆解，拆解之后可能会发现不同维度下的转化率也有很大差异。</li></ul><h3 id="4-留存分析"><a href="#4-留存分析" class="headerlink" title="4. 留存分析"></a>4. 留存分析</h3><p> 留存分析是一种用来分析用户参与情况/活跃程度的分析模型，考察进行初始行为的用户中，有多少人会进行后续行为。</p><p>衡量留存的常见指标有：次日留存率、7日留存率、30日留存率等等</p><p> 说明：</p><p> 这是用来衡量产品对用户价值高低的重要方法</p><p>留存分析可以帮助回答以下问题：</p><ul><li>一个新客户在未来的一段时间内是否完成了您期许用户完成的行为？如支付订单等；</li><li>某个社交产品改进了新注册用户的引导流程，期待改善用户注册后的参与程度，如何验证？</li><li>想判断某项产品改动是否奏效，如新增了一个邀请好友的功能，观察是否有人因新增功能而多使用产品几个月？</li></ul><h3 id="5-趋势分析"><a href="#5-趋势分析" class="headerlink" title="5. 趋势分析"></a>5. 趋势分析</h3><p>通常我们在数据分析产品中建立一张数据指标的线图或者柱状图，然后持续观察，重点关注异常值。</p><p> 说明：</p><ul><li><p>在这个过程中，我们要选定第一关键指标，而不要被虚荣指标所迷惑。</p></li><li><p>以社交类APP为例，如果我们将下载量作为第一关键指标，可能就会走偏;因为用户下载APP并不代表他使用了你的产品。在这种情况下，建议将DAU(Daily Active Users，日活跃用户)作为第一关键指标，而且是启动并且执行了某个操作的用户才能算上去;这样的指标才有实际意义，运营人员要核心关注这类指标。</p></li></ul><h3 id="6-用户分群"><a href="#6-用户分群" class="headerlink" title="6.用户分群"></a>6.用户分群</h3><p>用户分群主要有两种分法：维度和行为组合。</p><ul><li><p>第一种根据用户的维度进行分群，比如从地区维度分，有北京、上海、广州、杭州等地的用户;从用户登录平台进行分群，有PC端、平板端和手机移动端用户。</p></li><li><p>第二种根据用户行为组合进行分群，比如说每周在社区签到3次的用户与每周在社区签到少于3次的用户的区别.</p></li></ul><h3 id="7-公式法"><a href="#7-公式法" class="headerlink" title="7.公式法"></a>7.公式法</h3><p> 将一切问题皆可量化，拆解成最小的维度，通过 +、-、*、/ 进行计算</p><p><img src="https://i.loli.net/2019/02/27/5c7698403238e.png" alt="公式法"></p><h3 id="8-用户细查"><a href="#8-用户细查" class="headerlink" title="8.用户细查"></a>8.用户细查</h3><p>用户行为数据是观察用户在你产品内的行为路径是一种非常直观的分析方法。</p><ul><li>在用户分群的基础上，一般抽取3-5个用户进行细查，即可覆盖分群用户大部分行为规律。</li></ul><ul><li>绝大多数产品都或多或少存在一些反人类的设计或者BUG，通过用户细查可以很好地发现产品中存在的问题并且及时解决。</li></ul><h3 id="9-A-B测试与A-A测试"><a href="#9-A-B测试与A-A测试" class="headerlink" title="9.A/B测试与A/A测试"></a>9.A/B测试与A/A测试</h3><p> A/B测试是为了达到一个目标，采取了两套方案，一组用户采用A方案，一组用户采用B方案。通过实验观察两组方案的数据效果，判断两组方案的好坏。</p><p> 说明：</p><ul><li><p>在A/B测试方面，谷歌是不遗余力地尝试;对于搜索结果的显示，谷歌会制定多种不同的方案(包括文案标题，字体大小，颜色等等)，不断来优化搜索结果中广告的点击率。</p><p>这里需要注意的一点，A/B测试之前最好有A/A测试或者类似准备。什么是A/A测试?A/A测试是评估两个实验组是否是处于相同的水平，这样A/B测试才有意义。其实这和学校里面的控制变量法、实验组与对照组、双盲试验本质一样的。</p></li></ul><h3 id="10-假设法"><a href="#10-假设法" class="headerlink" title="10.假设法"></a>10.假设法</h3><p> 假设-验证-判断。 当没有直观数据时， 以假设先行的方式进行推断。<br> 说明：</p><p> 例如： 如果商品提价后， 公司收益会不会变化？</p><ul><li><p>假设流量不会发生变化， 那么商品价格会影响转化率，确定转化率的下降。 </p></li><li><p>计算日常的转化率， 针对不同的用户，如：忠诚用户、普通用户、羊毛用户， 预估各类别用户提价后的转化率变化。</p></li></ul><h3 id="11-指数法"><a href="#11-指数法" class="headerlink" title="11.指数法"></a>11.指数法</h3><p>指定一个标准， 解决衡量的问题</p><ul><li><p>线性加权：</p><ul><li>反比例： 1-1/n， 范围为0-1</li><li>log指数法<br> 热度公式： log(uv+ 5*评论,2) +(time -初始时间) / 10</li></ul></li></ul><!-- <!-- ### 结构分析### 对比分析### 时间序列分析### 相关性分析### 机器学习 -- --><hr><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjcxMzIwMQ==&amp;mid=2649861486&amp;idx=1&amp;sn=e8c79ae936fc1f04fffed59f6be7e018&amp;chksm=bee00af0899783e64566d7b921b904ba18e5846a3ade62fa48a8ac89d923a517105d6fbc09a0#rd" target="_blank" rel="noopener">数据分析的基本方法论</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive-SQL练习题</title>
      <link href="/2019/03/24/%E6%8A%80%E8%83%BD-Hive%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2019/03/24/%E6%8A%80%E8%83%BD-Hive%E5%B8%B8%E8%A7%81%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hive概念考查"><a href="#Hive概念考查" class="headerlink" title="Hive概念考查"></a>Hive概念考查</h1><ol><li><p>between 和 having 的区别</p></li><li><p>inner join 和 outer join 的区别</p></li><li><p>Hive 如何优化</p></li><li><p>Hive 中常用的窗口函数都有哪些</p></li><li><p>如何进行行转列</p></li><li><p>如何进行列转行</p></li><li><p>sql 空缺值如何填充</p></li></ol><h1 id="join考查"><a href="#join考查" class="headerlink" title="join考查"></a>join考查</h1><h2 id="结合两个表"><a href="#结合两个表" class="headerlink" title="结合两个表"></a>结合两个表</h2><ol><li><strong>问题描述：</strong></li></ol><p>表1：Preson</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PersonId</td><td>int</td></tr><tr><td>FirstName</td><td>varchar</td></tr><tr><td>LastName</td><td>varchar</td></tr></tbody></table><p>表2： Address</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>AddressId</td><td>int</td></tr><tr><td>PersonId</td><td>int</td></tr><tr><td>City</td><td>varchar</td></tr><tr><td>State</td><td>varchar</td></tr></tbody></table><p>要求： 为Person表中的每个人提供以下信息，无论每个人都有一个地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></table></figure></p><ol start="2"><li><strong>答案：</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    Person.FirstName,</span><br><span class="line">    Person.LastName,</span><br><span class="line">    Address.City,</span><br><span class="line">    Address.State</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Person <span class="keyword">LEFT</span> <span class="keyword">join</span> Address </span><br><span class="line">    <span class="keyword">on</span> Person.PersonId = Address.PersonId;</span><br></pre></td></tr></table></figure><p>考查点： 使用 <code>join</code> 对两表进行连接查询。</p><hr><h2 id="查询比经理薪资高的员工姓名"><a href="#查询比经理薪资高的员工姓名" class="headerlink" title="查询比经理薪资高的员工姓名"></a>查询比经理薪资高的员工姓名</h2><ol><li>问题</li></ol><p>表：Employee </p><blockquote><p>包含员工和经理的Id 与薪水</p></blockquote><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>NULL</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>NULL</td></tr></tbody></table><p>要求： 查找收入高于经理的员工，得到如下结果：</p><table><thead><tr><th>Employee</th></tr></thead><tbody><tr><td>Joe</td></tr></tbody></table><blockquote><p>前3列 来自a1, 后两列来自a2</p></blockquote><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><blockquote><p>利用 join 对表进行合并<br>前3列 来自a1, 后两列来自a2</p></blockquote><table><thead><tr><th>Name</th><th>Salary</th><th>ManagerId</th><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>Joe</td><td>70000</td><td>3</td><td>3</td><td>60000</td></tr><tr><td>Henry</td><td>80000</td><td>4</td><td>4</td><td>90000</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    a1.name as Employee</span><br><span class="line">from    </span><br><span class="line">    Employee as a1 join employee as a2</span><br><span class="line">    on  a1.ManagerId = a2.Id</span><br><span class="line">where </span><br><span class="line">a1.Salary &gt; a2.Salary</span><br></pre></td></tr></table></figure><ul><li><p>答案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">name</span>,salary, ManagerId</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">    Employee),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        managerid,</span><br><span class="line">        <span class="keyword">Id</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Employee</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.ManagerId = a2.Id</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.Salary &gt; a2.Salary</span><br></pre></td></tr></table></figure></li><li><p>答案3：</p></li></ul><blockquote><p>步骤1：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> Employee <span class="keyword">AS</span> a1, Employee <span class="keyword">AS</span> a2</span><br></pre></td></tr></table></figure><p>此步骤输出结果为：</p><p>结果将获得这两个标的笛卡尔积，输出结果将使 4*4 = 16条记录， 我们对输出结果进行过滤。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.Name <span class="keyword">AS</span> <span class="string">'Employee'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee <span class="keyword">AS</span> a,</span><br><span class="line">    Employee <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.ManagerId = b.Id</span><br><span class="line">        <span class="keyword">AND</span> a.Salary &gt; b.Salary</span><br></pre></td></tr></table></figure><hr><h1 id="排序函数"><a href="#排序函数" class="headerlink" title="排序函数"></a>排序函数</h1><h2 id="对数据进行排序"><a href="#对数据进行排序" class="headerlink" title="对数据进行排序"></a>对数据进行排序</h2><ol><li><strong>问题：</strong></li></ol><p>表： Scores</p><table><thead><tr><th>Id</th><th>Score</th></tr></thead><tbody><tr><td>1</td><td>3.50</td></tr><tr><td>2</td><td>3.65</td></tr><tr><td>3</td><td>4.00</td></tr><tr><td>4</td><td>3.85</td></tr><tr><td>5</td><td>4.00</td></tr><tr><td>6</td><td>3.65</td></tr></tbody></table><p>要求： 对以下 Scores 表中的分数进行排名，如果两数相同，则有相同的排名， 排名相等的不会留下空位。</p><p>输出结果为： </p><table><thead><tr><th>Score</th><th>Rank</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><ol start="2"><li>答案 </li></ol><ul><li>答案1：</li></ul><p>步骤1：  返回不同的成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Distinct</span> Score <span class="keyword">from</span> Scores</span><br></pre></td></tr></table></figure><p>步骤2： 统计并计算排名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">Count</span>(<span class="number">1</span>) + <span class="number">1</span> <span class="keyword">From</span> (<span class="keyword">Select</span> <span class="keyword">Distinct</span> Score <span class="keyword">from</span> Scores) <span class="keyword">as</span> uniqeScores <span class="keyword">where</span> Score &gt; sc.Score</span><br></pre></td></tr></table></figure><p>步骤3： 汇总</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> </span><br><span class="line">    sc.Score,</span><br><span class="line">    (<span class="keyword">Select</span> <span class="keyword">Count</span>(<span class="number">1</span>) + <span class="number">1</span> </span><br><span class="line"><span class="keyword">From</span> (</span><br><span class="line">        <span class="keyword">Select</span> </span><br><span class="line">            <span class="keyword">Distinct</span> Score </span><br><span class="line">        <span class="keyword">from</span>  Scores) <span class="keyword">as</span> uniqeScores </span><br><span class="line"> <span class="keyword">where</span> Score &gt; sc.Score) <span class="keyword">as</span> <span class="keyword">rank</span> </span><br><span class="line"><span class="keyword">From</span> Scores sc </span><br><span class="line"><span class="keyword">Order</span> <span class="keyword">by</span> sc.Score <span class="keyword">Desc</span>;</span><br></pre></td></tr></table></figure><ul><li><p>答案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s1.Score,</span><br><span class="line"> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> s2.Score) <span class="keyword">Rank</span></span><br><span class="line"><span class="keyword">from</span> Scores s1</span><br><span class="line">       <span class="keyword">inner</span> <span class="keyword">join</span> Scores s2 <span class="keyword">on</span> s1.Score &lt;= s2.Score</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s1.Id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> s1.Score <span class="keyword">desc</span></span><br></pre></td></tr></table></figure></li><li><p>答案3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    Score,</span><br><span class="line">    dense_rank() over(order by Score)  as Rank</span><br><span class="line">from </span><br><span class="line">    Scores</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>延伸</li></ol><p>rank、dense_rank、 row_number 的区别</p><ul><li>rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位。<blockquote><p> 如1、2、2、4</p></blockquote></li><li>dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位。<blockquote><p> 如1、2、2、3</p></blockquote></li><li>row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等。<blockquote><p> 如1、2、3、4</p></blockquote></li></ul><hr><h2 id="连续-4-个月活跃的用户明细"><a href="#连续-4-个月活跃的用户明细" class="headerlink" title="连续 4 个月活跃的用户明细"></a>连续 4 个月活跃的用户明细</h2><ol><li><p>问题：<br>求出 1-4 月每月连续登陆客户端的用户数</p></li><li><p>思路</p></li></ol><p>将用户登录的月份按从小到大排序， 找出排序等于 4 的用户</p><ol start="3"><li>答案</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    <span class="keyword">id</span>, </span><br><span class="line">    <span class="keyword">month</span>(dt) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">data</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>, <span class="keyword">month</span>(dt) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    a1.month,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">id</span>) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.num= <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><h2 id="5月中连续7天登陆的用户数"><a href="#5月中连续7天登陆的用户数" class="headerlink" title="5月中连续7天登陆的用户数"></a>5月中连续7天登陆的用户数</h2><ol><li>问题:<br>根据用户登录表 data，取出连续登录了K天的用户uid</li></ol><table><thead><tr><th>id</th><th>dt</th></tr></thead><tbody><tr><td>A</td><td>2019-06-01</td></tr><tr><td>B</td><td>2019-06-03</td></tr><tr><td>B</td><td>2019-06-04</td></tr><tr><td>B</td><td>2019-06-05</td></tr><tr><td>B</td><td>2019-06-06</td></tr><tr><td>C</td><td>2019-06-05</td></tr><tr><td>C</td><td>2019-06-06</td></tr><tr><td>C</td><td>2019-06-07</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><ol><li>将用户按照电话号进行排序</li></ol><table><thead><tr><th>id</th><th>dt</th><th>num</th></tr></thead><tbody><tr><td>A</td><td>2019-05-01</td><td>1</td></tr><tr><td>B</td><td>2019-05-03</td><td>1</td></tr><tr><td>B</td><td>2019-05-04</td><td>2</td></tr><tr><td>B</td><td>2019-05-05</td><td>3</td></tr><tr><td>B</td><td>2019-05-06</td><td>4</td></tr><tr><td>C</td><td>2019-05-05</td><td>1</td></tr><tr><td>C</td><td>2019-05-06</td><td>2</td></tr><tr><td>C</td><td>2019-05-07</td><td>3</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Data</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-07'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt</span><br></pre></td></tr></table></figure><ol start="2"><li>将日期与排序进行相减</li></ol><table><thead><tr><th>id</th><th>dt</th><th>num</th><th>diff</th></tr></thead><tbody><tr><td>A</td><td>2019-05-01</td><td>1</td><td>2019-04-30</td></tr><tr><td>B</td><td>2019-05-03</td><td>1</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-04</td><td>2</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-05</td><td>3</td><td>2019-05-02</td></tr><tr><td>B</td><td>2019-05-06</td><td>4</td><td>2019-05-02</td></tr><tr><td>C</td><td>2019-05-05</td><td>1</td><td>2019-05-04</td></tr><tr><td>C</td><td>2019-05-06</td><td>2</td><td>2019-05-04</td></tr><tr><td>C</td><td>2019-05-07</td><td>3</td><td>2019-05-04</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-03'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span>,</span><br><span class="line">    (<span class="keyword">DATE_SUB</span>(dt, <span class="keyword">num</span> )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="3"><li>统计差值相同的数字个数，并大于等于3</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user_account,</span><br><span class="line">         hit_date,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-05'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">num</span>,</span><br><span class="line">    (<span class="keyword">DATE_SUB</span>(hit_date, <span class="keyword">num</span> )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    user_account,</span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">num</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    diff,</span><br><span class="line">    <span class="keyword">max</span>(<span class="keyword">num</span>),</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    diff</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">max</span>(<span class="keyword">num</span>)  &gt;= <span class="number">1</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><ol start="4"><li>找出连续登录4天以上的用户数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">id</span> <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-05'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">id</span>,</span><br><span class="line">        dt</span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span>,</span><br><span class="line">    (<span class="keyword">DATE_SUB</span>(dt, <span class="keyword">num</span> )) <span class="keyword">as</span> diff </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">num</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    diff,</span><br><span class="line">    <span class="keyword">count</span>(diff) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a2</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">id</span>,</span><br><span class="line">    diff </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">count</span>(diff)  &gt;= <span class="number">4</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><!-- sd --><table><thead><tr><th>id</th><th>diff</th><th>count(diff)</th></tr></thead><tbody><tr><td>B</td><td>2019-05-02</td><td>4</td></tr><tr><td>C</td><td>2019-05-04</td><td>3</td></tr></tbody></table><hr><h2 id="求连续任意天数的用户数"><a href="#求连续任意天数的用户数" class="headerlink" title="求连续任意天数的用户数"></a>求连续任意天数的用户数</h2><blockquote><p>sql分三层<br>第一层：根据条件查询一个时间区间的数据<br>     cha_day 统一计算出一个时间差，然后和当前行数相减。连续的天数和行数相减，结果是一样的<br>第二层：分组求出每个用户的连续天数，<br>     rows:排序找出一个用户最大连续天数<br>第三层：连续天数分组，求出人数。<br>     分组天数总人数，应该等于总人数</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    lx_day,</span><br><span class="line">    <span class="keyword">count</span>(user_account)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        user_account,</span><br><span class="line">        cha_day,</span><br><span class="line">        <span class="keyword">count</span>(cha_day) <span class="keyword">as</span> lx_day,</span><br><span class="line">        row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">count</span>(cha_day) <span class="keyword">desc</span>) <span class="keyword">as</span> <span class="keyword">rows</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            <span class="keyword">datediff</span>(hit_date,<span class="string">'2000-01-01'</span>)-row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> cha_day,</span><br><span class="line">            hit_date,</span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            apache_computer_view.client_ios_log</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2019-10-15'</span> <span class="keyword">and</span> <span class="string">'2019-10-20'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name = <span class="string">'签到有礼'</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            hit_date,</span><br><span class="line">            user_account</span><br><span class="line">    )v</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        user_account,</span><br><span class="line">        cha_day</span><br><span class="line">)v</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    <span class="keyword">rows</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    lx_day</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    lx_day</span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">    <span class="number">1000</span></span><br></pre></td></tr></table></figure><hr><h1 id="取出排名第-2-高的数据"><a href="#取出排名第-2-高的数据" class="headerlink" title="取出排名第 2 高的数据"></a>取出排名第 2 高的数据</h1><ol><li><strong>问题描述</strong></li></ol><p>表： Employee</p><table><thead><tr><th>Id</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>300</td></tr></tbody></table><p>要求： 根据上面的 Employee 表，查询返回 薪水工资第二高的数据：<code>200</code>, 如果没有第二高的薪水， 返回<code>Null</code>。</p><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1</li></ul><p>解法： 在除过第一名薪水中，找出最高的薪水，也就是第二名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">MAX</span>(Salary) <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    Salary &lt; (<span class="keyword">SELECT</span>  <span class="keyword">MAX</span>(Salary)   <span class="keyword">FROM</span>   Employee);</span><br></pre></td></tr></table></figure><ul><li>答案2</li></ul><p>解法： 跳过排名第一的数据， 并取出1条数据，即读取第2条数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">   <span class="keyword">DISTINCT</span>  Salary <span class="keyword">as</span> SecondHighestSalary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"> <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可缩写为limit 1,1</span></span><br></pre></td></tr></table></figure><p><strong>但上式写法错误， 因为如果表中没有第二薪水的话，那<code>sql</code>运行报错，而不是返回<code>Null</code>。</strong></p><p>我们将其作为临时表可解决此问题：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><p>或者使用 <code>IFNULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>), </span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><ol start="3"><li>延伸</li></ol><p>找出排名第三的薪水</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1</span>), </span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><hr><h1 id="留存率"><a href="#留存率" class="headerlink" title="留存率"></a>留存率</h1><ol><li>问题：<br> 写出6月5-10号每日客户端活跃用户的次1日、次3日、次7日留存</li></ol><ol start="2"><li>答案</li></ol><ul><li>答案1：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    dt,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    dt,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.dt,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.dt, a1.dt) = <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.dt, a1.dt) = <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.dt, a1.dt) = <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.dt</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure></li></ul><p>输出结果为： </p><table><thead><tr><th>日期</th><th>uv</th><th>次1日</th><th>次3日</th><th>次7日</th></tr></thead><tbody><tr><td>2019/6/1</td><td>50231</td><td>6578</td><td>6642</td><td>5154</td></tr><tr><td>2019/6/2</td><td>42000</td><td>6293</td><td>5027</td><td>4304</td></tr><tr><td>2019/6/3</td><td>44312</td><td>6760</td><td>8331</td><td>5042</td></tr><tr><td>2019/6/4</td><td>37852</td><td>5298</td><td>7133</td><td>0</td></tr><tr><td>2019/6/5</td><td>30678</td><td>6082</td><td>4648</td><td>0</td></tr><tr><td>2019/6/6</td><td>39405</td><td>8173</td><td>4972</td><td>0</td></tr><tr><td>2019/6/7</td><td>31267</td><td>5352</td><td>4920</td><td>0</td></tr><tr><td>2019/6/8</td><td>25614</td><td>4451</td><td>0</td><td>0</td></tr><tr><td>2019/6/9</td><td>24113</td><td>4568</td><td>0</td><td>0</td></tr><tr><td>2019/6/10</td><td>26242</td><td>0</td><td>0</td><td>0</td></tr></tbody></table><ul><li>答案2：<br>步骤1：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    computer</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> </span><br><span class="line">    dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span> </span><br><span class="line">    dt</span><br></pre></td></tr></table></figure></li></ul><p>步骤2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        dt</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        dt</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.client_android_log_view</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        dt <span class="keyword">between</span> <span class="string">'2019-06-01'</span> <span class="keyword">and</span> <span class="string">'2019-06-17'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.dt =  <span class="keyword">date_add</span>(a1.dt, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.dt</span><br></pre></td></tr></table></figure></p><p>步骤3：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">留存率 = 用步骤2结果/ 步骤1 结果</span><br></pre></td></tr></table></figure></p><hr><h1 id="连续出现三次的数字"><a href="#连续出现三次的数字" class="headerlink" title="连续出现三次的数字"></a>连续出现三次的数字</h1><ol><li>问题： </li></ol><p>查找出连续出现至少三次的所有数字</p><p>表 Logs 如下：</p><table><thead><tr><th>Id</th><th>Num</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>1</td></tr><tr><td>6</td><td>2</td></tr><tr><td>7</td><td>2</td></tr></tbody></table><p>得到如下结果：</p><table><thead><tr><th>ConsecutiveNums</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span>  a1.Num <span class="keyword">as</span>  ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Logs</span> <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    <span class="keyword">Logs</span> <span class="keyword">as</span> a2 <span class="keyword">on</span> a1.Id = a2.Id<span class="number">-1</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    <span class="keyword">Logs</span> <span class="keyword">as</span> a3 <span class="keyword">on</span> a1.Id = a3.Id <span class="number">-2</span></span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.Num = a2.Num <span class="keyword">and</span> a2.Num = a3.Num</span><br></pre></td></tr></table></figure><ul><li>答案2：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">distinct</span> a1.Num <span class="keyword">as</span>  ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Logs</span> a1,</span><br><span class="line">    <span class="keyword">Logs</span> a2,</span><br><span class="line">    <span class="keyword">Logs</span> a3</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a1.Id = a2.Id <span class="number">-1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a2.Id = a3.Id <span class="number">-1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Num = a2.Num</span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a2.Num = a3.Num</span><br></pre></td></tr></table></figure><ul><li>答案3：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---连续 N 次出现， 则将 3 改为 N 即可。</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">distinct</span> <span class="keyword">num</span> <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">id</span>, <span class="keyword">num</span>, </span><br><span class="line">    @pre := @cur,</span><br><span class="line">    @cur := <span class="keyword">num</span>,</span><br><span class="line">    @rep_ct := <span class="keyword">IF</span>(@pre = @cur, @rep_ct + <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">as</span> rep_ct</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="string">`Logs`</span> l, </span><br><span class="line">    (<span class="keyword">SELECT</span> @pre := <span class="literal">null</span>, @cur := <span class="number">0</span>, @rep_ct := <span class="number">1</span>) init</span><br><span class="line">)   temp </span><br><span class="line"><span class="keyword">WHERE</span> rep_ct &gt;= <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="找出重复邮件"><a href="#找出重复邮件" class="headerlink" title="找出重复邮件"></a>找出重复邮件</h1><ol><li>问题</li></ol><p>表： Person</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr><tr><td>2</td><td><a href="mailto:c@d.com" target="_blank" rel="noopener">c@d.com</a></td></tr><tr><td>3</td><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><p>要求： 找出Person 表中所有重复电子邮件，得到如下结果：</p><table><thead><tr><th>Email</th></tr></thead><tbody><tr><td><a href="mailto:a@b.com" target="_blank" rel="noopener">a@b.com</a></td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li><p>答案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.Email</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    Email,</span><br><span class="line">    <span class="keyword">count</span>(Email) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    Email) <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.num !=<span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>答案2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    Email</span><br><span class="line">from</span><br><span class="line">    Person</span><br><span class="line">group by </span><br><span class="line">    Email</span><br><span class="line">having </span><br><span class="line">    count(Email) !=1</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="找出未订购任何内容的用户"><a href="#找出未订购任何内容的用户" class="headerlink" title="找出未订购任何内容的用户"></a>找出未订购任何内容的用户</h1><ol><li>问题：</li></ol><p>表： Customers</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Joe</td></tr><tr><td>2</td><td>Henry</td></tr><tr><td>3</td><td>Sam</td></tr><tr><td>4</td><td>Max</td></tr></tbody></table><p>表： Orders</p><table><thead><tr><th>Id</th><th>CustomerId</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>要求： 根据上面两个表，找出从未订购任何内容的所有客户。输出结果如下：</p><table><thead><tr><th>Customers</th></tr></thead><tbody><tr><td>Henry</td></tr><tr><td>Max</td></tr></tbody></table><ol start="2"><li>答案</li></ol><ul><li>答案1：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">Name</span> <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     Customers <span class="keyword">left</span> <span class="keyword">JOIN</span> Orders <span class="keyword">on</span> Customers.Id = Orders.CustomerId</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    Orders.CustomerId <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><ul><li>答案2：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    customers.name <span class="keyword">as</span> Customers</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customers</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    customers.Id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        CustomerId</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Orders)</span><br></pre></td></tr></table></figure><hr><h1 id="找出各部门薪水最高的员工"><a href="#找出各部门薪水最高的员工" class="headerlink" title="找出各部门薪水最高的员工"></a>找出各部门薪水最高的员工</h1><ol><li>问题：</li></ol><p>表： Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>DepartmentId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>1</td></tr><tr><td>2</td><td>Jim</td><td>90000</td><td>1</td></tr><tr><td>3</td><td>Henry</td><td>80000</td><td>2</td></tr><tr><td>4</td><td>Sam</td><td>60000</td><td>2</td></tr><tr><td>5</td><td>Max</td><td>90000</td><td>1</td></tr></tbody></table><p>表： Department</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>IT</td></tr><tr><td>2</td><td>Sales</td></tr></tbody></table><p> 要求：找出各部门薪水最高的员工</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Jim</td><td>90000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr></tbody></table><ol start="2"><li>答案</li></ol><p>步骤1： 查出各部门最高薪水</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="keyword">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    DepartmentId</span><br></pre></td></tr></table></figure><p>步骤2： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">Employee.Name <span class="keyword">as</span> Department,</span><br><span class="line">Department.Name <span class="keyword">as</span> Employee,</span><br><span class="line">Salary </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">join</span> Department <span class="keyword">on</span> Employee.DepartmentId= Department.Id</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    ((Employee.DepartmentId, Salary) <span class="keyword">in</span> </span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">    DepartmentId,</span><br><span class="line">    <span class="keyword">MAX</span>(Salary)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">   Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    DepartmentId))</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">Department,</span><br><span class="line">Employee,</span><br><span class="line">Salary</span><br></pre></td></tr></table></figure><hr><h1 id="获取每个部门中薪水前三名的员工"><a href="#获取每个部门中薪水前三名的员工" class="headerlink" title="获取每个部门中薪水前三名的员工"></a>获取每个部门中薪水前三名的员工</h1><ol><li>问题：</li></ol><p>表：Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>DepartmentId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>85000</td><td>1</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>2</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>2</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>1</td></tr><tr><td>5</td><td>Janet</td><td>69000</td><td>1</td></tr><tr><td>6</td><td>Randy</td><td>85000</td><td>1</td></tr><tr><td>7</td><td>Will</td><td>70000</td><td>1</td></tr></tbody></table><p>表： Department</p><table><thead><tr><th>Id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>IT</td></tr><tr><td>2</td><td>Sales</td></tr></tbody></table><p>要求： 找出各部门薪水前三的员工， 输出结果如下：</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Randy</td><td>85000</td></tr><tr><td>IT</td><td>Joe</td><td>85000</td></tr><tr><td>IT</td><td>Will</td><td>70000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr><tr><td>Sales</td><td>Sam</td><td>60000</td></tr></tbody></table><ol start="2"><li>答案</li></ol><p>步骤1：对各部门薪水进行排序</p><ul><li>合并<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       Employee.Name <span class="keyword">AS</span> Employee,</span><br><span class="line">        Employee.Salary <span class="keyword">AS</span> Salary,</span><br><span class="line">        Department.Name <span class="keyword">AS</span> Department </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Employee <span class="keyword">join</span> Department <span class="keyword">on</span> Employee.DepartmentId = Department.Id </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">           Employee,</span><br><span class="line">        Salary,</span><br><span class="line">        Department</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>Employee</th><th>Salary</th><th>Department</th></tr></thead><tbody><tr><td>Joe</td><td>85000</td><td>IT</td></tr><tr><td>Henry</td><td>80000</td><td>Sales</td></tr><tr><td>Sam</td><td>60000</td><td>Sales</td></tr><tr><td>Max</td><td>90000</td><td>IT</td></tr><tr><td>Janet</td><td>69000</td><td>IT</td></tr><tr><td>Randy</td><td>85000</td><td>IT</td></tr><tr><td>Will</td><td>70000</td><td>IT</td></tr></tbody></table><p>步骤2 ： 找出排名前三的</p><blockquote><p>思路：</p><ul><li>再添加一张Employee 表，与步骤1中的 A 表进行对比， 令 B 表中的 salary 大于 A 表中的 salary</li><li>条件限制：B表中 salary 大于 A 表中salary 的个数小于3</li></ul></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">       A.Name <span class="keyword">AS</span> Employee,</span><br><span class="line">        A.Salary <span class="keyword">AS</span> Salary,</span><br><span class="line">        Department.Name <span class="keyword">AS</span> Department </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Employee <span class="keyword">as</span> A <span class="keyword">join</span> Department <span class="keyword">on</span> A.DepartmentId = Department.Id </span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> B.Salary)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        Employee <span class="keyword">as</span> B</span><br><span class="line">    <span class="keyword">WHERE</span> </span><br><span class="line">        B.Salary &gt; A.Salary</span><br><span class="line">        <span class="keyword">and</span> </span><br><span class="line">        B.DepartmentId = A.DepartmentId) &lt;<span class="number">3</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://www.yanxurui.cc/posts/mysql/2016-11-10-10-sql-interview-questions/" target="_blank" rel="noopener">sql题</a></p><h1 id="学生-课程-成绩案例"><a href="#学生-课程-成绩案例" class="headerlink" title="学生-课程-成绩案例"></a>学生-课程-成绩案例</h1><ol><li>内容：<br>表： student</li></ol><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>zy</td></tr><tr><td>2</td><td>hz</td></tr><tr><td>3</td><td>zy</td></tr><tr><td>4</td><td>lx</td></tr><tr><td>5</td><td>lx</td></tr></tbody></table><p>表： course</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>match</td></tr><tr><td>2</td><td>python</td></tr><tr><td>3</td><td>java</td></tr></tbody></table><p>表: student_course</p><table><thead><tr><th>sid</th><th>cid</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>60</td></tr><tr><td>1</td><td>2</td><td>50</td></tr><tr><td>2</td><td>2</td><td>80</td></tr><tr><td>4</td><td>3</td><td>90</td></tr><tr><td>2</td><td>2</td><td>80</td></tr><tr><td>3</td><td>3</td><td>50</td></tr></tbody></table><ol start="2"><li>问题</li></ol><ul><li><p>问题1：</p><p>查询 student表中重名的学生， 结果包含id 和name, 按 name 升序</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">name</span>,</span><br><span class="line">    <span class="keyword">id</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">name</span> <span class="keyword">in</span> (<span class="keyword">select</span> <span class="keyword">name</span> <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">name</span> <span class="keyword">having</span> <span class="keyword">count</span>(<span class="keyword">name</span>) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">name</span></span><br></pre></td></tr></table></figure><ul><li>问题2：</li></ul><p>查询 student_course 表中的平均份不及格的学生， 列出学生的 id 和平均分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    sid,</span><br><span class="line">    avg(score) as avg_score</span><br><span class="line">from </span><br><span class="line">    student_course</span><br><span class="line">group by </span><br><span class="line">    sid</span><br><span class="line">having</span><br><span class="line">    avg_score &lt; 60</span><br></pre></td></tr></table></figure><ul><li>问题3：</li></ul><p>查询每门课成绩都不低于80的学生id</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> <span class="keyword">sid</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student_course</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">sid</span> <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">        (<span class="keyword">select</span></span><br><span class="line">            score</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            student_course</span><br><span class="line">        <span class="keyword">where</span> </span><br><span class="line">            score &lt;<span class="number">80</span>)</span><br></pre></td></tr></table></figure><ul><li>问题4：</li></ul><p>查询每个学生的总成绩，列出学生名称和总成绩</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    student.name,</span><br><span class="line">    <span class="keyword">sum</span>(student_course.score)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    student  <span class="keyword">left</span> <span class="keyword">join</span> student_course <span class="keyword">on</span> student.id = student_course.sid</span><br></pre></td></tr></table></figure><ul><li>问题5：查出总成绩最高的学生</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">sid</span>, <span class="keyword">sum</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student_course</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">sid</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">sum</span>(score) <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>问题6：  查询课程1,成绩第二高的学生</li></ul><p>方法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---在除过第一高的成绩中，找出最高的成绩</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    cid,</span><br><span class="line">    <span class="keyword">max</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stuent_score</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    cid =<span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line">    score &lt;</span><br><span class="line">    (<span class="keyword">select</span> <span class="keyword">max</span>(score)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        student_score)</span><br></pre></td></tr></table></figure></p><p>方法2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---跳过排名第一的数据， 取1条数据</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">max</span>(score)</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stuent_score</span><br><span class="line"><span class="keyword">where</span>   </span><br><span class="line">    cid = <span class="number">1</span> </span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        score</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">        score <span class="keyword">desc</span> </span><br><span class="line">    <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">1</span> </span><br><span class="line">    <span class="comment">--limit 1,1</span></span><br></pre></td></tr></table></figure><ul><li>问题7： 查看各科成绩最高的学生id与课程id </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    cid,</span><br><span class="line">    sid,</span><br><span class="line">    score</span><br><span class="line">from </span><br><span class="line">    student_course as a1</span><br><span class="line">where </span><br><span class="line">    score &gt;=</span><br><span class="line">    (select</span><br><span class="line">        max(score)</span><br><span class="line">    from</span><br><span class="line">        stuent_score as a2</span><br><span class="line">    where  </span><br><span class="line">        a1.id = ax.id)</span><br></pre></td></tr></table></figure><p>错误写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    sid,</span><br><span class="line">    cid,</span><br><span class="line">    max(score)</span><br><span class="line">from </span><br><span class="line">    student_score</span><br><span class="line">group by </span><br><span class="line">    cid</span><br></pre></td></tr></table></figure><ul><li>问题8： 在student_course 表中查询每门课的前2名，结果按照课程id 升序， 同一课程按照成绩降序。 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    *</span><br><span class="line">from </span><br><span class="line">    student_course x</span><br><span class="line">where </span><br><span class="line">    2 &gt;(</span><br><span class="line">        select</span><br><span class="line">            count(*)</span><br><span class="line">        from</span><br><span class="line">            student_course y</span><br><span class="line">        where </span><br><span class="line">            y.cid = x.cid and y.score &gt; x.score)</span><br><span class="line">order by </span><br><span class="line">    cid,</span><br><span class="line">    score DESC</span><br></pre></td></tr></table></figure><hr><h1 id="对每季度数据进行汇总"><a href="#对每季度数据进行汇总" class="headerlink" title="对每季度数据进行汇总"></a>对每季度数据进行汇总</h1><ol><li>问题：</li></ol><p>表： sales</p><table><thead><tr><th>年</th><th>季度</th><th>销售</th></tr></thead><tbody><tr><td>1991</td><td>1</td><td>11</td></tr><tr><td>1991</td><td>2</td><td>12</td></tr><tr><td>1991</td><td>3</td><td>13</td></tr><tr><td>1991</td><td>4</td><td>14</td></tr><tr><td>1992</td><td>1</td><td>21</td></tr><tr><td>1992</td><td>2</td><td>22</td></tr><tr><td>1992</td><td>3</td><td>23</td></tr><tr><td>1992</td><td>4</td><td>24</td></tr></tbody></table><p>要求： 通过 SQL 语句显示以下结果：</p><table><thead><tr><th>年</th><th>一季度</th><th>二季度</th><th>三季度</th><th>四季度</th></tr></thead><tbody><tr><td>1991</td><td>11</td><td>12</td><td>13</td><td>14</td></tr><tr><td>1992</td><td>21</td><td>22</td><td>23</td><td>24</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 年, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">1</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 一季度, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">2</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 二季度, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">3</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 三季度, </span><br><span class="line"><span class="keyword">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> 季度=<span class="number">4</span> <span class="keyword">then</span> 销售量 <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> 四季度 </span><br><span class="line"><span class="keyword">from</span> sales <span class="keyword">group</span> <span class="keyword">by</span> 年</span><br></pre></td></tr></table></figure><hr><h1 id="解释-lateral-view-函数"><a href="#解释-lateral-view-函数" class="headerlink" title="解释 lateral view 函数"></a>解释 lateral view 函数</h1><ul><li>描述：<br>   lateral view 用于和 split、explode、collect_set 函数 等一起使用， 能够将一行数据拆成多行数据，在此基础上对拆分后的数据进行聚合。 </li></ul><ul><li><p>问题1：<br>将 表 table 中的 <code>adid_list</code> 转换为单独的行。</p><p>表： table</p></li></ul><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><p> 答案：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable  <span class="keyword">as</span> adid</span><br></pre></td></tr></table></figure><p> 输出结果为： </p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table><hr><ul><li><p>问题2：<br>要求：  计算特定广告的展现次数</p><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></table></figure><p>输出结果为： </p></li></ul><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><p>问题3：<br> 多个 lateral view 查询</p><p> 表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><p> 答案：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br></pre></td></tr></table></figure><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h1 id="删除重复的电子邮箱"><a href="#删除重复的电子邮箱" class="headerlink" title="删除重复的电子邮箱"></a>删除重复的电子邮箱</h1><ol><li>问题</li></ol><p>表：Person</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:zhang@qq.com" target="_blank" rel="noopener">zhang@qq.com</a></td></tr><tr><td>2</td><td><a href="mailto:yu@gmailc.om" target="_blank" rel="noopener">yu@gmailc.om</a></td></tr><tr><td>3</td><td><a href="mailto:zhang@qq.com" target="_blank" rel="noopener">zhang@qq.com</a></td></tr></tbody></table><p>要求: 删除 Person 表中所有重复的电子邮箱，只保留 Id 最小的那个。 </p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:zhang@qq.com" target="_blank" rel="noopener">zhang@qq.com</a></td></tr><tr><td>2</td><td><a href="mailto:yu@gmailc.om" target="_blank" rel="noopener">yu@gmailc.om</a></td></tr></tbody></table><ol start="2"><li>答案：</li></ol><ul><li>答案1：</li></ul><p>步骤1：找出 Id 大的重复邮箱</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.*</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Person a1 <span class="keyword">join</span> Person a2 </span><br><span class="line">    <span class="keyword">on</span> a1.Email = a2. Email</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1. <span class="keyword">Id</span> &gt; a2.Id</span><br></pre></td></tr></table></figure><p>步骤2： 删除 Id 较大的重复邮箱。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a1</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    Person a1 <span class="keyword">join</span> Person a2 </span><br><span class="line">    <span class="keyword">on</span> a1.Email = a2. Email</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1. <span class="keyword">Id</span> &gt; a2.Id</span><br></pre></td></tr></table></figure><p>答案2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DELETE a1</span><br><span class="line">FROM </span><br><span class="line">    Person a1,</span><br><span class="line">     Person a2 </span><br><span class="line">where </span><br><span class="line">   a1.Email = a2. Email and  a1. Id &gt; a2.Id</span><br></pre></td></tr></table></figure><h1 id="上升的温度"><a href="#上升的温度" class="headerlink" title="上升的温度"></a>上升的温度</h1><ol><li><a href="https://leetcode-cn.com/problems/rising-temperature/" target="_blank" rel="noopener">问题</a></li></ol><p>表： Weather</p><table><thead><tr><th>Id(INT)</th><th>RecordDate(DATE)</th><th>Temperature(INT)</th></tr></thead><tbody><tr><td>1</td><td>2015-01-01</td><td>10</td></tr><tr><td>2</td><td>2015-01-02</td><td>25</td></tr><tr><td>3</td><td>2015-01-03</td><td>20</td></tr><tr><td>4</td><td>2015-01-04</td><td>30</td></tr></tbody></table><p>要求：查找与昨天日期相比温度更高的所有日期的 Id, 返回结果如下：</p><table><thead><tr><th>Id</th></tr></thead><tbody><tr><td>2</td></tr><tr><td>4</td></tr></tbody></table><ol start="2"><li>答案：</li></ol><p>答案1： datediff 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Weather a1  <span class="keyword">join</span> Weather a2 <span class="keyword">on</span>  <span class="keyword">datediff</span>(a1.RecordDate, a2.RecordDate) = <span class="number">1</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Temperature &gt; a2.Temperature</span><br></pre></td></tr></table></figure><p>答案2： ADDDATE 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Weather a1  <span class="keyword">join</span> Weather a2 <span class="keyword">on</span>   a1.RecordDate=    <span class="keyword">date_add</span>(a2.RecordDate,<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    a1.Temperature &gt; a2.Temperature</span><br></pre></td></tr></table></figure><hr><h1 id="游戏玩家分析1"><a href="#游戏玩家分析1" class="headerlink" title="游戏玩家分析1"></a>游戏玩家分析1</h1><p>此表显示某些游戏玩家的活动。每一行都是某天用某些设备登陆并玩多个游戏的玩家记录。 </p><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 显示每个玩家的第一次登陆日期， 输出如下结果</p><table><thead><tr><th>player_id</th><th>first_login</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td></tr><tr><td>2</td><td>2017-06-25</td></tr><tr><td>3</td><td>2016-03-02</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a1.player_id, a1.event_date <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">FROM</span> activity a1 <span class="keyword">left</span> <span class="keyword">join</span> activity a2 <span class="keyword">on</span> a1.player_id=a2.player_id <span class="keyword">and</span> a1.event_date&gt;a2.event_date</span><br><span class="line"><span class="keyword">WHERE</span> a2.event_date <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">to_char(event_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> first_login</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">event_date,</span><br><span class="line">row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date <span class="keyword">asc</span>) rn</span><br><span class="line"><span class="keyword">from</span> Activity)</span><br><span class="line"><span class="keyword">where</span> rn = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><a href="https://codeday.me/bug/20190309/737795.html" target="_blank" rel="noopener">https://codeday.me/bug/20190309/737795.html</a></p><hr><h1 id="游戏玩家分析2"><a href="#游戏玩家分析2" class="headerlink" title="游戏玩家分析2"></a>游戏玩家分析2</h1><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 写取出每个玩家第一次玩游戏的设备号</p><p>输出结果如下： </p><table><thead><tr><th>player_id</th><th>device_id</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    a1.player_id, </span><br><span class="line">    a1.device_id</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    activity a1 </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> activity a2 <span class="keyword">on</span> a1.player_id=a2.player_id <span class="keyword">and</span> a1.event_date&gt;a2.event_date</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a2.event_date <span class="keyword">is</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id, device_id</span><br><span class="line"> <span class="keyword">from</span> </span><br><span class="line"> (</span><br><span class="line">     <span class="keyword">select</span> * <span class="keyword">from</span> Activity <span class="keyword">where</span> (player_id,event_date) </span><br><span class="line"> <span class="keyword">in</span> </span><br><span class="line"> (<span class="keyword">select</span> player_id, <span class="keyword">min</span>(event_date) </span><br><span class="line"> <span class="keyword">from</span> Activity <span class="keyword">group</span> <span class="keyword">by</span> player_id) </span><br><span class="line"> ) <span class="keyword">as</span> t</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">player_id, device_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">player_id,</span><br><span class="line">device_id,</span><br><span class="line">row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date <span class="keyword">asc</span>) rn</span><br><span class="line"><span class="keyword">from</span> Activity)</span><br><span class="line"><span class="keyword">where</span> rn = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h1 id="游戏分析3"><a href="#游戏分析3" class="headerlink" title="游戏分析3"></a>游戏分析3</h1><p>表：Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>1</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 取出每个玩家在不同日期下的累积玩游戏次数。</p><blockquote><p>例如： 玩家 id 为 1 的玩家， 在 2016-05-02 时，玩游戏的总次数为 5+6=11， 在2017-06-25 时，玩游戏的总次数为 5+6+1=12。</p></blockquote><p>输出结果如下：</p><table><thead><tr><th>player_id</th><th>event_date</th><th>games_played_so_far</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2016-05-02</td><td>11</td></tr><tr><td>1</td><td>2017-06-25</td><td>12</td></tr><tr><td>3</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>答案： </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    player_id,</span><br><span class="line">    to_char(event_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> event_date,</span><br><span class="line">    <span class="keyword">sum</span>(games_played) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date) games_played_so_far</span><br><span class="line"><span class="keyword">from</span> activity</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.player_id ,a.event_date,(<span class="keyword">case</span> <span class="keyword">when</span> @player_id=a.player_id <span class="keyword">then</span> @<span class="keyword">value</span>:=@<span class="keyword">value</span>+a.games_played <span class="keyword">when</span> @player_id:=a.player_id <span class="keyword">then</span> @<span class="keyword">value</span>:=a.games_played <span class="keyword">end</span> ) <span class="keyword">as</span> games_played_so_far <span class="keyword">from</span> (<span class="keyword">select</span> * <span class="keyword">from</span> Activity <span class="keyword">order</span> <span class="keyword">by</span> player_id,event_date) a, (<span class="keyword">select</span> @player_id:=<span class="literal">Null</span>,@<span class="keyword">value</span>:=<span class="number">0</span>)s</span><br></pre></td></tr></table></figure><hr><h1 id="游戏分析4"><a href="#游戏分析4" class="headerlink" title="游戏分析4"></a>游戏分析4</h1><p>表： Activity</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-03-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>要求： 查询在首次登陆后第二天再次登陆的玩家比例， 四舍五入到小数点后两位。 换句话说： 你需要计算从首次登陆日期开始至少连续两天登陆的玩家数量， 然后将该数量除以玩家总数。</p><p>输出结果如下：</p><table><thead><tr><th>fraction</th></tr></thead><tbody><tr><td>0.33</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 错误</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">  <span class="keyword">CAST</span>( <span class="keyword">count</span>(b.player_id) / <span class="keyword">count</span>(<span class="keyword">distinct</span> a.player_id)  <span class="keyword">as</span> <span class="built_in">decimal</span>(<span class="number">38</span>, <span class="number">2</span>))  <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Activity <span class="keyword">as</span> a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">    Activity <span class="keyword">as</span> b</span><br><span class="line">    <span class="keyword">on</span> a.player_id = b.player_id <span class="keyword">and</span> a.event_date = b.event_date+<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">round</span>(<span class="keyword">count</span>(<span class="keyword">if</span>(<span class="keyword">datediff</span>(a2.event_date ,a1.event_date )=<span class="number">1</span>,<span class="number">1</span>,<span class="literal">null</span>))/<span class="keyword">count</span>(<span class="keyword">distinct</span> a1.player_id ),<span class="number">2</span>)  <span class="keyword">as</span> fraction</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    Activity a1, Activity a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a1.player_id =a2.player_id </span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    (a1.player_id,a1.event_date) <span class="keyword">in</span> (</span><br><span class="line">            <span class="keyword">select</span> </span><br><span class="line">                player_id ,</span><br><span class="line">                <span class="keyword">min</span>(event_date) event_date </span><br><span class="line">            <span class="keyword">from</span> </span><br><span class="line">                Activity a3</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">                player_id )</span><br></pre></td></tr></table></figure><hr><h1 id="求中位数"><a href="#求中位数" class="headerlink" title="求中位数"></a>求中位数</h1><p>表： Employee </p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>2341</td></tr><tr><td>2</td><td>A</td><td>341</td></tr><tr><td>3</td><td>A</td><td>15</td></tr><tr><td>4</td><td>A</td><td>15314</td></tr><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>7</td><td>B</td><td>15</td></tr><tr><td>8</td><td>B</td><td>13</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>10</td><td>B</td><td>1345</td></tr><tr><td>11</td><td>B</td><td>1221</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>13</td><td>C</td><td>2345</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr><tr><td>15</td><td>C</td><td>2645</td></tr><tr><td>16</td><td>C</td><td>2652</td></tr><tr><td>17</td><td>C</td><td>65</td></tr></tbody></table><p>要求：查找每个公司的薪水中位数</p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr></tbody></table><p>答案：<br><a href="https://www.cnblogs.com/jxlwqq/p/5868206.html" target="_blank" rel="noopener">https://www.cnblogs.com/jxlwqq/p/5868206.html</a><br><a href="https://www.oschina.net/translate/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query" target="_blank" rel="noopener">https://www.oschina.net/translate/how-to-calculate-median-value-in-mysql-using-a-simple-sql-query</a></p><ol><li>进行排序<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">Id</span>,</span><br><span class="line">    Company,</span><br><span class="line">    Salary,</span><br><span class="line">    ROW_NUMBER ( ) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> Company  <span class="keyword">order</span> <span class="keyword">by</span>  Salary) <span class="keyword">as</span> rank_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee</span><br></pre></td></tr></table></figure></li></ol><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th><th>rank_name</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>A</td><td>15</td><td>1</td><td>6</td></tr><tr><td>2</td><td>A</td><td>341</td><td>2</td><td>6</td></tr><tr><td>5</td><td>A</td><td>451</td><td>3</td><td>6</td></tr><tr><td>6</td><td>A</td><td>513</td><td>4</td><td>6</td></tr><tr><td>1</td><td>A</td><td>2341</td><td>5</td><td>6</td></tr><tr><td>4</td><td>A</td><td>15314</td><td>6</td><td>6</td></tr><tr><td>8</td><td>B</td><td>13</td><td>1</td><td>6</td></tr><tr><td>7</td><td>B</td><td>15</td><td>2</td><td>6</td></tr><tr><td>12</td><td>B</td><td>234</td><td>3</td><td>6</td></tr><tr><td>9</td><td>B</td><td>1154</td><td>4</td><td>6</td></tr><tr><td>11</td><td>B</td><td>1221</td><td>5</td><td>6</td></tr><tr><td>10</td><td>B</td><td>1345</td><td>6</td><td>6</td></tr><tr><td>17</td><td>C</td><td>65</td><td>1</td><td>6</td></tr><tr><td>13</td><td>C</td><td>2345</td><td>2</td><td>6</td></tr><tr><td>14</td><td>C</td><td>2645</td><td>3</td><td>6</td></tr><tr><td>15</td><td>C</td><td>2645</td><td>4</td><td>6</td></tr><tr><td>16</td><td>C</td><td>2652</td><td>5</td><td>6</td></tr></tbody></table><ol start="2"><li>找到中位数</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, company, salary</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, company, salary,</span><br><span class="line">row_number() <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company <span class="keyword">order</span> <span class="keyword">by</span> salary) <span class="keyword">as</span> rank_name,</span><br><span class="line"><span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> company) <span class="keyword">as</span> <span class="keyword">num</span> </span><br><span class="line"><span class="keyword">from</span> employee</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">abs</span>(rank_name - (<span class="keyword">num</span>+<span class="number">1</span>)/<span class="number">2</span>) &lt; <span class="number">1</span> <span class="comment">-- 顺序编号在公司薪水记录数中间的，即为中位数</span></span><br></pre></td></tr></table></figure><hr><h1 id="查找至少有5名直接下属的经理"><a href="#查找至少有5名直接下属的经理" class="headerlink" title="查找至少有5名直接下属的经理"></a>查找至少有5名直接下属的经理</h1><p>表：Employee</p><table><thead><tr><th>Id</th><th>Name</th><th>Department</th><th>ManagerId</th></tr></thead><tbody><tr><td>101</td><td>John</td><td>A</td><td>null</td></tr><tr><td>102</td><td>Dan</td><td>A</td><td>101</td></tr><tr><td>103</td><td>James</td><td>A</td><td>101</td></tr><tr><td>104</td><td>Amy</td><td>A</td><td>101</td></tr><tr><td>105</td><td>Anne</td><td>A</td><td>101</td></tr><tr><td>106</td><td>Ron</td><td>B</td><td>101</td></tr></tbody></table><p>要求： 查询来查找至少有5名直接下属的经理</p><p>输出结果为： </p><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>John</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a2.Name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee a1 <span class="keyword">join</span> Employee a2</span><br><span class="line"><span class="keyword">on</span> a1.ManagerId = a2.Id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.ManagerId</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">count</span>(*) &gt;=<span class="number">5</span></span><br></pre></td></tr></table></figure><hr><h1 id="给定数字的频率查中位数"><a href="#给定数字的频率查中位数" class="headerlink" title="给定数字的频率查中位数"></a>给定数字的频率查中位数</h1><p>表： Numbers</p><table><thead><tr><th>Number</th><th>Frequency</th></tr></thead><tbody><tr><td>0</td><td>7</td></tr><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>要求： 数字为 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3，所以中位数是 (0 + 0) / 2 = 0，输出结果如下</p><table><thead><tr><th>median</th></tr></thead><tbody><tr><td>0.0000</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(n2.number) <span class="keyword">median</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(n.number) <span class="built_in">number</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">number</span>, frequency, (@cumsum:=@cumsum+frequency) <span class="string">'cumsum'</span></span><br><span class="line"><span class="keyword">from</span> numbers ,(<span class="keyword">select</span> @cumsum:=<span class="number">0</span>) temp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">number</span>)  n</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">n.cumsum &gt;= (<span class="keyword">floor</span>(((<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(frequency) <span class="keyword">FROM</span> numbers) +<span class="number">1</span> ) / <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">min</span>(n1.number) <span class="built_in">number</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">number</span>, frequency, (@cumsum1:=@cumsum1+frequency) <span class="string">'cumsum'</span></span><br><span class="line"><span class="keyword">from</span> numbers ,(<span class="keyword">select</span> @cumsum1:=<span class="number">0</span>) temp </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">number</span>)  n1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">n1.cumsum &gt;= (<span class="keyword">ceil</span>(((<span class="keyword">SELECT</span> <span class="keyword">SUM</span>(frequency) <span class="keyword">FROM</span> numbers) +<span class="number">1</span> ) / <span class="number">2</span>))) n2;</span><br></pre></td></tr></table></figure><hr><h1 id="找出当选最多的人名称"><a href="#找出当选最多的人名称" class="headerlink" title="找出当选最多的人名称"></a>找出当选最多的人名称</h1><p>表： Candidate</p><table><thead><tr><th>id</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr><tr><td>4</td><td>D</td></tr><tr><td>5</td><td>E</td></tr></tbody></table><p>表： Vote</p><table><thead><tr><th>id</th><th>CandidateId</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>3</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>5</td></tr></tbody></table><blockquote><p>表 <code>Candidate</code> 为候选人名称表， 表 <code>Vote</code> 中<code>CandidateId</code> 是 <code>Candidate</code>表中的 <code>id</code>。</p></blockquote><p>要求： 找出当选者的名称，返回结果为当选者<code>B</code>。输出结果如下：<br>| Name |<br>|——|<br>| B    |</p><p>答案：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">Name</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Candidate</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">id</span> = (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            CandidateId</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            Vote</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">            CandidateId</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">            <span class="keyword">count</span>(*) <span class="keyword">DESC</span> </span><br><span class="line">        <span class="keyword">LIMIT</span> <span class="number">1</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure></p><h1 id="选出所有-bonus-lt-1000的员工的-name-以及-bonus"><a href="#选出所有-bonus-lt-1000的员工的-name-以及-bonus" class="headerlink" title="选出所有 bonus &lt; 1000的员工的 name 以及 bonus"></a>选出所有 bonus &lt; 1000的员工的 name 以及 bonus</h1><p>表：Employee</p><table><thead><tr><th>empId</th><th>name</th><th>supervisor</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>3</td><td>1000</td></tr><tr><td>2</td><td>Dan</td><td>3</td><td>2000</td></tr><tr><td>3</td><td>Brad</td><td>null</td><td>4000</td></tr><tr><td>4</td><td>Thomas</td><td>3</td><td>4000</td></tr></tbody></table><p>表：Bonus</p><table><thead><tr><th>empId</th><th>bonus</th></tr></thead><tbody><tr><td>2</td><td>500</td></tr><tr><td>4</td><td>2000</td></tr></tbody></table><p>要求： 选出所有 bonus &lt; 1000的员工的 name 以及 bonus。输出结果如下</p><table><thead><tr><th>name</th><th>bonus</th></tr></thead><tbody><tr><td>John</td><td>null</td></tr><tr><td>Dan</td><td>500</td></tr><tr><td>Brad</td><td>null</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name,</span><br><span class="line">    a2.bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">as</span> a1</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Bonus <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span> a1.empid = a2.empid </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">ifnull</span> (bonus, <span class="number">0</span>) &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name,</span><br><span class="line">    a2.bonus</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    Employee <span class="keyword">as</span> a1</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Bonus <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span> a1.empid = a2.empid </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    nvl (bonus, <span class="number">0</span>) &lt; <span class="number">1000</span></span><br></pre></td></tr></table></figure><h1 id="谁有最多的好友"><a href="#谁有最多的好友" class="headerlink" title="谁有最多的好友"></a>谁有最多的好友</h1><p>表： request_accepted </p><blockquote><p>表中存储了所有好友申请通过的数据记录，其中，requester_id 和 accepter_id 都是用户的编号。</p></blockquote><table><thead><tr><th>requester_id</th><th>accepter_id</th><th>accept_date</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016_06-03</td></tr><tr><td>1</td><td>3</td><td>2016-06-08</td></tr><tr><td>2</td><td>3</td><td>2016-06-08</td></tr><tr><td>3</td><td>4</td><td>2016-06-09</td></tr></tbody></table><p>要求： 求出谁拥有最多的好友和他拥有的好友数目。输出结果如下</p><table><thead><tr><th>id</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>3</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span> <span class="keyword">as</span> <span class="keyword">id</span>, ucnt <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> ucnt</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> requester_id <span class="keyword">as</span> <span class="keyword">id</span> <span class="keyword">from</span> request_accepted</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> accepter_id <span class="keyword">as</span> <span class="keyword">id</span> <span class="keyword">from</span> request_accepted</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> ucnt <span class="keyword">desc</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">rownum</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="找出人流量的高峰期"><a href="#找出人流量的高峰期" class="headerlink" title="找出人流量的高峰期"></a>找出人流量的高峰期</h1><p>表：stadium</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>1</td><td>2017-01-01</td><td>10</td></tr><tr><td>2</td><td>2017-01-02</td><td>109</td></tr><tr><td>3</td><td>2017-01-03</td><td>150</td></tr><tr><td>4</td><td>2017-01-04</td><td>99</td></tr><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><p>要求： 找出人流量的高峰期。高峰期时， 至少连续三行记录中的人流量不少于100。得出结果如下</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">distinct</span> a.*</span><br><span class="line"><span class="keyword">FROM</span> stadium <span class="keyword">as</span> a,stadium <span class="keyword">as</span> b,stadium <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">where</span> ((a.id = b.id<span class="number">-1</span> <span class="keyword">and</span> b.id+<span class="number">1</span> = c.id) <span class="keyword">or</span></span><br><span class="line">       (a.id<span class="number">-1</span> = b.id <span class="keyword">and</span> a.id+<span class="number">1</span> = c.id) <span class="keyword">or</span></span><br><span class="line">       (a.id<span class="number">-1</span> = c.id <span class="keyword">and</span> c.id<span class="number">-1</span> = b.id))</span><br><span class="line">  <span class="keyword">and</span> (a.people&gt;=<span class="number">100</span> <span class="keyword">and</span> b.people&gt;=<span class="number">100</span> <span class="keyword">and</span> c.people&gt;=<span class="number">100</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a.id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, to_char(visit_date, <span class="string">'yyyy-mm-dd'</span>) <span class="keyword">as</span> visit_date, people</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, visit_date, people,</span><br><span class="line"><span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">offset</span>) cnt</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line"><span class="keyword">id</span>, visit_date, people,</span><br><span class="line">(row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span>) - <span class="keyword">id</span>) <span class="keyword">offset</span></span><br><span class="line"><span class="keyword">from</span> stadium</span><br><span class="line"><span class="keyword">where</span> people &gt;= <span class="number">100</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">where</span> cnt &gt;= <span class="number">3</span>   <span class="comment">-- 连续 3 天（及以上）</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">id</span></span><br></pre></td></tr></table></figure><hr><h1 id="预约连续空余座位"><a href="#预约连续空余座位" class="headerlink" title="预约连续空余座位"></a>预约连续空余座位</h1><p>表：cinema</p><table><thead><tr><th>seat_id</th><th>free</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>0</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>1</td></tr><tr><td>5</td><td>1</td></tr></tbody></table><p>要求：获取所有空余座位，并将它们按照 seat_id 排序。输出结果如下</p><blockquote><p>连续空余座位的定义是大于等于 2 个连续空余的座位。1 表示空余，0 表示已被占据。</p></blockquote><table><thead><tr><th>seat_id</th></tr></thead><tbody><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> <span class="keyword">num</span>) <span class="keyword">as</span> cum</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">( </span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    seat_id,</span><br><span class="line">    (row_number() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> seat_id) - seat_id) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    free = <span class="number">1</span>))</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    cum &gt;= <span class="number">2</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    seat_id</span><br></pre></td></tr></table></figure><hr><h1 id="找出符合条件的电影"><a href="#找出符合条件的电影" class="headerlink" title="找出符合条件的电影"></a>找出符合条件的电影</h1><p>表：cinema</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr><tr><td>2</td><td>Science</td><td>fiction</td><td>8.5</td></tr><tr><td>3</td><td>irish</td><td>boring</td><td>6.2</td></tr><tr><td>4</td><td>Ice song</td><td>Fantacy</td><td>8.6</td></tr><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr></tbody></table><p>要求： 找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列。输出结果如下</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><p>答案1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     *</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">mod</span>(<span class="keyword">id</span>, <span class="number">2</span>) = <span class="number">1</span> </span><br><span class="line">     <span class="keyword">and</span> </span><br><span class="line">     description != <span class="string">'boring'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure></p><p>答案2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    cinema</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">   description != <span class="string">'boring'</span></span><br><span class="line">   <span class="keyword">and</span></span><br><span class="line">   <span class="keyword">id</span> % <span class="number">2</span> !=<span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    rating <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure></p><hr><h1 id><a href="#" class="headerlink" title=" "></a> </h1><p>表：Sales</p><table><thead><tr><th>sale_id</th><th>product_id</th><th>year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>2</td><td>100</td><td>2009</td><td>12</td><td>5000</td></tr><tr><td>7</td><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>表：Product</p><table><thead><tr><th>product_id</th><th>product_name</th></tr></thead><tbody><tr><td>100</td><td>Nokia</td></tr><tr><td>200</td><td>Apple</td></tr><tr><td>300</td><td>Samsung</td></tr></tbody></table><p>要求： 编写sql查询， 选择每个销售产品的第一年的数据， 输出结果如下</p><table><thead><tr><th>product_id</th><th>first_year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>答案：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    product_id,</span><br><span class="line">    <span class="keyword">year</span>  <span class="keyword">as</span> first_year,</span><br><span class="line">    quantity,</span><br><span class="line">    price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        product_id,</span><br><span class="line">        <span class="keyword">year</span>,</span><br><span class="line">        quantity,price,</span><br><span class="line">        <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> product_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>) rn</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        sales)</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    rn=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><h1 id="找到购买所有产品的顾客"><a href="#找到购买所有产品的顾客" class="headerlink" title="找到购买所有产品的顾客"></a>找到购买所有产品的顾客</h1><p>表1： customer</p><table><thead><tr><th>customer_id</th><th>product_key</th></tr></thead><tbody><tr><td>1</td><td>5</td></tr><tr><td>2</td><td>6</td></tr><tr><td>3</td><td>5</td></tr><tr><td>3</td><td>6</td></tr><tr><td>1</td><td>6</td></tr></tbody></table><p>表2： product</p><p>| product_key |<br>+————-+<br>| 5           |<br>| 6           |</p><p>要求：  找出从 customer 表中购买了 product 表所有产品的客户id。 输出结果如下</p><table><thead><tr><th>customer_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr></tbody></table><p>答案：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    customer</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> product_key) =</span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">count</span>(<span class="keyword">distinct</span> product_key)</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        product )</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    customer_id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        customer_id, <span class="keyword">count</span>(<span class="keyword">distinct</span> product_key) <span class="keyword">as</span> <span class="keyword">num</span> </span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        customer</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        customer_id) <span class="keyword">as</span> a1</span><br><span class="line"><span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">count</span>(product_key) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        product</span><br><span class="line">) <span class="keyword">as</span> a2</span><br><span class="line"><span class="keyword">on</span> a1.num = a2.num</span><br></pre></td></tr></table></figure><hr><h1 id="查询关注者的关注数据"><a href="#查询关注者的关注数据" class="headerlink" title="查询关注者的关注数据"></a>查询关注者的关注数据</h1><p>表：follow</p><table><thead><tr><th>followee (博主)</th><th>follower(关注者)</th></tr></thead><tbody><tr><td>A</td><td>B</td></tr><tr><td>B</td><td>C</td></tr><tr><td>B</td><td>D</td></tr><tr><td>D</td><td>E</td></tr></tbody></table><p>要求： 查询每个关注者， 被多少人关注。 输出结果如下：</p><table><thead><tr><th>follower</th><th>num</th></tr></thead><tbody><tr><td>B</td><td>2</td></tr><tr><td>D</td><td>1</td></tr></tbody></table><blockquote><p>B 和 D 都在在 follower 字段中出现，作为博主，B 被 C 和 D 关注，D 被 E 关注。A 不在 follower 字段内，所以A不在输出列表中。</p></blockquote><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    f1.follower, </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> f2.follower) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    follow f1</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    follow f2</span><br><span class="line">    <span class="keyword">on</span> f1.follower = f2.followee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    f1.follower</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>   </span><br><span class="line">    f1.follower</span><br></pre></td></tr></table></figure><hr><h1 id="如何用python操作mysql"><a href="#如何用python操作mysql" class="headerlink" title="如何用python操作mysql"></a>如何用python操作mysql</h1><p>步骤</p><ol><li>安装 mysql-connector</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mysql-connector</span><br></pre></td></tr></table></figure><ol start="2"><li>连接数据库<blockquote><p>通过 connection 对数据库的连接进行管理， 通过 cursor 创建游标对数据库中的数据进行操作。 </p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mysql.connector</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接</span></span><br><span class="line"></span><br><span class="line">db = mysql.connector.connect(</span><br><span class="line">    host=<span class="string">'ip地址'</span>,</span><br><span class="line">    user = <span class="string">"root"</span>, </span><br><span class="line">    passwd = <span class="string">"1234"</span>, <span class="comment"># 数据库密码</span></span><br><span class="line">    database = <span class="string">'default'</span>, <span class="comment"># 连接的数据库</span></span><br><span class="line">    auth_plugin = <span class="string">'mysql_native_password" )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 获取操作游标</span></span><br><span class="line"><span class="string">cursor = db.cursor()</span></span><br></pre></td></tr></table></figure><ol start="3"><li>编写sql语句</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 输出sql 语句</span></span><br><span class="line">sql = <span class="string">"""select</span></span><br><span class="line"><span class="string">     btn_name</span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    cinema</span></span><br><span class="line"><span class="string">where</span></span><br><span class="line"><span class="string">    hit_date = "2019-07-26"</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure><ol start="4"><li>执行sql语句并返回结果</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行sql语句</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集中的所有行</span></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据中的第一行</span></span><br><span class="line"><span class="comment"># cursor.fetchone()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取数据集中的n条数据</span></span><br><span class="line"><span class="comment"># cursor.fetchmany(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回数据集中中的行数</span></span><br><span class="line"><span class="comment"># cursor.rowcount</span></span><br></pre></td></tr></table></figure><ol start="5"><li>关闭游标和数据库连接</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭数据连接</span></span><br><span class="line">db.close()</span><br></pre></td></tr></table></figure><ol start="6"><li>延伸： 捕获异常信息。<blockquote><p>在对数据进行增加、删除和修改时， 可能会出现异常，需要对异常数据进行捕获。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    sql = <span class="string">"""INSER INTO player (team_id, player_name, height) VALUES (%s, %s, %s)"""</span></span><br><span class="line">    val = (<span class="number">1000</span>, <span class="string">"zhangyu"</span>, <span class="number">1.95</span>)</span><br><span class="line">    <span class="comment"># 执行sql语句</span></span><br><span class="line">    cursor.execute(sql, val)</span><br><span class="line">    <span class="comment"># 进行提交</span></span><br><span class="line">    db.commit()</span><br><span class="line">    print(cursor.rowcount, <span class="string">"记录插入成功。"</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 打印异常信息</span></span><br><span class="line">    traceback.print_exc()</span><br><span class="line">    <span class="comment"># 回滚</span></span><br><span class="line">    db.rollback()</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭数据库连接</span></span><br><span class="line">    db.close()</span><br></pre></td></tr></table></figure><p>参考资料： 极客时间-sql必知必会</p><hr><h1 id="求出每个项目中经验最丰富的员工"><a href="#求出每个项目中经验最丰富的员工" class="headerlink" title="求出每个项目中经验最丰富的员工"></a>求出每个项目中经验最丰富的员工</h1><p>表：Project table</p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><p>表：Employee table</p><table><thead><tr><th>employee_id</th><th>name</th><th>experience_years</th></tr></thead><tbody><tr><td>1</td><td>Khaled</td><td>3</td></tr><tr><td>2</td><td>Ali</td><td>2</td></tr><tr><td>3</td><td>John</td><td>3</td></tr><tr><td>4</td><td>Doe</td><td>2</td></tr></tbody></table><p>要求： 求出每个项目中经验最丰富的员工， 输出结果如下</p><blockquote><p>ID为1和3的员工，在第一个项目中拥有最丰富的经验， 对于第二个项目， ID为1的员工拥有最丰富的经验</p></blockquote><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    project_id,</span><br><span class="line">    employee_id</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (<span class="keyword">select</span></span><br><span class="line">        p.project_id,</span><br><span class="line">        e.employee_id,</span><br><span class="line">        <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> p.project_id <span class="keyword">order</span> <span class="keyword">by</span> e.experience_years <span class="keyword">desc</span>) rn</span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">project</span> p, employee e</span><br><span class="line">    <span class="keyword">where</span> p.employee_id = e.employee_id)</span><br><span class="line"><span class="keyword">where</span> rn = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><hr><h1 id="求所有员工的平均工作经验，保留2位小数。"><a href="#求所有员工的平均工作经验，保留2位小数。" class="headerlink" title="求所有员工的平均工作经验，保留2位小数。"></a>求所有员工的平均工作经验，保留2位小数。</h1><p>表： Project </p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>4</td></tr></tbody></table><p>+————-+————-+</p><p>表：Employee </p><table><thead><tr><th>employee_id</th><th>name</th><th>experience_years</th></tr></thead><tbody><tr><td>1</td><td>Khaled</td><td>3</td></tr><tr><td>2</td><td>Ali</td><td>2</td></tr><tr><td>3</td><td>John</td><td>1</td></tr><tr><td>4</td><td>Doe</td><td>2</td></tr></tbody></table><p>要求： 求每个部门所有员工的平均工作年限， 保留两位小数。输出结果如下</p><blockquote><p>第一个项目的平均工作年限为（3+2+1）/ 3 = 2.00<br>第二个项目的平均工作年限为（3+2）/ 2 = 2.50</p></blockquote><table><thead><tr><th>project_id</th><th>average_years</th></tr></thead><tbody><tr><td>1</td><td>2.00</td></tr><tr><td>2</td><td>2.50</td></tr></tbody></table><p>答案1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     project_id,</span><br><span class="line">     <span class="keyword">round</span>(<span class="keyword">avg</span>(experience_years),<span class="number">2</span>) <span class="keyword">as</span> average_years</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    <span class="keyword">Project</span>, Employee</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    Project.employee_id = Employee.employee_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    project_id</span><br></pre></td></tr></table></figure></p><hr><h1 id="查询每个专业的学生人数"><a href="#查询每个专业的学生人数" class="headerlink" title="查询每个专业的学生人数"></a>查询每个专业的学生人数</h1><blockquote><p>一所大学有 2 个数据表，分别是 student 和 department ，这两个表保存着每个专业的学生数据和院系数据。</p></blockquote><p>表：student</p><table><thead><tr><th>student_id</th><th>student_name</th><th>gender</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Jack</td><td>M</td><td>1</td></tr><tr><td>2</td><td>Jane</td><td>F</td><td>1</td></tr><tr><td>3</td><td>Mark</td><td>M</td><td>2</td></tr></tbody></table><p>表：department</p><table><thead><tr><th>dept_id</th><th>dept_name</th></tr></thead><tbody><tr><td>1</td><td>Engineering</td></tr><tr><td>2</td><td>Science</td></tr><tr><td>3</td><td>Law</td></tr></tbody></table><p>要求： 查询 department 表中每个专业的学生人数 （即使没有学生的专业也需列出）。将你的查询结果按照学生人数降序排列。 如果有两个或两个以上专业有相同的学生数目，将这些部门按照部门名字的字典序从小到大排列。输出结果如下</p><table><thead><tr><th>dept_name</th><th>student_number</th></tr></thead><tbody><tr><td>Engineering</td><td>2</td></tr><tr><td>Science</td><td>1</td></tr><tr><td>Law</td><td>0</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  a1.dept_name,</span><br><span class="line">  <span class="keyword">COUNT</span>(student_id) <span class="keyword">AS</span> student_number </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  department a1</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student a2  <span class="keyword">ON</span> a1.dept_id = a2.dept_id </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">     a1.dept_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    student_number <span class="keyword">DESC</span>,</span><br><span class="line">    a1.dept_name</span><br></pre></td></tr></table></figure><p>答案2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    dept_name,</span><br><span class="line">    (<span class="keyword">case</span> <span class="keyword">when</span> student_num <span class="keyword">is</span> <span class="literal">null</span> <span class="keyword">then</span> <span class="number">0</span> <span class="keyword">else</span> student_num <span class="keyword">end</span>) student_number</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    dept_id,</span><br><span class="line">    <span class="keyword">count</span>(*) student_num</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    student</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    dept_id) t1</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">     department t2 <span class="keyword">on</span> t1.dept_id=t2.dept_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    student_number <span class="keyword">desc</span>,</span><br><span class="line">    dept_name <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></p><hr><p>表：salesperson</p><blockquote><p>表 salesperson 存储了所有销售员的信息。每个销售员都有一个销售员编号 sales_id 和他的名字 name 。</p></blockquote><table><thead><tr><th>sales_id</th><th>name</th><th>salary</th><th>commission_rate</th><th>hire_date</th></tr></thead><tbody><tr><td>1</td><td>John</td><td>100000</td><td>6</td><td>4/1/2006</td></tr><tr><td>2</td><td>Amy</td><td>120000</td><td>5</td><td>5/1/2010</td></tr><tr><td>3</td><td>Mark</td><td>65000</td><td>12</td><td>12/25/2008</td></tr><tr><td>4</td><td>Pam</td><td>25000</td><td>25</td><td>1/1/2005</td></tr><tr><td>5</td><td>Alex</td><td>50000</td><td>10</td><td>2/3/2007</td></tr></tbody></table><p>表：company</p><blockquote><p>表 company 存储了所有公司的信息。每个公司都有一个公司编号 com_id 和它的名字 name 。</p></blockquote><table><thead><tr><th>com_id</th><th>name</th><th>city</th></tr></thead><tbody><tr><td>1</td><td>RED</td><td>Boston</td></tr><tr><td>2</td><td>ORANGE</td><td>New York</td></tr><tr><td>3</td><td>YELLOW</td><td>Boston</td></tr><tr><td>4</td><td>GREEN</td><td>Austin</td></tr></tbody></table><p>表： orders</p><blockquote><p>表 orders 存储了所有的销售数据，包括销售员编号 sales_id 和公司编号 com_id 。<br>| order_id | order_date | com_id  | sales_id | amount |<br>|———-|————|———|———-|——–|<br>| 1        |   1/1/2014 |    3    |    4     | 100000 |<br>| 2        |   2/1/2014 |    4    |    5     | 5000   |<br>| 3        |   3/1/2014 |    1    |    1     | 50000  |<br>| 4        |   4/1/2014 |    1    |    4     | 25000  |</p></blockquote><p>要求： 根据给定的三个表，salesperson， company， orders。输出所有表 salesperson 中，没有向公司 ‘RED’ 销售任何东西的销售员。</p><blockquote><p>根据表 orders 中的订单 ‘3’ 和 ‘4’ ，容易看出只有 ‘John’ 和 ‘Pam’ 两个销售员曾经向公司 ‘RED’ 销售过。所以我们需要输出表 salesperson 中所有其他人的名字。</p></blockquote><p>输出：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Amy</td></tr><tr><td>Mark</td></tr><tr><td>Alex</td></tr></tbody></table><p>答案1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    salesperson a1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    orders a2 <span class="keyword">ON</span> a1.sales_id = a2.sales_id</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    company a3 <span class="keyword">ON</span> a2.com_id = a3.com_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    <span class="keyword">SUM</span>(<span class="keyword">IF</span>(a3.name = <span class="string">'RED'</span>, <span class="number">1</span>, <span class="number">0</span>))  = <span class="number">0</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    a1.sales_id</span><br></pre></td></tr></table></figure><p>答案2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     salesperson a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        *</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        orders a2</span><br><span class="line">    <span class="keyword">join</span> company a3 <span class="keyword">on</span> a2.com_id=a3.com_id</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        a3.name=<span class="string">'RED'</span> <span class="keyword">and</span> a1.sales_id=a2.sales_id)</span><br></pre></td></tr></table></figure><p>答案3：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="keyword">name</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  salesperson </span><br><span class="line"><span class="keyword">WHERE</span> sales_id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">  (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    a1.sales_id </span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    orders a1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> company a2 <span class="keyword">ON</span> a1.com_id = a2.com_id </span><br><span class="line">  <span class="keyword">WHERE</span> </span><br><span class="line">    a2.name = <span class="string">'RED'</span>)</span><br></pre></td></tr></table></figure></p><hr><p>LeetCodeAnimation <a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">https://github.com/MisterBooo/LeetCodeAnimation</a></p><p>leetcode 题解 <a href="https://github.com/azl397985856/leetcode" target="_blank" rel="noopener">https://github.com/azl397985856/leetcode</a></p><p>LeetCode所有题目 <a href="http://leetcode.liangjiateng.cn/leetcode/game-play-analysis-ii/description" target="_blank" rel="noopener">http://leetcode.liangjiateng.cn/leetcode/game-play-analysis-ii/description</a></p><p>SQL语句数据分析面试必备 <a href="https://mp.weixin.qq.com/s/ol-jheA3TTv0qqtFtEt_ow" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ol-jheA3TTv0qqtFtEt_ow</a></p><hr><!-- <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">SELECT id,max(days) FROM (SELECT</span><br><span class="line">  id,</span><br><span class="line">  @cont_day :=</span><br><span class="line">  (CASE</span><br><span class="line">   WHEN (@id = id AND DATEDIFF(start, @start) = 1)</span><br><span class="line">     THEN</span><br><span class="line">       (@cont_day + 1)</span><br><span class="line">   WHEN (@id = id AND DATEDIFF(start, @start) &lt; 1)</span><br><span class="line">     THEN</span><br><span class="line">       (@cont_day + 0)</span><br><span class="line">   ELSE</span><br><span class="line">     1</span><br><span class="line">   END) AS days,</span><br><span class="line">  @id := id,</span><br><span class="line">  @start := start login_day</span><br><span class="line">FROM (SELECT</span><br><span class="line">        id,</span><br><span class="line">        DATE(start) start</span><br><span class="line">      FROM dmp.person_view</span><br><span class="line">      WHERE id != 0</span><br><span class="line">      ORDER BY id, start) AS t,</span><br><span class="line">  (SELECT</span><br><span class="line">     @id := &apos;&apos;,</span><br><span class="line">     @start := &apos;&apos;,</span><br><span class="line">     @cont_day := 0) AS t1) t2 GROUP BY id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- </span><br><span class="line"></span><br><span class="line"># sql 刷题网站</span><br><span class="line"></span><br><span class="line">[刷题网站](https://leetcode.com/problems/rank-scores/submissions/)</span><br><span class="line"></span><br><span class="line">1. 统计不同月份的下单人数</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">select</span><br><span class="line">    month(hit_date),</span><br><span class="line">    count(distinct  user_account) as uv </span><br><span class="line">from </span><br><span class="line">    a1</span><br><span class="line">where </span><br><span class="line">    hit_date between &apos;2019-01-01&apos; and &apos;2019-05-31&apos;</span><br><span class="line">    and </span><br><span class="line">    sales = &apos;1&apos;</span><br><span class="line">group by </span><br><span class="line">    month(hit_date)</span><br></pre></td></tr></table></figure><ol start="2"><li><p>统计用户三月份的回购率和复购率</p></li><li><p>统计男女用户的消费频次是否有差异</p></li><li><p>统计多次消费的用户， 第一次和最后一次消费的间隔是多少？</p></li><li><p>统计不同年龄段，用户的额消费金额是否有差异？</p></li><li><p>统计消费的二八法则，消费的top20%用户，贡献了多少额度？<br>–&gt;</p></li></ol>-->]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的分析思维模型</title>
      <link href="/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分析思维模型"><a href="#分析思维模型" class="headerlink" title="分析思维模型"></a>分析思维模型</h1><p> 使用频率按顺序排列</p><h3 id="1-AARRR-模型"><a href="#1-AARRR-模型" class="headerlink" title="1.AARRR 模型"></a>1.AARRR 模型</h3><p><img src="https://i.loli.net/2019/02/26/5c75582b87a7c.png" alt="AARRR 模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95c95929a40.jpg" alt="AARRR 模型"></p><h3 id="2-基于用户生命周期的数据分析体系"><a href="#2-基于用户生命周期的数据分析体系" class="headerlink" title="2.基于用户生命周期的数据分析体系"></a>2.基于用户生命周期的数据分析体系</h3><p><img src="https://i.loli.net/2019/03/23/5c95c9d2e937c.jpg" alt="分析体系"></p><ul><li><p>对应的关键指标</p><p><img src="https://i.loli.net/2019/03/23/5c95ca1b5fdc9.jpg" alt="对应的关键指标"></p></li></ul><h3 id="3-5W2H-分析法"><a href="#3-5W2H-分析法" class="headerlink" title="3. 5W2H 分析法"></a>3. 5W2H 分析法</h3><p> 什么原因 (why)  导致 什么事情 (what), 需要哪些人 (who) 在什么时间完成 (when),在什么地点 (where) 用什么方法 (how)完成, 预算是多少 (how much)?</p><p> <img src="https://i.loli.net/2019/08/19/lIgkeLbfNXtDHOu.jpg" alt="微信图片_20190819003216.jpg"></p><p> <img src="https://i.loli.net/2019/02/26/5c7418d10b4c8.png" alt="思维导图"></p><h3 id="4-象限法"><a href="#4-象限法" class="headerlink" title="4. 象限法"></a>4. 象限法</h3><p> 通过象限法， 找到问题的共同原因， 从而建立分组优化策略。 </p><ul><li><p>内外因素分解法</p><p><img src="https://i.loli.net/2019/02/25/5c7409d9dce08.png" alt="内外因素分解法"></p></li><li><p>用户分群</p><p><img src="https://i.loli.net/2019/02/23/5c70f5814cc93.png" alt="用户分群"></p></li><li><p>RFM 用户分群</p><p><img src="https://i.loli.net/2019/02/23/5c70f7f128f4c.png" alt="RFM用户分群"></p></li></ul><h3 id="5-二八法则-帕累托法则"><a href="#5-二八法则-帕累托法则" class="headerlink" title="5. 二八法则 / 帕累托法则"></a>5. 二八法则 / 帕累托法则</h3><p> <img src="https://i.loli.net/2019/08/19/enkqRmf8KzL2vSC.jpg" alt="微信图片_20190819004446.jpg"></p><ul><li>将对象分为重要和不重要两类， 20%的用户贡献了80%的销售额。 </li><li>数据中， 20% 的变量将直接产生 80% 的效果，数据分析应该围绕这20%的变量来进行。 </li><li>和业务和KPI紧密相关，花费很少的精力就能达到不错的效果。</li><li><p>在条件允许的状况下， 依旧不能放弃全局，否则会让思维变得狭隘。<br>补充：</p></li><li><p>升级版本： ABC 分析法</p></li><li><p>与之对应： 长尾理论</p></li></ul><h3 id="6-SWOT方法"><a href="#6-SWOT方法" class="headerlink" title="6. SWOT方法"></a>6. SWOT方法</h3><p>指定发展战略前，对自身进行全面的分析及竞争优势定位。</p><ul><li>对自己进行解析</li></ul><p><img src="https://i.loli.net/2019/02/26/5c754bb2536a0.jpg" alt="对自己进行解析"></p><ul><li>指定相应的对策</li></ul><p><img src="https://i.loli.net/2019/02/26/5c754bc095f85.jpg" alt="指定相应的对策"></p><h3 id="7-麦肯锡七步分析法"><a href="#7-麦肯锡七步分析法" class="headerlink" title="7.麦肯锡七步分析法"></a>7.麦肯锡七步分析法</h3><p> <img src="https://i.loli.net/2019/03/23/5c95ca64ce6f6.jpg" alt="七步分析法"></p><ul><li>界定问题</li><li>将问题分解成议题</li><li>去除不重要的议题（优先排序）</li><li>制定详细工作计划 </li><li>分析重要议题 </li><li>汇总研究成果 </li><li>准备你的故事</li></ul><h3 id="8-SMART原则"><a href="#8-SMART原则" class="headerlink" title="8.SMART原则"></a>8.SMART原则</h3><p><img src="https://i.loli.net/2020/03/02/8EZc2o1QrsdTqbU.jpg" alt="SMART原则"></p><p><img src="https://i.loli.net/2019/08/19/uyaDJnKpQP1Cx9d.jpg" alt="微信图片_20190819003845.jpg"></p><ul><li><p>意义：人们在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现。</p><p>说明：</p></li></ul><ul><li><p>S代表具体(Specific)，指绩效考核要切中特定的工作指标，不能笼统；</p></li><li><p>M代表可度量(Measurable)，指绩效指标是数量化或者行为化的，验证这些绩效指标的数据或者信息是可以获得的；</p></li><li><p>A代表可实现(Attainable)，指绩效指标在付出努力的情况下可以实现，避免设立过高或过低的目标；</p></li><li><p>R代表现实性(realistic)，指绩效指标是实实在在的，可以证明和观察；</p></li><li><p>T代表有时限(time bound)，注重完成绩效指标的特定期限。</p></li></ul><h3 id="9-4P-与-STP-理论"><a href="#9-4P-与-STP-理论" class="headerlink" title="9.4P 与 STP 理论"></a>9.4P 与 STP 理论</h3><p>市场营销与市场定位</p><ul><li><p>4P 理论</p><p><img src="https://i.loli.net/2019/02/26/5c7557f086661.png" alt="4P 理论"></p></li><li><p>STP 理论</p><p><img src="https://i.loli.net/2019/02/26/5c755817819c3.png" alt="STP 理论"></p></li></ul><h3 id="10-PEST分析方法"><a href="#10-PEST分析方法" class="headerlink" title="10.PEST分析方法"></a>10.PEST分析方法</h3><p>企业的战略外部环境分析。</p><p><img src="https://i.loli.net/2019/02/26/5c75584a86f2c.png" alt="PEST分析方法"></p><h3 id="11-PDCA模型"><a href="#11-PDCA模型" class="headerlink" title="11. PDCA模型"></a>11. PDCA模型</h3><p><img src="https://i.loli.net/2019/08/19/LiXTcBj5PyGzIhQ.jpg" alt="PDCA"></p><p><img src="https://i.loli.net/2019/03/23/5c95c631c6fe3.png" alt="PDCA模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95cbc1629d7.jpg" alt="PDCA模型"></p><h3 id="12-时间管理"><a href="#12-时间管理" class="headerlink" title="12.时间管理"></a>12.时间管理</h3><p><img src="https://i.loli.net/2019/08/19/cdlNS3ihf7jKIYa.jpg" alt="微信图片_20190819004205.jpg"></p><p> A、重要且紧急</p><p>紧急状况<br>迫切的问题<br>限期完成的工作<br>你不做其他人也不能做</p><p>B、重要不紧急<br>准备工作<br>预防措施<br>价值观的澄清<br>计划<br>人际关系的建立<br>真正的再创造<br>增进自己的能力</p><p>C、紧急不重要<br>造成干扰的事、电话、<br>信件、报告<br>会议<br>许多迫在眉捷的急事<br>符合别人期望的事</p><p>D、不重要不紧急<br>忙碌琐碎的事<br>广告函件<br>电话<br>逃避性活动<br>等待时间</p><h3 id="13-任务分解法"><a href="#13-任务分解法" class="headerlink" title="13. 任务分解法"></a>13. 任务分解法</h3><p> <img src="https://i.loli.net/2019/08/19/I74BWGXQ2rFTihj.jpg" alt="微信图片_20190819004339.jpg"></p><p> 目标→任务→工作→活动。</p><ul><li>WBS分解的原则：将主体目标逐步细化分解，最底层的任务活动可直接分派到个人去完成；每个任务原则上要求分解到不能再细分为止。</li></ul><ul><li><p>WBS分解的方法：至上而下与至下而上的充分沟通；一对一个别交流；小组讨论。</p></li><li><p>WBS分解的标准：分解后的活动结构清晰；逻辑上形成一个大的活动；集成了所有的关键因素包含临时的里程碑和监控点；所有活动全部定义清楚</p></li></ul><h3 id="14-AISAS-用户行为决策分析模型"><a href="#14-AISAS-用户行为决策分析模型" class="headerlink" title="14. AISAS-用户行为决策分析模型"></a>14. AISAS-用户行为决策分析模型</h3><ul><li>注意- 兴趣-搜索-行动-分享</li></ul><p><img src="https://i.loli.net/2019/03/23/5c95c4f93ba91.jpg" alt="AISAS 模型"></p><h3 id="15-延伸：-个人IPO模型"><a href="#15-延伸：-个人IPO模型" class="headerlink" title="15. 延伸： 个人IPO模型"></a>15. 延伸： 个人IPO模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95bfee175d6.png" alt="个人IPO模型"></p><h3 id="16-波特五种竞争力分析模型"><a href="#16-波特五种竞争力分析模型" class="headerlink" title="16. 波特五种竞争力分析模型"></a>16. 波特五种竞争力分析模型</h3><p><img src="https://i.loli.net/2019/03/23/5c95c30761cdc.png" alt="波特五种竞争力分析模型"></p><h3 id="17-KANO模型"><a href="#17-KANO模型" class="headerlink" title="17. KANO模型"></a>17. KANO模型</h3><p> <img src="https://i.loli.net/2019/03/23/5c95c58968dae.jpg" alt="KANO模型"></p><ul><li><p>对用户需求分类和优先排序</p><p>将影响用户满意度的因素划分为五个类型，包括：</p><ul><li><p>魅力因素：用户意想不到的，如果不提供此需求，用户满意度不会降低，但当提供此需求，用户满意度会有很大提升;</p></li><li><p>期望因素(一维因素)：当提供此需求，用户满意度会提升，当不提供此需求，用户满意度会降低;</p></li><li><p>必备因素：当优化此需求，用户满意度不会提升，当不提供此需求，用户满意度会大幅降低;</p></li><li><p>无差异因素：无论提供或不提供此需求，用户满意度都不会有改变，用户根本不在意;</p></li><li><p>反向因素：用户根本都没有此需求，提供后用户满意度反而会下降;</p></li></ul></li></ul><h3 id="18-SCP模型"><a href="#18-SCP模型" class="headerlink" title="18. SCP模型"></a>18. SCP模型</h3><p><img src="https://wiki.mbalib.com/w/images/d/d8/SCP%E6%A8%A1%E5%9E%8B.gif" alt="SCP模型"></p><ul><li>分析在行业或者企业收到表面冲击时，可能的战略调整及行为变化。</li></ul><h3 id="19-SPACE-战略地位与行动评价矩阵"><a href="#19-SPACE-战略地位与行动评价矩阵" class="headerlink" title="19. SPACE-战略地位与行动评价矩阵"></a>19. SPACE-战略地位与行动评价矩阵</h3><ul><li>企业的内部因素与外部因素</li></ul><p><img src="https://wiki.mbalib.com/w/images/7/72/SPACEjz.jpg" alt="SPACE"></p><!-- <!-- ###  7. USED方法针对SWOT分析后的结果，使用USED方法产出解决方案* 如何善用每个优势？ How can we Use each Strength?* 如何停止每个劣势？ How can we Stop each Weakness?* 如何成就每个机会？ How can we Exploit each Opportunity?* 如何抵御每个威胁？ How can we Defend against each Threat? -- --><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://mp.weixin.qq.com/s/IGsE86BT6CY7hT2uVHmN-g" target="_blank" rel="noopener">分析和解决问题的7种武器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析师-岗位与具备能力介绍</title>
      <link href="/2018/12/22/%E6%96%B9%E6%B3%95-%E5%B2%97%E4%BD%8D%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/12/22/%E6%96%B9%E6%B3%95-%E5%B2%97%E4%BD%8D%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://mp.weixin.qq.com/s/YfDZ-tmGiSyMCgarBuFT0A" target="_blank" rel="noopener">超级菜鸟如何入门数据分析</a></p><h1 id="1-数据分析师岗位介绍"><a href="#1-数据分析师岗位介绍" class="headerlink" title="1. 数据分析师岗位介绍"></a>1. 数据分析师岗位介绍</h1><ol><li>什么是数据分析师？</li></ol><ul><li>数据分析师， 就是专门从事数据收集、研究分析，并依据数据来指导业务决策的人员。</li></ul><ol start="2"><li>岗位分类</li></ol><ul><li><p>其中的数据收集、研究分析、业务指导刚好可以将数据分析的岗位分为三个大的部分：</p></li><li><ul><li>数据收集——数据研发工程师</li></ul><blockquote><p>主要职能是搭建数据处理的基础设置，让大数据的存储、处理、计算能按要求完成，包括数据仓库搭建、数据存储、计算处理、报表开发等。</p></blockquote></li><li><ul><li>数据挖掘、算法工程师</li></ul><blockquote><p>主要是应用机器学习和数据挖掘算法，进行用户行为分析和用户属性挖掘，建立模型，预测、用户画像等为业务场景提供支持。</p></blockquote></li><li><ul><li>业务数据分析师</li></ul><blockquote><p>分析业务数据， 发现问题，分析问题，得出分析结论，为决策提供支持，主要支持市场运营部门。</p></blockquote></li></ul><p>如需详细了解数据分析师的岗位划分，可以参考秦路老师的文章：<a href="https://mp.weixin.qq.com/s?__biz=MjM5NjEyMDI2MQ==&amp;mid=2455947571&amp;idx=1&amp;sn=4e1fe329b7acef882142df0186a4c4a5&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">数据分析的职业规划</a></p><ol start="3"><li>业务数据分析师的日常工作有哪些?</li></ol><ul><li><p>业务前期： 建立业务数据指标， 梳理业务数据口径， 确定数据埋点方案， 进行埋点测试，确保数据采集的准确性。</p></li><li><p>日常工作： 公司的日报、周报、月报数据支持，业务方临时性数据支持， 数据异常原因分析， 业务专题分析。</p></li></ul><ol start="4"><li>业务数据分析师的技能要求</li></ol><ul><li><p>数据分析思维和对公司业务的理解程度， 是业务数据分析的主要核心技能。</p></li><li><p>必备技能有： Excel, Hive/Sql, 统计学，PPT</p></li><li><p>软技能有： 逻辑思维能力，分析方法论， 数据敏感度， 沟通协调能力</p></li><li><p>加分技能： Python, R,  机器学习算法</p></li></ul><ol start="5"><li><p>业务数据分析的发展方向</p><p>业务数据分析是入门相对容易， 但要精通比较困难， 在公司属于比较基础的岗位。如果专精于业务方向， 可以往管理方面发展， 如数据运营经理/总监。也可往数据挖掘工程师方面发展， 需要进一步掌握Python和机器学习算法等知识，后面也可以往数据产品经理的方向发展。</p><p>对于我自己来说，目前的职业发展方向是业务数据分析师， 主要任务是不断学习和完善业务数据分析的所有技能， 加强互联网运营的业务理解能力，打好职业发展的基础，未来的期望是往数据挖掘方面发展。</p></li></ol><ol start="6"><li>业务数据分析师的考量标准</li></ol><ul><li>产品理解能力：</li></ul><blockquote><ul><li>熟悉业务的各种核心数据，明白用户从哪里来，进来之后做了什么，了解用户反馈最多的问题是什么。</li><li>了解产品功能渗透率和关键路径，再以这些数据为切入点，思考当前产品有哪些问题，并与产品经理沟通如何优化，同时看竞品数据和行业数据，深入了解业务数据。</li><li>深入了解： 要有自己的洞见，对于整个行业，各个不同阶段的领头羊是谁，他们靠什么成为领头羊，又因为什么出现增长瓶颈，当前各自的大法测试什么，对我们自身的app有什么借鉴，后续我们要监控哪些数据。</li></ul></blockquote><ul><li>分析方法论：</li></ul><blockquote><p>能够快速从一个较全面、逻辑性、价值性的角度去分析，而不是单点无架构分析。所有方法论都是通过不断提炼、总结、实践得出来的。</p><ul><li>指标体系方法论</li><li>流量分析方法论</li><li>路径分析方法论</li><li>产品分析方法论</li><li>营销活动分析方法论</li><li>用户流失分析方法论</li><li>A/B 测试<!-- > * 最大概率法则、二八定律、幸存者偏差等 --></li></ul></blockquote><ul><li>可视化能力： </li></ul><blockquote><ul><li>PPT 制作能力</li><li>PPT专题报告之间的逻辑性</li><li>内容是否符合金字塔原理</li><li>数据可视化内容美观性</li></ul></blockquote><ul><li>演讲能力：</li></ul><blockquote><ul><li>表达能力</li><li>讲故事能力</li><li>形象化能力<!-- > * 大心脏能力如何 --></li></ul></blockquote><ul><li>协作沟通能力： </li></ul><blockquote><ul><li>跟产品、业务、研发沟通时的软技能</li><li>如何在团队中定义好自己的位置并让其他人感到舒服</li></ul></blockquote><ul><li>逻辑思维能力：</li></ul><blockquote><ul><li>分析推导过程的全面性、合理性、价值型</li></ul></blockquote><ul><li>技术能力：</li></ul><blockquote><ul><li>excel的常规操作</li><li>统计知识是否能够熟练应用</li><li>hive、sql的熟练程度</li><li>python 中常用的数据分析库能否熟练应用</li><li>算法模型是否熟练搭建并知道有哪些坑。</li></ul></blockquote><p>对数据进行分析的最佳途径：</p><ol><li>业务梳理——了解业务需求</li><li>确定业务目标——弄清产品目标以及当下的首要问题</li><li>事件设计——记录和目标相关的用户行为，并定义为相应事件</li><li>数据采集——保证采集质量，确定好事件采集时机，和开发进行沟通</li><li>构建指标体系——确定想要看的指标，想要达到的分析粒度，建立产品的第一关键指标</li><li>数据分析——业务人员根据自己的经验，进行数据分析，迭代优化</li></ol><!-- ---机器学习定理1. 没有免费午餐定理，NFL定理没有任何算法在所有数据情形下有天然优势， 在没有实际背景下，没有一种算法比随机胡猜的效果好。所有模型是没有好坏之分的， 当数据有线性分布时， 模型就会有效。 先掌握领域前言知识， 用它来指导业务， 而不是把每一个模型都跑一遍。 2. 丑小鸭定理两只白天鹅的区别与丑小鸭与白天鹅的区别一样远。https://blog.csdn.net/mnshenyanping/article/details/51280731 --><!-- 1. 不要追求成为全栈工程师。 2. 产品的逻辑一定要懂。什么是产品？-定义问题， 解决问题的逻辑。 比如： 用户标签体系、冷启动策略等。3. 不要频繁切换从事的业务领域* 业务领域先验知识的积累， 是成功进行数据建模的关键。 * 业务领域的商业逻辑需要花时间搞清楚， 这对产品的决策至关重要。 * 同一个领域的不断努力可以形成个人口碑。  --><!-- ------# 数据分析应该具备的能力不同企业不同职位去判断一个数据分析专家的标准和侧重点肯定不同，但所谓牛人的特性，庖丁解牛。就是不管多复杂多麻烦的一个事，一个分析工作，到他手里，能很快的清晰的给出脉络，给出解构，给出路线图。这就是牛人的共性，不仅是数据分析。那么我觉得针对数据专才，很重要一点就是，对于所属行业，所从事领域的一些数据现象，数据特征，数据逻辑，随时问他，清晰了然。为什么机会来的时候老板会想到他，因为你很难找到一个人能对各个核心部门的业务了如指掌。能快速厘清部门的业务脉络并有效接手，他最后一个接手的部门是百度联盟事业部，担任事业部总经理，马国林出事后他去救火。现在已经离开百度做投资基金， 为什么做投资，因为对流量变现的思路和认知太了解了。回到我最初的那句话，数据是公司的，贩卖数据肯定是违法的，但见识和视野是自己的，是可以随时带走的。我也知道有在百度做数据的老同事 ，坦白说，对数据毫无感觉，完全是为了领导的工作而完成数据，那，就没啥可说的了。旧文有个坐守金山不自知，说的就是那种。对场景的理解，认知。 书本，教育，在线讨论，都是基于明确的场景提出问题，寻找解决方案。 但现实工作中，对一个职场新人，或技术人员，理解业务场景并寻找和发现问题 是非常需要经验的。我以前说过，acm的算法大牛，我可以给他们讲搜索算法优化，不是因为他们算法能力不如我，而是应用场景理解上我秒杀他们。 --><hr><h1 id="2-如何避免数据分析中的坑"><a href="#2-如何避免数据分析中的坑" class="headerlink" title="2. 如何避免数据分析中的坑"></a>2. 如何避免数据分析中的坑</h1><p>要避开哪些坑？</p><ol><li>不要重复无意义的工作。许多刚入行的小伙伴喜欢把清理数据作为主要工作，纪敏认为这只是让你接触数据的一种方法，每天重复地提出需求、整理表格，会磨灭掉许多对于分析师岗位的热情。</li><li>不要“全手动”，要寻找代替的工具。既然不能重复地做无意义的工作，那么就要学会用工具去代替人工，选择合适的用户行为模型和工具，能把分析师的主要精力放在规律和策略的探索上，才能充分发挥一名数据分析师应有的价值。</li></ol><p>数据分析只是一种辅佐手段，它无法从根本上改变产品方向、功能价值，主要辅佐和支持的产品，探索更有价值的数据意义。</p><p><a href="https://www.sensorsdata.cn/blog/20181107/" target="_blank" rel="noopener">https://www.sensorsdata.cn/blog/20181107/</a></p><hr><ol><li>避免数据偏见<br>在分析数据时受个人偏见和动机的影响，即仅选择支持你声明的数据，同时丢弃不支持声明的部分。“数据偏见”将让数据的客观性荡然无存。</li></ol><p>避免这种谬误的方法是在分析数据时，尽可能收集相关数据，并询问他人意见</p><ol start="2"><li>避免数据疏浚<br>数据疏浚（Data Dredging）是指未能确认相关性，实际上是偶然的结果。</li></ol><p>在寻找问题的原因时，很容易被数据蒙蔽。乍一看，这些数据可能具有统计学意义，但进一步测试（例如，检查趋势是否持续，查看相关指标等）可能会发现只是偶然结果。</p><p>避免这种谬误的方法是在分析数据时，从假设开始检查相关指标和观察数据变化趋势。</p><ol start="3"><li>区分因果关系和相关性 </li></ol><p>在数据分析时很容易将两个事件同时发生（相关），判断为因果关系。</p><p>避免这种谬误的方法是，收集更多数据并查看可能的第三方原因，有时会发现他们的相关关系可能与第三个独立因子相关，而不是彼此相关。</p><p>例如，我们发现放弃其在线购物车的潜在客户往往具有较低的总购物车价值（放弃时购物车中物品的总成本）。此时，我们没有足够的数据来确定这是一致的相关性，是偶然结果，还是由其他因素引起的。深入挖掘我们可能会发现运输成本导致购物车到下单的流失率上升，因为免费送货仅适用于超过特定最低购物车价值的订单。</p><ol start="4"><li>解决问题，做出明智的决定<br>在找到数据支持的结论后，你需要记下一个简短的摘要（包括问题，数据显示的内容以及由此产生的决策 / 行动），这样做有两个目的：</li></ol><p>1.将你所分析的数据和结论告知可能涉及或受影响的任何其他团队，为其他人提供有价值的背景信息。</p><p>2.这个记录也将使你在将来出现类似情况时更容易参考和以防其他人想要查看数据本身。</p><p>最终，问题解决了，也总结了有价值的经验。</p><hr><hr><!-- 以子弹短信app来进行举例1. 产品信息结构图了解产品承载了哪些信息和功能，这些信息的目的是什么， 想要用户干什么2. 产品功能结构图将产品的功能模块梳理出来， 功能之间怎样跳转，功能的上游入口和下游入口是什么，都要想清楚，并标记出来3. 核心业务梳理流程图弄清梳理出产品的核心业务流程，密切观察用户在核心业务流程运转的整个过程，比如：注册流程，新手完成任务流程等4. 梳理产品需求首先明确我们要分析什么样的场景，解决什么样的业务问题，要解决这个业务问题，要看什么数据，要衡量什么指标。5. 定义指标明确产品的目标和目前产品阶段来说最重要的问题。比如，要增加销售额，销售额等于活动流量乘以付费转化率乘以客单价，我们就需要把这个指标需求进一步细化，分给不同的角色各有侧重点的去执行。 要梳理这个指标需求和产品逻辑有什么关系？比如，活跃用户指标，一般是启动app的用户来定义活跃，实际上，每一款产品的核心功能不同，只有完成核心功能的用户才能算活跃6. 事件设计和数据采集埋点设计根据用户在使用产品功能时产生的行为数据，从用户使用行为分析的角度去分析需要的埋点用户行为： 发布话题——上传图片、视频——进入本地视频列表——选择视频——输入话题——发布话题1. 操作系统，应用版本，话题分类2. 操作系统，应用版本3. 操作系统，应用版本，是否取消4. 操作系统，应用版本，操作类型，是否取消5. 操作系统，应用版本，输入话题名称方式，话题名称6. 操作系统，应用版本，话题分类，话题名称，是否成功---- --><p><a href="https://www.sensorsdata.cn/blog/20180929/" target="_blank" rel="noopener">https://www.sensorsdata.cn/blog/20180929/</a></p><p><a href="https://www.geckoboard.com/learn/data-literacy/basic-data-analysis-guide/" target="_blank" rel="noopener">https://www.geckoboard.com/learn/data-literacy/basic-data-analysis-guide/</a></p><p><a href="http://www.woshipm.com/marketing/1058822.html" target="_blank" rel="noopener">一个提升用户体验的绝好方法：触点管理</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 岗位介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学学习</title>
      <link href="/2018/10/20/%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/20/%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h1><h2 id="集中趋势分析"><a href="#集中趋势分析" class="headerlink" title="集中趋势分析"></a>集中趋势分析</h2><ol><li><p><a href="https://www.shuxuele.com/mean.html" target="_blank" rel="noopener">平均数</a><br>将所有数据进行平均分配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line">np.mean(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/central-measures.html" target="_blank" rel="noopener">中位数</a><br>n个数据由大到小排列时，位于正中间的那个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/central-measures.html" target="_blank" rel="noopener">众数</a><br>n个数据中，出现次数最多的那个数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment">#方法1</span></span><br><span class="line"><span class="comment"># np.bincount, 计算非负的int数组中，每个值出现的次数</span></span><br><span class="line">counts = np.bincount(a)</span><br><span class="line"><span class="comment">#[0 1 0 2 1 1 0 2 0 0 0 0 0 0 0 3]</span></span><br><span class="line"><span class="comment">#返回沿轴最大值的索引</span></span><br><span class="line">np.argmax(counts)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">stats.mode(a)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ol><h2 id="变异性"><a href="#变异性" class="headerlink" title="变异性"></a>变异性</h2><ol><li><p>极差<br>n个数据中，最大数与最小数之差</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]</span><br><span class="line">b = max(a) - min(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/quartiles.html" target="_blank" rel="noopener">四分位数</a><br>将数据从小到大排列并分成4等份后，处于3个分割点上的数。<br><img src="https://i.loli.net/2020/02/23/26ENcS4gVjZfbCh.jpg" alt="微信图片_20200223184342.jpg"><br>箱型图<br><img src="https://i.loli.net/2020/02/23/MneCPUgLXas7Gxi.jpg" alt="微信图片_20200223184334.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br><span class="line"><span class="comment"># 45%分位数</span></span><br><span class="line">np.percentile(a, <span class="number">45</span>)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/standard-deviation.html" target="_blank" rel="noopener">方差</a><br>度量随机变量与期望值（平均值）之间的偏离程度。</p><p>公式：$\sigma ^{2} = \frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}$</p><p>计算步骤：</p><ol><li>求平均值</li><li>求 (各数值 - 平均值) 的值</li></ol><ul><li>以 (各数值 - 平均值) 的平均数为标准，无法看出以平均数为基准数据的离散程度。因为两数相减结果有正有负，相加之后会互相抵消。</li><li>为使 (各数值 - 平均值) 的差值即使为负也能显示出差值，可以将 (各数值 - 平均值)的值平方之后，再取平均值。</li></ul><ol start="3"><li>求 (各数值 - 平均值)² 的值</li><li>求 (各数值 - 平均值)² 的平均值</li></ol><p>方差问题：</p><ul><li>数值时有会过大</li><li>单位为原先单位的平方</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">np.var(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/standard-deviation.html" target="_blank" rel="noopener">标准差</a><br>标准差越小，说明数据大多数集中于平均值附近，偏差不大。<br>公式：$\sigma =  \sqrt{\sigma ^{2}} =\sqrt{\frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}} $<br>计算步骤： 计算出方差后开根号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">np.std(a)</span><br></pre></td></tr></table></figure></li></ol><h2 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h2><ol><li><p>常见的因果关系<br><img src="https://i.loli.net/2020/02/24/aoGEmcSqwdiR6lZ.jpg" alt="微信图片_20200224191209.jpg"></p><ol><li>某个原因导致的结果唯一，导致某个结果的原因也是唯一的。</li><li>某个原因导致的结果唯一，导致某个结果的原因不唯一。</li><li>某个原因导致的结果不唯一，导致某个结果的原因唯一。</li><li>某个原因导致的结果不唯一，导致某个结果的原因也不唯一。</li></ol></li><li><p><a href="https://www.shuxuele.com/data/correlation.html" target="_blank" rel="noopener">相关系数</a><br>表示相关关系的正负与强弱的系数<br>相关系数r的范围是-1≤r≤1<br>判断相关关系强弱的标准：<br><img src="https://i.loli.net/2020/02/24/RIYFqMdjxJKsS2T.jpg" alt="微信图片_20200224192723.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法1</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">2</span>,<span class="number">4</span>, <span class="number">6</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.corrcoef([a,b])</span><br><span class="line"><span class="comment"># 写法2</span></span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line">stats.pearsonr(a,b)</span><br><span class="line"><span class="comment"># 结果的第一个数为相关系数</span></span><br><span class="line"><span class="comment"># 写法3</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df= pd.DataFrame()</span><br><span class="line">df[<span class="string">'a'</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">df[<span class="string">'b'</span>] = [<span class="number">2</span>,<span class="number">4</span>, <span class="number">6</span>,<span class="number">9</span>]</span><br><span class="line">df.corr()</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><h2 id="排列与组合"><a href="#排列与组合" class="headerlink" title="排列与组合"></a>排列与组合</h2><ol><li><p><a href="https://www.shuxuele.com/combinatorics/combinations-permutations.html" target="_blank" rel="noopener">排列</a><br>从N项中任取n项，并进行排列，决策的顺序的结果有影响。<br>公式：$P_{n}^{N} = \frac{N!}{(N-n)!}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> comb, perm</span><br><span class="line">perm(<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/combinatorics/combinations-permutations.html" target="_blank" rel="noopener">组合</a><br>从N项中任取n项,不考虑顺序。<br>公式：$c_{n}^{N} = \frac{N!}{n!(N-n)!}$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special  <span class="keyword">import</span> comb, perm</span><br><span class="line">comb(<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>补充资料： <a href="https://zhuanlan.zhihu.com/p/41855459" target="_blank" rel="noopener">5分钟彻底了解排列组合</a></p></li></ol><ol start="3"><li><a href="https://www.shuxuele.com/data/probability-events-types.html" target="_blank" rel="noopener">事件</a><br><img src="https://i.loli.net/2020/02/24/PjsIL6iNYlQzXfR.png" alt="微信截图_20200224195820.png"><ul><li>事件的补: $P(A) = 1 - P (A^{c})$</li><li>事件的并：$P(A\bigcup B ) = P(A) + P(A) - P(A\bigcap  B )$</li><li>互斥事件：$P(A\bigcup B ) = P(A) + P(B)$</li><li>独立事件：$P(A\bigcap B) = P(A) *  P(B)$</li></ul></li></ol><h2 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h2><p> 在事件B发生的条件下， A条件发生的概率<br> 公式： </p><ul><li><p>$P(A|B ) = \frac{P(A\bigcap B)}{P(B)}$</p><!-- * $P(A\bigcup B) = P(B) * P(A|B) = P(A) * P(B|A)$  --></li></ul><h2 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a><a href="https://www.shuxuele.com/data/binomial-distribution.html" target="_blank" rel="noopener">二项分布</a></h2><p> <strong>概念：</strong> 成功率为P的实验，独立重复 n 次后的成功次数为 x 的概率分布。</p><p> 公式： <img src="https://i.loli.net/2020/02/24/3myYQFjAZ8cRket.png" alt="微信截图_20200224223830.png"></p><p> <img src="https://i.loli.net/2020/02/24/AH8cRKzVXZ2moxU.png" alt="微信截图_20200224224006.png"></p><p> 案例：在各类促销活动中， 抽奖是一种常见的促销方式。现在希望运营方设计一个抽奖模式。用户能够抽10次，中奖概率是10%。如果用户抽中了3次及以上， 则公司会亏本。那么公司亏本的概率是多少？</p><h2 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a><a href="https://www.shuxuele.com/data/standard-normal-distribution.html" target="_blank" rel="noopener">正态分布</a></h2><p> <img src="https://www.statisticshowto.datasciencecentral.com/wp-content/uploads/2013/02/standard-normal-distribution.jpg" alt="正态分布"><br> 性质：</p><ul><li>均值 = 中位数 = 众数</li><li><p>沿中心线对称，一半在平均值左侧，一半在平均值右侧。</p><p>特点：</p></li><li>69%的数值在离平均值一个标准差之内</li><li>95%的数值在离平均值2个标准差之内</li><li><p>99.7%的数值在离平均值3个标准差之内</p><p>补充资料：</p></li><li><a href="http://www.ruanyifeng.com/blog/2017/08/normal-distribution.html" target="_blank" rel="noopener">正态分布为什么常见？</a></li><li><a href="https://www.statisticshowto.datasciencecentral.com/probability-and-statistics/normal-distributions/" target="_blank" rel="noopener">正态分布</a></li></ul><h2 id="数据标准化-Z-Score"><a href="#数据标准化-Z-Score" class="headerlink" title="数据标准化-Z-Score"></a><a href="https://www.shuxuele.com/data/standard-normal-distribution.html" target="_blank" rel="noopener">数据标准化-Z-Score</a></h2><p> 公式： z = (x - u) / 方差<br> 目的：消除指标之间的量纲和取值范围差异的影响</p><p> 补充资料：<a href="https://blog.csdn.net/weixin_38706928/article/details/80329563" target="_blank" rel="noopener">数据规范化（归一化）、及Z-score标准化</a></p><h2 id="切比雪夫定理"><a href="#切比雪夫定理" class="headerlink" title="切比雪夫定理"></a><a href="https://zh.wikipedia.org/wiki/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E4%B8%8D%E7%AD%89%E5%BC%8F" target="_blank" rel="noopener">切比雪夫定理</a></h2><ul><li>至少有75%的数据在两个标准差之内</li><li>至少有89%的数据在三个标准差之内</li><li><p>至少有95%的数据在5个标准差之内</p><p>举例： 若一班有36个学生，而在一次考试中，平均分是80分，标准差是10分，我们便可得出结论：少于50分（与平均相差3个标准差以上）的人，数目不多于4个（=36*1/9）</p><p>作用： 用于异常值检测</p></li></ul><!-- 6. 泊松分布  案例：某医院急救中心一天收到呼叫次数服从泊松分布，平均数为20， 那么该急救中心一天收到15次呼叫的概率是多少？ 收到小于15次呼叫的概率是多少？ excel 函数： POISSON.DIST7. 伯努利分布 8. 几何分布10. 幂律分布8. 假设检验案例：某个APP， 用户购买的平均转化率出25%， 在进行全新的产品设计之后，转化率变成了30%， 这个转化是波动？还是产品改进有效？A/B 测试： Z检验 --><hr><!--  回归分析：我们假设“某年度首都地区盛夏的天数为x天，这一年度首都地区啤酒的总销售额为y日元”。严格来说，y并非x的函数，但是，在某种程度上可以预测，盛夏的天数越多，啤酒的销量就越高。类似这样在数据上并非严格的函数关系，在统计学上，可以概括为[y是x的函数+误差]按照这个逻辑，了解x与y的关系，就可以预测y（啤酒销售额）的值。这种情况下使用的分析方法，叫作回归分析（回归分析是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。 -- --><h1 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a><a href="https://www.shuxuele.com/data/bayes-theorem.html" target="_blank" rel="noopener">贝叶斯定理</a></h1><ol><li><p><strong>如何判断她喜欢你的概率</strong><br>贝叶斯定理<br>计算方法： 先假定一个概率， 然后根据样本获得新的信息， 根据这些信息对 原先假设的概率进行修正， 得到准确的概率。<br>公式：$P(A|B) = \frac{P(A) * P(B|A)}{P(B)}$</p><p>假设 你是一名女生， 在情人节这天， 一名男生送给你一盒巧克力， 你可能会有疑问，他是不是喜欢你， 他喜欢你的概率是多大？</p><p>因为你没有证据来说明你就是他喜欢的类型， 所以， 我们假设 你或者是他喜欢的类型， 或者是一名路人。 假设各有50%的概率。 </p><p><img src="https://i.loli.net/2018/11/02/5bdc6bb0a6545.png" alt="a"></p><p>通过调查， 我们发现 一个男生对心意女生送出巧克力的概率为 45%</p><p><img src="https://i.loli.net/2018/11/02/5bdc6be2e46fa.png" alt="a"></p><p>对路人送出巧克力的概率 为 20%， 那他现在送给你一盒巧克力， </p><p><img src="https://i.loli.net/2018/11/02/5bdc6bfeba767.png" alt="b"></p><p>在他已经送你巧克力的这件事情已经确定了， 所以他们现在是一个整体。他喜欢你的概率是多少呢。 </p><p>45% / (45% + 20%) = 69.2%<br>当他送你巧克力时，大概有69、2%的概率会喜欢你</p><p>当然， 贝叶斯概率 能够计算出这个概率， 但是否要继续， 取决与你。 贝叶斯概率在我们生活中的应用是非常广泛的， 常见的， 比如 在邮件中的反垃圾邮件。 这是一种贝叶斯概率非常好的使用案例。 </p><p>在上面的推理中， 我们总会觉得贝叶斯定理有些“牵强”,牵强的原因主要是因为先验概率。 这种主观上假定或者大概的概率， 会让人感觉牵强。 但也正是由于设定了先验概率， 贝叶斯定理才会有即是只有少量信息， 也能够进行推理。 当然， 贝叶斯定理有另一学习功能， 就是信息越多， 推理结果就越精确。 </p></li></ol><hr><ol start="2"><li><p><strong>快速理解贝叶斯定理</strong></p><p>假设一家商城， 顾客分为： 想买商品的顾客，和随便逛逛的顾客。  假设， 随机走进来一个顾客，他为有意愿度的顾客占20%， 为随便逛逛的顾客占80%。 现在增加了一个主动询问店员的动作。 </p><p>假设有意愿度购买的顾客， 向店员询问的概率为70%， 不询问的概率为30%。 随便逛逛的客户， 主动询问店员的购买概率为 10%， 不询问的概率为 90%。 </p><p>现在问 如果一顾客主动向店员询问， 那么他是有意愿购买的顾客的概率是多少。</p><p>有意向且询问的概率为  14%。  有意向不询问的概率为  6%</p><p>无意向且询问的概率为 8%， 无意向且不询问的概率为 72%</p><p>现在 主动询问这个动作已经做出了， 所以总体为两部分： 有意向且询问， 和无意向且询问</p><p>14:8 = 7:4。    所以她有意向且愿意购买的概率为   7/11   63.6% </p></li></ol><hr><ol start="3"><li><p><strong>贝叶斯： 通过结果来反推原因</strong></p><p>参加活动的人群中，女性只占30%， 是否说明女性不喜欢参加此类活动？</p><p>某种疾病的发病率为千分之一。现在有一种试纸，它在患者得病的情况下，有99%的准确率判断患者得病，在患者没有得病的情况下，有5%的可能误判患者得病。现在试纸说一个患者得了病，那么患者真的患病的概率是多少？</p><p>某城市有两种颜色的出租车，蓝车和绿车市场比率为15:85。 一辆出租车肇事逃逸，当时有一位目击者证人，这位证人认定肇事的出租车是蓝色的。但是他的目击未必可信，公安人员经过在相同环境下对该目击者进行“蓝绿”测试得到：80%的情况下识别正确，20%的情况下不正确。那么实际为蓝车的可能性是多少？</p><p>我们经常会受到垃圾短信，假设1000条正常短信中，包含【澳门赌场】的短信有2条，而在垃圾短信中，包含澳门短信的短信有400条。<br>现在我们接受到了一条新短信，在不浏览内容的情况下，假定它的正常几率是50%。现在对短信内容进行解析，发现澳门赌场这个词，那么它是垃圾短信的概率有多高。</p></li></ol><ol start="4"><li>补充资料：<ul><li><a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/" target="_blank" rel="noopener">数学之美番外篇：平凡而又神奇的贝叶斯方法</a></li><li><a href="https://book.douban.com/subject/30229508/" target="_blank" rel="noopener">《统计学关我什么事》</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="noopener">贝叶斯推断及其互联网应用（一）：定理简介</a></li><li><a href="https://www.jiqizhixin.com/articles/2017-09-19-6" target="_blank" rel="noopener">贝叶斯学习与未来人工智能</a><!--  * 贝叶斯奥卡姆剃刀《数学之美》第24章《决策与判断》 --<!-- [Machine Learning, a Probabilistic Perspective](https://amstat.tandfonline.com/doi/abs/10.1080/09332480.2014.914768?journalCode=ucha20#.W9nMJPkzbIU) --></li></ul></li></ol><hr><h1 id="前言：为什么应该学点统计学"><a href="#前言：为什么应该学点统计学" class="headerlink" title="前言：为什么应该学点统计学"></a>前言：为什么应该学点统计学</h1><p> 统计学是人类发明用来研究我们自身的科学，它与我们的生活息息相关。 小到支付宝根据用户个人消费数据判断其消费水平，从而有针对性进行限额借贷。大到国家通过国民生产总值这样的统计数据分析，来研究国家经济发展趋势等， 都需要用到统计学知识。</p><p> 我们可以从统计大师 Hans Rolling 的演讲中， 来看下 1960 年到 2003 年的世界各国出生率与经济发展是如何变化的。</p><p> <a href="https://www.youtube.com/watch?v=RUwS1uAdUcI&amp;t=1065s" target="_blank" rel="noopener">Hans Rolling —— 统计的魅力</a></p> <iframe width="560" height="315" src="https://www.youtube.com/embed/RUwS1uAdUcI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p> 有人会问，统计学那么多高深的概念和复杂的算术， 在平时的生活中自己也应用不到。 这种想法其实是错误的。<strong>我们学习统计学， 不光是学习怎么对数据进行统计计算，更重要的是学会运用统计思维去更理性地看待周围的事物。</strong></p><blockquote><p>比如， 最近报道的一名美国公民在 10 月 23 号中了 16 亿美元的彩票， 看到这则消息，你会不会也有点心动， 也想去买个彩票。其实， 关于是否要买彩票，统计学有一个重要的概念来衡量：<strong>期望值</strong></p><p>即同一种行为多次重复之后，所能得到的平均收益</p><p>举例来说， 假如某彩票规则为：每次买张彩票需要 2 元，假设 200 次抽奖可以中奖一次，奖金为 300 元。</p><p>期望值 = 300 <em>(1/200) + 0 </em> (199/200) = 1.5。</p><p>期望值是 1.5 元， 但是每次抽奖成本为 2 元， 于是每次净亏损 0.5 元。如果你偶尔买一次就算了， 但如果你长期买彩票，就肯定会亏很多钱。 况且现实生活中，中奖的概率远远低于 1/200</p></blockquote><p> 你可能会觉得，概率那么低， 那我怎么感觉天天有人中奖呢， 这背后其实是媒体的选择性报道， 也就是统计学中的<strong>幸存者偏差问题</strong>。</p><blockquote><p>例如：二战期间，盟军为减少飞机在敌人防空炮火中的损失，军方决定为飞机加装防护，多数人认为，应该在机身中弹多的地方加强防护。但统计学家沃德认为，应该给那些没有中弹的油箱和驾驶部位进行防护，因为这些部位中弹的飞机根本没有机会飞回来。</p></blockquote><p> <strong>现实生活中，也往往会存在一些幸存者偏差的数据，我们生活中接触的数据越来越多， 解读数据背后的信息， 辨析数据真伪就显得非常的重要</strong>，这则视频对此有更深入的讲解。</p><p> <a href="https://www.youtube.com/watch?v=AbMTG8bzVfY&amp;t=66s" target="_blank" rel="noopener">成功学有用吗？幸存者偏差，一个活着就该明白的事！李永乐老师</a><br> <iframe width="560" height="315" src="https://www.youtube.com/embed/AbMTG8bzVfY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></p><p> 那么统计学到底要学什么呢？统计学主要学习两个方面:</p><ol><li><p>描述统计， 描述数据的基本情况</p><p>通过研究数据的平均值，中位数，标准差等指标， 来了解数据的整体分布状况，从杂乱的数据中得出有用的信息</p></li><li><p>推理统计，根据样本数据来对总体进行估计</p><p>通过对样本数据的研究， 来对总体数据进行估计，评估推理数据的准确度，统计学中就会通过置信度， 卡方分布等来对总体进行估计。</p><p><strong>统计学是我们将客观数据转化成有用信息的一把钥匙， 运用统计概念对一些更为广泛而大致的信息及规律进行思考， 可以改善我们做出的判断和决定。我们当然不能指望这些判断不出错误， 但每一个好的决策都会帮助你更有效的利用这些信息，积少成多，把事情做成的概率会大很多。</strong> </p><p>视频资料补充：<br><a href="https://v.qq.com/x/page/n0146d3s4zj.html" target="_blank" rel="noopener">Hans Rolling —— 东方崛起</a></p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=n0146d3s4zj" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/l03817zzhl2.html" target="_blank" rel="noopener">为什么应该学点统计学</a></p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=l03817zzhl2" allowfullscreen="true"></iframe><p><a href="https://www.bilibili.com/video/av8225730/?redirectFrom=h5" target="_blank" rel="noopener">数据的乐趣</a></p><iframe src="//player.bilibili.com/player.html?aid=8225730&cid=13540431&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li></ol><hr><h1 id="统计学网站"><a href="#统计学网站" class="headerlink" title="统计学网站"></a>统计学网站</h1><ol><li><a href="https://seeing-theory.brown.edu/compound-probability/cn.html" target="_blank" rel="noopener">看见统计学</a></li><li><a href="https://www.shuxuele.com/data/index.html" target="_blank" rel="noopener">数学很好玩</a></li><li><a href="https://do.minik.us/" target="_blank" rel="noopener">数据可视化-博客</a></li><li><a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">数学公式转换为markdown格式</a></li><li><a href="https://book.douban.com/subject/27038537/" target="_blank" rel="noopener">《写给所有人的极简统计学》</a></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考系统</title>
      <link href="/2018/10/14/%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/10/14/%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="批判性思维"><a href="#批判性思维" class="headerlink" title="批判性思维"></a>批判性思维</h1><h2 id="图尔敏模型"><a href="#图尔敏模型" class="headerlink" title="图尔敏模型"></a>图尔敏模型</h2><p> <img src="https://i.loli.net/2020/03/10/PNtsn39cULezuSm.png" alt="未命名文件.png"></p><ul><li><p>举例：</p><blockquote><p>小明出生在北京，所以小明是中国人。</p></blockquote></li><li><p>论题： 小明出生在北京</p></li><li>前提： 在北京出生的是中国人</li><li>支撑： 现有法律规定</li><li>逻辑推理： 在北京出生的是中国人，小明在北京出生，所以小明是中国人。</li><li>反例：小明后来移民加拿大。</li><li>对推理的限定： 小明并非一定就是中国人</li><li>结论：因为小明出生在北京，所以小明可能是中国人。</li></ul><hr><h2 id="对各个模块进行解释"><a href="#对各个模块进行解释" class="headerlink" title="对各个模块进行解释"></a>对各个模块进行解释</h2><ol><li><p>论题<br>论题是要讨论的问题或争议。</p><p>论题分为两种形式：</p><ul><li>一种是对事实的讨论，比如：服用中药 <em>是不是</em> 能治好疾病，杨教授的学术研究水平 <em>怎么样</em>？ 人口出生率下降的原因 <em>是什么</em>？</li><li>另一种是对价值主张的讨论， 比如：大学生 <em>应不应该</em> 读研， 对全民医疗 <em>应该</em> 采取什么样的态度？</li></ul><p>不同类型的论题，做出的评价是不同的，我们在讨论一件事情时，<strong>要检查两点</strong>：</p><ul><li><strong>我们是在讨论某个事实，还是讨论价值主张。</strong></li><li><strong>我有没有正面回答问题。</strong></li></ul></li><li><p>结论<br>结论是要让你相信的观点和信息, 必须是有论证支撑的观点。</p><ul><li><p><strong>没有论据支撑的观点不能叫结论。</strong></p></li><li><p>当某人说出他的观点时， 我们应该马上问：你这个看法有什么依据？</p></li></ul><p>注意问题：</p><ul><li><p><strong>偷换结论</strong><br>用一个相关性很强的结论来换掉正面回答问题的结论。<br><strong>原理：默认预设，认为结论只能二选一。</strong></p></li><li><p>鱼和熊掌不可兼得，我拿不到鱼，所以我会拿到熊掌。</p></li><li><p>年轻人不愿意生孩子，所以养猫的人会越来越多。</p></li><li><p><strong>先有结论，再证明合理</strong><br>人先作了决定，然后给出的理由并不是来推导这个决定，而是想办法维护这个决定。</p></li></ul><p>在作一些决定和选择时，要先问自己：影响决策的是理性判断还是情绪等影响。</p></li><li><p>论证前应明确的两个问题<br><strong>明确对方是在进行论证，还是在进行解释。</strong></p><ul><li>解释并没有证明论证确实成立，而是把结论变成了默认前提。<br>论证是指：我还没有相信或者认同你，你得证明你的判断。</li><li>将 <strong>因为</strong> 用 <strong>根据…、基于…、理由是…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>得出…、推断…、证明…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我往嘴里塞食物。</li></ul></li></ul><p>解释是指：我们已经承认了事实，视图说明为什么事实是这样的。</p><ul><li>将 <strong>因为</strong> 用 <strong>归因于…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>导致…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我饿了。</li></ul></li></ul><p><strong>识别概念的定义区别</strong></p><ul><li>在论题、论证和结论中出现的概念是一致的吗,这些观念会误导别人吗？</li><li>关键概念的定义准确吗？</li><li>在思考和论证的过程中，把一件事定义清楚。<br>参考：《学会提问》第4章</li></ul></li><li><p>挖掘论证中两种隐藏假设</p><p><strong>事实判断型的假设</strong>，</p><ul><li>这个世界是什么样的？一个理由是否能证实结论，主要取决于我们能否找到没有明说出来的想法，将理由和结论从逻辑上联系起来。<br>比如：每天一个鸡蛋，能补充蛋白质。假定：鸡蛋是富含蛋白质的。 </li><li>如何找出描述性假设</li><li>不断思考理由和结论之间的关系，寻找支持理由的想法、</li><li>把自己放到相反立场</li></ul><p><strong>价值判断型的假设</strong>，</p><ul><li>这个世界应该如何选择？价值观假设是认为某些价值观中一个比另一个更重要，并且选择的价值观会对结论产生重大影响，同时也影响他捍卫结论的方式，但是这种价值取向并没有说明。<br>比如价值观冲突： 忠诚-诚实、竞争-合作、媒体自由-国家安全、平等-个人主义、秩序-言论自由、理性-冲动。</li><li>如何找出价值观假设</li><li>言论者的背景是什么，他代表了哪方的利益？</li><li>注意作者用来证实结论的各种理由，然后判断哪些价值取向会导致作者认为这些理由比另一些理由更可取，而另一些理由其实可以从论题的另一方面进行论证。</li><li>如果我和作者站在相反的立场，我会如何反驳</li></ul><p><strong>判断假设</strong></p><ul><li>这个假设和我的个人经验冲突不？</li><li>这个假设是来自哪里的，消息来源可靠吗？</li><li>我自己想法，背后的隐藏假设是什么？</li></ul></li></ol><ol start="5"><li>支撑<ul><li>支撑是双方都公认的法则或常识。</li><li>法律法规</li><li>经检验的科学研究</li><li>注意类比的质量。</li></ul></li></ol><ol start="6"><li><p>反例</p><ul><li>对相反观点的论证，以达到论证的全面性。</li></ul></li><li><p>常见谬误：<br>参考下文：常见谬误详解</p></li></ol><hr><h2 id="用图尔敏模型进行议论文写作"><a href="#用图尔敏模型进行议论文写作" class="headerlink" title="用图尔敏模型进行议论文写作"></a>用图尔敏模型进行议论文写作</h2><ol><li><p>对文章主题进行介绍</p><ul><li>介绍能够引起读者注意的内容</li><li>对要表述的问题进行陈述</li><li>表达你的结论，并给出使用范围。</li></ul></li><li><p>提出证据来支撑论证</p><ul><li>证据1、2</li></ul></li></ol><ol start="3"><li><p>提供支撑保证的理由和事实，根据个人实践和理论来说明保证的合理性。</p><ul><li>支撑1、2</li></ul></li><li><p>回答反驳</p><ul><li>反驳1</li><li>对反驳1的回答<br>…</li></ul></li><li><p>结论</p><ul><li>概括论证和结论的要点，指出论证的意义，能够让读者印象深刻。</li></ul></li></ol><hr><h2 id="用图尔敏模型进行分析性写作"><a href="#用图尔敏模型进行分析性写作" class="headerlink" title="用图尔敏模型进行分析性写作"></a>用图尔敏模型进行分析性写作</h2><p>对某一文章质量进行评判</p><ul><li>理解主题论点，澄清概念的意义。</li><li>审查理由质量，挖掘潜在的假设。</li><li>分析论证结构，评估推理的强弱。</li><li>考虑替代论证， 提出完善的建议。</li></ul><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>课程-中国青年政治学院：批判性思维（谷振诣教授）<iframe src="//player.bilibili.com/player.html?aid=9624662&cid=15907095&page=3" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li></ul><ul><li><p><a href="https://en.wikipedia.org/wiki/Toulmin_method" target="_blank" rel="noopener">Toulmin method</a></p></li><li><p><a href="https://pan.baidu.com/s/1jHFsnFw?fid=154817059834328" target="_blank" rel="noopener">《逻辑新引.怎样辨别是非》</a></p><ul><li><p><a href="https://book.douban.com/subject/1863497//" target="_blank" rel="noopener">《beyond feelings》</a></p></li><li><p>《简单的逻辑学》</p></li><li><p>《学会提问》</p></li><li><p>《蔡钰-批判性思维15讲》</p></li><li><a href="https://www.youtube.com/watch?v=kBdfcR-8hEY&amp;list=PL30C13C91CFFEFEA6" target="_blank" rel="noopener">Justice – What’s the right thing to do?</a></li></ul></li></ul><!--  * [Critical Reasoning for Beginners》](https://www.youtube.com/watch?v=kBlQj5uiOXc&list=PLA795AB5BDDD2B0B3) --><hr><h1 id="结构化思维"><a href="#结构化思维" class="headerlink" title="结构化思维"></a>结构化思维</h1><p> 对信息进行<strong>识别、归纳、概括、总结和表达。</strong></p><p><img src="https://i.loli.net/2020/03/16/QbL2rwTzn9tcvy8.jpg" alt="微信图片_20200316111654.jpg"></p><h2 id="识别信息"><a href="#识别信息" class="headerlink" title="识别信息"></a>识别信息</h2><p> 纵向上的总分结构</p><ul><li>识别结论</li><li>识别理由</li><li>识别事实<br>参考:上文批判性思维</li></ul><h2 id="归纳信息"><a href="#归纳信息" class="headerlink" title="归纳信息"></a>归纳信息</h2><p> 横向上的分类结构</p><ul><li>MECE 分类法： 不重不漏</li><li>二分法</li><li>过程法： 发展时间、运作流程</li><li>要素法：从上到下、从外到内、从整体到局部</li><li>公式法：按照公式的要素去分类。</li><li>矩阵法</li><li>特定场景模型：<a href="https://zhangandyu.github.io/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/">常见的分析思维模型</a></li></ul><h2 id="总结概括信息"><a href="#总结概括信息" class="headerlink" title="总结概括信息"></a>总结概括信息</h2><p> <img src="https://i.loli.net/2020/03/16/75y3u8AHNkYOoDl.jpg" alt="微信图片_20200316111700.jpg"><br>  <strong>归纳法</strong></p><ul><li><p>根据许多个别事物的特殊性来概括出同类事物的特性。</p><p>描述性概括</p><ul><li>找出事物属性上的共同点。</li></ul><p>行动性概括</p><ul><li>最终结果是什么，找出事物结果的共性。</li></ul></li></ul><p><strong>演绎法</strong></p><ul><li><p>将某一事实与对应的某个规律联系再一起，得出结论。</p><p>注意事项：</p><ul><li>大前提一定要无可争议，避免主观判断，并且罗列不能过长。</li><li>小前提是一个已经发生的事实。</li></ul></li></ul><h2 id="清晰表达"><a href="#清晰表达" class="headerlink" title="清晰表达"></a>清晰表达</h2><p><strong>1.结论先行</strong><br>  表达时先说结论</p><p><strong>2.以上统下</strong><br> 上一层次要点必须是下一层次的概括</p><p><strong>3.归类分组</strong><br>  每一组要点必须属于同一范畴</p><p><strong>4.逻辑递进</strong><br>  每个要点必须按照一定的逻辑顺序排列。</p><ul><li>演绎推理</li><li>时间/步骤顺序</li><li>空间顺序</li><li>重要性顺序</li></ul><p>注意事项： 结论先行，重要的理由说三点。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>《得到-有效训练你的结构化思维》</li><li>《金字塔原理》</li></ul><hr><h1 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h1><h2 id="1-明确和理解问题"><a href="#1-明确和理解问题" class="headerlink" title="1. 明确和理解问题"></a>1. 明确和理解问题</h2><ul><li>明确问题的本质到底是什么</li><li>跟领导确认希望达到的目标</li><li>明确可以利用的资源</li></ul><h2 id="2-拆分和定位问题"><a href="#2-拆分和定位问题" class="headerlink" title="2.拆分和定位问题"></a>2.拆分和定位问题</h2><ul><li>用公式思维拆解问题</li><li>逻辑树-金字塔原理（mece法则)</li><li>假设驱动-假设问题可能出现在某个细分的问题点上。</li></ul><h2 id="3-提出解决方案并总结"><a href="#3-提出解决方案并总结" class="headerlink" title="3.提出解决方案并总结"></a>3.提出解决方案并总结</h2><ul><li>结论先行<br>参考上文：结构化思维</li></ul><!-- ## 4. 个人目标解决方案* 熟悉所在领域的业务和常识，不断问自己为什么* 列一个清单，然后排序做选择* 假设一种无条件获得的极端情况* 不断了解你的选择，不断的去试错 --><h2 id="4-工作中解决问题的方法"><a href="#4-工作中解决问题的方法" class="headerlink" title="4. 工作中解决问题的方法"></a>4. 工作中解决问题的方法</h2><ol><li>快速按照理解去做拆解，去做思维导图， 能想到多少是多少</li><li>拿着拆解思维导图去跟业务方的人去请教，一定要找到业务方真正关心的点</li><li>结合业务方给出的具体建议， 修改第一步的思维框架， 做完后，请教你的领导</li><li>再改一次， 回报给业务方领导</li><li>遇到坑之后， 一定要文档详细记录下来。<ul><li>让团队中其他人知道， 节省团队时间。</li><li>知道自己在哪块花了大量时间，为后续分析节省时间。</li></ul></li></ol><h2 id="5-生活中问题解决的4个层次"><a href="#5-生活中问题解决的4个层次" class="headerlink" title="5. 生活中问题解决的4个层次"></a>5. 生活中问题解决的4个层次</h2><ol><li>有没有找到真正的问题， 人都是有逃避心理的。</li><li>想到了问题的第几层</li><li>想到了最后一层， 并且去执行解决问题</li><li>做到了，并且分享帮助别人</li></ol><hr><h1 id="常见谬误详解"><a href="#常见谬误详解" class="headerlink" title="常见谬误详解"></a>常见谬误详解</h1><p>1.幸存偏误<br>  在生活中更容易看到成功者的故事，看不到失败， 你会系统性地高估成功的概率。</p><p>2.游泳选手身材错觉<br>  你看到游泳选手的身材好，因此你觉得游泳就可以练就这样的身材。你觉得用这个护肤品的模特都好漂亮， 因此你觉得用了这个护肤品自己也可以变漂亮。 </p><p>  其实是因为他们有这样的好身材， 所以他们才能被选为游泳运动员。  和游泳能够练就这样的身材没有直接的关系。 </p><p>  用这个护肤品的模特好看， 是因为这个模特好看， 所以她才能被选做拍这个护肤品的广告， 和这个护肤品可以让自己更漂亮没有直接关系。 </p><p> 3.过度自信效应<br>  系统性地高估自己的学识和能力<br>  过度自信会令你忽视你真正掌握的能力与你已知的知识之间的区别<br>  这个怎么理解呢， 就是你很多知识， 你只是了解， 而并非已经内化成你的能力， 而你会错误的把它归为你能力的一部分。 比如你说你会python, 但当你真正写的时候， 你却写不出来， 其实你没有掌握</p><p> 4.诉诸结果<br>  依据某观点成立所产生的结果好坏，来判断一个观点是否正确。 </p><p> 5.稻草人谬误<br>  有意地模仿他人观点，以达到攻击模仿出来的观点而非实际论点的目的。</p><p> 6.诉诸无关权威<br>  诉诸不是问题专家的人， 其观点更可能是错误的。 例如：信仰中医，而不相信现代医学</p><p> 7.虚假两难<br>  给出一个有两种范畴组成的有限集合， 并假设讨论范围内的一切事物都必须属于该集合。因此<br>  若拒绝其中一个范畴，便只好接受另一个。<br>  例如： 世界上只有两种人，男人和女人， 你既然不是女人， 那么你一定是男人。</p><p> 8.人身攻击<br>  通过攻击一个人本身，而不是攻击其论点，以转移讨论话题，最终达到诋毁其论点的目的。<br>  “侮辱性人身攻击” ： 你又不是专家， 你有什么资格发言<br>  “处境类人身攻击” ： 对他们的动机作出判断。 你又不是真正关心降低城市犯罪率， 你只是想要人们投票给你。</p><p> 9.循环论证<br>  你完全错了， 因为你说得没有道理。<br>  你应该相信上帝， 否则你会下地狱。</p><p> 10.从众心理</p><p> 11.纠缠于沉迷成本<br> 我已经买了电影票了， 电影再烂也要看完。<br>  我已经在这段恋情中投入了那么多感情， 现在离开她是不明智的。<br>  我已经在这支股票中投了那么多钱了， 现在就收手会亏本的， 说不定以后会涨的。</p><ul><li>你应该看的是现在的形势以及你对未来的评估。</li></ul><p>12.互惠偏误<br>  先送你一束花， 然后让你捐赠。</p><ul><li>诉诸公众</li><li>诉诸感情</li><li>滑坡谬误</li><li>偷换概念</li><li>转移话题</li><li>因果混淆：相关并不能证明因果。</li><li>事后归因<br>参考资料：<ul><li>《简单的逻辑学》第5章</li><li>《有用的逻辑学》</li></ul></li></ul><hr><!-- -----<!-- ------------------------------------------------- 《精准表达：让你的方案在最短的时间内打动人心》逻辑思考能力， 语言组织能力1. 为什么说话要讲逻辑为了让任何人都能够听懂并接受我们的方案。 对方与我们的文化背景大不相同， 或者与我们持相反一件， 不注意讲话的逻辑， 对方可能听不懂我们的方案。 2. 什么是逻辑把语言合理的组织起来 3. 有逻辑的讲话分为哪些方面* 纵向逻辑 因为A， 所以B。 因为B， 所以C。 * 横向逻辑 - MECE 分析法 A包含B和C。 4. 缺乏逻辑性：* 缺乏纵向逻辑 - 真的是这样吗* 缺乏横向逻辑 - 仅仅是这样吗5. 真的是这样吗？纵向逻辑组织的不好， 因果关系比较薄弱。 当对方要求你仔细解释你的纵向逻辑时， 你能回答出来。 做到针对对方的提问能够详细的做出解释。 6. 真的是这样吗？未能合理把握整体思路， 出现了遗漏和重复。 覆盖范围广、分类细致。 7. 纵向逻辑薄弱的原因* 前提条件不同因为A， 所以B。 但是A 包含 A1, A2, A3, A4等隐形前提。 要做到有逻辑性地讲话， 应该先质疑自己的前提条件。 想想一个与自己前提条件大不相同的人， 设想他可能会提出怎么的问题。 发现自己的隐形前提。 * 把不同性质的东西混为一谈因为A, 所以B。 但A的范围里包含了A1、A2、A、3 等不同性质的东西反省自己的额言论， 看自己是否把不同东西混为一谈了。 是否有必要把这件事细致分类， 再进行讨论。 * 偶然的必然化因为A， 所以B。 但是A到B之间原因太过跳跃， 让听众以为是偶然事件。 思考哪些印因素可能会破坏因果关系，先想象一下具体情形， 然后按照顺序想想最坏的情形。 8. 如何加强横向逻辑体会语言中的层次感把不同角度的概念拉拢到同一平面。 然后再讨论遗漏与重复的重复等问题。 如何把不同角度的概念拉到同一平面？* 面对同一概念， 不同的人有不同的看法。 * 面对同一概念， 不同的人会从不同的切入点开始展开联想。 首先， 确认对方是以何种立场还思考问题的。 其次， 确认对方设想的是何种场景。 如何实现MECE状态？* 使用架构5p, 营销理论3c, 战略模型7S模型SPRO, SPCO模型AIDAS原理PDCA循环根据具体情况采用合理架构。* 避免遗漏六维度理论常见的三个维度， 维度4, 时间的流动。 维度5， 信息、电力、交易等物质的流动维度6， 人们的心情和习惯* 消除重复当我们同时具备了 横向逻辑 和 纵向逻辑， 就构建了金字塔结构。  -- -->]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas库学习</title>
      <link href="/2018/09/27/%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/09/27/%E6%8A%80%E8%83%BD-Python-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h1><ul><li><p>Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， Series和DataFrame，Series用于存储一维数据， 而DataFrame存储多维数据。</p></li><li><p>常用的软件-Anaconda是数据分析中运行python的一款利器， 安装教程可参考Anaconda入门使用指南</p></li></ul><h1 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h1><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995" target="_blank" rel="noopener">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(<span class="string">r'E:\工作文件\周报\周数据\测试\0902-0908'</span>)</span><br><span class="line">print(file_list, <span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取当前文件夹地址</span></span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'E:/工作文件/an-商品汇总-uv.xls'</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xls'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv文件，并用 分隔符分割</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, sep = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读取文件前两行</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, nrows = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>读取显示编码错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示错误为：</span></span><br><span class="line"><span class="comment"># UnicodeDecodeError: 'utf-8' codec can not decode byte 0xb5 in position 0: invalid start byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式</span></span><br><span class="line">df = pd.read_csv(path + <span class="string">'登记用户 20191127.csv'</span>,encoding=<span class="string">"gbk"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'登记用户 20191127.csv'</span>, engine = <span class="string">'python'</span>, encoding = <span class="string">'utf-8-sig'</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>读取txt格式数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, sep = <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>)  <span class="comment"># 将txt文件存为numpy数组</span></span><br></pre></td></tr></table></figure><ol start="5"><li>读取excel中的sheet名称</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="string">'sheet1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入sheet的顺序，从0开始计数</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet,并制定文件中的第几行做行索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>, index_col = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\商品汇总.xlsx'</span>, sheet_name = <span class="number">0</span>, head = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\商品汇总.xlsx'</span>, usecols = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># uescols = [0,2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取excel中所有sheet，并进行合并</span></span><br><span class="line">rbook = []</span><br><span class="line">kong_data = os.listdir(<span class="string">r'F:\省资源位'</span>)</span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> kong_data:</span><br><span class="line">    data_excel = pd.ExcelFile(<span class="string">r'F:\省资源位\\'</span>+file_name)</span><br><span class="line">    sheet = data_excel.sheet_names</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sheet:</span><br><span class="line">        data_button_rest = pd.read_excel(<span class="string">r'F:\省资源位\\'</span>+file_name, sheet_name= i )</span><br><span class="line">        rbook.append(data_button_rest)</span><br><span class="line">        result_df =pd.concat(rbook)</span><br><span class="line">datas_excel = pd.DataFrame(result_df)</span><br></pre></td></tr></table></figure><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br></pre></td></tr></table></figure><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/Administrator/Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop\\'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据，且不带索引</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置要导出的列</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="literal">False</span>,</span><br><span class="line">           columns = [<span class="string">'ID'</span>, <span class="string">'销量’])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置编码格式</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           encoding = '</span>utf<span class="number">-8</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 缺失值、无穷值处理</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           na_rep = 0, # 缺失值用0填充</span></span><br><span class="line"><span class="string">           inf_rep = 0 # 无穷之用0填充</span></span><br><span class="line"><span class="string">           )</span></span><br><span class="line"><span class="string"># 导出csv文件，设置分隔符</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">            sep = '</span>,<span class="string">'</span></span><br><span class="line"><span class="string">           )</span></span><br></pre></td></tr></table></figure><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"> </span><br><span class="line">writer = pd.ExcelWriter(<span class="string">'F:/notebooks/zhoushuju.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">btn_navigation.to_excel(writer, sheet_name = <span class="string">'底部导航'</span>)</span><br><span class="line">shouye_top20.to_excel(writer, sheet_name = <span class="string">'首页top20'</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><ol start="7"><li>其他数据格式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从SQL表/库导入数据 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">eng = pymysql.connet(host= <span class="string">'100.129'</span>, user = <span class="string">'root'</span>, password = <span class="string">'1234'</span>, df = <span class="string">'db'</span>, charset = <span class="string">'ugf8'</span>)</span><br><span class="line"></span><br><span class="line">query = <span class="string">"""select * from android_log """</span></span><br><span class="line"></span><br><span class="line">df = pd.read_sql(query, eng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出数据到SQL表 </span></span><br><span class="line">df.to_sql(table_name, eng)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 常见问题</span><br><span class="line"></span><br><span class="line">* 当文件有中文时， 可能会出现错误：Initializing <span class="keyword">from</span> file failed 有中文， 可以用此方法解决</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">f = open(‘我的文件.csv’)</span><br><span class="line">res = pd.read_csv(f)</span><br></pre></td></tr></table></figure><ul><li>查看大文件有多少列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = open(<span class="string">'E:/用户明细.csv'</span>)</span><br><span class="line">data1 = pd.read_csv(data, iterator=<span class="literal">True</span>)</span><br><span class="line">data2 = data1.get_chunk(<span class="number">5</span>)</span><br><span class="line">print(data2)</span><br></pre></td></tr></table></figure><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html" target="_blank" rel="noopener">迭代器</a></p><h1 id="对输出数据进行处理"><a href="#对输出数据进行处理" class="headerlink" title="对输出数据进行处理"></a>对输出数据进行处理</h1><p><a href="https://www.jianshu.com/p/5c0aa1fa19af" target="_blank" rel="noopener">pandas的数据输出显示设置</a></p><ol><li>对表中某一列元素进行相同操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;金额&apos;].apply(lambda x:x+1)</span><br><span class="line"></span><br><span class="line">df[&apos;金额&apos;] +2</span><br></pre></td></tr></table></figure><ol start="2"><li>对表中每一个元素进行相同操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.applymap(lambda x:x+1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line"><span class="comment"># pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示</span></span><br><span class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">100</span>) <span class="comment">#数据显示总宽度</span></span><br><span class="line">pd.set_option(<span class="string">'max_rows'</span>, <span class="number">100</span>) <span class="comment">#显示最多行数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_columns'</span>, <span class="number">100</span>) <span class="comment">#显示最多列数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_colwidth'</span>, <span class="number">16</span>) <span class="comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'large_repr'</span>, <span class="string">'truncate'</span>) <span class="comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span></span><br><span class="line">pd.set_option(<span class="string">'show_dimensions'</span>, <span class="literal">True</span>) <span class="comment">#当数据带省略号显示时，是否在最后显示数据的维度</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">'max_info_columns'</span>, <span class="number">100</span>) <span class="comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span></span><br><span class="line">print(df.info())</span><br></pre></td></tr></table></figure><ul><li>将数据变成小数形式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">inputfile = <span class="string">'../data/electricity_data.xls'</span></span><br><span class="line">outputfile = <span class="string">'./electricity_data_analyze1.xls'</span></span><br><span class="line"> </span><br><span class="line">data = pd.read_excel(inputfile)</span><br><span class="line">data[<span class="string">u'线损率'</span>] = (data[<span class="string">u'供入电量'</span>]-data[<span class="string">u'供出电量'</span>])/data[<span class="string">u'供入电量'</span>]    <span class="comment">#data[u'线损率']的类型为series； data[u'线损率']为小数</span></span><br><span class="line">data[<span class="string">u'线损率'</span>] = data[<span class="string">u'线损率'</span>].apply(<span class="keyword">lambda</span> x: format(x, <span class="string">'.2%'</span>))    <span class="comment">#Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数</span></span><br><span class="line"> </span><br><span class="line">data.to_excel(outputfile, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="描述数据"><a href="#描述数据" class="headerlink" title="描述数据"></a>描述数据</h1><ol><li>表信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li>添加默认列名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果数据没有标题行，可用pandas添加默认的列名</span></span><br><span class="line">df = pd.read_excel(<span class="string">'x.xlsx'</span>, header = <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>显示前数据前5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(<span class="number">5</span>)</span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><ol start="10"><li>找到重复值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据有0， 是因对缺失值进行了填充</span></span><br><span class="line">df[<span class="string">'经纪人级别'</span>].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span></span><br><span class="line">df = pd.read_excel(<span class="string">'x.xlsx'</span>,skiprows=[<span class="number">2</span>] )</span><br></pre></td></tr></table></figure><ol start="13"><li>对缺失值进行识别</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有缺失值显示为True</span></span><br><span class="line">pd.insull(df)  <span class="comment"># df.isnull()</span></span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算此data的数量</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts(ascending = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数并分组</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts(ascending = <span class="literal">True</span>, bins = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数</span></span><br><span class="line">df[<span class="string">'data'</span>].count()</span><br></pre></td></tr></table></figure><ol start="15"><li><p>字符和数值之间的转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int()  <span class="comment"># 转化成整数</span></span><br><span class="line">float() <span class="comment"># 转化成浮点数</span></span><br><span class="line">str() <span class="comment"># 转化成字符</span></span><br><span class="line">type() <span class="comment"># 查看格式</span></span><br></pre></td></tr></table></figure></li><li><p>获取数据分布情况</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><h1 id="数据清晰"><a href="#数据清晰" class="headerlink" title="数据清晰"></a>数据清晰</h1><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812" target="_blank" rel="noopener">DataFrame中的空值处理</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.dropna(how=<span class="string">'any'</span>)</span><br><span class="line"></span><br><span class="line">df.dropna(how = <span class="string">'all'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">labels 就是要删除的行列的名字，用列表给定</span><br><span class="line">axis 默认为0，指删除行，因此删除columns时要指定axis=1；</span><br><span class="line">index 直接指定要删除的行</span><br><span class="line">columns 直接指定要删除的列</span><br><span class="line">inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；</span><br><span class="line">inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除包含 集团 二字 的行</span><br><span class="line"></span><br><span class="line">read_data = df[- df[&apos;所属省份名称&apos;].isin([&apos;集团&apos;])]</span><br></pre></td></tr></table></figure><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列, axis=1表示删除列</span></span><br><span class="line">df.drop([<span class="string">"销售额"</span>, <span class="string">"ID"</span>], axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">df.drop(columns = [<span class="string">"销售额"</span>, <span class="string">"ID"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入列位置</span></span><br><span class="line">df.drop(df.columns[[<span class="number">4</span>,<span class="number">5</span>]], axis =<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>删除行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 删除行，筛选行名</span><br><span class="line">df.drop([&apos;一&apos;,&apos;二&apos;], axis = 0)</span><br><span class="line"></span><br><span class="line">df.drop(index = [&apos;一&apos;, &apos;二&apos;])</span><br><span class="line"></span><br><span class="line"># 删除行，筛选行索引</span><br><span class="line">df.drop(df.index[[0,1]], axis = 0)</span><br><span class="line"></span><br><span class="line"># 只要年龄小于40的用户</span><br><span class="line"></span><br><span class="line">df[df[&apos;ID&apos;] &lt; 40]</span><br></pre></td></tr></table></figure><ol start="3"><li>填充（fillna函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空值用0填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>)</span><br><span class="line">df.replace(np.NaN, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值对空值进行填充</span></span><br><span class="line">df[<span class="string">'时长'</span>].fillna(df[<span class="string">'时长'</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照不同列进行填充</span></span><br><span class="line">df.fillna(&#123;<span class="string">'性别'</span> : <span class="string">'男'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>更改数据格式，更改数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据格式int64,改为float格式</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'大区'</span>].astype(<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>更改列名称, 修改列名。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [[<span class="string">'导航'</span>,<span class="string">'uv'</span>, <span class="string">'pv'</span>,<span class="string">'户均点击'</span>]]</span><br><span class="line"></span><br><span class="line">df.rename(columns=&#123;<span class="string">'IM渠道'</span>: <span class="string">'渠道'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>添加修改索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加索引</span></span><br><span class="line">df.index = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改索引,重新设置</span></span><br><span class="line">df = df.set_index[<span class="string">'标题'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名索引</span></span><br><span class="line">df.rename (index = &#123;<span class="number">1</span>: <span class="string">'一'</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="微信图片_20191221153932.jpg"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.reset_index(level=<span class="literal">None</span>, drop=<span class="literal">False</span>, inplace=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将所有index转化成columns</span></span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将第0级索引转化为 columns</span></span><br><span class="line">df.reset_index(level=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将原索引删除，不加入columns</span></span><br><span class="line">df.reset_index(drop = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><ol start="7"><li><p>删除重复值</p><p><a href="https://www.cnblogs.com/cocowool/p/8421997.html" target="_blank" rel="noopener">Pandas删除数据的几种情况</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认第一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates(keep = <span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列去重</span></span><br><span class="line">df.drop_duplicates(subset = [<span class="string">'姓名'</span>, <span class="string">'唯一识别码'</span>])</span><br></pre></td></tr></table></figure><ol start="8"><li>对列表内的值进行替换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一对一替换</span></span><br><span class="line">df[<span class="string">'ID'</span>].replace(<span class="string">'1053'</span>, <span class="string">'110'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对一替换</span></span><br><span class="line">df[<span class="string">'ID'</span>].replace(&#123;<span class="string">'1053'</span>: <span class="string">'110'</span>, <span class="string">'230'</span>: <span class="string">'33'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.columns.str.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><h1 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h1><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照轴把多个对象拼接起来</span></span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span></span><br><span class="line"><span class="comment"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将left和right进行合并</span></span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定以key为键进行合并</span></span><br><span class="line">pd.merge(left, right, on = <span class="string">'key'</span>)</span><br><span class="line"> pd.merge(name_3, name_1, left_on = [<span class="string">'ming'</span>], right_on = [<span class="string">'标记'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># key2列不相同的部分会直接舍弃掉</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留key2列不相同的部分</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>], how = <span class="string">'outer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不相同的部分指定以左表为基准</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>], how = <span class="string">'left'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复列名处理</span></span><br><span class="line"><span class="comment"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span></span><br><span class="line">pd.merge(df1,df2, on = <span class="string">'id'</span>, suffixes= [<span class="string">'_L'</span>, <span class="string">'_R'</span>])</span><br></pre></td></tr></table></figure><ul><li>concat函数, 按照标题进行拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通合并</span></span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引设置</span></span><br><span class="line">pd.concat([df1, df2], ignore_index= <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后删除重复值</span></span><br><span class="line">pd.concat([df1, df2], ignore_index = <span class="literal">True</span>).drop_duplicates()</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照ID进行升序排列</span></span><br><span class="line"><span class="comment"># 按照ID进行降序排列</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>], ascending = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在保证销售额列降序的情况下，对ID列进行升序处理</span></span><br><span class="line">data.sort_values(by = [<span class="string">'销售额'</span>, <span class="string">'ID'</span>],ascending = [<span class="literal">False</span>, <span class="literal">True</span>], inplace = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将ID是缺失值的列显示在最后面</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ID是缺失值的列显示在最前面</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>], na_position = <span class="string">'first'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数值进行排名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应Excel中的 rank.avg函数</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method= <span class="string">'average'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按值在所有的排列数据中出现的先后顺序排名</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  与Excel中rank.eq 函数的功能一样</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'min'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与min相反，取重复值对应的最大排名</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'max'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1</span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(<span class="string">'网'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'客户注册渠道'</span>]),</span><br><span class="line">                index=df.index,columns=[<span class="string">'客户注册渠道'</span>,<span class="string">'size'</span>])</span><br><span class="line"></span><br><span class="line">&lt;!-- df = pd.DataFrame((x.split(<span class="string">'.'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> 首页jhrj_1[<span class="string">'所属省份编码'</span>]),</span><br><span class="line">                index=df.index,columns=['客户注册渠道','size']) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列完对数据进行合并</span></span><br><span class="line">df1 = pd.merge(首页jhrj_1, df, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 指明切分区间</span><br><span class="line">pd.cut(df[&apos;年龄&apos;], bins = [0,3,6,10])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将数据切成3份</span><br><span class="line">pd.qcut(df[&apos;年龄&apos;],3 )</span><br></pre></td></tr></table></figure><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 取到小数点后3位</span><br><span class="line">for i in a :</span><br><span class="line">    print(&quot;%.3f&quot;%c)</span><br><span class="line"></span><br><span class="line"># 设置小数点位数，四舍五入</span><br><span class="line">df[&apos;cnts&apos;].round( decimals = 2)</span><br></pre></td></tr></table></figure><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = [&apos;省份&apos;, &apos;按钮名称&apos;, &apos;uv&apos;, &apos;pv&apos;] )</span><br></pre></td></tr></table></figure><h1 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h1><ol><li>选择某一列/ 某几列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 普通索引- 根据名称进行选择</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'客户端uv'</span>]</span><br><span class="line"></span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引 / 切片索引， 根据所在第几列进行选择</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span></span><br><span class="line">df.iloc[:, [<span class="number">0</span>,<span class="number">2</span>]] <span class="comment"># 获取第1列和第3列的数值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>选择某一行/某几行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通索引-loc</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'第一行'</span>]</span><br><span class="line"></span><br><span class="line">df.log[[<span class="string">'第一行'</span>, <span class="string">'第二行'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引，切片索引</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 选择第一行</span></span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第一行和第二行</span></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><ol start="3"><li>根据指定条件进行筛选</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择年龄小于200的数据</span></span><br><span class="line">df[df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#年龄小于200，且id小于300</span></span><br><span class="line">df[(df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>) &amp;   (df[<span class="string">'id'</span>] &lt; <span class="number">300</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_and(df[<span class="string">'年龄'</span>] &gt; <span class="number">10</span>, df[<span class="string">'id'</span>] &gt; <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A列值大于10，或 B列值大于5</span></span><br><span class="line">df[(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>) | (df[<span class="string">'C'</span>] &gt;<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_or(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>, df[<span class="string">'C'</span>] &gt; <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 A列的值大于13时， 显示B，c列的值</span></span><br><span class="line">df[[<span class="string">'B'</span>,<span class="string">'C'</span>]][df[<span class="string">'A'</span>]&gt;<span class="number">13</span>]</span><br></pre></td></tr></table></figure><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[[<span class="string">'第一行'</span>, <span class="string">'第三行'</span>], [<span class="string">'订单号’, '</span>ID<span class="string">']]</span></span><br></pre></td></tr></table></figure><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>布尔索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">'年龄'</span>]&lt; <span class="number">200</span>][[<span class="string">'订单编号'</span>, <span class="string">'ID'</span>]]</span><br></pre></td></tr></table></figure><ul><li>切片索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.ix[<span class="number">0</span>:<span class="number">2</span>, [<span class="string">'订单变化'</span>, <span class="string">'ID'</span>]]</span><br></pre></td></tr></table></figure><ol start="5"><li>按条件进行提取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 用isin函数进行判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span></span><br><span class="line">df[df.A.isin((<span class="number">10</span>, <span class="number">13</span>))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看这一列是否包含某个值</span></span><br><span class="line">df[<span class="string">'级别'</span>].isin([<span class="string">'A3'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 先判断是否包含，然后将符合条件的数据提取出来。</span></span><br><span class="line">df.loc[df[<span class="string">'级别'</span>].isin([<span class="string">'A3'</span>,<span class="string">'M4'</span>])]</span><br></pre></td></tr></table></figure><hr><h1 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h1><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照某列分组求和</span></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照多列分组求和</span></span><br><span class="line">df.groupby([<span class="string">'渠道'</span>, <span class="string">'ID'</span>]).sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组后的结果进行重新索引</span></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).sum().reset_index()</span><br></pre></td></tr></table></figure><ol start="2"><li>aggregate方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对同一列 先做计数汇总运算，再做汇总运算</span></span><br><span class="line"></span><br><span class="line">df.group(<span class="string">'渠道'</span>).aggregate([<span class="string">'count'</span>, <span class="string">'sum'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不同的列做不同的汇总运算</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).aggregate(&#123;<span class="string">'ID'</span> : <span class="string">'count'</span>,</span><br><span class="line">                              <span class="string">'销量'</span> : <span class="string">'sum'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><p>pivot_table-数据透视表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为方便处理， 一般需要对结果进行重置索引</span></span><br><span class="line">pd.pivot_table(df, values = <span class="string">'ID'</span>, columns = <span class="string">'渠道'</span>,</span><br><span class="line">                index = <span class="string">'客户分类'</span>, aggfun = <span class="string">'count'</span>).reset_index()</span><br></pre></td></tr></table></figure><p>pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote></li></ol><ol start="4"><li>对数据进行映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper)</span><br></pre></td></tr></table></figure><ol start="5"><li>数据采样</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="6"><li>统计计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算每一列的个数</span></span><br><span class="line">df.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每一行的个数</span></span><br><span class="line">df.count(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.sum()</span><br><span class="line"></span><br><span class="line">df.sum(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">df.median()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值</span></span><br><span class="line">df.max()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最小值</span></span><br><span class="line">df.min()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求众数</span></span><br><span class="line">df.mode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求方差</span></span><br><span class="line">df.var()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求标准差</span></span><br><span class="line">df.std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求分位数</span></span><br><span class="line">df.quantile(<span class="number">0.75</span>, axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述统计 describe函数</span></span><br><span class="line"><span class="comment">#自动生成数据的数量，均值，标准差等数据</span></span><br><span class="line"><span class="comment">#round（2）,显示小数点后面2位数，T转置</span></span><br><span class="line"></span><br><span class="line">df.describe().round(<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准差std()</span></span><br><span class="line">df[<span class="string">'经纪人响应时长'</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 协方差cov</span></span><br><span class="line">df[<span class="string">'经纪人当天发送消息数'</span>].cov(df[<span class="string">'客户当天发送消息数'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关性分析corr</span></span><br><span class="line">df[<span class="string">'客户当天发送消息数'</span>].corr(df[<span class="string">'经纪人当天发送消息数'</span>])</span><br></pre></td></tr></table></figure><ol start="7"><li>数值计数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看不同值出现的次数， #默认进行排列</span></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比, #默认进行排列</span></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts(normalize = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比， 不进行排列</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts(normalize = <span class="literal">True</span>, sort = <span class="literal">False</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>插入数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span></span><br><span class="line">df.insert(<span class="number">2</span>, <span class="string">'销售品id'</span>, [<span class="string">'01'</span>, <span class="string">'02'</span>])</span><br></pre></td></tr></table></figure><ol start="9"><li>对数据进行转置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.T</span><br></pre></td></tr></table></figure><ol start="10"><li>索引重塑</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将表格型数据转化成树形数据</span></span><br><span class="line">df.stack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将树形数据转化成表格型数据</span></span><br><span class="line">df.stack().unstack()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="说明"></p><ol start="11"><li>长宽表转换</li></ol><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="微信图片_20191222025318.jpg"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="微信图片_20191222025313.jpg"></li></ul><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index = [<span class="string">'computer'</span>,<span class="string">'name'</span>], columns = <span class="string">'year'</span>, values = <span class="string">'sale'</span>)</span><br></pre></td></tr></table></figure><ul><li>将宽表转换成长表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： melt()</span></span><br><span class="line">df.melt(id_vars = [<span class="string">'company'</span>, <span class="string">'name'</span>], var_name = <span class="string">'year'</span>, value_name = <span class="string">'sale'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： stack()</span></span><br><span class="line"><span class="comment"># 在保持行索引不变的前提下，将列索引转化成行索引</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="微信图片_20191222025324.jpg"></p><hr><h1 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h1><ol><li>大小写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li>去除空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列、 合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切分</span></span><br><span class="line">a.split(<span class="string">'_'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分， 且成为新列</span></span><br><span class="line">a.split(<span class="string">'_'</span>, expand = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对切分进行限制, 只切1次</span></span><br><span class="line">a.split(<span class="string">'_'</span>, expand = <span class="literal">True</span>, n=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否包含</span></span><br><span class="line">a.str.contains(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列</span></span><br><span class="line">s.str.get_dummies(sep= <span class="string">'|'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = 首页jhrj_1[<span class="string">'所属省份编码'</span>].str.split(<span class="string">'.'</span>)  <span class="comment"># expand=True  可以把用分割的内容直接分列</span></span><br><span class="line">首页jhrj_1[<span class="string">"所属省份编码1"</span>]=df[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分并在原表中进行合并</span></span><br><span class="line">首页jhrj_2 = pd.merge(首页jhrj_1, pd.DataFrame(首页jhrj_1[<span class="string">'所属省份编码'</span>].str.split(<span class="string">'.'</span>, expand = <span class="literal">True</span>) ),</span><br><span class="line">               how = <span class="string">'left'</span>, left_index = <span class="literal">True</span>, right_index = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas对dataframe中的某一列使用split做字符串切割：</span></span><br><span class="line"><span class="comment"># words = df['col'].split()</span></span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line"><span class="comment"># AttributeError: 'Series' object has no attribute 'split'</span></span><br><span class="line"><span class="comment"># 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span></span><br><span class="line"><span class="comment"># words = df['col'].str.split()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对两列数据进行合并</span><br><span class="line">df[<span class="string">'省份_名称'</span>] = df[<span class="string">'省份'</span>].str.cat(df[<span class="string">'名称'</span>],sep = <span class="string">'_'</span>)</span><br><span class="line">首页jdt_1[<span class="string">'省份_标题'</span>] = 首页jdt_1[<span class="string">'所属省份编码'</span>].astype(str).str.cat(首页jdt_1[<span class="string">'标题'</span>],sep = <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><h1 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h1><ul><li><p>当前日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期和时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的年</span></span><br><span class="line">datetime.now().year</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的月份</span></span><br><span class="line">datetime.now().month</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期的日期</span></span><br><span class="line">datetime.now().day</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时刻在周几</span></span><br><span class="line"><span class="comment"># python周几默认是从0开始的</span></span><br><span class="line">datatime.now.weekeday() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间所在周的周数</span></span><br><span class="line">datatime.now.isocalendar()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>返回指定日期</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只展现日期</span></span><br><span class="line">datetime.now.date()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只展示时间</span></span><br><span class="line">datetime.now.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前日期</span></span><br><span class="line">datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment">#2018-12-22</span></span><br><span class="line"></span><br><span class="line">datetime.now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将时间格式转化成字符串格式</span></span><br><span class="line"><span class="string">now=str( datetime.now())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将字符串格式转化为时间格式</span></span><br><span class="line"><span class="string">parse(str_now)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># 往后推一天</span></span><br><span class="line"><span class="string">date+ Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往后推一个小时</span></span><br><span class="line"><span class="string">date + Hour(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往前推一天</span></span><br><span class="line"><span class="string">date - Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 昨天</span></span><br><span class="line"><span class="string">ysd = now - timedelta(days = 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#本月第一天</span></span><br><span class="line"><span class="string">ysd = now.replace(day = now.day-1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#  上月最后一天</span></span><br><span class="line"><span class="string">lastmonth_end = now.replace(day = now.day-1) - timedelta(days=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 上月第一天</span></span><br><span class="line"><span class="string">lastmonth_first = now.replace(month = now.month-1, day =1)</span></span><br><span class="line"><span class="string">lastmonth_first = lastmonth_end.replace(day=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#提取2016年11月2号的数据</span></span><br><span class="line"><span class="string">df['</span><span class="number">2016</span><span class="number">-11</span><span class="number">-02</span><span class="string">' : '</span><span class="number">2016</span><span class="number">-11</span><span class="number">-02</span><span class="string">']</span></span><br><span class="line"><span class="string">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 构造时间序列， 构造十个日期， 每12分钟一次</span></span><br><span class="line"><span class="string">pd.Series(pd.date_range(start = '</span><span class="number">2018</span><span class="number">-09</span><span class="number">-17</span> <span class="number">22</span>:<span class="number">43</span>:<span class="number">00</span><span class="string">', periods = 10, freq = '</span><span class="number">12</span>min<span class="string">'))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 取所有8点到12点之间的数据, 不包含8点和12点</span></span><br><span class="line"><span class="string">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 包含8点到12点</span></span><br><span class="line"><span class="string">data.between_time('</span><span class="number">08</span>:<span class="number">00</span><span class="string">', '</span><span class="number">12</span>:<span class="number">00</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import datetime</span></span><br><span class="line"><span class="string">from dateutil.relativedelta import relativedelta </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">begin = datetime.date(2019,1,1)</span></span><br><span class="line"><span class="string">end = datetime.date(2019,1,31)</span></span><br><span class="line"><span class="string">for i in range(1,10):</span></span><br><span class="line"><span class="string">    first = d + relativedelta(months=i)</span></span><br><span class="line"><span class="string">    last = end + relativedelta(months=i)</span></span><br></pre></td></tr></table></figure><ul><li>处理月与月之间时间不连续问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time,timedelta</span><br><span class="line"><span class="comment"># 指定昨天</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 月初第一天</span></span><br><span class="line">startdates = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">enddates = (df - timedelta(days = num)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment"># 上月第一天</span></span><br><span class="line">last_moth_f = df.replace(month =df.month<span class="number">-1</span>, day=<span class="number">1</span>).__format__(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line"><span class="comment"># 上月最后一天</span></span><br><span class="line">last_moth_e = df.replace(month = df.month<span class="number">-1</span>, day =<span class="number">1</span>).strftime(<span class="string">'%Y-%m-31'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标值月份</span></span><br><span class="line">mubiao_dates = startdates[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line">day1 = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">'2019-11-%d'</span>)</span><br><span class="line">first = datetime.strptime(day1, <span class="string">"%Y-%m-%d"</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="自动发送邮件"><a href="#自动发送邮件" class="headerlink" title="自动发送邮件"></a>自动发送邮件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email import encoders</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg" alt="123.jpg"><br><img src="https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg" alt="456.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的插件</title>
      <link href="/2018/09/25/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/09/25/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一个好用的插件神器"><a href="#一个好用的插件神器" class="headerlink" title="一个好用的插件神器"></a>一个好用的插件神器</h1><p>最近发现了一个特别能够提高生活幸福感的插件：<a href="https://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>, 中文翻译过来叫做油猴。 </p><p><img src="https://i.loli.net/2018/09/25/5baa2c1e20259.png" alt="a"></p><p>安装好这个插件最大的作用， 就是我们可以从<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站来安装我们需要的脚本， 从而极大的提高浏览器的使用效率。</p><p>比如：我们在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>网站找到<a href="https://greasyfork.org/zh-CN/scripts/35251-%E6%99%BA%E8%83%BD%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91" target="_blank" rel="noopener">智能划词翻译</a>这个脚本， 然后点击安装脚本即可。<br><img src="https://i.loli.net/2018/09/25/5baa2f1ca7ec9.png" alt="智能划词翻译"><br>安装完成脚本之后， 我们打开一个英文网页，对需要翻译的段落进行框选，点击翻译按钮，就可实现在原网页查看中文翻译， 对于我这种英语不好的人来说，  有很大的帮助。<br> <img src="https://i.loli.net/2018/09/25/5baa2fafa467c.png" alt> </p><p>我们还可以安装<a href="https://greasyfork.org/zh-CN/scripts/3249-yet-another-weibo-filter" target="_blank" rel="noopener">微博过滤设置</a>脚本，来对微博页面进行个性化设置， 自己设置完成后的微博页面是这个样，相对于原版网页来说简洁了不少。<img src="https://i.loli.net/2018/09/25/5baa3127ae4e8.png" alt></p><p>也可安装<a href="https://greasyfork.org/zh-CN/scripts/4233-miniblogimgpop-%E5%BE%AE%E5%8D%9A%E6%B5%AE%E5%9B%BE" target="_blank" rel="noopener">微博浮图</a>脚本， 查看微博图片也比较方便， 只需把鼠标光标放在图片上即可<img src="https://i.loli.net/2018/09/25/5baa316b9fc84.png" alt></p><p>如果想找资料或电影资源的话， 也可以下载<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>, 或<a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E5%8A%A0%E9%80%9F%E7%89%88" target="_blank" rel="noopener">百度网盘直接下载助手</a>等脚本， 当然，有能力还是要支持正版。</p><p>例如：安装<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>脚本后， 打开豆瓣电影网页， 页面是这个样子。<br><img src="https://i.loli.net/2018/09/25/5baa328561727.png" alt="豆瓣页面"></p><p>在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站还有很多别人写好的脚本， 比如<a href="https://greasyfork.org/zh-CN/scripts/369861-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E5%AD%97%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener">百度文库文字复制</a>、<a href="https://greasyfork.org/zh-CN/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E9%A2%86%E5%8F%96%E6%B7%98%E5%AE%9D%E5%86%85%E9%83%A8%E5%88%B8" target="_blank" rel="noopener">购物党自动比价工具</a>、 <a href="https://greasyfork.org/zh-CN/scripts/8426-download-youtube-videos-and-subtitles" target="_blank" rel="noopener">Download Youtube videos and subtitles</a>等好用的脚本， 可以根据自己的需要进行安装。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双拼输入法</title>
      <link href="/2017/09/17/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/2017/09/17/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code>hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p><blockquote><p>2020年2月26：现在在北京已经呆了马上快3年了，自己虽然已经转行做数据分析了，但是现在自己的职业发展并不好，甚至犹豫自己是否还应呆在北京。</p></blockquote></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/" target="_blank" rel="noopener">《把时间当朋友》</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
