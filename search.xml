<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[博客主题更换]]></title>
    <url>%2F2020%2F03%2F20%2F%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[最近把自己的个人博客主题由 fluid 换成了 maupassant,个人感觉 maupassant 主题简洁明了，更加符合自己的胃口。 这篇文章把自己在更换主题的流程和遇到的问题总结一下： 博客登陆 12345git config --global.name&apos;zhang&apos;git config --global.email &apos;zhang@qq.com&apos;cd E:/zy_bloghexo ghexo d 下载主题到本地 1git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant 安装插件-安装一直显示错误，于是自己换成了镜像安装。 1$ npm install hexo-renderer-pug --save 镜像安装 12345# 安装镜像npm install -g cnpm --registry=https://registry.npm.taobao.org# 安装后用定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm:安装插件cnpm install hexo-renderer-sass --save 按照文档对主题进行配置大道至简——Hexo简洁主题推荐 常见错误 错误1：自从修改完主题进行上传，就一直报这样的错误，折腾了半天终于解决了。 12345678910111213141516171819错误： $ hexo dINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...warning: could not open directory &apos;2018/02/17/《刻意学习》读书笔记 /&apos;: No such file or directorywarning: could not open directory &apos;2018/02/17/读书笔记-《刻意学习》读书笔记 /&apos;: No such file or directorywarning: could not open directory &apos;2019/02/17/《刻意学习》读书笔记 /&apos;: No such file or directoryOn branch masterUntracked files:(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) 2018/02/ &quot;2019/02/17/\343\200\212\345\210\273\346\204\217\345\255\246\344\271\240\343\200\213\350\257\273\344\271\246\347\254\224\350\256\260 /&quot;nothing added to commit but untracked files present (use &quot;git add&quot; to track)Everything up-to-dateBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:zhangandyu/zhangandyu.github.io.git&apos;.INFO Deploy done: git 解法方法： 下载插件 1cnpm install hexo-deployer-git -save 删除原文件 .deploy_git 123456789101112# 删除时，文件显示找不到该项目--https://zhuanlan.zhihu.com/p/55077318去桌面新建一个文本文件，并输入如下内容:DEL /F /A /Q \\?\%1RD /S /Q \\?\%1保存该文本，将文件后缀名修改为.bat，文件名随意。我们将需要删除的文件直接拖到这个.bat文件上即可删除。 重新生成和部署 123rm -rf .deploy_githexo ghexo d 错误2： 123ERROR Process failed: 备份/文章备份/python/数据分析技能-git学习笔记.mdYAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 11: categories: 解决方法： 1仔细看了看是因为创建的md文件头部声明中没有加空格。 错误3： 12FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTypeError: Cannot set property &apos;lastIndex&apos; of undefined 解决方法： 1在配置文件_config.yml中将highlight选项的auto_detect设为false 其他错误及解决方案： Hexo常见问题解决方案 https://xuanwo.io/2014/08/14/hexo-usual-problem/]]></content>
      <categories>
        <category>生活资料</category>
      </categories>
      <tags>
        <tag>博客主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[改版分析]]></title>
    <url>%2F2019%2F06%2F22%2F%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90%2F</url>
    <content type="text"><![CDATA[频道改版分析1.分析目的 新频道的效果怎么样？ 2.分析方向 新频道整体改版效果分析。 新频道各部分细拆分析 新频道各主要区域细拆，看各区域数据是上升还是下降。 新频道重点问题分析 主要功能点流量入口修改后，流量如何分布。 3. 分析思路3.1 新版本整体改版效果分析 改版后，新频道是否受欢迎。 衡量参数： 页面访问uv占比大盘 日均访问uv点击转化率 日均点击uv占比大盘 日均点击uv人均点击次数 次1日留存 次3日留存 次7日留存 说明: 频道访问uv占比大盘，数据提升，说明频道改版后，用户更喜欢访问此频道。（用户访问此频道后，并不一定会在频道内产生点击） 转化宽度： 日均访问uv点击转化率 = 频道内点击uv / 频道内访问uv，点击转化率提升，说明用户查看此频道后，频道内功能点改版后对访问此频道的用户更有吸引力。 日均点击uv占比大盘，数据提升，说明改版后吸引了更多的用户来进行点击。 转化深度：日均点击uv人均点击次数，数据提升，说明改版后，用户的点击频率也有所增加。 用户粘度：频道访问留存率提升， 说明改版后，此频道的用户粘性也在增加。 改版后，频道留存率上升原因分析 主要为说明是某功能点使频道整体留存率上升。 公式： 频道留存率 = A用户数 A留存率 + 其他用户数 其他留存率 举例： 旧版次7日留存率 = 26.8%签到用户 46.7%留存率 + 73.2%其他用户 24.7%留存率 = 30.6% 新版次7日留存率 = 17.5%签到用户 48.8%留存率 + 82.5%其他用户 24.9留存率 = 29.1% 说明：新版本频道次7日留存率下降1.5，主要是由于9.3%的用户次7日留存率从46.7%下降到24.9% 3.2 新频道各坑位细拆分析 对频道中相同功能点进行新旧版本对比 衡量参数： 各个坑位点击uv占比访问uv 各个坑位次7日留存率细拆 对1中数据差异较大坑位进行具体原因分析 对各模块坑位具体原因进行分析说明 3.3 对改版后的某主要功能点的流量结构变化进行分析 对新旧不同版本的流量结构进行梳理，找出主要流量入口变化，并进行说明。用户究竟是如何使用产品新功能的，是否符合你预期设想的那样，还是说用户自己创造出了新的玩法 3.4 对产品流程转化率是否有提升 去观察整个产品的流程转化率是否因为产品迭代改版而有所提升。查看转化漏斗，改变前后，流程的转化数据是否发生变化，每个小环节的漏斗转化率有什么变化 &lt;!– 8. 数据分析方法案例如何提高全站留存率？ 选择高留存的行为，并选择其中比较容易扩大使用者面积的几个，在产品功能层面放大，让更多的人看到并发生转化，从而提升留存。 评估最终效果时，首先评估该功能的使用人群和占比是否有效提升，有则认为改进有效 以上主要因为产品在改进期间会同时发生很多其他改进，也会有各种不同的市场，运营活动，单纯用留存来评估，无法有效验证。 例如：即刻产品的核心功能之一就是内容的分发，用户绝大多数的时间都在浏览关注、推荐和动态页的内容与评论。按照用户使用这些内容模块的行为，可以按其门槛和深浅分为路人行为（如浏览帖子）、围观行为（点击并查看评论）、普通参与行为（点赞、转发）、深度参与行为（发布评论）等。通过留存分析功能，发现行为深度越深，用户的留存就越高。但由于扩大发生参与行为的门槛过高，落地性也就较差。因此，选择围观行为，通过放大其面积来提升用户全站留存，所以，就在产品信息流列表页露出一条热评，一方面让更多的用户看到最精彩评论，另一方面更有力的引导用户点击查看更多内容。 新增热评功能后，成功将阅读评论的用户比例提升，并且成功提高了全站留存]]></content>
      <categories>
        <category>数据分析方法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>改版分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive 进阶查询]]></title>
    <url>%2F2019%2F05%2F07%2F%E6%8A%80%E8%83%BD-Hive%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Hive查询性能优化什么是数据倾斜当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。 数据倾斜的表现任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。 ##如何避免数据倾斜 sql优化 业务逻辑优化 方法1： 在查询中， 避免使用 select *, 使用条件限制取需要的列 方法2： 当数据量特别大时，用 group by 代替 count(distinct) count(distinct ),在数据量特别大的情况下，效率较低, 可以用先 group by 再 count 的方式进行代替。因为count(distinct)是按group by 字段分组，按distinct字段排序 123456789select hit_date, count(distinct user_account) as uvfromwhere hit_date between '2018-10-01' and '2018-10-02'group by hit_date 可以转换成： 123456789101112131415select hit_date, count(user_account) as uvfrom(select hit_date, user_accountfrom computer_view.datawhere hit_date between '2018-10-01' and '2018-10-02'group by hit_date, user_account) agroup by hit_date 方法3： join 优化 在使用 Join 进行外关联时， 将副表的过滤条件写在 where 后面，会先全表关联， 再进行过滤， 这样会耗费资源。 123456SELECT a.price_close, b.price_closeFROM b JOIN a ON b.ymd = a.ymd AND b.symbol = a.symbolWHERE s.symbol = 'APPLE' 正确的写法是将 where 条件写在 on 后面 1234SELECT a.price_close, b.price_closeFROM b JOIN a ON ( b.ymd = a.ymd AND b.symbol = a.symbol and s.symbol = 'APPLE') 方法4： 避免 union all 子查询中使用 group by 【替换 count(distinct) 除外】、count(distinct)、max、min等。 123456789101112131415161718192021222324252627with a1 as ( select user_account, hit_date from data where hit_date between '2018-12-01' and '2018-12-13' and nbtn_name like "%支付宝%" union all select user_account, hit_date from data where hit_date between '2018-12-01' and '2018-12-13' and nbtn_name like "%支付宝%")select hit_date, count(user_account) as pvfrom a1group by hit_date 方法5： 避免不同数据类型进行关联 使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)123456789select a.price_close, b.price_closefrom a join b on a.user_id = cast(b.user_id as string)where hit_date between &apos;2018-11-01&apos; and &apos;2018-11-02&apos; and a.symbol = &apos;apple&apos; 方法6： 无效ID在关联时的数据倾斜问题 把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。需要用到Case When … Else…End语法 写法1：123456789101112131415Select *From a Join bOn a.user_id is not nullAnd a.user_id = b.user_idUnion allSelect * from awhere a.user_id is null 写法2：1234567891011Select *From a left out Join bOn Case when a.user_id is null then concat(‘dp_hive’,rand() ) else a.user_id = b.user_id end; Hive的查询注意事项以及优化总结： 尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段 对历史库的计算经验 尽量原子化操作，尽量避免一个SQL包含复杂逻辑可以使用中间表来完成复杂的逻辑 join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗 如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50% 让服务器尽量少做事情，走最优的路径，以资源消耗最少为目标 参考资料： https://blog.csdn.net/yu0_zhang0/article/details/81776459 https://blog.csdn.net/young_0609/article/details/84593316 https://blog.csdn.net/qq_29232943/article/details/79644614 http://lxw1234.com/archives/2015/06/317.htm https://zenoh.iteye.com/blog/1748592 http://www.lwyyyyyy.cn/getArticleDetailInfo?articleId=89 求两组数据的交集， 并集， 差集并集union 与 union all union, 结果包含所有行， 并删除重复行unoin all, 结果包含所有行， 但不删除重复行 写法1：1234567891011121314151617181920212223use computer_view;with a1 as ( select user_account from data where hit_date between '2018-12-01' and '2018-12-02' and nbtn_name like "%支付宝%" union select user_account from data where hit_date between '2018-12-01' and '2018-12-02' and nbtn_name like "%手淘%")select count(user_account) as pvfrom a1 点击支付宝或者手淘活动的人数总共有 435499 人 写法2：1234567891011121314151617181920212223use computer_view;with a1 as ( select user_account from data where hit_date between '2018-12-01' and '2018-12-02' and nbtn_name like "%支付宝%" union all select user_account from data where hit_date between '2018-12-01' and '2018-12-02' and nbtn_name like "%手淘%")select count(user_account) as pvfrom a1 点击支付宝或者手淘活动的次数为 665935 交集写法1：1234567891011121314151617181920212223use computer_view;with a1 as ( select user_account from data where hit_date between '2018-12-01' and '2018-12-02' and nbtn_name like "%支付宝%" intersect select user_account from data where hit_date between '2018-12-01' and '2018-12-02' and nbtn_name like "%手淘%")select count(user_account) as pvfrom a1 点击支付宝又点击手淘活动的人数为 66174 差集 (except 函数 与 join写法) 写法1：1234567891011121314151617181920212223use computer_view;with a1 as ( select user_account from data where hit_date between '2018-12-01' and '2018-12-25' and nbtn_name like "%支付宝%" except select user_account from data where hit_date between '2018-12-01' and '2018-12-25' and nbtn_name like "%手淘%")select count(user_account) as pvfrom a1 写法2：12345678910111213141516171819202122232425use computer_view;with a1 as ( select user_account from data where hit_date between '2018-12-01' and '2018-12-25' and nbtn_name like "%支付宝%"),a2 as ( select user_account from data where hit_date between '2018-12-20' and '2018-12-25' and nbtn_name like "%支付宝%")select count(distinct a1.user_account) as pvfrom a1 left outer join a2 on a1.user_account = a2.user_account and a2.user_account is null 只参加支付宝活动， 没有参加手淘活动的人数为 369325在求差集时， 需要注意前后顺序， 否则会出现逻辑错误可以发现， 差集 + 交集 =并集， 369325 + 66174 = 435499 写法3： 1234567891011121314151617181920212223242526272829303132333435--详细列出差集的版本号with a1 as(select distinct two as user_accountfrom test.data_csvexcept (select distinct user_accountfrom computer_view.datawhere hit_date between '2018-09-01' and '2018-09-03' union all select distinct user_accountfrom computer_view.datawhere hit_date between '2018-09-01' and '2018-09-03'))select a2.six , COUNT(a2.two) as uv, count(a1.user_account) as uv_1froma1, test.data_csv as a2WHERE a1.user_account = a2.twogroup by a2.sixlimit 100 业务问题计算留存率 求11月10-15号每天的1、3、7日留存率 方法1： 一次性求次1日，次3日， 次7日留存 12345678910111213141516171819202122232425262728with a1 as (select hit_date, user_accountfrom computer_view.datawhere hit_date between '2019-04-25' and '2019-05-13' and btn_information is not null),a2 as (select hit_date, user_accountfrom computer_view.datawhere hit_date between '2019-04-25' and '2019-05-13' and btn_information is not null)select a1.hit_date,count(distinct a1.user_account) uv,count(distinct case when datediff(a2.hit_date, a1.hit_date) = 1 then a1.user_account else null end ) next_day,count(distinct case when datediff(a2.hit_date, a1.hit_date) = 3 then a1.user_account else null end ) three_day,count(distinct case when datediff(a2.hit_date, a1.hit_date) = 7 then a1.user_account else null end ) seven_dayfrom a1 join a2 on a1.user_account = a2.user_accountgroup by a1.hit_dateorder by a1.hit_datelimit 100 方法2： 统计每天的uv 使用date_add 函数， 一次性求出10-15号每一天的次1、3、7日留存 算出留存率 步骤1： 123456789101112-- 统计10-15号每天uvSELECT hit_date, count(distinct user_account) as uvFROM computer_view.dataWHERE hit_date between '2018-11-10' and '2018-11-15'group BY hit_dateorder BY hit_date 步骤2：123456789101112131415161718192021222324252627282930-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7with a1 as ( select user_account, hit_date from computer_view.data where hit_date between '2018-11-10' and '2018-11-15'),a2 as ( select user_account, hit_date from computer_view.data where hit_date between '2018-11-10' and '2018-11-25')select a1.hit_date, count(distinct a1.user_account) as uvfrom a1 join a2 on a1.user_account = a2.user_accountWHERE a2.hit_date = date_add(a1.hit_date, 1) group by a1.hit_dateorder BY a1.hit_date 拓展方法：(迷神) 123456789101112131415161718192021-- 留存sql优化select count(1)from( select userid, count(1) from( select t1.userid, t1.statdate from table1 t1 where t1.statdate &gt;= $&#123;上30天日期&#125; and t1.statdate &lt;= $&#123;上一天日期&#125; group by t1.userid, t1.statdate ) s1 group by userid having count(1) &gt; 2 ) R1 此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=${上一天日期}。另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。 这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。 计算月留存率的简单方法 12345678910111213141516171819202122232425with a1 as ( select user_account, count(distinct month(hit_date)) as c from data_an where hit_date between &apos;2019-01-01&apos; and &apos;2019-02-31&apos; group by user_account having c = 2 union select user_account, count(distinct month(hit_date)) as c from data_ios where hit_date between &apos;2019-01-01&apos; and &apos;2019-02-31&apos; group by user_account having c = 2) 计算上一步 求点击【确认充值】按钮的上一步点击的名称 1234567891011121314151617181920212223242526use default;with a as (select user_account, btn_name, lag(btn_name, 1) over (partition by user_account order by create_timestamp) as previous_btn_namefrom computer_view.datawhere hit_date between '2018-11-01' and'2018-11-01' and btn_name is not nullhaving btn_name like '确认支付')select previous_btn_name, count(distinct user_account) as cfrom agroup by previous_btn_nameorder by c desclimit 1000 上一步点击的名称我已经知道了， 现在要想 之前通过上一步点击这些条件之后， 再点击【确认支付】按钮的 去重uv 1234567891011121314151617181920212223242526272829use default;with a as (select user_account, btn_name, lag(btn_name, 1) over (partition by user_account order by create_timestamp) as previous_btn_namefrom computer_view.datawhere hit_date between '2018-11-01' and'2018-11-01' and btn_name is not nullhaving btn_name like '确认支付')select count(distinct user_account) as cfrom awhere (previous_btn_name like "%10元%" or previous_btn_name like "%30元%" or previous_btn_name like "%50元%" or previous_btn_name like "%10元%" or previous_btn_name like "%30元%" or previous_btn_name like "%50元%" or previous_btn_name like "%100元%" or previous_btn_name like "%200元%" or previous_btn_name like "%300元%" ) 125752 创建临时表12345678910111213141516use default;create table test.nine_android_user_version_10select user_account, app_versionfrom computer_view.datawhere hit_date between '2018-09-01' and '2018-09-30' and user_account is not null and app_version is not nullgroup by user_account, app_version 原始日志中取数12345678910111213141516use default;create table test.nine_user_version_10select url_par(url_query,'account') as user_account, split(url_par(url_query,'AppID'),' ')[1] as app_versionfrom apache_log.client_ios_sensorwhere dt between '2018-10-01' and '2018-10-20' and url_par(url_query,'account') is not null and url_par(url_query,'AppID') is not nullgroup by url_par(url_query,'account'), split(url_par(url_query,'AppID'),' ')[1] 取 pv &gt;1 的用户量12345678910111213141516171819202122232425262728293031with a1 as (SELECTuser_accountFROMcomputer_view.dataWHEREnbtn_name is not null andhit_date between '&#123;&#125;' and '&#123;&#125;'union all SELECTuser_accountFROMcomputer_view.dataWHEREnbtn_name is not null andhit_date between '&#123;&#125;' and '&#123;&#125;'),a2 as (SELECT user_account,count(user_account) as pvfrom a1group by user_accounthavingcount(user_account) &gt; 3)SELECT count(distinct user_account) as uvfrom a2 求连续4个月活跃的用户数 1月活跃的用户数， 在2月、3月、4月一直活跃的用户有多少？ 12345678910111213141516171819with a1 as(select user_account , month(hit_date) as monthfrom compu_view.ios_log_viewwhere hit_date between '2019-01-01' and '2019-04-30'group by user_account, month(hit_date) ),a2 as ( select user_account,a1.month, row_number() over(partition by user_account order by a1.month) as pxfrom a1) select count(distinct user_account) as uvfrom a2where a2.px = 4 常用函数https://wing324.github.io/2017/10/20/Hive%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/ 聚合函数 函数名 定义 count() 个数统计函数 count(distinct ) 统计去重之后的个数 sum() 求和 sum(distinct ) 去重之后的和 avg() 平均值 avg(distinct) 去重之后的平均值 min() 最小值 max() 最大值 corr(A, B) 相关系数 var_pop() 方差 var_samp() 样本方差 stddev_pop() 标准偏差 stddev_samp() 标准样本偏差 covar_pop(A, B) 协方差 covar_samp(A, B) 样本协方差 RAND() 随机数 时间函数 函数名 定义 NOW ( ) 当前时间 extract() 抽取具体的年、月、日 date() 返回时间的日期部分 year() 返回时间的年份 month() 返回时间的月份 day() 返回日期的天 hour() 返回时间的小时 minute() 返回时间的分钟 second() 返回时间的秒 week () 第几周 dayofweek() 返回星期几，1为星期天 dayofyear() 一年中的第几天 sec_to_time ( ) 秒数转成时间 dateadd() 时间相加 date_sub() 时间相减 datediff() 时间的差值 date_format() 输出指定时间格式 datename() 返回日期部分的参数 datepart() 返回日期、时间的单独部分 sql 中的时间处理函数 now() 返回当前时间 1select now() date() 输出为日期,没有具体时间 date_add() 时间相加date_add(dt,interval 1 day ) 在dt的基础上加上一天 123date_add(hit_date, interval 1 day)-- 给hit_date 添加一天 date_sub() 时间相减 datediff() 时间的差值 date_format() 输出指定格式对时间的格式进行改变date_format(dt, “%Y-%m-%d”) 1date_format(hit_date, "%Y-%m-%d) 窗口函数窗口函数 函数名 定义 rank() 排名相等的会留下空位 dense_rank() 排名相等的不会留下空位 row_number() 排名不管数据是否相等 lag() 访问相同结果集的先前行中的数据 lead() 访问相同结果集的后续行中的数据 first_value() 返回组中数据窗口的第一个值 last_value() 返回组中数据窗口的最后一个值 if() 条件判断函数 case…when…else…end 判断各个元素是否满足了某种条件的集合 over() 与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能 split() hive字符串分割函数 intersect 交集 except 差集 union all 并集 round 把数值字段舍入为指定的小数位数 difference 衡量两个值之间的差异 coalesce 1、将控制替换成其他值；2、返回第一个非空值 pivot 行转换列 over 函数 语法： over(partition by ….)作用： 与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能 123456789# 根据日期 和 mac_id 进行分组求每组的数量和， 并按日期排序select hit_date, mac_id, mac_color, day_num, sum(day_num) over(partition by hit_date, mac_id order by hit_date) as sum_numfrom test.datas hit_date mac_id mac_color day_num sum_num 20171011 1292 金色 11 89 20171011 1292 黑色 19 89 20171011 1292 粉金 58 89 20171011 1292 金色 1 89 20171011 2013 金色 9 22 20171011 2013 金色 3 22 20171012 1292 金色 5 18 20171012 1292 粉金 1 18 20171012 2013 粉金 1 7 20171012 2013 金色 6 7 20171013 1292 黑色 1 1 20171013 2013 粉金 2 2 123456789101112# group by 语句select hit_date, mac_id, sum(day_num) from test.datagroup by hit_date, mac_idorder by hit_date day_id mac_id sum_num 20171011 124609 1 20171011 20130 22 20171011 12922 89 20171012 12922 18 20171012 20130 7 20171013 12922 1 20171013 20130 2 over(partition by) 与 group by 的区别grou by 字段只能显示与分组聚合相关的字段， 而 over(partition by)可以显示所有字段 LAG 和 LEAD 函数 语法： LAG(col,n,DEFAULT) 用于统计窗口内往上第n行值;LEAD(col,n,DEFAULT) 用于统计窗口内往下第n行值 123456789101112131415161718192021# 计算11月1-10号， 不同日期同一用户登陆客户端 pv 量对比with a1 as (select user_account, count(user_account) as pv, hit_datefrom computer_view.datawhere hit_date between '2018-11-01' and'2018-11-10'group by user_account, hit_date)select user_account, a1.hit_date, a1.pv, lag(a1.pv, 1) over (partition by user_account order by user_account, a1.hit_date) as pv1, lead(a1.pv, 1) over(partition by user_account order by user_account, a1.hit_date) as pv2from a1limit 100 first_value() 和 last_value() 函数 语法:first_value() ：比较每个用户浏览次数与第一天浏览次数进行比较，查询返回当前浏览次数以及第一天浏览次数last_value() ： 比较每个用户浏览次数与最新一天浏览次数进行比较，查询返回当前浏览次数以及最新一天浏览次数 12345678910111213141516171819with a1 as (select distinct user_account, count(user_account) as pv, hit_datefrom computer_view.datawhere hit_date between '2018-11-01' and'2018-11-10'group by user_account, hit_date)select distinct user_account, a1.hit_date, a1.pv, first_value(a1.pv) over (partition by user_account order by user_account, a1.hit_date) as pv1, last_value(a1.pv) over(partition by user_account order by user_account, a1.hit_date) as pv2from a1limit 100 rank、dense_rank、 row_number 排序函数 row_number函数说明 12ROW_NUMBER ( ) OVER ( [ PARTITION BY value_expression , ... [ n ] ] order_by_clause ) 说明： rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位， 如1、2、2、4dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位， 如1、2、2、3row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等， 如1、2、3、4 1234567select a, row_number() over(order by b) row_number, rank() over(order by b) rank, dense_rank() over(order by b) dense_rank from lijie.test_rank a row_number rank dense_rank A 1 1 1 C 2 2 2 D 3 3 3 B 4 3 3 E 5 5 4 F 6 6 5 G 7 7 6 if 函数 12345678910select city, count(distinct user_account) as uv from an_log_viewwhere hit_date = &apos;2019-06-10&apos;group by cityhavingcount(if( nbtn_name like &quot;发现&quot;, 1, null)) &gt;= 20 123456789select city,count(1),count(if( nbtn_name like &quot;发现&quot;, 1, null)),count(if(nbtn_name like &quot;发现&quot;， 1， null)) / count(1)froma1group by city lateral view 函数 描述： &gt; lateral view 用于和 split、explode、collect_set 函数 等一起使用， 能够将一行数据拆成多行数据，在此基础上对拆分后的数据进行聚合。 举例： 表： table pageid adid_list front_page [1,2,3] contact_page [3,4] 将 表 table 中的 adid_list 转换为单独的行。 12345SELECT pageid, adidFROM tablelateral view explode(adid_list) adTable as adid 输出结果为：|pageid |adid_list||—|—||front_page|1||front_page|2||front_page|3||contact_page|3||contact_page|4| 要求： 计算特定广告的展现次数 1234567SELECT adid, count(1)FROM tablelateral view explode(adid_list) adTable as adidGROUP BY adid 输出结果为： adid count(1) 1 1 2 1 3 2 4 1 多个 lateral view 查询 表： table2 array col2 [1,2] [“a”，”b”] [3,4] [“c”, “d”] 123456SELECT myCol1, myCol2FROM baseTableLATERAL VIEW explode(col1) myTable1 AS myCol1LATERAL VIEW explode(col2) myTable2 AS myCol2 输出结果为： myCol1 myCol2 1 “a” 1 “b” 2 “a” 2 “b” 3 “c” 3 “d” 4 “c” 4 “d” 字符串函数 函数名 定义 concat() 拼接字符串 length() 计算字符串的长度，一个汉字算三个字符 instr (A ,B ) 返回字符B首次在A中出现的位置,不存在返回0 lcase() 转换成小写 left(string2 ,length ) 从string2中的左边起取length个字符 lower() 将字串转化为小写 upper() 将字符转化为大写 replace() 替换字符 substr() 返回字符串A从start位置开始，长度为len的字符串 substring() 截取字符串 substring_index() 通过截取获取不同索引位的字符 LTRIM (string2 ) 去除前端空格 RTRIM (string2 ) 去除后端空格 字符串截取函数：substr,substring, substring_index 语法: substr(string A, int start, int len),substring(string A, int start, int len) 返回值: string 说明：返回字符串A从start位置开始，长度为len的字符串 举例1： 12345678910use computer_view;select substring(charge_products,2,30)from datawhere hit_date between '2018-10-01' and '2018-10-05'group by charge_productslimit 15 举例2：1234567891011121314select substring(a2.charge_products,2,80), a1.namefrom lookup.products_lookup as a1 join computer_view.data as a2 on a1.product = substring(a2.charge_products,2,80)where hit_date between '2018-10-07' and '2018-10-13' and mall_events is not nullgroup by substring(a2.charge_products,2,80), a1.name 举例3： 123456789101112131415--打断selectsubstring_index(page_url, '?', 1),count(distinct user_tracking_id) as uv,count(page_url) as pv from computer_viewwherehit_date between '2019-04-09' and '2019-04-09' and campaign like "%scjh-scep-tcnr-9yuanka%"group by substring_index(page_url, '?', 1)order by uv DESC CASE 表达式case when 的简单用法 语句 123case when sex = &apos;1&apos; then &apos;男&apos; when sex = &apos;2&apos; then &apos;女&apos;else &apos;其他&apos; end 注意： 必须写 end, else 部分默认为 null 等值转换 有这么一张表 pop ： area(地区) population(万) 渭南市 538 延安市 226 商洛市 238 昆明市 673 曲靖市 650 青岛市 769 需要得出如下表的结果： 省 人口（万） 陕西 1002 云南 1326 其他 769 sql如下：12345678910111213141516171819-- 将地名转换成省select case area when "渭南市" then "陕西" when "延安市" then "陕西" when "商洛市" then "陕西" when "昆明市" then "云南" when "曲靖市" then "云南" else "其他" end as district, sum(population)from pop-- group by -- case area-- when "渭南市" then "陕西"-- when "延安市" then "陕西"-- when "商洛市" then "陕西"-- when "昆明市" then "云南"-- when "曲靖市" then "云南"-- else "其他" end]]></content>
      <categories>
        <category>数据分析技能</category>
      </categories>
      <tags>
        <tag>Hive</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hive 基础查询]]></title>
    <url>%2F2019%2F04%2F18%2F%E6%8A%80%E8%83%BD-Hive%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[什么是 HiveHive 是一种建立在Hadoop文件系统上的数据仓库架构, 并对存储的数据进行分析和管理，可以将 SQL 语句转换为 MapReduce 任务进行运行，这样就使得数据开发和分析人员很方便的使用 SQL 来完成海量数据的统计和分析。 Hive 擅长的是非实时的、离线的、对响应及时性要求不高的海量数据批量计算，统计分析。 Hive 不适用于在线交易处理 Hive 的常见查询语句 Hive 中的 SELECT 基础语法和标准 SQL 语法基本一致，支持 WHERE、DISTINCT、GROUP BY、ORDER BY、HAVING、LIMIT、子查询等 1. Hive 脚本如何注释可以用 - - 开头的字符串来表示注释， 也可以将需要注释的 sql 选中， 然后用 ctrl + ? 快捷键来进行注释。 2. 切换数据库1use android; 123# 查看当前数据库select current_database() 12# 重置默认数据库use default; 3. 查看表 查看当前使用的数据库中有哪些表 1show tables; 查看非当前使用的数据库中有哪些表 1show tables in myhive; 查看数据库中以 android 开头的表 12use android;show tables like 'android*' 查看表的详细信息 1desc formatted android 4. select…from 语句 基本查询 12# 查询 employee 表中的 name 和 salary。select name, salary from employee; 加入表中一列含有多个元素， 我们可以只查找此列的第一个元素 1select name, subord[0] from employees; 使用键值进行索引 1234567select name, deductions["state taxes"] from employees;# 可以使用 "点" 符号， 类似：表的别名 . 列名 这样的用法select name, address.city from employees; 使用列值进行计算 1234567select upper(name), salary, deductions["Federal Taxes"], rount(salary * (1 - salary, deductions["Federal Taxes"]))from employees;# ZHANGYU 100000.0 0.2 80000 使用正则表达式 12345# 选出所有列名以 price 作为前缀的列select 'price.*' from stocks; 常用的关系运算 12345678910111213 等值比较: = 等值比较:&lt;=&gt; 不等值比较: &lt;&gt;和!= 小于比较: &lt;小于等于比较: &lt;= 大于比较: &gt; 大于等于比较: &gt;= 区间比较 空值判断: IS NULL 非空判断: IS NOT NULL LIKE比较: LIKE JAVA的LIKE操作: RLIKE REGEXP操作: REGEXP 数学运算 123456789加法操作: +减法操作: –乘法操作: *除法操作: /取余操作: %与操作: &amp;或操作: |异或操作: ^取反操作: ~ 常用的聚合函数 1234567891011121314151617count(*) # 个数统计函数count(distinct col) # 统计去重之后的个数sum(col) # 求和sum(distinct col) #去重之后的和avg(col) # 平均值avg(distinct col) # 去重之后的平均值min(col) # 最小值max(col) # 最大值corr(col1, col2) # 相关系数var_pop(clo) # 方差var_samp(col) # 样本方差stddev_pop(col) # 标准偏差stddev_samp(col) # 标准样本偏差covar_pop(col1, col2) # 协方差covar_samp(col1, col2) # 样本协方差select count(distinct account), avg(salary) form employees; 使用别名 1234select count(distinct acount) as uv from employees; 使用limit语句限制返回的行数 123456# 只显示 10 行select count(distinct account) as uvform employees limit 10; 嵌套 select 语句 12345678910select e.name, e.salaryfrom( select upper(name) from employees) as ewhere e.salary &gt; 500; case…when..then句式 123456select name , salary, case when salary &lt; 5000 then 'low' when salary &gt; = 5000 and salary &lt; 70000 then 'middle' else 'high' end as bracket from employees; 5. where 语句, 添加条件 常见用法 1select * from employees where country = 'us' and state = 'ca'; 可以在where条件下计算 12345678select name , salary, deductions['first taxes'], salary * (1-deductions['first taxes'])from employeeswhere round(salary * (1-deductions['first taxes']) ) &gt; 70000;# zhangyu 100000.0 0.2 80000 对上式进行优化 1234567891011select e.* from ( select name , salary, deductions['first taxes'], salary * (1-deductions['first taxes']) from employees ) ewhere round(salary * (1-deductions['first taxes']) ) &gt; 70000; 条件中有浮点数 1234567# 对浮点数进行比较select name, salary, duductions['first taxes']from employees where duductions['first taxes'] &gt; 0.2; 出现的结果中会有 0.2， 因为 DOUBL 和 FLOAT 类型不同 123456select name, salary, duductions['first taxes']from employees where duductions['first taxes'] &gt; cast (0.2 as float); 出现的结果中不会有0.2 like 和 rlike rlike 子句是Hive功能的一个扩展， 可以通过Java的正则表达式来指定匹配条件 12345678select name, address.streetfrom employees where address.street rlikt '.*(beijing|shanghai).*';# 用likeselect name, address from employeeswhere address.street like '%beijing%' or address.street like '%shanghai%'; 6. group by 语句, order by, 与 having 分类并排序 12345678910select year(ymd), avg(price_close) from stockswhere exchange = 'nasdaq' and symbol = 'aapl'group by year(ymd)order by year(ymd) desc; having 子句来限制输出结果 123456789# 例子1select year(ymd), avg(price_close) from stockswhere exchange = 'nasdaq' and symbol = 'aapl'group by year(ymd)having avg(price_close) &gt; 50.0 ; 123456789# 例子2select col1from t1group by col1having sum(col2) &gt; 10 123456789101112131415# 如果没有having， 将要使用嵌套select子查询# 例子1select s2.year, s2.avg from( select year(ymd) as year, avg(price_close) as avg from stocks where exchange = 'nasdaq' and symbol = 'aapl' group by year(ymd)) s2where s2.avg &gt; 50.0 12345678910111213# 例子2select col1 from (select col1, sum(col2) as col2sum from t1 group by col1 ) as t2where t2.col2sum &gt; 10 having 与 where 的区别 Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。 Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。 123456789# 查找平均工资大于3000的部门select deparment, avg(salary) as average from salary_info group by deparment having average &gt; 3000 123456789#查询每个部门工资大于3000的员工个数select deparment, count(*) as c from salary_info where salary &gt; 3000 group by deparment 7. join 语句 Hive中Join的关联键必须在ON ()中指定，不能在Where中指定 内连接 只有进行连接的两个表中都存在与连接标准相匹配的数据才会被保留下来。 123456SELECT a.ymd, a.price_close, b.price_closeFROM a JOIN b ON a.ymd = b.ymdWHERE a.symbol = 'Apple' and b.symbol = 'Ibm' ON 子句指定了两个表间数据进行连接的条件。 对于多张表进行连接查询 1234567SELECT a.ymd, a.price_close, b.price_close, c.price_closeFROM a JOIN b ON a.ymd = b.ymd JOIN c ON a.ymd = c.ymdWHERE a. symbol = 'Apple' AND b.symbol = 'Ibm' AND c.symbol = 'Google' 为什么条件内不加表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行 Join 优化 Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。 因此， 我们在查询时， 要保证连续查询中的表的大小从左到右依次是增加的。 假如，在 a, b 两个表中，b表最小， 则 sql 需要修改为： 123456SELECT a.price_close, b.price_closeFROM b JOIN a ON b.ymd = a.ymd AND b.symbol = a.symbolWHERE a.symbol = 'APPLE' 使用 “标记” 来指定哪张表是大表， 不需要排序 123456SELECT /*+Streamtable(a)*/ a.price_close, b.price_closeFROM a JOIN B on a.ymd = b.ymd AND a.symbol = b.symbolWHERE a.symbol = 'Apple' 左外连接 123456SELECT a.price_close, b.price_closeFROM a LEFT OUTER JOIN b on a.ymd = b.ymd AND a.symbol = b.symbolWHERE a.symbol = 'Apple' 左边表符合 WHERE 条件的全部返回，右表不符合 ON 条件的返回 NULL 完全外链接 123456SELECT a.price_close, b.price_closeFROM a FULL OUTER JOIN b on a.ymd = b.ymd AND a.symbol = b.symbolWHERE a.symbol = 'Apple' 返回所有表中符合 WHERE 语句条件的所有记录 Hive 不支持右半开连接 8. 排序 ORDER BY Order by 对查询的所有结果进行排序 可在字段加 DESC 关键字， 进行降序排序。 （默认 ASC， 升序） 1234567891011SELECT a.price_close,FROM a WHERE a.symbol = 'Apple'GROUP BY a.price_closeORDER BY A.PRICE_close DESCLIMIT 10; 9. 子查询 Hive中如果是从一个子查询进行SELECT查询，那么子查询必须设置一个别名 From 子句进行子查询 1234567891011121314151617181920212223242526select dt, count(distinct account) as uv, count(1) as pvfrom (select dt, count(distinct account) as uv, count(1) as pv from client.android_log_viewUNION ALL select dt, count(distinct account) as uv, count(1) as pv from client.ios_log_view ) group by dtorder by dt Hive 0.13 开始， Where 子句也支持子查询 1234567SELECT *FROM AWHERE A.a IN (SELECT foo FROM B); SELECT AFROM T1WHERE EXISTS (SELECT B FROM T2 WHERE T1.X = T2.Y) 将子查询作为一个表的语法，叫做Common Table Expression（CTE） 如果用 distinct, select 后面必须直接跟 distinct 1234567891011121314151617181920212223242526272829with a1 as (select distinct user_account, provincefrom computer_viedatawhere hit_date between '2018-09-01' and '2018-09-30'union allselect distinct user_account, provincefrom computer_view.datawhere hit_date between '2018-09-01' and '2018-09-30')select province, count(distinct user_account) as uvfrom a1group by provinceorder by uv DESC 刷新数据表1refresh table computer_log.client_ios_log 用python脚本连接数据库作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。 在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。 首先， 用Python连接数据库 对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接 12345678from pyhive import hive import timeconn = hive.Connection(host='ip地址', port=10000, username='用户名', database = 'default', auth='NOSASL')cursor = conn.cursor()# 获得连接的游标 设置开始和结束时间 可以用python中的time函数设置时间 12startdate = '2018-09-01'enddate = '2018-09-19' 用Python中的format函数将日期传入{}中 python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。 日期用两个{}来代替， 用format函数将开始日期与结束日期传入 123456789101112131415161718192021222324# 提取积分类uv,pv数据sql_jifenxinxi_an = &quot;&quot;&quot;select count(distinct user_account) as uv, count(1) as pv from computer_view.data where hit_date between &quot;&#123;&#125;&quot; and &quot;&#123;&#125;&quot; and (btn_position like &quot;服务-查询-积分信息%&quot; or btn_home = &quot;积分-扇形左&quot; ) limit 1000&quot;&quot;&quot;.format(startdate,enddate)# format 插入时间cursor.execute(sql_jifenxinxi_an)# 运行此语句cursor.fetchall()#fetchall():接收全部的返回结果行. 我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 参考资料：Hive 编程指南Hive的那些事Hive 官网一起学HiveHive性能优化上的一些总结过往记忆——hive]]></content>
      <categories>
        <category>数据分析技能</category>
      </categories>
      <tags>
        <tag>Hive</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类比汇总]]></title>
    <url>%2F2019%2F03%2F30%2F%E9%80%9A%E7%94%A8-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B-%E7%B1%BB%E6%AF%94%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[类比论证： 一个论证用两件事物之间熟知的相似点作为基础，推导出关于其中一件事物的一个相对未知特征的结论，这样的论证叫做类比论证。 类比有好有坏，需要区别。 学习一门技能，你需要知道最少必要知识。 这就好像你拿着一张地图，不可能一下子掌握其中所有的细节，但花几分钟搞清楚 “图例”（Legend）部分总是可以的，知道什么样的线标示的是公交车，什么样的线标示的是地铁，什么样的线标示的是桥梁，然后知道上北下南左西右东 —— 这之后，就可以开始慢慢研究地图了…… 在我们使用函数的过程中，我们常常有意忽略它的内部如何完成从输入到输出之间的处理过程 —— 这就好像我们平日里用灯泡一样，大多数情况下，我们只要知道开关的使用方法就够了 —— 至于为什么按到这个方向上灯会亮，为什么按到另外一个方向上灯会灭，并不是我们作为用户必须关心的事情……当然，如果你是设计开关的人就不一样了，你必须知道其中的运作原理；但是，最终，你还是希望你的用户用最简单方便的操作界面，而不是必须搞懂所有原理才能够使用你所设计的产品…… 在任何一本编程书籍之中，关于字符串的内容总是很长 —— 就好像每本英语语法书中，关于动词的内容总是占全部内容的至少三分之二。 教育就像一副眼镜。戴上眼镜之前和之后，我们看到的其实是同样的世界；但是戴上眼镜之后，我们就看得更清楚。 我们是这样一台计算机，厂商（我们的父母）并没有为我们提供详尽的说明书，也不负责定期升级我们的操作系统——即使他们并非故意。 人与人之间很不一样，就好像计算机和计算机之间也很不一样，有些中央处理器（头脑）更强大一些，有些人的内存容量（记忆力）更大一些，有些人的硬盘空间（笔记与藏书）更大一些，有些人显示器（外表）更漂亮一些。 很多人的处理器是落伍的，输入和输出设备常常残缺不全，内存小到没法用的底部，硬盘甚至根本就没有……至于连网设备么，真的很差，甚至真的还不如没有，因为即使连着网也因为缺乏通讯协议而完全无法使用… 科学是由信息构成的，正如房子是用砖头盖的一样，可问题在于，正如仅仅一堆砖头放在那里的时候，我们不能称其为房子一样，一堆信息放在一块就叫科学，有点不像话…… 学习电脑编程的函数时，我把函数想象成铅笔刀，钝铅笔进去，锐利的铅笔出来，这个模型不依赖于图像，但是过程类似。 两个自我： 大象和骑象人 人的感性面就是一头大象，而理智面就是一个骑象人。 骑象人骑在大象背上，手里握着缰绳，好像是他在指挥大象，但实际上，他的力量微不足道。一旦和大象发生冲突，他想往左，而大象想往右。那他通常是拗不过大象的。 就像人有一套生理免疫系统来排斥不属于身体的微生物一样，人的心理也有一套免疫系统，它会排斥我们采取新的行为方式，以此来维持心理结构的平衡和稳定。 我们要验证这些假设对不对，什么时候成立，什么时候不成立。 这就像学习游泳，我们既不能只在岸上熟读《怎么学游泳》的书，也不能一下子要求自己跳到深水区，这样就被淹死了。 同一辆车， 在公路上开， 和在泥地上开， 要达到相同的速度， 付出的努力是不同的。 同理， 不同的工作环境和内容， 带来不同的难度， 对采用的技术和努力程度也有不同的要求。 所以只衡量结果却不考虑过程， 有失公平。 考虑过程， 就包括了对工作暖色、环境因素带来的工作复杂度的度量， 也体现了对个人技能、态度的衡量。 中国人是椰子文化，擅长熟人社会的交往规则，不擅长与陌生人打交道。西方人是桃子文化， 擅长与陌生人打交道。 闭环原则是工作中最常用也是最有效的原则，但很少有人能够一直做到。这就像“运动和良好的饮食可以帮助我们保持健康和身材”一样，几乎所有人都知道， 但很少有人能够做到。 “回音壁”效应： 基于数据算法的产品就像是一个回音壁，你发出声音后，应用反馈给你的是与你自己声音相似的回音。你认为自己的“声音”得到了印证，所以你会对自己“声音”的正确性更加坚定不移。由此，你的信息、知识圈层只会更加固话，视野越发狭窄。 爱因斯坦：事情不会在出现问题的那个层面得到解决，只有上升到更高的层面才会得到解决。这就像你家的羊被狼叼走了一只，你往里面补了一只羊，表面上看这个问题解决了。过些天，又有羊被叼走了，你又得不断的补羊。可出是有一天你登高望远，发现原来是羊圈出现了破损，那么你只要把破损的地方补好就可以了。 用大海捞针的方式穷举各种可能进行试验，这其实是一种受限于无法利用更高潜能的“笨方法”。如果人自己可以提升视野和维度，去“补羊圈”，问题往往迎刃而解，并不需要无穷次的实验。 只要改变的策略和知识得当，以前看似不可能的事情会变得完全可能，而且简单明了，这就好比要打开一扇锁着的门一样–只有拿对钥匙才能轻松打开。 建立习惯就好像骑自行车上陡坡： 爬坡，到顶，下坡。 刚开始，你必须用双腿的最大力量蹬自行车，之后会渐渐变得轻松，但是你必须一直蹬到山顶，否则就会倒退回原地，让之前所有的进步付诸东流。 你有没有开过不带转向助力装置的汽车？ 方向盘转了好几圈，车的反应却很小。 大脑对改变的反应就像不带转向装置的汽车一样。 每次重复产生的作用可以忽略不计，可是如果不断重复下去，这些微小的变化会给大脑和生活带来巨大的改变。 任何事物能成为基础的第一原则就是它必须牢固可靠，而“激发动力”侧率就像是在液体上盖房子。 我不喜欢动力不是因为它不好。例如，为了写出这些文字，我需要最基本的动力，但动力论到处都是， 人们将其伪装成个人成长的秘方，虽然这不是它本身的错。 这就好像我告诉你胡萝卜能治愈癌症一样，胡萝卜的确对你有益，但它不可能治好任何得癌症的人，于是这个好东西-胡萝卜，已经被塑造成了真理的敌人，在导出招摇撞骗。这么看来，动力是一根邪恶的胡萝卜。 动力偶尔才会产生效果，所以很难评估，对动力策略的长远结果做一番审视，你可能会发现它并不是每次都会奏效。动力也不会轻易改善，因为如果你的狗病死了，你会情绪崩溃，或者你累了或者情绪很差时也会不想锻炼。与此相反的是， 你却能提高克服可能来自感情创伤、缺乏自信、情绪糟糕或者精力不足的抵触情绪，进而采取行动的能力，这种能力就是意志力。 相反，他在脑中植入了一个观点，有点像你在DVD播放器里插入了一张DVD. 当你努力理解一个人的时候，你的任务在很多方面都好像没有亲眼观看魔术师魔术表演的每个步骤就自己动手去做那个魔术。 你眼看着手帕放进了帽子里，出来的却是一只兔子，而你压根就不知道魔术师暗地里玩的到底是什么把戏。要理解这个魔术，你就得搞清楚魔术师暗地里的那些把戏。同样，在论证当中，你也得找到那些暗藏的把戏。实际上，这些把戏就是没有明说出来的想法。我们把这些没有明说出来的想法称为假设。]]></content>
      <categories>
        <category>个人系统</category>
      </categories>
      <tags>
        <tag>类比</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见的分析思维方法]]></title>
    <url>%2F2019%2F03%2F26%2F%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[数据分析方法 使用频率按照顺序排列 1.对比分析法 对比分析是给单独的数据一个参考系， 否则孤立的数据毫无意义。 时间上的同比环比 环比、环比增长率 同比、同比增长率 竞争对手对比 与其他维度结合，进行对比 活动促销前后的对比 细拆维度之间的对比 各渠道之间的对比等 2.多维度拆解法 多维分解是指从业务需求出发，将指标从多个维度进行拆分。 说明： 为什么需要进行多维拆解? 有时候一个非常笼统或者最终的指标你是看不出什么问题来的，但是进行拆分之后，很多细节问题就会浮现出来。 举个例子，某网站的跳出率是0.47、平均访问深度是4.39、平均访问时长是0.55分钟。如果你要提升用户的参与度，显然这样的数据会让你无从下手;但是你对这些指标进行拆解之后就会发现很多思路。 补充： 维度拆解不够， 容易导致辛普森悖论 3. 漏斗分析法 漏斗分析法， 还原用户转化的路径， 分析每一步的转化率， 针对性的优化和改善 说明： 漏斗分析是一套流程式数据分析，它能够科学反映用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。 漏斗分析模型已经广泛应用于网站用户行为分析和APP用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析的工作中 漏斗分析要注意的两个要点： 不但要看总体的转化率，还要关注转化过程每一步的转化率; 漏斗分析也需要进行多维度拆解，拆解之后可能会发现不同维度下的转化率也有很大差异。 4. 留存分析 留存分析是一种用来分析用户参与情况/活跃程度的分析模型，考察进行初始行为的用户中，有多少人会进行后续行为。 衡量留存的常见指标有：次日留存率、7日留存率、30日留存率等等 说明： 这是用来衡量产品对用户价值高低的重要方法 留存分析可以帮助回答以下问题： 一个新客户在未来的一段时间内是否完成了您期许用户完成的行为？如支付订单等； 某个社交产品改进了新注册用户的引导流程，期待改善用户注册后的参与程度，如何验证？ 想判断某项产品改动是否奏效，如新增了一个邀请好友的功能，观察是否有人因新增功能而多使用产品几个月？ 5. 趋势分析 通常我们在数据分析产品中建立一张数据指标的线图或者柱状图，然后持续观察，重点关注异常值。 说明： 在这个过程中，我们要选定第一关键指标，而不要被虚荣指标所迷惑。 以社交类APP为例，如果我们将下载量作为第一关键指标，可能就会走偏;因为用户下载APP并不代表他使用了你的产品。在这种情况下，建议将DAU(Daily Active Users，日活跃用户)作为第一关键指标，而且是启动并且执行了某个操作的用户才能算上去;这样的指标才有实际意义，运营人员要核心关注这类指标。 6.用户分群 用户分群主要有两种分法：维度和行为组合。 第一种根据用户的维度进行分群，比如从地区维度分，有北京、上海、广州、杭州等地的用户;从用户登录平台进行分群，有PC端、平板端和手机移动端用户。 第二种根据用户行为组合进行分群，比如说每周在社区签到3次的用户与每周在社区签到少于3次的用户的区别. 7.公式法 将一切问题皆可量化，拆解成最小的维度，通过 +、-、*、/ 进行计算 8.用户细查 用户行为数据是观察用户在你产品内的行为路径是一种非常直观的分析方法。 在用户分群的基础上，一般抽取3-5个用户进行细查，即可覆盖分群用户大部分行为规律。 绝大多数产品都或多或少存在一些反人类的设计或者BUG，通过用户细查可以很好地发现产品中存在的问题并且及时解决。 9.A/B测试与A/A测试 A/B测试是为了达到一个目标，采取了两套方案，一组用户采用A方案，一组用户采用B方案。通过实验观察两组方案的数据效果，判断两组方案的好坏。 说明： 在A/B测试方面，谷歌是不遗余力地尝试;对于搜索结果的显示，谷歌会制定多种不同的方案(包括文案标题，字体大小，颜色等等)，不断来优化搜索结果中广告的点击率。 这里需要注意的一点，A/B测试之前最好有A/A测试或者类似准备。什么是A/A测试?A/A测试是评估两个实验组是否是处于相同的水平，这样A/B测试才有意义。其实这和学校里面的控制变量法、实验组与对照组、双盲试验本质一样的。 10.假设法 假设-验证-判断。 当没有直观数据时， 以假设先行的方式进行推断。说明： 例如： 如果商品提价后， 公司收益会不会变化？ 假设流量不会发生变化， 那么商品价格会影响转化率，确定转化率的下降。 计算日常的转化率， 针对不同的用户，如：忠诚用户、普通用户、羊毛用户， 预估各类别用户提价后的转化率变化。 11.指数法 指定一个标准， 解决衡量的问题 线性加权： 反比例： 1-1/n， 范围为0-1 log指数法 热度公式： log(uv+ 5*评论,2) +(time -初始时间) / 10 参考资料： 数据分析的基本方法论]]></content>
      <categories>
        <category>数据分析方法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见的分析思维模型]]></title>
    <url>%2F2019%2F02%2F26%2F%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[分析思维模型 使用频率按顺序排列 1.AARRR 模型 2.基于用户生命周期的数据分析体系 对应的关键指标 3. 5W2H 分析法 什么原因 (why) 导致 什么事情 (what), 需要哪些人 (who) 在什么时间完成 (when),在什么地点 (where) 用什么方法 (how)完成, 预算是多少 (how much)? 4. 象限法 通过象限法， 找到问题的共同原因， 从而建立分组优化策略。 内外因素分解法 用户分群 RFM 用户分群 5. 二八法则 / 帕累托法则 将对象分为重要和不重要两类， 20%的用户贡献了80%的销售额。 数据中， 20% 的变量将直接产生 80% 的效果，数据分析应该围绕这20%的变量来进行。 和业务和KPI紧密相关，花费很少的精力就能达到不错的效果。 在条件允许的状况下， 依旧不能放弃全局，否则会让思维变得狭隘。补充： 升级版本： ABC 分析法 与之对应： 长尾理论 6. SWOT方法 指定发展战略前，对自身进行全面的分析及竞争优势定位。 对自己进行解析 指定相应的对策 7.麦肯锡七步分析法 界定问题 将问题分解成议题 去除不重要的议题（优先排序） 制定详细工作计划 分析重要议题 汇总研究成果 准备你的故事 8.SMART原则 意义：人们在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现。 说明： S代表具体(Specific)，指绩效考核要切中特定的工作指标，不能笼统； M代表可度量(Measurable)，指绩效指标是数量化或者行为化的，验证这些绩效指标的数据或者信息是可以获得的； A代表可实现(Attainable)，指绩效指标在付出努力的情况下可以实现，避免设立过高或过低的目标； R代表现实性(realistic)，指绩效指标是实实在在的，可以证明和观察； T代表有时限(time bound)，注重完成绩效指标的特定期限。 9.4P 与 STP 理论 市场营销与市场定位 4P 理论 STP 理论 10.PEST分析方法 企业的战略外部环境分析。 11. PDCA模型 12.时间管理 A、重要且紧急 紧急状况迫切的问题限期完成的工作你不做其他人也不能做 B、重要不紧急 准备工作预防措施价值观的澄清计划人际关系的建立真正的再创造增进自己的能力 C、紧急不重要 造成干扰的事、电话、信件、报告会议许多迫在眉捷的急事符合别人期望的事 D、不重要不紧急 忙碌琐碎的事广告函件电话逃避性活动等待时间 13. 任务分解法 目标→任务→工作→活动。 WBS分解的原则：将主体目标逐步细化分解，最底层的任务活动可直接分派到个人去完成；每个任务原则上要求分解到不能再细分为止。 WBS分解的方法：至上而下与至下而上的充分沟通；一对一个别交流；小组讨论。 WBS分解的标准：分解后的活动结构清晰；逻辑上形成一个大的活动；集成了所有的关键因素包含临时的里程碑和监控点；所有活动全部定义清楚 14. AISAS-用户行为决策分析模型 注意- 兴趣-搜索-行动-分享 15. 延伸： 个人IPO模型 16. 波特五种竞争力分析模型 17. KANO模型 对用户需求分类和优先排序 将影响用户满意度的因素划分为五个类型，包括： 魅力因素：用户意想不到的，如果不提供此需求，用户满意度不会降低，但当提供此需求，用户满意度会有很大提升; 期望因素(一维因素)：当提供此需求，用户满意度会提升，当不提供此需求，用户满意度会降低; 必备因素：当优化此需求，用户满意度不会提升，当不提供此需求，用户满意度会大幅降低; 无差异因素：无论提供或不提供此需求，用户满意度都不会有改变，用户根本不在意; 反向因素：用户根本都没有此需求，提供后用户满意度反而会下降; 18. SCP模型 分析在行业或者企业收到表面冲击时，可能的战略调整及行为变化。 19. SPACE-战略地位与行动评价矩阵 企业的内部因素与外部因素 参考资料 分析和解决问题的7种武器]]></content>
      <categories>
        <category>数据分析方法</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读书档案]]></title>
    <url>%2F2019%2F02%2F20%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E6%88%90%E9%95%BF%E4%B9%A6%E5%8D%95%2F</url>
    <content type="text"><![CDATA[读书档案《麦肯锡精英高效阅读法》 2020年1月11日 阅读这本书的目的是什么 阅读这本书的目的是想找到一种读书方法，能够把自己看过的书中知识运用到自己的生活中去， 给自己带来真正的改变。 读完这本书的感受是什么 读完这本书的感受是书的前半段挺唠叨的，但后面介绍的建立读书档案和看完记录自己的想法，还是对自己挺有启发性的。 阅读这本书之后， 自己会采取哪些行动 读完这本书之后，自己会建立自己的读书档案， 对于自己看过的有价值的书籍， 自己会写读书感想，并且经常来反复读，直到自己真正把书中的知识运用到自己的生活中去 3个月之后，自己会有什么样的改变？ 3个月之后，自己能够把自己的阅读习惯建立起来，对于自己看过的书，自己都能够确实把书中的知识运用到自己的生活中， 建立了自己的读书档案， 对于自己读书笔记与感想自己都能够及时复习更新。 《好好思考》 2020年2月17日 阅读这本书的目的是什么？ 读完这本书的感受是什么？ 阅读完这本书之后，自己会采取哪些行动？ 3个月之后，自己会有什么样的改变？ 需读书籍数据分析： 《网站分析实战》 《精益数据分析》 《运营之光》 《计算广告》 《新零售：低价高效的数据赋能之路》 《增长黑客》 《女士品茶》 《数据化管理》 《流量池》 麦肯锡： 《麦肯锡教我的思考武器》 《麦肯锡教我的写作武器》 《麦肯锡意识》 《麦肯锡方法》 《麦肯锡图表工作法》 《麦肯锡教我的谈判武器》 《麦肯锡笔记思考法》 《麦肯锡精英高效阅读法》 批判思维与逻辑思维： 《批判性思维工具》 《学会提问》 《金字塔原理》 《零秒思考》； 已写文章 行动： 每天问自己的10个问题 如何学习： 《学习之道》 《如何学习》 《刻意练习》；已写文章 《刻意学习》；读书笔记 《好好学习-个人成长指南》 ；已写文章 ； 读书笔记 行动： 反思日记 《好好思考-如何链接高超学习力 如何生活： 《基本穿搭-适用一生的穿衣法则》 《奇特的一生》 《我是个怪圈》 《习惯的力量-原版》 《医治受伤的自信》 《智能时代》 《微习惯》 职场技能： 《精准表达：让你的方案在最短的时间内打动人心》 《小强升职记》 《像外行一样思考，像专家一样实践》 《你凭什么做好互联网》 《关键沟通》 《关键对话》 如何思考： 《系统之美》 《思考-快与慢》 《原则》 《怎样解题》 《第五项修炼》 《穷查理宝典》 《改变》 《万万没想到-用理工科思维理解世界》； 已写文章 适合产品经理的十本书 - 俞军入门必读 《社会心理学》 阿伦森 插图第七版：特别好，适合成为“产品经理的第一本书” 《第一本经济学》 经济学帮助人们洞察世事 《学会提问》 学习辨别信息和言论的真假对错 以上三本都是既可以当做产品经理的入门书读，又可以在职业生涯反复读的书。 思维： 《认知心理学及其启示》 人类认知和思维的基本机制 《 思考快与慢》 人如何有缺陷地思考 《 超越智商》 如何克服缺陷做理性决策 《思维与决策》 第四版 系统介绍思维与决策领域的研究 学习深度思考和决策需要的书籍，以上四本够用很久了，因为仅仅阅读多是没用的，最终还是阅读、思考、实践的最短板决定决策水平。 经济学： 《经济学原理》 曼昆版 微观分册 最通用的经济学教材 《错误的行为》 行为经济学离PM最近，但尚无好教材，先用这一本占坑 《新制度经济学 一个交易费用分析范式》 学习交易费用思考商业模式 《魔鬼经济学》 史蒂芬.列维特 《统计数据会撒谎》 统计陷阱 《超级数字天才》 《女士品茶》 其他推荐阳志平：双十一买书指南认知科学入门书单 专栏]]></content>
      <categories>
        <category>生活资料</category>
      </categories>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何整理大脑思绪]]></title>
    <url>%2F2019%2F01%2F20%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E9%9B%B6%E7%A7%92%E6%80%9D%E8%80%83%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[自己时常有这种感觉，总觉得自己的大脑反应很迟钝，思绪比较混乱，看一个问题想法很模糊，有时心情急躁却找不到问题的解决方法。工作中和别人沟通时，有时词不达意，表达不够清晰，导致工作中出现很多问题。自己也明白自己需要更加深入的思考，但总是没有找到好的办法。 最近在看《零秒思考》这本书，书中作者提供了一个解决此类问题的方法：时刻写下自己的想法。 我们每天会接受不同的信息，在脑海中会产生大量的想法与感觉。很多时候，这些想法还没有转换成语言之前，便在含混朦胧、内心纠结的状态下消失了。虽然想法会暂时忘记，但是那种纠结的感觉并没有消解，会导致自己的心情消极的，产生精神上的压力，进而让大脑变得迟钝。 时刻记录自己想法的好处是，写下来能够将纠结于心的情绪发泄出来，在写的过程中对大脑的思绪进行整理，也能更准确的表达自己的想法。这个方法的关键是：在1分钟的时间限制内，迅速写出大量自己的原始感受。 具体的做法是这样： 写标题： 写出有关大脑中思绪的一个疑问句。 写内容：写4-6行文字来写下自己的原始想法。 字数限制：每行文字字数在10-15字之间。 时间限制：在2分钟之内完成。 数量限制：每天写10条。 每个做法对应的原理是这样： 标题，用疑问句可以让自己更有写下去的冲动。 内容，写4-6行文字，能够将自己大脑中浮现的想法基本都写下来，而不至于重复。 字数，10-15字，让自己不至于写的太短而不能充分表达想法，也不会字数太长在规定时间内写不完。 时间，限制时间，避免大脑受环境和周围状况的影响。 数量，每天写10条，不会过多占用时间，更容易坚持。 书中作者要求在A4纸上写，个人感觉不是很方便，自己目前习惯于通过手机自带的【闪念胶囊】软件来进行记录。记录想法的方法与写反思日记有些相似，两者都要求把自己的想法写下来，不同之处在于，反思日记是对自己这一天做的事情进行反思记录，而记笔记是对你时刻产生的想法进行记录。 目前自己按照这个方法写了10天左右，感觉自己一个很大的变化就是下班回家走在路上，可以通过自问自答的方式来对一个问题进行深入的思考。虽然有时也想着想着就跑偏了，但是自己对于思考这件事情，不再有抵触的情绪。 书中作者还提供了通过回顾记录来挖掘价值的方法： 回顾自己的笔记， 然后再把笔记的内容当做标题， 每个标题再写4-6行。 这样自己对这类问题的思考会更加的深入。 多角度的写一个标题。 让自己对带有个人情感的内容作出更冷静的判断， 能够站在别人的角度去看问题。 将笔记按照不同领域来进行分类整理。 每三个月回顾一次笔记，了解自己面临的问题，探寻自己的成长轨迹。 最后，想说的是，看到一个方法论，我们常常会怀疑这样的方法真的有用吗，但问题本质是看你选择先相信再看见，还是先看见再相信。 我相信时刻记录想法是一个看似简单却对个人成长大有裨益的方法，所以准备践行100天再看看效果。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>思维方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反思日记]]></title>
    <url>%2F2019%2F01%2F13%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[“我应该不会拒绝从头到尾把生活再过一遍，只是希望能够获得唯有作家才有的特权——在‘再版’的生活中修正‘初版’的错误，生活的悲哀之处在于我们总是老得太快而又聪明得太晚，等你不再修正的时候，你也就不再了” ——西塞罗《论老年》 在18年下半年，自己有一种感觉特别的强烈，就是总感觉时间过得飞快，而自己还什么都没有做，一周就完了，甚至自己想不到自己上周主要做了哪些事情。于是，自己想了一个办法，来抵抗这种感觉，就是每天写日记。 开始的时候，自己主要是记录自己这一天都干了什么，写了一个月之后，自己总感觉自己是在记流水账，刚好那时候，在看一本书《好好学习：个人知识精力管理指南》，里面提到了通过写反思日记的方法来掌握知识，自己按照里面的方法写了 100 多天，感觉还是非常有用的。 反思日记主要分为两个部分，反思与日记。反思就是对自己做的事进行思考，对产生结果的原因进行分析。日记则是要每天都要去写，每天都要对自己的生活进行记录。自己现在更加深刻的认识到， 一个人的变化不是突然发生的， 而是发生在每一天做的事情中的。 根据自己的实际情况，我给自己制定了反思模板，每天日记的任务主要是回答自己这7个问题。 今天自己做的不好的事情是什么？ 自己当时是怎么想的， 身体是如何反应的 如果自己再重新来一次， 自己会如何做 自己今天做的很好的事情是什么 自己目前最主要的目标是什么 自己今天任务的完成情况。 自己明天的计划是什么 这7个问题背后的原理是这样的： 问题1-3，是对自己思考方式的反思。我们平时做一件事情，是基于 假设-行动-结果 这样的过程。 而反思，就是通过 观察结果-研究原来假设-反思校正假设 这样的顺序对自己思考的再思考。 问题4， 是为了提高自己的自信心。个人认为自己在生活中不够自信，通过每天记录自己做的事情，来让自己增加自信心。 问题5，提醒自己时刻盯住自己的目标，为了自己的目标而努力。 问题6，对比昨天的计划，监督自己今天任务的完成情况。 问题7，是为明天的事情，做出一个良好的计划。 有时候，翻看自己之前的记录，会发现自己当时会面临这样的问题，回过头来再看也是比较有意思的事情，比如, 翻看自己18年10月22号的日记，发现自己是这样想的： 通过写反思日记，自己发现了一些自己反复会犯的问题。比如： 自己下班一回到房子就什么也不想干，总是在刷微博、看美剧，但是自己在看完之后，自己并没有产生放松的愉悦感，在写反思日记的时候，自己总是懊恼自己为什么这样浪费时间，这实际上是自己的精力管理方面出了问题，认识到这个问题之后，现在自己也在尝试各种方式来恢复自己的精力。 个人认为培养出记反思日记的习惯还是很有必要的，通过记录自己的生活并不断反思， 能够让我更清醒的认识到自己的不足，从而尝试做出改变。 作者在《好好学习-个人知识精力管理指南》这本书中还提到了通过写反思日记来进行对标管理，把一本书中的知识进行每日的反思等方法。大家可以根据书中的内容，指定自己的个人反思模板。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>思考方法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[统计学学习]]></title>
    <url>%2F2018%2F10%2F20%2F%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[统计学网站 看见统计学 数学很好玩 数据可视化-博客 数学公式转换为markdown格式 《写给所有人的极简统计学》 前言：为什么应该学点统计学统计学是人类发明用来研究我们自身的科学，它与我们的生活息息相关。 小到支付宝根据用户个人消费数据判断其消费水平，从而有针对性进行限额借贷。大到国家通过国民生产总值这样的统计数据分析，来研究国家经济发展趋势等， 都需要用到统计学知识。 我们可以从统计大师 Hans Rolling 的演讲中， 来看下 1960 年到 2003 年的世界各国出生率与经济发展是如何变化的。 Hans Rolling —— 统计的魅力 有人会问，统计学那么多高深的概念和复杂的算术， 在平时的生活中自己也应用不到。 这种想法其实是错误的。我们学习统计学， 不光是学习怎么对数据进行统计计算，更重要的是学会运用统计思维去更理性地看待周围的事物。 比如， 最近报道的一名美国公民在 10 月 23 号中了 16 亿美元的彩票， 看到这则消息，你会不会也有点心动， 也想去买个彩票。其实， 关于是否要买彩票，统计学有一个重要的概念来衡量：期望值 即同一种行为多次重复之后，所能得到的平均收益 举例来说， 假如某彩票规则为：每次买张彩票需要 2 元，假设 200 次抽奖可以中奖一次，奖金为 300 元。 期望值 = 300 (1/200) + 0 (199/200) = 1.5。 期望值是 1.5 元， 但是每次抽奖成本为 2 元， 于是每次净亏损 0.5 元。如果你偶尔买一次就算了， 但如果你长期买彩票，就肯定会亏很多钱。 况且现实生活中，中奖的概率远远低于 1/200 你可能会觉得，概率那么低， 那我怎么感觉天天有人中奖呢， 这背后其实是媒体的选择性报道， 也就是统计学中的幸存者偏差问题。 例如：二战期间，盟军为减少飞机在敌人防空炮火中的损失，军方决定为飞机加装防护，多数人认为，应该在机身中弹多的地方加强防护。但统计学家沃德认为，应该给那些没有中弹的油箱和驾驶部位进行防护，因为这些部位中弹的飞机根本没有机会飞回来。 现实生活中，也往往会存在一些幸存者偏差的数据，我们生活中接触的数据越来越多， 解读数据背后的信息， 辨析数据真伪就显得非常的重要，这则视频对此有更深入的讲解。 成功学有用吗？幸存者偏差，一个活着就该明白的事！李永乐老师 那么统计学到底要学什么呢？统计学主要学习两个方面 描述统计， 描述数据的基本情况 通过研究数据的平均值，中位数，标准差等指标， 来了解数据的整体分布状况，从杂乱的数据中得出有用的信息 推理统计，根据样本数据来对总体进行估计 通过对样本数据的研究， 来对总体数据进行估计，评估推理数据的准确度，统计学中就会通过置信度， 卡方分布等来对总体进行估计。 统计学是我们将客观数据转化成有用信息的一把钥匙， 运用统计概念对一些更为广泛而大致的信息及规律进行思考， 可以改善我们做出的判断和决定。我们当然不能指望这些判断不出错误， 但每一个好的决策都会帮助你更有效的利用这些信息，积少成多，把事情做成的概率会大很多。 视频资料补充：Hans Rolling —— 东方崛起 为什么应该学点统计学 数据的乐趣 描述统计 平均数 将所有数据进行平均分配 1234import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]# 均值np.mean(a) 中位数 n个数据由大到小排列时，位于正中间的那个数 1234import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]# 中位数np.median(a) 众数 n个数据中，出现次数最多的那个数。 12345678import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]#方法1# np.bincount, 计算非负的int数组中，每个值出现的次数counts = np.bincount(a)#[0 1 0 2 1 1 0 2 0 0 0 0 0 0 0 3]#返回沿轴最大值的索引np.argmax(counts) 12345import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]# 方法2from scipy import statsstats.mode(a)[0][0] 极差 n个数据中，最大数与最小数之差 123import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]b = max(a) - min(a) 四分位数 将数据从小到大排列并分成4等份后，处于3个分割点上的数。箱型图 123456import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]# 中位数np.median(a)# 45%分位数np.percentile(a, 45) 方差 度量随机变量与期望值（平均值）之间的偏离程度。 公式：$\sigma ^{2} = \frac{ \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}$ 计算步骤： 求平均值 求 (各数值 - 平均值) 的值 以 (各数值 - 平均值) 的平均数为标准，无法看出以平均数为基准数据的离散程度。因为两数相减结果有正有负，相加之后会互相抵消。 为使 (各数值 - 平均值) 的差值即使为负也能显示出差值，可以将 (各数值 - 平均值)的值平方之后，再取平均值。 求 (各数值 - 平均值)² 的值 求 (各数值 - 平均值)² 的平均值 方差问题： 数值时有会过大 单位为原先单位的平方 123import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]np.var(a) 标准差 标准差越小，说明数据大多数集中于平均值附近，偏差不大。公式：$\sigma = \sqrt{\sigma ^{2}} =\sqrt{\frac{ \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}} $计算步骤： 计算出方差后开根号 123import numpy as npa = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]np.std(a) 常见的因果关系 某个原因导致的结果唯一，导致某个结果的原因也是唯一的。 某个原因导致的结果唯一，导致某个结果的原因不唯一。 某个原因导致的结果不唯一，导致某个结果的原因唯一。 某个原因导致的结果不唯一，导致某个结果的原因也不唯一。 相关系数 表示相关关系的正负与强弱的系数相关系数r的范围是-1≤r≤1判断相关关系强弱的标准： 123456789101112131415# 写法1a = [1,2,3,4]b = [2,4, 6,9]import numpy as npnp.corrcoef([a,b])# 写法2import scipy.stats as statsstats.pearsonr(a,b)# 结果的第一个数为相关系数# 写法3import pandas as pddf= pd.DataFrame()df['a'] = [1,2,3,4]df['b'] = [2,4, 6,9]df.corr() 概率 排列 从N项中任取n项，并进行排列，决策的顺序的结果有影响。公式：$P_{n}^{N} = \frac{N!}{(N-n)!}$ 12from scipy.special import comb, permperm(5,2) 组合 从N项中任取n项,不考虑顺序。公式：$c_{n}^{N} = \frac{N!}{n!(N-n)!}$ 12from scipy.special import comb, permcomb(5,2) 补充资料： 5分钟彻底了解排列组合 事件 事件的补: $P(A) = 1 - P (A^{c})$ 事件的并：$P(A\bigcup B ) = P(A) + P(A) - P(A\bigcap B )$ 互斥事件：$P(A\bigcup B ) = P(A) + P(B)$ 独立事件：$P(A\bigcap B) = P(A) * P(B)$ 条件概率 在事件B发生的条件下， A条件发生的概率公式： $P(A|B ) = \frac{P(A\bigcap B)}{P(B)}$ $P(A\bigcap B) = P(B) P(A|B) = P(A) P(B|A)$ 二项分布 概念： 成功率为P的实验，独立重复 n 次后的成功次数为 x 的概率分布。 公式： 案例：在各类促销活动中， 抽奖是一种常见的促销方式。现在希望运营方设计一个抽奖模式。用户能够抽10次，中奖概率是10%。如果用户抽中了3次及以上， 则公司会亏本。那么公司亏本的概率是多少？ 正态分布 性质： 均值 = 中位数 = 众数 沿中心线对称，一半在平均值左侧，一半在平均值右侧。 特点： 69%的数值在离平均值一个标准差之内 95%的数值在离平均值2个标准差之内 99.7%的数值在离平均值3个标准差之内 补充资料： 正态分布为什么常见？ 正态分布 数据标准化-Z-Score 公式： z = (x - u) / 方差目的：消除指标之间的量纲和取值范围差异的影响 补充资料：数据规范化（归一化）、及Z-score标准化 切比雪夫定理 至少有75%的数据在两个标准差之内 至少有89%的数据在三个标准差之内 至少有95%的数据在5个标准差之内 举例： 若一班有36个学生，而在一次考试中，平均分是80分，标准差是10分，我们便可得出结论：少于50分（与平均相差3个标准差以上）的人，数目不多于4个（=36*1/9） 作用： 用于异常值检测 贝叶斯定理 如何判断她喜欢你的概率 贝叶斯定理计算方法： 先假定一个概率， 然后根据样本获得新的信息， 根据这些信息对 原先假设的概率进行修正， 得到准确的概率。公式：$P(A|B) = \frac{P(A) * P(B|A)}{P(B)}$ 假设 你是一名女生， 在情人节这天， 一名男生送给你一盒巧克力， 你可能会有疑问，他是不是喜欢你， 他喜欢你的概率是多大？ 因为你没有证据来说明你就是他喜欢的类型， 所以， 我们假设 你或者是他喜欢的类型， 或者是一名路人。 假设各有50%的概率。 通过调查， 我们发现 一个男生对心意女生送出巧克力的概率为 45% 对路人送出巧克力的概率 为 20%， 那他现在送给你一盒巧克力， 在他已经送你巧克力的这件事情已经确定了， 所以他们现在是一个整体。他喜欢你的概率是多少呢。 45% / (45% + 20%) = 69.2%当他送你巧克力时，大概有69、2%的概率会喜欢你 当然， 贝叶斯概率 能够计算出这个概率， 但是否要继续， 取决与你。 贝叶斯概率在我们生活中的应用是非常广泛的， 常见的， 比如 在邮件中的反垃圾邮件。 这是一种贝叶斯概率非常好的使用案例。 在上面的推理中， 我们总会觉得贝叶斯定理有些“牵强”,牵强的原因主要是因为先验概率。 这种主观上假定或者大概的概率， 会让人感觉牵强。 但也正是由于设定了先验概率， 贝叶斯定理才会有即是只有少量信息， 也能够进行推理。 当然， 贝叶斯定理有另一学习功能， 就是信息越多， 推理结果就越精确。 快速理解贝叶斯定理 假设一家商城， 顾客分为： 想买商品的顾客，和随便逛逛的顾客。 假设， 随机走进来一个顾客，他为有意愿度的顾客占20%， 为随便逛逛的顾客占80%。 现在增加了一个主动询问店员的动作。 假设有意愿度购买的顾客， 向店员询问的概率为70%， 不询问的概率为30%。 随便逛逛的客户， 主动询问店员的购买概率为 10%， 不询问的概率为 90%。 现在问 如果一顾客主动向店员询问， 那么他是有意愿购买的顾客的概率是多少。 有意向且询问的概率为 14%。 有意向不询问的概率为 6% 无意向且询问的概率为 8%， 无意向且不询问的概率为 72% 现在 主动询问这个动作已经做出了， 所以总体为两部分： 有意向且询问， 和无意向且询问 14:8 = 7:4。 所以她有意向且愿意购买的概率为 7/11 63.6% 贝叶斯： 通过结果来反推原因 参加活动的人群中，女性只占30%， 是否说明女性不喜欢参加此类活动？ 某种疾病的发病率为千分之一。现在有一种试纸，它在患者得病的情况下，有99%的准确率判断患者得病，在患者没有得病的情况下，有5%的可能误判患者得病。现在试纸说一个患者得了病，那么患者真的患病的概率是多少？ 某城市有两种颜色的出租车，蓝车和绿车市场比率为15:85。 一辆出租车肇事逃逸，当时有一位目击者证人，这位证人认定肇事的出租车是蓝色的。但是他的目击未必可信，公安人员经过在相同环境下对该目击者进行“蓝绿”测试得到：80%的情况下识别正确，20%的情况下不正确。那么实际为蓝车的可能性是多少？ 我们经常会受到垃圾短信，假设1000条正常短信中，包含【澳门赌场】的短信有2条，而在垃圾短信中，包含澳门短信的短信有400条。现在我们接受到了一条新短信，在不浏览内容的情况下，假定它的正常几率是50%。现在对短信内容进行解析，发现澳门赌场这个词，那么它是垃圾短信的概率有多高。 补充资料： 数学之美番外篇：平凡而又神奇的贝叶斯方法 《统计学关我什么事》 贝叶斯推断及其互联网应用（一）：定理简介 贝叶斯学习与未来人工智能]]></content>
      <categories>
        <category>数据分析技能</category>
      </categories>
      <tags>
        <tag>数据分析</tag>
        <tag>统计学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[思考系统]]></title>
    <url>%2F2018%2F10%2F14%2F%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[批判性思维1.图尔敏模型 举例： 小明出生在北京，所以小明是中国人。 论题： 小明出生在北京 前提： 在北京出生的是中国人 支撑： 现有法律规定 逻辑推理： 在北京出生的是中国人，小明在北京出生，所以小明是中国人。 反例：小明后来移民加拿大。 对推理的限定： 小明并非一定就是中国人 结论：因为小明出生在北京，所以小明可能是中国人。 2. 对各个模块进行解释 论题 论题是要讨论的问题或争议。 论题分为两种形式： 一种是对事实的讨论，比如：服用中药 是不是 能治好疾病，杨教授的学术研究水平 怎么样？ 人口出生率下降的原因 是什么？ 另一种是对价值主张的讨论， 比如：大学生 应不应该 读研， 对全民医疗 应该 采取什么样的态度？ 不同类型的论题，做出的评价是不同的，我们在讨论一件事情时，要检查两点： 我们是在讨论某个事实，还是讨论价值主张。 我有没有正面回答问题。 结论 结论是要让你相信的观点和信息, 必须是有论证支撑的观点。 没有论据支撑的观点不能叫结论。 当某人说出他的观点时， 我们应该马上问：你这个看法有什么依据？ 注意问题： 偷换结论 用一个相关性很强的结论来换掉正面回答问题的结论。原理：默认预设，认为结论只能二选一。 鱼和熊掌不可兼得，我拿不到鱼，所以我会拿到熊掌。 年轻人不愿意生孩子，所以养猫的人会越来越多。 先有结论，再证明合理 人先作了决定，然后给出的理由并不是来推导这个决定，而是想办法维护这个决定。 在作一些决定和选择时，要先问自己：影响决策的是理性判断还是情绪等影响。 论证前应明确的两个问题 明确对方是在进行论证，还是在进行解释。 解释并没有证明论证确实成立，而是把结论变成了默认前提。 论证是指：我还没有相信或者认同你，你得证明你的判断。 将 因为 用 根据…、基于…、理由是… 来进行替换， 将 所以 用 得出…、推断…、证明… 来进行替换，看语句是否通顺。 我在吃饭，因为我往嘴里塞食物。 解释是指：我们已经承认了事实，视图说明为什么事实是这样的。 将 因为 用 归因于… 来进行替换， 将 所以 用 导致… 来进行替换，看语句是否通顺。 我在吃饭，因为我饿了。 识别概念的定义区别 在论题、论证和结论中出现的概念是一致的吗,这些观念会误导别人吗？ 关键概念的定义准确吗？ 在思考和论证的过程中，把一件事定义清楚。 参考：《学会提问》第4章 挖掘论证中两种隐藏假设 事实判断型的假设， 这个世界是什么样的？一个理由是否能证实结论，主要取决于我们能否找到没有明说出来的想法，将理由和结论从逻辑上联系起来。 比如：每天一个鸡蛋，能补充蛋白质。假定：鸡蛋是富含蛋白质的。 如何找出描述性假设 不断思考理由和结论之间的关系，寻找支持理由的想法、 把自己放到相反立场 价值判断型的假设， 这个世界应该如何选择？价值观假设是认为某些价值观中一个比另一个更重要，并且选择的价值观会对结论产生重大影响，同时也影响他捍卫结论的方式，但是这种价值取向并没有说明。 比如价值观冲突： 忠诚-诚实、竞争-合作、媒体自由-国家安全、平等-个人主义、秩序-言论自由、理性-冲动。 如何找出价值观假设 言论者的背景是什么，他代表了哪方的利益？ 注意作者用来证实结论的各种理由，然后判断哪些价值取向会导致作者认为这些理由比另一些理由更可取，而另一些理由其实可以从论题的另一方面进行论证。 如果我和作者站在相反的立场，我会如何反驳 判断假设 这个假设和我的个人经验冲突不？ 这个假设是来自哪里的，消息来源可靠吗？ 我自己想法，背后的隐藏假设是什么？ 支撑 支撑是双方都公认的法则或常识。 法律法规 经检验的科学研究 注意类比的质量。 反例 对相反观点的论证，以达到论证的全面性。 常见谬误： 参考下文：常见谬误详解 3. 用图尔敏模型进行议论文写作 对文章主题进行介绍 介绍能够引起读者注意的内容 对要表述的问题进行陈述 表达你的结论，并给出使用范围。 提出证据来支撑论证 证据1、2 提供支撑保证的理由和事实，根据个人实践和理论来说明保证的合理性。 支撑1、2 回答反驳 反驳1 对反驳1的回答… 结论 概括论证和结论的要点，指出论证的意义，能够让读者印象深刻。 4. 用图尔敏模型进行分析性写作 对某一文章质量进行评判 理解主题论点，澄清概念的意义。 审查理由质量，挖掘潜在的假设。 分析论证结构，评估推理的强弱。 考虑替代论证， 提出完善的建议。 5. 学习资料 课程-中国青年政治学院：批判性思维（谷振诣教授） Toulmin method 《逻辑新引.怎样辨别是非》 《beyond feelings》 《简单的逻辑学》 《学会提问》 《蔡钰-批判性思维15讲》 Justice – What’s the right thing to do? 结构化思维 对信息进行识别、归纳、概括、总结和表达。 1. 识别信息 纵向上的总分结构 识别结论 识别理由 识别事实 参考:上文批判性思维 2. 归纳信息 横向上的分类结构 MECE 分类法： 不重不漏 二分法 过程法： 发展时间、运作流程 要素法：从上到下、从外到内、从整体到局部 公式法：按照公式的要素去分类。 矩阵法 特定场景模型：常见的分析思维模型 3. 总结概括信息 归纳法 根据许多个别事物的特殊性来概括出同类事物的特性。 描述性概括 找出事物属性上的共同点。 行动性概括 最终结果是什么，找出事物结果的共性。 演绎法 将某一事实与对应的某个规律联系再一起，得出结论。 注意事项： 大前提一定要无可争议，避免主观判断，并且罗列不能过长。 小前提是一个已经发生的事实。 4. 清晰表达 1.结论先行 表达时先说结论 2.以上统下 上一层次要点必须是下一层次的概括 3.归类分组 每一组要点必须属于同一范畴 4.逻辑递进 每个要点必须按照一定的逻辑顺序排列。 演绎推理 时间/步骤顺序 空间顺序 重要性顺序 注意事项： 结论先行，重要的理由说三点。 5. 参考资料 《得到-有效训练你的结构化思维》 《金字塔原理》 如何解决问题1. 明确和理解问题 明确问题的本质到底是什么 跟领导确认希望达到的目标 明确可以利用的资源 2.拆分和定位问题 用公式思维拆解问题 逻辑树-金字塔原理（mece法则) 假设驱动-假设问题可能出现在某个细分的问题点上。 3.提出解决方案并总结 结论先行 参考上文：结构化思维 4. 工作中解决问题的方法 快速按照理解去做拆解，去做思维导图， 能想到多少是多少 拿着拆解思维导图去跟业务方的人去请教，一定要找到业务方真正关心的点 结合业务方给出的具体建议， 修改第一步的思维框架， 做完后，请教你的领导 再改一次， 回报给业务方领导 遇到坑之后， 一定要文档详细记录下来。 让团队中其他人知道， 节省团队时间。 知道自己在哪块花了大量时间，为后续分析节省时间。 5. 生活中问题解决的4个层次 有没有找到真正的问题， 人都是有逃避心理的。 想到了问题的第几层 想到了最后一层， 并且去执行解决问题 做到了，并且分享帮助别人 常见谬误详解 1.幸存偏误 在生活中更容易看到成功者的故事，看不到失败， 你会系统性地高估成功的概率。 2.游泳选手身材错觉 你看到游泳选手的身材好，因此你觉得游泳就可以练就这样的身材。你觉得用这个护肤品的模特都好漂亮， 因此你觉得用了这个护肤品自己也可以变漂亮。 其实是因为他们有这样的好身材， 所以他们才能被选为游泳运动员。 和游泳能够练就这样的身材没有直接的关系。 用这个护肤品的模特好看， 是因为这个模特好看， 所以她才能被选做拍这个护肤品的广告， 和这个护肤品可以让自己更漂亮没有直接关系。 3.过度自信效应 系统性地高估自己的学识和能力过度自信会令你忽视你真正掌握的能力与你已知的知识之间的区别这个怎么理解呢， 就是你很多知识， 你只是了解， 而并非已经内化成你的能力， 而你会错误的把它归为你能力的一部分。 比如你说你会python, 但当你真正写的时候， 你却写不出来， 其实你没有掌握 4.诉诸结果 依据某观点成立所产生的结果好坏，来判断一个观点是否正确。 5.稻草人谬误 有意地模仿他人观点，以达到攻击模仿出来的观点而非实际论点的目的。 6.诉诸无关权威 诉诸不是问题专家的人， 其观点更可能是错误的。 例如：信仰中医，而不相信现代医学 7.虚假两难 给出一个有两种范畴组成的有限集合， 并假设讨论范围内的一切事物都必须属于该集合。因此若拒绝其中一个范畴，便只好接受另一个。例如： 世界上只有两种人，男人和女人， 你既然不是女人， 那么你一定是男人。 8.人身攻击 通过攻击一个人本身，而不是攻击其论点，以转移讨论话题，最终达到诋毁其论点的目的。“侮辱性人身攻击” ： 你又不是专家， 你有什么资格发言“处境类人身攻击” ： 对他们的动机作出判断。 你又不是真正关心降低城市犯罪率， 你只是想要人们投票给你。 9.循环论证 你完全错了， 因为你说得没有道理。你应该相信上帝， 否则你会下地狱。 10.从众心理 11.纠缠于沉迷成本 我已经买了电影票了， 电影再烂也要看完。我已经在这段恋情中投入了那么多感情， 现在离开她是不明智的。我已经在这支股票中投了那么多钱了， 现在就收手会亏本的， 说不定以后会涨的。 你应该看的是现在的形势以及你对未来的评估。 12.互惠偏误 先送你一束花， 然后让你捐赠。 诉诸公众 诉诸感情 滑坡谬误 偷换概念 转移话题 因果混淆：相关并不能证明因果。 事后归因 参考资料： 《简单的逻辑学》第5章 《有用的逻辑学》]]></content>
      <categories>
        <category>个人系统</category>
      </categories>
      <tags>
        <tag>逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python-Pandas库学习]]></title>
    <url>%2F2018%2F09%2F27%2F%E6%8A%80%E8%83%BD-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[Pandas简介 Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， Series和DataFrame，Series用于存储一维数据， 而DataFrame存储多维数据。 常用的软件-Anaconda是数据分析中运行python的一款利器， 安装教程可参考Anaconda入门使用指南 读取与写入Excel数据 相对路径与绝对路径 读取文件夹内容 r（转义符）避免路径中的\被转义。路径中不加 \ 则需要把所有的\写成/。 1234567891011import pandas as pdimport numpy as npfrom pandas import Series, DataFrameimport osfile_list = os.listdir(r'E:\工作文件\周报\周数据\测试\0902-0908')print(file_list, '\t')# 读取当前文件夹地址os.getwd() 读取xls格式Excel表 123df = pd.read_excel('E:/工作文件/an-商品汇总-uv.xls')df = pd.read_excel(r'E:\工作文件\an-商品汇总-uv.xls') 读取csv格式Excel表 1234567df = pd.read_csv('E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv')# 读取csv文件，并用 分隔符分割df = pd.read_csv(r'E:\商品汇总.csv', sep = " ")# 只读取文件前两行df = pd.read_csv(r'E:\商品汇总.csv', nrows = 2) 读取显示编码错误 123456789101112131415# 显示错误为：# UnicodeDecodeError: 'utf-8' codec can not decode byte 0xb5 in position 0: invalid start byte# 修改方式df = pd.read_csv(path + '登记用户 20191127.csv',encoding="gbk" )# 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误# 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python# 如果文件格式是 csv usf-8, 那么编码也改为 utf-8-sig# 如果文件格式是 csv格式， 则编码格式为 gbkdf = pd.read_csv('登记用户 20191127.csv', engine = 'python', encoding = 'utf-8-sig') 读取txt格式数据 123456df = pd.read_table(r'C:\Users\Administrator\Desktop\haha.txt', sep = ' ')with open(r'C:\Users\Administrator\Desktop\haha.txt', 'r') as f: df = f.readlines() df = np.loadtxt(r'C:\Users\Administrator\Desktop\haha.txt') # 将txt文件存为numpy数组 读取excel中的sheet名称 12345678910111213141516171819202122232425262728df = pd.read_Excel(r'E:\工作文件\an-商品汇总-uv.xlsx', sheet_name = 'sheet1')# 传入sheet的顺序，从0开始计数df = pd.read_Excel(r'E:\工作文件\an-商品汇总-uv.xlsx', sheet_name = 0)# 读取sheet,并制定文件中的第几行做行索引df = pd.read_Excel(r'E:\工作文件\an-商品汇总-uv.xlsx', sheet_name = 0, index_col = 0)# 读取sheet文件， 并制定文件中的第几列做列索引df = pd.read_Excel(r'E:\工作文件\商品汇总.xlsx', sheet_name = 0, head = 1)# 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列df = pd.read_Excel(r'E:\商品汇总.xlsx', usecols = 0)# uescols = [0,2]# 读取excel中所有sheet，并进行合并rbook = []kong_data = os.listdir(r'F:\省资源位')for file_name in kong_data: data_excel = pd.ExcelFile(r'F:\省资源位\\'+file_name) sheet = data_excel.sheet_names for i in sheet: data_button_rest = pd.read_excel(r'F:\省资源位\\'+file_name, sheet_name= i ) rbook.append(data_button_rest) result_df =pd.concat(rbook)datas_excel = pd.DataFrame(result_df) 将运行的所有数据都展现出来， 而不是只展现最后一条 12from IPython.core.interactiveshell import InteractiveShellInteractiveShell.ast_node_interactivity = "all" 将数据写入Excel表， 并输出 1234567891011121314151617181920212223242526# 写入数据df.to_excel('C:/Users/Administrator/Desktop/'+'商品分类.xlsx')df.to_excel(r'C:\Users\Administrator\Desktop\\'+'商品分类.xlsx')df.to_excel(r'C:\Users\Administrator\Desktop/'+'商品分类.xlsx')# 写入数据，且不带索引df.to_excel('C:/Users/商品分类.xlsx', sheet_name = '首页', index = False)# 设置要导出的列df.to_excel('C:/Users/商品分类.xlsx', sheet_name = '首页', index = False, columns = ['ID', '销量’])# 设置编码格式df.to_excel('C:/Users/商品分类.xlsx', sheet_name = '首页', index = False, encoding = 'utf-8')# 缺失值、无穷值处理df.to_excel('C:/Users/商品分类.xlsx', sheet_name = '首页', index = False, na_rep = 0, # 缺失值用0填充 inf_rep = 0 # 无穷之用0填充 )# 导出csv文件，设置分隔符df.to_excel('C:/Users/商品分类.xlsx', sheet_name = '首页', index = False, sep = ',' ) 将求出的数据存储在excel中的多个sheet中 123456789import pandas as pdfrom openpyxl import load_workbook writer = pd.ExcelWriter('F:/notebooks/zhoushuju.xlsx')btn_navigation.to_excel(writer, sheet_name = '底部导航')shouye_top20.to_excel(writer, sheet_name = '首页top20')writer.save()writer.close() 其他数据格式 12345678910111213141516171819# 从SQL表/库导入数据 import pymysqleng = pymysql.connet(host= '100.129', user = 'root', password = '1234', df = 'db', charset = 'ugf8')query = """select * from android_log """df = pd.read_sql(query, eng)# 导出数据到SQL表 df.to_sql(table_name, eng)``` 8. 常见问题* 当文件有中文时， 可能会出现错误：Initializing from file failed 有中文， 可以用此方法解决```pythonf = open(‘我的文件.csv’)res = pd.read_csv(f) 查看大文件有多少列 1234data = open('E:/用户明细.csv')data1 = pd.read_csv(data, iterator=True)data2 = data1.get_chunk(5)print(data2) 迭代器 对输出数据进行处理pandas的数据输出显示设置 对表中某一列元素进行相同操作 123df[&apos;金额&apos;].apply(lambda x:x+1)df[&apos;金额&apos;] +2 对表中每一个元素进行相同操作 1df.applymap(lambda x:x+1) 123456789101112131415import numpy as npimport pandas as pddf = pd.DataFrame(np.random.randn(150, 150))# pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示pd.set_option('display.width', 100) #数据显示总宽度pd.set_option('max_rows', 100) #显示最多行数，超出该数以省略号表示pd.set_option('max_columns', 100) #显示最多列数，超出该数以省略号表示pd.set_option('max_colwidth', 16) #设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示pd.set_option('large_repr', 'truncate') #数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示pd.set_option('show_dimensions', True) #当数据带省略号显示时，是否在最后显示数据的维度print(df)pd.set_option('max_info_columns', 100) #当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。print(df.info()) 将数据变成小数形式12345678910import pandas as pd inputfile = '../data/electricity_data.xls'outputfile = './electricity_data_analyze1.xls' data = pd.read_excel(inputfile)data[u'线损率'] = (data[u'供入电量']-data[u'供出电量'])/data[u'供入电量'] #data[u'线损率']的类型为series； data[u'线损率']为小数data[u'线损率'] = data[u'线损率'].apply(lambda x: format(x, '.2%')) #Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数 data.to_excel(outputfile, index=False) 描述数据 表信息 1df.info() 显示数据的行列数 1df.shape 查看数据格式dtpyes 1df.dtypes 显示列名、元素 12df.columnsdf.values 添加默认列名 12# 如果数据没有标题行，可用pandas添加默认的列名df = pd.read_excel('x.xlsx', header = None) 显示前数据前5行 12df.head(5)df[['标题', '客户端uv']].head() 显示数据后5行 1df.tail(5) 值 1df.values 读取a列 1df['a'] 找到重复值 1df.duplicated() 显示数据唯一值（unique函数） 12# 数据有0， 是因对缺失值进行了填充df['经纪人级别'].unique() 对第几行数据不读取 12#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取df = pd.read_excel('x.xlsx',skiprows=[2] ) 对缺失值进行识别 12# 所有缺失值显示为Truepd.insull(df) # df.isnull() 计算 1234567891011#计算此data的数量df['data'].value_counts()# 升序计数df['data'].value_counts(ascending = True)# 升序计数并分组df['data'].value_counts(ascending = True, bins = 2)# 计数df['data'].count() 字符和数值之间的转化 1234int() # 转化成整数float() # 转化成浮点数str() # 转化成字符type() # 查看格式 获取数据分布情况 1data.describe() 数据清晰 删除空值 （dropna函数） DataFrame中的空值处理 1234df.dropna(how='any')df.dropna(how = 'all') 123456789用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)参数说明：labels 就是要删除的行列的名字，用列表给定axis 默认为0，指删除行，因此删除columns时要指定axis=1；index 直接指定要删除的行columns 直接指定要删除的列inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。 123# 删除包含 集团 二字 的行read_data = df[- df[&apos;所属省份名称&apos;].isin([&apos;集团&apos;])] 数值删除 删除列 1234567# 删除列, axis=1表示删除列df.drop(["销售额", "ID"], axis = 1)df.drop(columns = ["销售额", "ID"])# 传入列位置df.drop(df.columns[[4,5]], axis =1) 删除行 1234567891011# 删除行，筛选行名df.drop([&apos;一&apos;,&apos;二&apos;], axis = 0)df.drop(index = [&apos;一&apos;, &apos;二&apos;])# 删除行，筛选行索引df.drop(df.index[[0,1]], axis = 0)# 只要年龄小于40的用户df[df[&apos;ID&apos;] &lt; 40] 填充（fillna函数） 123456789# 空值用0填充df.fillna(value=0)df.replace(np.NaN, 0)# 用均值对空值进行填充df['时长'].fillna(df['时长'].mean())# 按照不同列进行填充df.fillna(&#123;'性别' : '男'&#125;) 更改数据格式，更改数据类型 123# 将数据格式int64,改为float格式df['大区'].astype('float64') 更改列名称, 修改列名。 123df.columns = [['导航','uv', 'pv','户均点击']]df.rename(columns=&#123;'IM渠道': '渠道'&#125;) 添加修改索引 12345678# 添加索引df.index = [1,2,3,4]# 修改索引,重新设置df = df.set_index['标题']# 重命名索引df.rename (index = &#123;1: '一'&#125;) 重置索引 12345678910DataFrame.reset_index(level=None, drop=False, inplace=False)# 默认将所有index转化成columnsdf.reset_index()#将第0级索引转化为 columnsdf.reset_index(level=0)# 将原索引删除，不加入columnsdf.reset_index(drop = True) 删除重复值 Pandas删除数据的几种情况 12345678# 默认第一次出现的保留，其余删除df['门店'].drop_duplicates()# 最后一次出现的保留，其余删除df['门店'].drop_duplicates(keep = 'last')# 多列去重df.drop_duplicates(subset = ['姓名', '唯一识别码']) 对列表内的值进行替换 123456789# 一对一替换df['ID'].replace('1053', '110')# 多对一替换df['ID'].replace(&#123;'1053': '110', '230': '33'&#125;)df.columns.str.replace(' ', '_') 对数据进行处理 对两个数据进行合并- merge, join, concat函数 merge 123456789101112131415161718192021222324252627# 按照轴把多个对象拼接起来pd.concat(df1, df2)# join函数适合根据索引进行合并，合并索引相同但列不同的对象# merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup# 将left和right进行合并pd.merge(left, right)# 指定以key为键进行合并pd.merge(left, right, on = 'key') pd.merge(name_3, name_1, left_on = ['ming'], right_on = ['标记'])# key2列不相同的部分会直接舍弃掉pd.merge(left, right, on = ['key', 'key2'])# 保留key2列不相同的部分pd.merge(left, right, on = ['key', 'key2'], how = 'outer')# 不相同的部分指定以左表为基准pd.merge(left, right, on = ['key', 'key2'], how = 'left')# 重复列名处理# pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。pd.merge(df1,df2, on = 'id', suffixes= ['_L', '_R']) concat函数, 按照标题进行拼接 12345678# 普通合并pd.concat([df1, df2])# 索引设置pd.concat([df1, df2], ignore_index= True)# 合并后删除重复值pd.concat([df1, df2], ignore_index = True).drop_duplicates() 对数据进行排序 12345678910111213# 按照ID进行升序排列# 按照ID进行降序排列df.sort_values(by = ['ID'], ascending = False)# 在保证销售额列降序的情况下，对ID列进行升序处理data.sort_values(by = ['销售额', 'ID'],ascending = [False, True], inplace = True)# 默认将ID是缺失值的列显示在最后面df.sort_values(by = ['ID'])# 将ID是缺失值的列显示在最前面df.sort_values(by = ['ID'], na_position = 'first') 对数值进行排名 1234567891011# 对应Excel中的 rank.avg函数df['ID'].rank(method= 'average')# 按值在所有的排列数据中出现的先后顺序排名df['ID'].rank(method = 'first')# 与Excel中rank.eq 函数的功能一样df['ID'].rank(method = 'min')# 与min相反，取重复值对应的最大排名df['ID'].rank(method = 'max') 对数据进行分组 123456789# 如果price列的值&gt;3000，group列显示high，否则显示lowdf[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)# 对符合多个条件进行分组# 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1 对数据进行分列 12345678pd.DataFrame((x.split('网') for x in df['客户注册渠道']), index=df.index,columns=['客户注册渠道','size'])&lt;!-- df = pd.DataFrame((x.split('.') for x in 首页jhrj_1['所属省份编码']), index=df.index,columns=['客户注册渠道','size']) --&gt;# 分列完对数据进行合并df1 = pd.merge(首页jhrj_1, df, left_index = True, right_index = True) 新增一列 123data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4] 对数据进行切分 123456# 指明切分区间pd.cut(df[&apos;年龄&apos;], bins = [0,3,6,10])# 将数据切成3份pd.qcut(df[&apos;年龄&apos;],3 ) 取出的数据， 指定取到小数点几位数？ 123456# 取到小数点后3位for i in a : print(&quot;%.3f&quot;%c)# 设置小数点位数，四舍五入df[&apos;cnts&apos;].round( decimals = 2) 将 list 格式转化成 DataFrame 格式 1df = pd.DataFrame(data, columns = [&apos;省份&apos;, &apos;按钮名称&apos;, &apos;uv&apos;, &apos;pv&apos;] ) 数据选择 选择某一列/ 某几列 123456789101112# 普通索引- 根据名称进行选择df['客户端uv']df[['标题', '客户端uv']]# 位置索引 / 切片索引， 根据所在第几列进行选择# : 表示选择所有的行， 逗号后面表示要选择列的位置区域df.iloc[:, [0,2]] # 获取第1列和第3列的数值 选择某一行/某几行 12345678910111213# 普通索引-locdf.loc['第一行']df.log[['第一行', '第二行']]# 位置索引，切片索引 # 选择第一行df.iloc[0]# 选择第一行和第二行df.iloc[[0,1]] 根据指定条件进行筛选 123456789101112131415161718# 选择年龄小于200的数据df[df['年龄'] &lt; 200] #年龄小于200，且id小于300df[(df['年龄'] &lt; 200) &amp; (df['id'] &lt; 300)]df[np.logical_and(df['年龄'] &gt; 10, df['id'] &gt; 5)]# A列值大于10，或 B列值大于5df[(df['A'] &gt; 10) | (df['C'] &gt;20)]df[np.logical_or(df['A'] &gt; 10, df['C'] &gt; 20)]# 当 A列的值大于13时， 显示B，c列的值df[['B','C']][df['A']&gt;13] 行列同时选择 普通索引+普通索引选择指定的行和列 1df.loc[['第一行', '第三行'], ['订单号’, 'ID']] 位置索引 + 位置索引选择指定的行和列 123df.iloc[[0,1], [0,2]]df.iloc[0:2, 1:2] 布尔索引+ 普通索引 1df[df['年龄']&lt; 200][['订单编号', 'ID']] 切片索引+ 普通索引 1df.ix[0:2, ['订单变化', 'ID']] 按条件进行提取 12345678910111213# 用isin函数进行判断# 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录df[df.A.isin((10, 13))]# 查看这一列是否包含某个值df['级别'].isin(['A3']) # 先判断是否包含，然后将符合条件的数据提取出来。df.loc[df['级别'].isin(['A3','M4'])] 数据汇总 对数据进行分类 - group by函数 12345678# 按照某列分组求和df.groupby('渠道').sum()# 按照多列分组求和df.groupby(['渠道', 'ID']).sum()# 对分组后的结果进行重新索引df.groupby('渠道').sum().reset_index() aggregate方法 12345678# 对同一列 先做计数汇总运算，再做汇总运算df.group('渠道').aggregate(['count', 'sum'])# 针对不同的列做不同的汇总运算df.groupby('渠道').aggregate(&#123;'ID' : 'count', '销量' : 'sum'&#125;) pivot_table-数据透视表 pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’) data: 数据values: 对应的值index: 对应的行columns: 对应的列aggfunc : 对values的计算类型fill_value : 对空值的填充值margins: 是否显示合计列dropna: 是否删除缺失值，如果为真，则一整行全删除margins_name: 合计列的列名 123# 为方便处理， 一般需要对结果进行重置索引pd.pivot_table(df, values = 'ID', columns = '渠道', index = '客户分类', aggfun = 'count').reset_index() 对数据进行映射 12# 用map函数对字典进行映射， 新加一列data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper) 数据采样 12345678910111213# 简单随机抽取sampledf.sample(n=3)# 设置采样权重# 需要对每一行进行权重设置，列表行数少可行，过多不可行# 假设有4行数据，设置采样权重weights = [0, 0, 0.5, 0.5]df.sample(n=4, weights=weights)## 确定采样后是否放回# 采样后放回，Truedf.sample(n=6, replace=True) 统计计算 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849# 计算每一列的个数df.count()# 计算每一行的个数df.count(axis = 1)# 求和df.sum()df.sum(axis = 1)# 中位数df.median()# 求和df.sum()# 求最大值df.max()# 求最小值df.min()# 求众数df.mode()# 求方差df.var()# 求标准差df.std()# 求分位数df.quantile(0.75, axis = 1)# 描述统计 describe函数#自动生成数据的数量，均值，标准差等数据#round（2）,显示小数点后面2位数，T转置df.describe().round(2).T# 标准差std()df['经纪人响应时长'].std()# 协方差covdf['经纪人当天发送消息数'].cov(df['客户当天发送消息数']# 相关性分析corrdf['客户当天发送消息数'].corr(df['经纪人当天发送消息数']) 数值计数 123456789# 查看不同值出现的次数， #默认进行排列df['ID'].value_counts()# 查看不同值出现的占比, #默认进行排列df['ID'].value_counts(normalize = True)# 查看不同值出现的占比， 不进行排列df['ID'].value_counts(normalize = True, sort = False) 插入数据 12# 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据df.insert(2, '销售品id', ['01', '02']) 对数据进行转置 1df.T 索引重塑 12345# 将表格型数据转化成树形数据df.stack()# 将树形数据转化成表格型数据df.stack().unstack() 长宽表转换 宽表 长表 将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。 1df.pivot_table(index = ['computer','name'], columns = 'year', values = 'sale') 将宽表转换成长表 12# 方法1： melt()df.melt(id_vars = ['company', 'name'], var_name = 'year', value_name = 'sale') 12# 方法1： stack()# 在保持行索引不变的前提下，将列索引转化成行索引 对字符串进行操作 大小写 12a.lower()a.upper() 长度 12# 长度a.len() 去除空格 123a.strip()a.lstrip()alrstrip() 切分与分列、 合并 123456789101112131415161718192021222324252627282930313233343536#切分a.split('_')# 切分， 且成为新列a.split('_', expand = True)# 对切分进行限制, 只切1次a.split('_', expand = True, n=1)# 查看是否包含a.str.contains('A')# 分列s.str.get_dummies(sep= '|')df = 首页jhrj_1['所属省份编码'].str.split('.') # expand=True 可以把用分割的内容直接分列首页jhrj_1["所属省份编码1"]=df[0]# 切分并在原表中进行合并首页jhrj_2 = pd.merge(首页jhrj_1, pd.DataFrame(首页jhrj_1['所属省份编码'].str.split('.', expand = True) ), how = 'left', left_index = True, right_index = True)# pandas对dataframe中的某一列使用split做字符串切割：# words = df['col'].split()# 报错：# AttributeError: 'Series' object has no attribute 'split'# 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split# words = df['col'].str.split()对两列数据进行合并df['省份_名称'] = df['省份'].str.cat(df['名称'],sep = '_')首页jdt_1['省份_标题'] = 首页jdt_1['所属省份编码'].astype(str).str.cat(首页jdt_1['标题'],sep = '_') 日期-时间 当前日期 123456789101112131415161718192021import timefrom datetime import datetime, time, timedelta# 返回当前日期和时间datetime.now()# 返回当前时间的年datetime.now().year# 返回当前时间的月份datetime.now().month# 返回当前日期的日期datetime.now().day# 返回当前时刻在周几# python周几默认是从0开始的datatime.now.weekeday() + 1# 返回当前时间所在周的周数datatime.now.isocalendar()[1] 返回指定日期 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 只展现日期datetime.now.date()# 只展示时间datetime.now.time()# 显示当前日期datetime.now().strftime('%Y-%m-%d')#2018-12-22datetime.now.strftime('%Y-%m-%d %H:%M:%S")# 将时间格式转化成字符串格式now=str( datetime.now())# 将字符串格式转化为时间格式parse(str_now) # 往后推一天date+ Day(1)# 往后推一个小时date + Hour(1)# 往前推一天date - Day(1)# 昨天ysd = now - timedelta(days = 1)#本月第一天ysd = now.replace(day = now.day-1)# 上月最后一天lastmonth_end = now.replace(day = now.day-1) - timedelta(days=1)# 上月第一天lastmonth_first = now.replace(month = now.month-1, day =1)lastmonth_first = lastmonth_end.replace(day=1)#提取2016年11月2号的数据df['2016-11-02' : '2016-11-02']dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)# 构造时间序列， 构造十个日期， 每12分钟一次pd.Series(pd.date_range(start = '2018-09-17 22:43:00', periods = 10, freq = '12min'))# 取所有8点到12点之间的数据, 不包含8点和12点data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]# 包含8点到12点data.between_time('08:00', '12:00')import datetimefrom dateutil.relativedelta import relativedelta begin = datetime.date(2019,1,1)end = datetime.date(2019,1,31)for i in range(1,10): first = d + relativedelta(months=i) last = end + relativedelta(months=i) 处理月与月之间时间不连续问题 1234567891011121314151617181920212223import time from datetime import datetime, time,timedelta# 指定昨天df = datetime.now() - timedelta(days = 1)# 月初第一天startdates = (df.replace(day = 1)).strftime('%Y-%m-%d')# 昨天enddates = (df - timedelta(days = num)).strftime('%Y-%m-%d')# 上月第一天last_moth_f = df.replace(month =df.month-1, day=1).__format__("%Y-%m-%d")# 上月最后一天last_moth_e = df.replace(month = df.month-1, day =1).strftime('%Y-%m-31')# 目标值月份mubiao_dates = startdates[0:7]# 将字符串转换为日期df = datetime.now() - timedelta(days = 1)day1 = (df.replace(day = 1)).strftime('2019-11-%d')first = datetime.strptime(day1, "%Y-%m-%d") 自动发送邮件12import smtplibfrom email import encoders]]></content>
      <categories>
        <category>数据分析技能</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个好用的插件]]></title>
    <url>%2F2018%2F09%2F25%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[一个好用的插件神器最近发现了一个特别能够提高生活幸福感的插件：Tampermonkey, 中文翻译过来叫做油猴。 安装好这个插件最大的作用， 就是我们可以从Greasy Fork这个网站来安装我们需要的脚本， 从而极大的提高浏览器的使用效率。 比如：我们在Greasy Fork网站找到智能划词翻译这个脚本， 然后点击安装脚本即可。安装完成脚本之后， 我们打开一个英文网页，对需要翻译的段落进行框选，点击翻译按钮，就可实现在原网页查看中文翻译， 对于我这种英语不好的人来说， 有很大的帮助。 我们还可以安装微博过滤设置脚本，来对微博页面进行个性化设置， 自己设置完成后的微博页面是这个样，相对于原版网页来说简洁了不少。 也可安装微博浮图脚本， 查看微博图片也比较方便， 只需把鼠标光标放在图片上即可 如果想找资料或电影资源的话， 也可以下载豆瓣资源下载大师, 或百度网盘直接下载助手等脚本， 当然，有能力还是要支持正版。 例如：安装豆瓣资源下载大师脚本后， 打开豆瓣电影网页， 页面是这个样子。 在Greasy Fork这个网站还有很多别人写好的脚本， 比如百度文库文字复制、购物党自动比价工具、 Download Youtube videos and subtitles等好用的脚本， 可以根据自己的需要进行安装。]]></content>
      <categories>
        <category>生活资料</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人资料收集]]></title>
    <url>%2F2018%2F08%2F05%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[互联网工具 指数类 百度指数 http://index.baidu.com/v2/index.html#/ 微博指数 https://data.weibo.com/index/ 各种数据指数 http://data.chongbuluo.com/ 企业类 企业信用信息公示系统 http://www.gsxt.gov.cn/index.html 国家统计局 http://data.stats.gov.cn/ 企查查 财报类 上交所http://www.sse.com.cn/ 深交所http://www.szse.cn/ 港交所https://www.hkexnews.hk/ 美国上市公司https://www.sec.gov/ 同花顺财经http://data.10jqka.com.cn/ 分析工具 语义分析系统http://ictclas.nlpir.org/nlpir/ 腾讯文智 https://nlp.qq.com/semantic.cgi#page2 echarts https://echarts.baidu.com/ 在线图片识别文字 https://ocr.wdku.net/ 问卷调查 https://www.wjx.cn/ 视频： 科普-计算机科学速成课 纪录片-设计的艺术 纪录片-小兵小赵 访谈-子夜.大学之殇 月球视频 最后的演讲 性，死亡与生命的意义 统计学：statistics —— CrashCourse 锵锵行天下 蓝色星球 风味人间 成功的原则 youtube视频：Rachel’s English 纪录片-生门 电影-生门 纪录片-人生果实 《人类星球》梦与狂想的王国《尘与雪》《人生七年》《身份的焦虑》 《铁西区》《和凤鸣》《原油》 书： The Non-Designer’s Design Book (4th Edition) 英文原版免费编程书籍 网站： RSS收集网站 知笔墨 微软海底机房摄像头直播 全球免费摄像头直播 设计类网站 漫画-海报 Our the in World 中国知网 统计学可视化 各种书籍下载 cnki免费下载文献：账号：hqwytsg015 密码：cnki015 北京值得去的地方 纪录片——AlphaGo youtube最受欢迎的频道 写作网站 颜色选择 博客 TED:阅读全世界 阮一峰的个人网站 追求对知识概念和原理进行更合适的描述 《用数据讲故事》作者博客 万维钢的博客 w4lle’s Notes = android技术博客 stormzhang 廖祜秋的博客 最好的数据分析博客汇总 what’s up - The Longest Way 数据分析类网站 Kaggle 统计之都 纪杨的网站数据分析笔记 蓝鲸的网站分析笔记 Cloga的互联网笔记 陈老师的天善智能博客文章 秦路-文章 数据可视化网站 一起大数据 数据分析问答 数学公式转换MD格式 信息图制作 简历制作网站 多人协同任务清单 GA小站-一个Google Analytics 和Adobe Analytics 经验分享平台 数据可视化网站 https://datavizcatalogue.com/ZH/%E6%90%9C%E7%B4%A2.html https://plot.ly/python/ https://datavizproject.com/# TED 如何掌控你的自由时间 —— 时间=选择 提升自信的技巧 —— 除非你做到了，否则没有人相信你 【TED】科技公司如何控制你的注意力 我从生活和写作中学到了12个真理 - 一个一个写，改初稿， 如果不知道写什么，就写你自己经历的事情 收入如何影响人们的生活方式——世界各国， 收入水平导致的生活条件改变都差不多官方网站 图表的魔力——图表能够让人更快的理解信息 如何利用大数据做出正确的判断-用大量数据去做分析， 去深入了解， 但要想成功， 就需要冒一定的风险 大数据时代：如何避免数据迷信？-不光要依靠大数据， 也要依靠厚数据，让解决问题的方法更加多元化 李开复：人工智能如何拯救人类-ai让我们明白我们为何为人 开启情绪识别的大门-用算法来识别人类情绪 有趣的故事 盗醉猴 植物修炼成精之后还有没有细胞壁？ NBA 感人的比赛或者画面有哪些？ 有没有一部电影让你在深夜中痛哭？ 为什么法海要阻止白素贞和许仙在一起？ What are some amazing pictures one has to see twice to understand? 21世界100部伟大的电影 世界运行的潜在规律 这个世界要改变你，会潜移默化的改变你，如果你这一天不去努力，那么你两年之后再看回头看你自己，会发现自己并没有取得什么成就。 如果你要理解某些知识，你就要结合你自己的情况去理解学习，不管你觉得作者说的怎么好，你都要切合你自己的实际情况，不管你的实际情况是多么的烂。 人类的进化是有一定的规律的，你要认清这些规律，并利用好它。 比如： 人的大脑是有适应性的，你每天去刻苦练习就是会进步。 人都是有恐惧心理的。 人都是要吃饭穿衣服的。 人都是善于遗忘的。 人就是佩服逻辑清晰的人，逻辑清晰的人就是能两三句让你理解到事物的本质。 人都是喜欢有自己主见的人，而不是人云亦云的人，不是只会复述别人话的人。 让你坚持每天都做一件事情的时候，人们就是会对你产生佩服之情。 当你去学习，去面对的时候，你就不会感受到那么的恐惧与难受。 你一直拖延下去，你自己只会更加的难受。 人就是喜欢整洁，干净有序的环境，因为潜意识里人是向往健康的。 人的身体总体是喜欢稳定的， 你一运动就会心跳加速，一读书就会让脑细胞大量活跃，这些是身体尽量避免的， 但正因为身体有稳定性，所以你坚持一段时间，突破了临界点，人的身体会变得更加强壮，以便达到一个新的舒适区。]]></content>
      <categories>
        <category>生活资料</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python基础学习]]></title>
    <url>%2F2018%2F07%2F25%2F%E6%8A%80%E8%83%BD-python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[数 整数-int 123i = 1# 查看变量的类型type(i) 浮点数-float 12340.2 * 0.10.020000000000000004 浮点数在计算机中表输入的十进制浮点数仅由实际存储在计算机中的近似的二进制浮点数表示,二进制来表达 1/10 是一个无限循环小数:0.0001100110011001100110011001100110011001100110011…,Python 只打印机器中存储的二进制值的十进制近似值。 如何限制显示的小数点个数 1print(&quot;&#123;:.4f&#125;&quot;.format(0.1*0.4)) 字符串-str 字符串的表示方式： python中有3种表示字符串的方式——单引号，双引号，三引号。 单引号和双引号的作用是相同的, 但双引号中可以将包含的特殊字符单引号输出，而单引号要输出’需要/转义 123456str = &apos; \&apos;hello world\&apos; &apos;print(str)str = &quot;&apos;hello python&apos;&quot;print(str) 三引号的用法特殊，三引号中可以输入单引号、双引号或换行符等字符,也可用作制作文档字符串 123str = &apos;&apos;&apos;&apos;hello&apos;/&quot;world&quot;&apos;&apos;&apos;print(str) 常用的字符串处理方法 1234# 重复字符串sta = &apos;hi&apos;print (sta * 2) 1234# 切片sta = &apos;1234567890&apos;print(sta[2:9:2]) 123456789#去除空格name = &apos; zhang yu &apos;# 去除左侧空格print(name.lstrip())# 去除右侧空格print(name.rstrip())# 去除两侧空格print(name.strip()) 123456789101112# 分割字符串#split()函数通过制定分隔符对字符串进行切片name = &quot;zhang and yu and han&quot;print(name.split())print(name.split(&apos; &apos;,2))print(name.split(&apos; and &apos;))# partition()函数将目标字符串分割为两个部分，返回一个三元元组（head,sep,tail），包含分割符url = &quot;https://zhangandyu.github.io//2018&quot;print( url.partition(&quot;//&quot;))print(url.rpartition(&quot;//&quot;)) 1234567# 替换字符串#str.replace(old, new,max)# max 可选字符串不能超过max次str = &quot;this is a apple&quot;print (str.replace(&quot;is&quot;, &quot;was&quot;)) print (str.replace(&quot;is&quot;, &quot;was&quot;, 1)) 1234# 拼接字符串a = &apos;_&apos;name = (&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)print(a.join(name)) 12345678910#查找字符串是否包含子字符串#str.find(str, beg=0, end=len(string))a = &apos; this is a apple&apos;b = &apos;is&apos;#从下标3开始，查找在字符串里第一个出现的子串，返回结果：3print(a.find(b,2)) #从下标5开始，查找在字符串里第一个出现的子串，返回结果：6print(a.find(b,5)) 12345678910111213#判断字符串是否以指定的前后缀结尾# str.startswith(str, beg=0,end=len(string))a = &apos;this is a apple&apos;b = &apos;th&apos;c = &apos;is&apos;print(a.startswith(b))print(a.startswith(c,2))a = &apos;this is a apple&apos;b = &apos;le&apos;c = &apos;app&apos;print(a.endswith(b))print(a.endswith(b,10)) 1234567891011121314151617181920212223#其他函数# 检测数字str.isdigit() # 检测字符串是否只由数字组成str.isnumeric() # 检测字符串是否只由数字组成,这种方法是只针对unicode对象str.isdecimal() # 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象# 检测字母str.isalpha() # 检测字符串是否只由字母组成# 检测字母和数字str.isalnum() # 检测字符串是否由字母和数字组成# 检测其他str.isspace() # 检测字符串是否只由空格组成str.islower() # 检测字符串是否由小写字母组成str.isupper() # 检测字符串中所有的字母是否都为大写str.istitle() # 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写str.capitalize() # 将字符串的第一个字母变成大写,其他字母变小写str.lower() # 转换字符串中所有大写字符为小写str.upper() # 将字符串中的小写字母转为大写字母str.swapcase() # 对字符串的大小写字母进行转换max(str) # 返回字符串 str 中最大的字母min(str) # 返回字符串 str 中最小的字母len(str) # 返回字符串的长度str(arg) # 将 arg 转换为 string 布尔值 and-逻辑与 or-逻辑或 not-逻辑非 not的优先级大于and和or的优先级，而and和or的优先级相等。 逻辑运算符的优先级低于关系运算符，必须先计算关系运算符，再计算逻辑运算符。 变量命名规则 只能包含字母、数字和下划线 不能包含空格 不能将python关键字和函数名用作变量名 变量名应简短又具有描述性 慎用小写字母l和大写字母O 序列 什么是序列 序列是Python中最基本的数据结构。 python中有6个序列的内置类型,包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。 对于序列，都可以使用一下操作： 索引 切片 加 乘 成员检查in和not in 计算序列的长度len() 取序列中的最大、最小值max()和min() 列表 列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现 列表适合用于存储在程序运行期间可能变化的数据集。 列表是可以修改的， 这对处理网站的用户列表或游戏中的角色列表至关重要。 列表对象方法 12 list.append(x)# 把一个元素添加到列表的结尾 12 list.extend(x)# 将一个给定列表中的所有元素都添加到另一个列表中 12 list.insert(i,x)# 在指定位置插入一个元素 12list.remove(x)# 删除列表中值为 x 的第一个元素 12list.pop(i)# 从列表的指定位置删除元素，并将其返回 12 list.clear()# 从列表中删除所有元素 12list.index(x)# 返回列表中第一个值为 x 的元素的索引 12list.count(x)# 返回 x 在列表中出现的次数 12 list.sort()# 对列表中的元素进行排序 12list.sorted()# 对列表中的元素进行临时排序 12list.reverse()# 倒排列表中的元素 12list.copy()# 返回列表的一个浅拷贝 12list.len(x)#返回列表的长度 用列表实现栈和列队 栈是一种后进先出的数据结构，我们可以使用列表的append()和pop()方法了实现 123a = [1,2]a.append(3) #入栈a.pop() # 最后一个元素出栈 队列是一种先进先出的数据结构，我们可以使用列表的append()和pop(0)方法了实现 123a = [2,1]a.append(1) # 入队列a.pop(0) # 第0个元素出队列 列表推导式 为从序列中创建列表提供了一个简单的方法。 普通方法 12345a = []for i in range(20): a.append(i ** 2)print(a)# i 依然存在 123456b = []for x in [1,2,3,4]: for y in [2,3,4]: if x !=y: b.append((x,y))print(b) 推导式 12a = [i**2 for i in range(20)]print(a) 1[(x,y) for x in [1,2,3,4] for y in [2,3,4] if x !=y] 12from math import pi[str(round(pi, i)) for i in range(1, 16)] 12345matrix = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]][[row[i] for row in matrix] for i in range(4)] 元组 元组为不可变得列表， 在需要创建一系列不可修改的元素时使用。 只有一个元素元组中只包含一个元素时， 需要在元素后面添加逗号，否则括号会被当做运算符使用 12zy = (2,)zy[0] 修改元组 对元组进行连接组合 1234na = (&apos;z&apos;, &apos;y&apos;)me = (&apos;y&apos;, &apos;u&apos;)name = na + meprint(name) 给元组变量赋值 123na = (&apos;zy&apos;, &apos;yu&apos;)na = (&apos;y&apos;, &apos;u&apos;)print(na) 元组运算符 123456789101112# 计算元组个数len((2,45, 67, 8, 9))# 连接(1,2,3, 4) + (4, 5, 6)# 复制(1,2,3, 4)* 3#迭代 for i in (12, 3,4 , 5): print(i) 将列表转换为元组 123list = [ &apos;z&apos;, 1, 2, 3, 4, &apos;u&apos;]tup = tuple(list)print(tup) 映射和集合字典 字典：将相关信息关联起来 访问字典 12man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;print(man[&apos;name&apos;]) 添加键-值对 12man[&apos;home&apos;] = &apos;xian&apos;man 修改字典中的值 123man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;man[&apos;hige&apos;] = 170man 删除键-值对 123man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;del man[&apos;xingbie&apos;]man 遍历所有的键-值对 1234man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;for key, value in man.items(): print( key,&quot;:&quot; , value) 分别遍历所有的键-值 1234567man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;for key in man.keys(): print( key) for value in man.values(): print(value) 按倒序顺序遍历分别遍历所有的键-值 12for key in sorted(man.keys()): print( key) 字典列表 12345678man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;alien = &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;:5&#125;computer = &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 40&#125;alients = [man, alien, computer]for i in alients: print(i) 在字典中存储列表 12345678910province = &#123; &apos;name&apos;:[&apos;zhangyu&apos;, &apos;han&apos;, &apos;dou&apos;], &apos;home&apos;:[&apos;xian&apos;, &apos;beijing&apos;], &apos;hige&apos;:[165, 170, 370, 2389]&#125;for na, las in province.items(): for la in las: print(na, la) 在字典中存储字典 12345678province = &#123; &apos;man&apos; :&#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;, &apos;alien&apos; : &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;: 5&#125;, &apos;computer&apos; : &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 10&#125;&#125;for i, a in province.items(): print(i, a) 字典键的特性 不允许同一键出现两次，创建时如果同一键被赋值两次， 后一个值会被记住。键必须不可变， 可以用数字，字符串，或元组充当，但不能用列表 12dict = &#123;&apos;name&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;dict python中关于字典的函数 1234567891011121314151617181920212223242526272829303132333435# 删除字典内所有元素dict.clear()#返回一个字典的浅复制dict.copy()# 创建字典seq = (&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;)dict = dict.fromkeys(seq,10)dict#返回指定键的值，如果值不在字典中返回设定值dict1.get(&apos;Google&apos;, 40)#和get()类似, 但如果键不存在于字典中，将会添加键并将值设为设定值dict1.setdefault(&apos;google&apos;, &apos;20&apos;)dict1#把字典dict2的键/值对更新到dict里dict1=&#123;&apos;Google&apos;: 10, &apos;Runoob&apos;: 10, &apos;Taobao&apos;: 10&#125;dict2 =&#123;&apos;na&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;dict1.update(dict2)dict1#以列表返回可遍历的(键, 值) 元组数组dict.items()#以列表返回一个字典所有的键dict.keys()#以列表返回字典中的所有值dict.values() 集合类型 集合是一个无序的，不重复的数据集合。集合作用有以下两点： 去重： 把一个还有重复元素的列表或元组等数据类型变成集合， 其中的重复元素只出现一次，用set()方法 1234567891011121314#使用大括号之间创建集合f = &#123;1, 2, 2, 2, &apos;a&apos;&#125;print(f)print(type(f))# 用set()方法a = [1, 2, 2, &apos;a&apos;, &apos;a&apos;]b = (1,2,2, &apos;a&apos;, &apos;a&apos;)c = set(a)d = set(b)e = set()print(c)print(d)print(e) 进行关系测试：测试两组数据之间的交集，差集，并集等数据关系 12345678910111213141516171819202122232425262728293031323334# 查看集合的相关函数help(set)a = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;d&apos;,&apos;e&apos;]b = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;b&apos;]c = set(a)d = set(b)# 取交集e = c.intersection(d)print(e)# 取并集f = c.union(d)print(f)# 取差集（无重复）g = c.difference(d)print(g)#对称差集&quot;（不同时在c,d中存在）h = c.symmetric_difference(d)print(h)#判读是否为子集i = c.issubset(d)print(i)# &quot;判读是否为超集&quot;j = c.issuperset(d) #检查是否有相同元素,没有返回Truek = c.isdisjoint(d) 条件和循环if语句 if-else语句 12345age = 17if age &gt;= 18: print( &quot;you can seee six video&quot;)else: print(&quot; you should study&quot;) if-elif-else 语句 1234567age = 18if age == 18: print( &quot;you should find girlfriend&quot;)elif age&gt; 18: print(&quot;you can see six video&quot;) else: print(&quot; you should study&quot;) 多个elif 1234567891011age = 80if age == 18: print( &quot;you should find girlfriend&quot;)elif 18&lt;age&lt;30: print(&quot;you can see six video&quot;) elif 30&lt; age &lt; 60: print( &quot;you should go to work&quot;)elif age&gt; 60: print(&quot;you should go to tourism&quot;)else: print(&quot; you should study&quot;) if语句中的and和or 1234567num = 9if num &gt;= 0 and num &lt;= 10: print (&apos;hello&apos;)num = 10if num &lt;= 0 or num &gt;= 10: print(&apos;zy&apos;) while语句 for循环主要用于遍历迭代的对象， while循环主要用于条件判断 1234567891011numbers = [12, 21, 48, 8, 1230, 5, 7]even =[]odd = []while len(numbers) &gt; 0 : number = numbers.pop() if(number % 2 == 0): even.append(number) else: odd.append(number) print(even) continue 用于跳过该次循环 123456789101112numbers = [12, 21, 48, 8, 1230, 5, 7]even =[]odd = []while len(numbers) &gt; 0 : number = numbers.pop() if(number % 2 == 0): even.append(number) else: odd.append(number) continue print(even) break 用于退出循环 12345678910111213numbers = [12, 21, 48, 8, 1230, 5, 7]even =[]odd = []while len(numbers) &gt; 0 : number = numbers.pop() if(number % 2 == 0): even.append(number) else: odd.append(number) continue print(even) break 循环使用 else 语句 123456count = 0while count &lt; 5: print (count, &quot; is less than 5&quot;) count = count + 1else: print (count,&quot; is not less than 5&quot; ) for语句for 循环可以遍历任何序列的项目 12for letter in &apos;python&apos;: print(letter) 函数 函数是组织好， 可重复使用的，用来实现有关功能的代码段。函数能提高应用的模块行，和代码的重复利用率。 定义函数123456def zhangyu(): &quot;&quot;&quot;显示名称&quot;&quot;&quot; print(&quot;zhangandyu&quot;) # return[&apos;a&apos;] zhangyu() 向函数传入参数 1234567def zy(name): print(&apos;Hello, &apos; + name.title() + &apos;!&apos;)zy(&apos;zhangyu&apos;)# name 为形参#&apos;zhangyu&apos;为实参 位置实参 1234567def describe_pet(animal_type, name): print(&apos;I have a &apos; + animal_type) print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)describe_pet(&apos;dog&apos;, &apos;huabao&apos;)# 警惕位置混淆describe_pet(&apos;huabao&apos;, &apos;dog&apos;) 关键字实参 123456def describe_pet(animal_type, name): print(&apos;I have a &apos; + animal_type) print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)describe_pet(name = &apos;huabao&apos;, animal_type = &apos;dog&apos;)# 位置混淆也没有关系 设置默认值 12345678910def describe_pet(name,animal_type=&apos;dog&apos;): &quot;&quot;&quot;设置animal_type的默认参数是dog&quot;&quot;&quot; print(&apos;I have a &apos; + animal_type) print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)# 默认参数不改变describe_pet(name = &apos;huabao&apos;)# 默认参数改变describe_pet(&apos;huxbao&apos;, &apos;cat&apos;) 返回值函数返回的值可以使用return语句将值返回到调用函数的代码行中。从而将程序的大部分繁重工作移到函数中取完成。 12345def zy_name(first_name, last_name): name = first_name + last_name return name.title()zy_name(&apos;zhang&apos;, &apos;yu&apos;) 让实参变成可选的 12345678910def zy_name(first_name, last_name, middle_name =&apos; &apos;): if middle_name: name = first_name +&apos; &apos;+ last_name +&apos; &apos; + middle_name else: name = first_name + &apos; &apos; + last_name return name.title()zy_name(&apos;zhang&apos;, &apos;yu&apos;)zy_name(&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;) 返回字典 1234567def build_person(first_name, last_name, age=&apos;&apos;): person = &#123;&apos;first&apos; : first_name, &apos;last&apos;: last_name&#125; if age: person[&apos;age&apos;] = age return personbuild_person(&apos;zhang&apos;, &apos;yu&apos;, age=25) 传递列表 12345def get_user(names): for name in names: print(name.title())zy = [&apos;a&apos;, &apos;b&apos;, &apos;v&apos;]get_user(zy) 传递任意数据的实参 12345def get_world(* names): for i in names: print(i)get_world(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;) 使用位置实参和任意数量实参 必须将接纳任意数量实参的形参放到最后 1234def get_world(size, *names): for i in names: print(str(size) + i)get_world( 1,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;) 使用任意数量的关键字实参 1234567def get_user(**user_info): profile = &#123;&#125; for key, value in user_info.items(): profile[key] = value return profileuser_profile = get_user(location = &apos;princeton&apos;, field = &apos;physics&apos;, home = &apos;xian&apos;)print(user_profile) 递归函数如果一个函数在函数内部，调用自己本身，这个函数就是递归函数。 12345def fan(n): if n == 1: return 1 else: return n * fan (n-1) 但递归函数在数特别大的情况下会导致栈溢出， 例如： 1fan(10000) 变量的作用域 局部作用域 1234def func(): name = &quot;zhangyu&quot;print(name) 运行报错， 因为name变量只在func()函数中生效，而在全局无法调用。 作用域链 12345678name = &quot;lzl&quot;def f1(): name = &quot;Eric&quot; def f2(): name = &quot;Snor&quot; print(name) f2()f1() f1()函数执行，最后输出snor，Python中有作用域链， 变量会由内到外找，先去自己作用域找，自己没有再去上级找，直到找不到报错。 终极作用域 1234567891011name = &apos;zhang&apos;def f1(): print(name)def f2(): name = &apos;yu&apos; return f1 ret = f2()ret() 输出结果为zhang, 分析可知， f2()函数执行结果为函数f1的内存地址。执行ret()就是执行f1()，name =’zhang’与fi()在一个作用域链。 12345678910# 新浪面试题li = [lambda : x for x in range(10)]print(type(li))print(type(li[0]))#lambada 面试题 li = [lambda :x for x in range(10)]res = li[0]()print(res) Numpy库 Numpy是科学计算库,特点是有N维数组对象ndarray，是Scipy、Pandas等的基础 array结构 1234567891011121314151617181920212223import numpy as np# 给列表每个元素增加1zy = [1, 2, 3, 4, 5]zy = zy + 1# 错误， 因为列表不支持这样的错误# 用array函数zy = np.array(zy)zy += 1zy# 计算by = np.array([ 2, 3, 4, 5, 6])zy + byzy * byzy ** by# 取值zy[0] zy[2:] 底层为创建ndarray对象，有丰富的可选参数 12345zy.shape # 多维数组的形状type(zy) # 类型zy.dtype # 数组中元素的类型, array内部必须为同一类型， 不同类型会默认进行转换zy.size # 数组中元素个数zy.ndim # 数组的维度 索引 12345678tang_array = np.array([[1, 2, 3], [3, 4, 5], [6, 7, 8]])tang_array[1]tang_array[1, 1]tang_array[:,1]tang_array[1,0:2] 1234567891011tang_array2 = tang_arraytang_array2# 将tang_array2中的4 改为10tang_array2[1,1] = 10tang_array2tang_array# tang_array 中的4也改为了10， 修改tang_array2,实际是指向了tang_array中的内存# 要想修改tang_array2 而不改tang_arra, 需要用copy() 巧用布尔类型 1234567891011121314# 构造等差数组zy = np.arange(0, 100, 10)zy# array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])# 构造布尔类型by = np.array([0, 0, 1, 0, 1, 1, 1, 0, 1, 0], dtype=bool)by# array([False, False, True, False, True, True, True, False, True,False])zy[by]# array([20, 40, 50, 60, 80]) array数组的数值计算 123456789101112131415161718192021222324252627282930313233343536373839404142zy = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])#所有数据求和 np.sum(zy)# 指定要按什么维度进行计算np.sum(zy,axis = 0)np.sum(zy,axis = 1)# 所有数据乘积zy.prod()zy.prod(axis = 0)zy.prod(axis = -1)# 最小最大值zy.min(axis = 0)zy.max()# 最大值的索引zy.argmax()# 均值zy.mean()zy.mean(axis = 0)# 标准差zy.std(axis = 1)# 方差zy.var()# 进行限制， 小于3的值都变成3， 大于7的值都变成7zy.clip(3, 7)# 进行四舍五入zy.round()# 进行四舍五入到第一个小数点zy.round(decimals = 1) 排序 12345678import numpy as nptang_array = np.array([[1.1, 4.3, 5.2 , 5.1], [5.2, 6.4, 2.3, 4.6]])# 排序np.sort(tang_array)np.sort(tang_array, axis = 0) 数组形状操作 123456789101112zy_num = np.arange(10)zy_num# array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])zy_num.shape = 2, 5zy_num# array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])zy_num.reshape(1,10)#array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# 增加维度zy_num = np.arange(10)zy_num.shape#(10,)zy_num = zy_num[np.newaxis, :]zy_num.shape#(1, 10)zy_num = zy_num[ :, np.newaxis]zy_num.shape#(10, 1)# 压缩维度zy_num = zy_num.squeeze()zy_num#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])zy_num.shape#(10,)# 转置zy_num.shape = 2,5zy_num#array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]])zy_num.transpose() # zy_num.T#array([[0, 5],[1, 6], [2, 7], [3, 8], [4, 9]])# 数组的连接a = np.array([[1,2, 3, 4], [5, 6, 7, 8]])b = np.array([[0, 3, 5, 7], [8, 0, 10, 21]])c = np.concatenate((a, b))c# array([[ 1, 2, 3, 4], [ 5, 6, 7, 8],[ 0, 3, 5, 7], [ 8, 0, 10, 21]])c = np.confatenate((a, b), axis = 1)cnp.vstack((a,b))# array([[ 1, 2, 3, 4],[ 5, 6, 7, 8],[ 0, 3, 5, 7],[ 8, 0, 10, 21]])np.hstack((a,b))# array([[ 1, 2, 3, 4, 0, 3, 5, 7],[ 5, 6, 7, 8, 8, 0, 10, 21]])a# array([[1, 2, 3, 4],[5, 6, 7, 8]])a.flatten()a.ravel()# array([1, 2, 3, 4, 5, 6, 7, 8]) 生成数组 123456789101112131415161718192021222324252627282930np.arange(10)np.arange(2,20,2)# array([ 2, 4, 6, 8, 10, 12, 14, 16, 18])np.arange(2,20,2, dtype= np.float32)# array([ 2., 4., 6., 8., 10., 12., 14., 16., 18.], dtype=float32)# 构造等距数组np.linspace(0, 10, 5)# array([ 0. , 2.5, 5. , 7.5, 10. ])# 构造行向量，列向量np.r_[0:10:1]np.c_[0:10:1]np.zeros(3)# array([0., 0., 0.])np.zeros((3,3))np.ones(3)# array([1., 1., 1.])np.ones((3,3)) * 8zy_num = np.array([1,2,3, 4])np.zeros_like(zy_num)# array([0, 0, 0, 0]) 运算 12345678910111213141516171819202122232425# 乘法x = np.array([5,5])y = np.array([2,3])np.multiply(x,y)# array([10, 15])np.dot(x,y)# array([10, 15])x = np.array([1, 1, 1])y = np.array([[1, 2, 3],[4, 5, 6]])print(x * y)#[[1 2 3] [4 5 6]]x = np.array([1, 1, 2])y = np.array([1, 1, 1])x == y# array([ True, True, False])np.logical_and(x,y)np.logical_or(x,y)np.logical_not(x,y) 随机模块 123456789101112131415161718192021222324252627282930# 随机浮点数np.random.rand(3,2)# 随机整数np.random.randint(10, size = (2,4))# array([[4, 6, 7, 8], [7, 6, 2, 3]])# 随机数np.random.rand()np.random.random_sample()# 0-10中随机找三个数np.random.randint(0, 10, 3)# array([8, 6, 9])# 随机高斯分布mu, sigma = 0, 0.2np.random.normal(mu, sigma, 5)# 设置数字精度, 输出数精度为小数点后3位np.set_printoptions(precision = 3 )# 洗牌， 打乱排列顺序zy_num = np.arange(15)zy_num# array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])np.random.shuffle(zy_num)zy_num# array([ 1, 5, 4, 11, 14, 9, 8, 6, 7, 3, 0, 2, 10, 12, 13]) 读取写入文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263# 写一个名为tang的txt文件%%writefile tang.txt1 2 3 4 5 6 2 3 4 5 5 7# 读取tang文件data = np.loadtxt(&apos;tang.txt&apos;)data# array([[1., 2., 3., 4., 5., 6.],[2., 3., 4., 5., 5., 7.]])%%writefile tang.txt1, 2, 3, 4, 5, 6 2, 3, 4, 5, 5, 7data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;)%%writefile tang.txta, b, c, d, e, f1, 2, 3, 4, 5, 6 2, 3, 4, 5, 5, 7# 不读取第一行data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1)# 指定使用哪几列data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1, usecols = (0,1, 4))# 写入数组文件zy_num = np.array([[1, 2, 3], [4, 5, 6]])np.savetxt(&apos;tang.txt&apos;, zy_num)# 保存成指定格式np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;)np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%.2f&apos;)# 指定分隔符np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;, delimiter = &apos;,&apos;)# 读写文件zy_num = np.array([[1, 2, 3], [4, 5, 6]])np.save(&apos;zy_num.npy&apos;, zy_num)zy_num = np.load(&apos;zy_num.npy&apos;)# 将两个文件保存在同一文件夹，并进行读写zy_num2 = np.arange(10)np.savez(&apos;zy_npz&apos;, a = zy_num, b = zy_num2)data = np.load(&apos;zy.npz&apos;)data.keys()# [&apos;a&apos;, &apos;b&apos;]data[&apos;a&apos;]# array([[1, 2, 3],[4, 5, 6]])]]></content>
      <categories>
        <category>数据分析技能</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python爬虫学习]]></title>
    <url>%2F2018%2F07%2F12%2F%E6%8A%80%E8%83%BD-python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[爬取英雄联盟-英雄皮肤图片 前言 最近自己在学爬虫， 有天朋友问我能否爬取英雄联盟的皮肤图片到本地，好实现快速浏览，折腾了半个小时，终于成功了。 过程 分析过程 找到皮肤图片链接， 研究规律。 在抓取图片之前，我们需要分析网址链接的构成， 以便找到其中的规律。 打开英雄联盟网站, 点击其中的一个英雄， 我们可以看到一个英雄有1-6个皮肤甚至更多，且我们很容易从每个皮肤链接中找到规律。 123456789# 英雄1http://ossweb-img.qq.com/images/lol/web201310/skin/small266000.jpghttp://ossweb-img.qq.com/images/lol/web201310/skin/small266001.jpghttp://ossweb-img.qq.com/images/lol/web201310/skin/small266002.jpg# 英雄2http://ossweb-img.qq.com/images/lol/web201310/skin/small103000.jpghttp://ossweb-img.qq.com/images/lol/web201310/skin/small103001.jpghttp://ossweb-img.qq.com/images/lol/web201310/skin/small103002.jp 从以上的链接中，我们可以知道英雄皮肤的链接规律为： 1&quot;http://ossweb-img.qq.com/images/lol/web201310/skin/small&quot; + &quot;英雄代号&quot; + &quot;0&quot; + &quot;01-10&quot; 找到每个英雄对应的数字代号 那么我们需要解决的问题就变成了到每个英雄对应的代号是多少？ 通过搜索，我们发现每个英雄对应的代号存在champion.js文件中 从Headers中， 我们可以看到champion.js 对应的url为： 12345678&gt;&gt;我们通过正则表达式， 把js中对应的英雄代号提取出来。&gt;&gt; 通过以上把链接拼凑起来，我们就可以把链接对应的图片皮肤下载到本地了。3. 代码&gt; import requestsimport reimport jsonimport urlliburl = “http://lol.qq.com/biz/hero/champion.js&quot;hd ={‘User-Agent’:”Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0”}data = requests.get(url,headers = hd).contentdatas = data.decode()pat = ‘“keys”:(.*?),”data”‘imglist = re.findall(pat,datas)datass = json.loads(imglist[0])for i in datass: try: for j in range(12): try: num = str(j) # print(num) if len(num) == 1: hero_num = &quot;00&quot; + num elif len(num) ==2: hero_num = &quot;0&quot; + num numstr = i + hero_num urls = &apos;http://ossweb-img.qq.com/images/lol/web201310/skin/big&apos;+ numstr +&apos;.jpg&apos; localfile = &quot;E:/张宇个人文件/英雄联盟/&quot; + str(i) + str(num) + &quot;.jpg&quot; urllib.request.urlretrieve(urls, filename = localfile) except Exception as err: pass except Exception as err: pass 12345678---# 爬取王者荣耀-英雄图片1. 代码&gt; 用python爬取王者荣耀皮肤import requestsimport reimport urllib url = “http://pvp.qq.com/web201605/herolist.shtml&quot;hd ={‘User-Agent’:”Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0”}data = requests.get(url,headers = hd)pat = ‘a href=”herodetail/(.*?).shtml’imglist = re.compile(pat, re.S).findall(data.text) for i in imglist: # print(i) try: for j in [1,2,3,4,5,6]: try: numstr = str(i)+&apos;/&apos; +str(i)+&apos;-mobileskin-&apos;+ str(j) # print(numstr) urls = &apos;https://game.gtimg.cn/images/yxzj/img201606/heroimg/&apos;+numstr+&apos;.jpg&apos; print(urls) localfile = &quot;E:/张宇个人文件/官网图片/&quot; + str(i)+ str(j)+ &quot;.jpg&quot; urllib.request.urlretrieve(urls, filename = localfile) except Exception as err: pass except Exception as err: pass 1234567------# 爬取网站图片1. 代码* 构建用户代理池&gt; 这里可以随意加多个浏览器uapools = [ “Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)”, “Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)”, “Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko”, “Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)”, “Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2”, “Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12”, “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0 Safari/537.36 OPR/15.0”, “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17”, “Mozilla/5.0 (X11; CrOS armv7l 3428.193.0) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.126 Safari/537.22”, “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2”, “Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/533.9 (KHTML, like Gecko) Maxthon/3.0 Safari/533.9”,] 1232. 爬取并下载图片&gt; import reimport requestsimport urllib.request uapools 如上所示for ua in uapools: hd ={‘User-Agent’:ua} i = uapools.index(ua) # 限制爬取页数， 我们爬取前10页 if i &gt; 10: break try: url = &quot;http://www.iyuanqi.com/home/funimg/fun_list/m/Home/cp_uid/all/sort/30hot/p/&quot;+str(i)+&quot;.html&quot; data = requests.get(url, headers = hd) pat = &apos;class=&quot;lazy-img&quot; src=&quot;(.*?)&quot; data-original=&quot;&apos; imglist = re.compile(pat, re.S).findall(data.text) for j in range(0, len(imglist)): try: thisimg = imglist[j] thisimgurl = thisimg localfile = &quot;E:/张宇个人文件/网络图片/&quot; + str(i) + str(j) + &quot;.jpg&quot; urllib.request.urlretrieve(thisimgurl, filename = localfile) except Exception as err: pass except Exception as err: pass 12345678910111213141516-----------------# 爬取天善课程数据表存储到MYSQL1. 前言&gt; 天善智能是一个商业智能与大数据在线社区，有很多很好的学习课程。我们用爬虫来爬取网站的所有课程并存储到MYSQL数据库中， 以便于进一步的分析。2. 用python在MYSQL中创建名为zhanhyu的数据库 * 用python连接MYSQL数据库&gt; import pymysql 因为本地mysql没有设置密码， 所以没有加password参数db = pymysql.connect(host = ‘localhost’, user = ‘root’, port = 3306) 用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句cursor = db.cursor() 123 * 创建一个新的数据库， 名字叫做zhangyu&gt; cursor.execute 执行真正的sql语句, DEFAULT 指定默认值cursor.execute(“CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8”)123453. 在zhangyu库中创建tianshan2_datas的数据表 * 指定在zhangyu这个数据库中运行&gt; db = pymysql.connect(host = ‘localhost’, user = ‘root’, port = 3306, db=’zhangyu’)cursor = db.cursor()123* 用sql语句创建名为tianshan2_datas的表&gt; sql = ‘CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))’ curosr.exectute(sql) db.close() 12344. 爬取天善智能网站的数据&gt; import reimport requests for i in range(1,5): # 观察天善课程链接， 找出规律 thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1) # 用requests库抓取数据 hd ={&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;} data = requests.get(thisurl, headers = hd) #用正则表达式进行解析 title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos; price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos; numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos; title = re.compile(title_pat, re.S).findall(data.text) if(len(title)&gt;0): title = title[0] else: continue price = re.compile(price_pat, re.S).findall(data.text) if(len(price)&gt;0): price = price[0] else: price = &apos;免费&apos; numb = re.compile(numb_pat, re.S).findall(data.text) if(len(numb)&gt;0): numb = numb[0] else: numb = &apos;缺失&apos; 1235. 将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中&gt; con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;) cursor = con.cursor() sql = &apos;insert into tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos; try: cursor.execute(sql, (title, price, numb)) con.commit() except: con.rollback() con.close() 12345----&gt; 这样，我们就成功的把爬取的数据保存到mysql数据库中，方便我们查询使用。6. 完整代码&gt; import pymysql 因为本地mysql没有设置密码， 所以没有加password参数db = pymysql.connect(host = ‘localhost’, user = ‘root’, port = 3306) 用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句cursor = db.cursor() cursor.execute 执行真正的sql语句, DEFAULT 指定默认值cursor.execute(“CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8”) db = pymysql.connect(host = ‘localhost’, user = ‘root’, port = 3306, db=’zhangyu’)cursor = db.cursor()sql = ‘CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))’cursor.execute(sql)db.close() import reimport pymysqlimport requests for i in range(0,284): thisurl = “https://edu.hellobi.com/course/&quot; + str(i+1) hd ={“user-agent”: “Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36”} data = requests.get(thisurl, headers = hd) title_pat = ‘(.?)‘ price_pat = ‘class=”price-expense”&gt;￥(.?)‘ numb_pat = ‘class=”course-view”&gt;(.*?)‘ title = re.compile(title_pat, re.S).findall(data.text) if(len(title)&gt;0): title = title[0] else: continue price = re.compile(price_pat, re.S).findall(data.text) if(len(price)&gt;0): price = price[0] else: price = ‘免费’ numb = re.compile(numb_pat, re.S).findall(data.text) if(len(numb)&gt;0): numb = numb[0] else: numb = ‘缺失’ con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;) cursor = con.cursor() sql = &apos;insert into tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos; try: cursor.execute(sql, (title, price, numb)) con.commit() except: con.rollback() con.close() `]]></content>
      <categories>
        <category>数据分析技能</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[音乐]]></title>
    <url>%2F2018%2F04%2F23%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E9%9F%B3%E4%B9%90%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[李志-回答 卑鄙是卑鄙者的通行证，高尚是高尚者的墓志铭。看吧，在那镀金的天空中，飘满了死者弯曲的倒影。冰川季过去了，为什么到处都是冰棱？好望角发现了，为什么死海里千帆向竞？ 我来到这个世界上，只带着纸、绳索和背影，为了在审判之前，宣读那些被判决了的声音：告诉你吧，世界，我不相信！纵使你脚下有一千名挑战者，那就把我算作那第一千零一名。 我不相信天是蓝的，我不相信雷的回声；我不相信梦是假的，我不相信死无报应。如果海洋注定要决堤，就让所有的苦水都注入我心中；如果陆地注定要上升，就让人类重新选择生存的峰顶。新的转机和闪闪的星斗，正在缀满没有遮拦的天空，那是五千年的象形文字，那是未来人们凝视的眼睛。 李志-忽然 李志-这个世界会好吗？ 李志-热河 李志-黑色信封 李志-梵高先生 李志-关于郑州的回忆 李志-人民不需要自由 李志-墙上的向日葵 李志-光阴路的夏天 李志-动静 李志-看见 李志-14跨年演唱会 左小祖咒/陈升-爱情的枪 Pink Floyd - Wish You Were Here Queen - Love Of My Life 轻音乐-Cello Collection with Calcifer]]></content>
      <categories>
        <category>生活资料</category>
      </categories>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[刻意练习]]></title>
    <url>%2F2018%2F04%2F16%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[读后笔记与文章–2018-04-16 1. 什么是刻意练习 刻意练习是一个在已经有明确方法论的行业内， 个人通过制定一系列明确的目标， 不断进行刚好超出他们能力范围的练习， 并通过检验反馈不断地对练习进行调整， 从而创建有效的知识晶体， 保存在长时记忆中， 以便以后遇到问题及时响应。 2. 刻意练习背后的原理是什么 利用身体偏爱稳定的倾向，进行刚好超出能力范围的练习我们人类的身体天生偏爱稳定性， 我们的身体通过各种各样的反馈机制来保持身体各项指标的稳定性。当身体系统长时间的感受到压力，原来的平衡再无法保持时， 身体便会开始响应那些变化，让那些变化更加容易， 进而达到重新的平衡。但在过长的时间内过分的逼迫自己， 可能导致倦怠和低效。 例如：对于跑步锻炼来说， 如果你短时间剧烈的运动，导致身体中的能量与氧气下降， 身体就会通过心跳加速以提高氧气供给，并将储存在不同部位的能量拿来给肌肉供给，以达到平衡状态。只要体育锻炼并未让身体平衡机制无法正常运转，就很难引起身体上的生理变化。 因此， 你需要足够努力的锻炼并保持足够长的时间，才能让身体形成新的平衡。要想要改变不断地进行下去， 你就需要不断地加码：跑的更远，更快，负重跑等。 一旦你不给自己在跑步方面施加压力， 你将停止改进的脚步，停留在新的平衡内。 但如果你一上来玩命的跑， 可能只让自己受伤。 同理，对大脑进行长时间的锻炼， 大脑也会以各种不同的方式来重新布置神经元之间的连接，以达到快速地相应。 为了创建有效的知识晶体 知识晶体就是我们思考某件事物时心理所创建的知识结构。 刻意练习的目的之一就是创建有效的知识晶体。 信息预先存在这些晶体中，并长时间保存在记忆之中，当生活中遇到类似的情况可快速地进行响应。 行业内的杰出人物正式由于他们经过多年的积累，针对行业中可能遇到的不同局面，创建了高度复杂和精密的知识晶体。反过来这些知识晶体让他们更好地在一系列事物中找到规律，更好地理解信息，指定计划，高效的学习。 比如： 你听到‘猫’这个词就会想到毛茸茸可爱的猫，它的样子，叫声等具体的内容。你在生活中对‘猫’这个词创建了包括图像， 气味，声音等一系列的晶体结构。 同理，我们要想更好地创建对某一动物的知识晶体，最好的方法就是花一点点的时间来了解它们，摸摸它的毛发，和它玩耍，并且细心地观察它的一举一动。 3. 如何在一个行业中进行刻意练习 找到一位好的导师 如果可以的话， 找到一个好的导师能够让自己的练习事半功倍。 好的导师能够了解什么样的行为会带来进步，能带来及时的反馈。 找行业中的大牛 我们在现实中很难找到一个好的导师， 但我们在互联网中可以很容易找到行业中的大牛。 我们首先确定大牛的指标都有哪些， 然后调查思考谁符合这些指标，算的上是真正的大牛。 在数据分析行业， 称为大牛的特征有：有多年的行业积累， 有大厂的工作经历。 有较大的行业影响力， 愿意传播教授 技能。 通过搜索，我们可以知道：数据挖掘与数据分析博主-邓凯是数据分析里的大牛， 他在数据分析行业工作多年， 并在京东这样的大厂担任数据负责人， 微信公众号有数十万粉丝，现在成立了爱数圈这样的学习团体。 观察大牛都做了什么 观察他们是做了什么让他们如此的杰出，运用了哪些方法让他们如此的卓越。 不断的通过工作业务磨练自己的数据分析思维，建立了良好的互联网分析能力。 他不断地写数据分析的相关文章，总结输出，让自己不断扩大影响力。这些方法途径，也是自己在进行技能学习时可以学习借鉴的方法。 学会分解目标 找到一种适合自己的练习方法，并将漫长的目标分解成一个一个的小目标，每次练习都只专注于这一个目标，当达到目标时， 给自己一个小小的奖赏 最重要的是盯紧自己的目标。 找到自己的练习规律 保证自己在短的时间内能够集中全部的注意力去练习。 一旦自己发现自己不能够保持专注力，就停下来休息。 经过自己这段时间的统计发现，自己能够保持专注学习的时间为一个小时， 超过一个小时自己就看不进去了。 这个时候，自己停下来放松10分钟再看，效果会好的多。 在工作中需要必要的反馈 给自己设计某种必要的反馈， 让自己能够随着时间的推移， 不断的纠正错误和精进技巧。 如何创建反馈， 我觉得可以通过写作来给自己提供反馈，通过输出来倒逼输入， 在写作中发现自己的问题， 比如自己在写这篇读书笔记时就发现自己有很多的概念没有理解。 创建自己对于这个技能的知识晶体 将工作中的项目经验和学到的知识相结合，构成强大的晶体结构。培养自己能够遇到问题迅速的响应能力。多培养自己遇到问题的解决思路。 隐形知识 寻求建议 当遇到停滞阶段时， 稍微给自己加强练习的强度，找出到底是在哪里让你停滞不前， 然后尝试换一种方法专门针对这个缺点来进行练习，或向大牛寻求建议。 自己的打字速度现在停滞不前 在练习的过程中保持动机 给自己制定一个专门的时间点来进行练习，并想办法把干扰你的事物控制到最小。坚定自己可以通过刻意练习可以进步的信念。有可能的话， 加入一个社区进行学习比自己单独学习更容易坚持 比如：把手机调静音，去图书馆学习防止网络对自己的影响。 保持充足的睡眠，加入一个数据分析的圈子进行学习。 保证错误是低风险的。这样自己才能敢于犯错。 练习， 试错， 反馈，修正 应用 当自己在进行学习时， 自己总是会想到刻意练习里的一个观点， 就是在学习过程中必须脱离自己的舒适区，让学习的内容稍微难一点， 这样的学习才会让自己进步。 每当这样想， 自己就不会抵触学习的过程了， 也让自己能够长久的坚持。 补充–2018-12-08 刻意练习区别与其他练习的特征是什么 有定义明确的特定目标把大目标分解成每一个小目标，制定计划，在达成每一个小目标的过程中，纠正自己的行为方式，解决面临的问题。 具有专注的练习状态尽力保持专注，集中精力，不会走神 练习包含反馈你必须知道自己做的对不对，如果不对，又错在哪里。 走出舒适区 刻意练习的原则专注、反馈、纠正、足够的重复次数 延伸： TED演讲： 《how to get better at the things you care about》 刻意练习的本质-阳志平公众号：心智工具箱网站：http://www.yangzhiping.com/ 论文：the role of Deliberate Practice in the Acquisition of Expert Performance 第二次读书笔记–2020年2月26 在2018年自己就看完了此书，但是自己并没有按照书中的内容践行过，自己也没有任何质的改变。这也让我明白了一个深刻的道理：读书不应该把读完作为目标，而应该能把书中的知识真正应用到生活中为目标。 要不读也是白读。 那么在书中讲的刻意练习的方法是什么呢，总结如下： 自己应该找到和行业大牛的差距，从而给自己设立清晰的目标。 将目标拆解成 N 个可完成的小目标，每次只盯住一个目标练习。 在练习时跳出舒适区，在短时间内注意力高度集中， 完成目标进行奖励。 每次练习时都必须有反馈，对暴露的问题进行纠正。 必须坚持去做，保持持续去做的动力。 关键词： 目标、专注、反馈、纠正、持续。 自己在技能中为什么没有进步，原因有以下三点： 自己没有一个清晰的目标，不知道自己与高手之间的差距应该怎样弥补？ 自己没有持续的动力，总是躲在自己的舒适圈里。 自己的学习不能很好的用在工作中，在工作中没有体现。]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>学习方法</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双拼输入法]]></title>
    <url>%2F2017%2F09%2F17%2F%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95%2F</url>
    <content type="text"><![CDATA[1. 怎么接触到双拼的？自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。 2. 什么是双拼？ 维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。 理解起来也很简单，比如你要拼写 张 红 这两个字， 用全拼的话可能你得输入 zhang hong， 而用小鹤双拼的话， 你只需要输入vh hs 就可以显示。 v 代表zh , h 代表ang , s代表ong 双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。 自己学习的是小鹤双拼，语法图是这样的： 在搜狗输入法上点击 设置—— 属性设置 —— 常用 —— 特殊习惯—— 双拼 就可以使用了。 3. 学习的过程刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 4. 学习双拼的优点与缺点( 1 ). 优点 简洁，同样一个词全拼要五六下，双拼只需要两下 感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比） ( 2 ). 缺点 全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼 有时大脑短路会想不起来双拼的语法 5. 感悟 任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 最可怕的不是自己知道自己不知道，而是不知道自己不知道。 比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。 如何解决自己不知道自己不知道的知识，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。 有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。 如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。 延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。 2020年2月26：现在在北京已经呆了马上快3年了，自己虽然已经转行做数据分析了，但是现在自己的职业发展并不好，甚至犹豫自己是否还应呆在北京。 学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 要学习那些你通过短时间学会,就能够一辈子用的上的知识。 6. 延伸 总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。 其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？ 自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。相反， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。 7. 未解决问题 如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？ 如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果 参考资料： 《把时间当朋友》]]></content>
      <categories>
        <category>生活资料</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
</search>
