<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客主题更换</title>
      <link href="/2020/03/20/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/"/>
      <url>/2020/03/20/%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E6%9B%B4%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近把自己的个人博客主题由 <a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">fluid</a> 换成了 <a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">maupassant</a>,个人感觉 maupassant 主题简洁明了，更加符合自己的胃口。</p><!-- 想想自己从17年建立博客以来，换了有4回主题了，这次终于遇到了一个比较满意的主题，当然这个主题还有很大的优化空间。有人问我为什么要建立个人博客，个人觉得通过博客，能在互联网中留下自己的脚印，是一件比较美妙的事情。况且还可以通过博客来记录自己的所思所想，比较方便。  --><p>这篇文章把自己在更换主题的流程和遇到的问题总结一下：</p><ol><li><p>博客登陆</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global.name&apos;zhang&apos;</span><br><span class="line">git config --global.email &apos;zhang@qq.com&apos;</span><br><span class="line">cd E:/zy_blog</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li><li><p>下载主题到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br></pre></td></tr></table></figure></li><li><p>安装插件-安装一直显示错误，于是自己换成了镜像安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-pug --save</span><br></pre></td></tr></table></figure></li><li><p>镜像安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 安装镜像</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"># 安装后用定制的 cnpm (gzip 压缩支持)  命令行工具代替默认的 npm:安装插件</span><br><span class="line">cnpm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure></li><li><p>按照文档对主题进行配置<br><a href="https://www.haomwei.com/technology/maupassant-hexo.html" target="_blank" rel="noopener">大道至简——Hexo简洁主题推荐</a></p></li><li><p>常见错误</p><p> 错误1：自从修改完主题进行上传，就一直报这样的错误，折腾了半天终于解决了。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">错误： </span><br><span class="line">$ hexo d</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">INFO  Copying files from extend dirs...</span><br><span class="line">warning: could not open directory &apos;2018/02/17/《刻意学习》读书笔记 /&apos;: No such file or directory</span><br><span class="line">warning: could not open directory &apos;2018/02/17/读书笔记-《刻意学习》读书笔记 /&apos;: No such file or directory</span><br><span class="line">warning: could not open directory &apos;2019/02/17/《刻意学习》读书笔记 /&apos;: No such file or directory</span><br><span class="line">On branch master</span><br><span class="line">Untracked files:</span><br><span class="line">(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class="line">        2018/02/</span><br><span class="line">        &quot;2019/02/17/\343\200\212\345\210\273\346\204\217\345\255\246\344\271\240\343\200\213\350\257\273\344\271\246\347\254\224\350\256\260 /&quot;</span><br><span class="line"></span><br><span class="line">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br><span class="line">Everything up-to-date</span><br><span class="line">Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:zhangandyu/zhangandyu.github.io.git&apos;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><p> 解法方法：</p><ol><li><p>下载插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git -save</span><br></pre></td></tr></table></figure></li><li><p>删除原文件 .deploy_git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 删除时，文件显示找不到该项目--https://zhuanlan.zhihu.com/p/55077318</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">去桌面新建一个文本文件，并输入如下内容:</span><br><span class="line"></span><br><span class="line">DEL /F /A /Q \\?\%1</span><br><span class="line"></span><br><span class="line">RD /S /Q \\?\%1</span><br><span class="line"></span><br><span class="line">保存该文本，将文件后缀名修改为.bat，文件名随意。</span><br><span class="line"></span><br><span class="line">我们将需要删除的文件直接拖到这个.bat文件上即可删除。</span><br></pre></td></tr></table></figure></li><li><p>重新生成和部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm -rf .deploy_git</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><p>错误2：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: 备份/文章备份/python/数据分析技能-git学习笔记.md</span><br><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 6, column 11:</span><br><span class="line">    categories:</span><br></pre></td></tr></table></figure><p>解决方法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仔细看了看是因为创建的md文件头部声明中没有加空格。</span><br></pre></td></tr></table></figure><p>错误3：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">TypeError: Cannot set property &apos;lastIndex&apos; of undefined</span><br></pre></td></tr></table></figure><p>解决方法：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在配置文件_config.yml中将highlight选项的auto_detect设为false</span><br></pre></td></tr></table></figure><p> 其他错误及解决方案：</p><p> Hexo常见问题解决方案 <a href="https://xuanwo.io/2014/08/14/hexo-usual-problem/" target="_blank" rel="noopener">https://xuanwo.io/2014/08/14/hexo-usual-problem/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改版分析</title>
      <link href="/2019/06/22/%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90/"/>
      <url>/2019/06/22/%E6%96%B9%E6%B3%95-%E6%94%B9%E7%89%88%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="频道改版分析"><a href="#频道改版分析" class="headerlink" title="频道改版分析"></a>频道改版分析</h1><h2 id="1-分析目的"><a href="#1-分析目的" class="headerlink" title="1.分析目的"></a>1.分析目的</h2><p>  新频道的效果怎么样？</p><h2 id="2-分析方向"><a href="#2-分析方向" class="headerlink" title="2.分析方向"></a>2.分析方向</h2><ol><li><p>新频道整体改版效果分析。</p></li><li><p>新频道各部分细拆分析<br>新频道各主要区域细拆，看各区域数据是上升还是下降。</p></li><li><p>新频道重点问题分析<br>主要功能点流量入口修改后，流量如何分布。</p></li></ol><h2 id="3-分析思路"><a href="#3-分析思路" class="headerlink" title="3. 分析思路"></a>3. 分析思路</h2><h3 id="3-1-新版本整体改版效果分析"><a href="#3-1-新版本整体改版效果分析" class="headerlink" title="3.1 新版本整体改版效果分析"></a>3.1 新版本整体改版效果分析</h3><ol><li><p>改版后，新频道是否受欢迎。<br>衡量参数：</p><ul><li>页面访问uv占比大盘</li><li>日均访问uv点击转化率</li><li>日均点击uv占比大盘</li><li>日均点击uv人均点击次数</li><li>次1日留存</li><li>次3日留存</li><li>次7日留存</li></ul><p>说明:</p><ul><li><p><strong>频道访问uv占比大盘</strong>，数据提升，说明频道改版后，用户更喜欢访问此频道。（用户访问此频道后，并不一定会在频道内产生点击）</p></li><li><p><strong>转化宽度： 日均访问uv点击转化率</strong> = 频道内点击uv / 频道内访问uv，点击转化率提升，说明用户查看此频道后，频道内功能点改版后对访问此频道的用户更有吸引力。</p></li><li><p><strong>日均点击uv占比大盘</strong>，数据提升，说明改版后吸引了更多的用户来进行点击。</p></li><li><p><strong>转化深度：日均点击uv人均点击次数</strong>，数据提升，说明改版后，用户的点击频率也有所增加。</p></li><li><p><strong>用户粘度：频道访问留存率提升</strong>， 说明改版后，此频道的用户粘性也在增加。</p></li></ul></li></ol><ol start="2"><li><p>改版后，频道留存率上升原因分析<br>主要为说明是某功能点使频道整体留存率上升。</p><p>公式：</p></li></ol><ul><li><p>频道留存率 = A用户数 <em> A留存率 + 其他用户数 </em> 其他留存率</p><p>举例：</p><ul><li>旧版次7日留存率 = 26.8%签到用户 <em> 46.7%留存率 + 73.2%其他用户 </em> 24.7%留存率 = 30.6%</li><li><p>新版次7日留存率 = 17.5%签到用户 <em> 48.8%留存率 + 82.5%其他用户 </em> 24.9留存率 = 29.1%</p></li><li><p>说明：新版本频道次7日留存率下降1.5，主要是由于9.3%的用户次7日留存率从46.7%下降到24.9%</p></li></ul></li></ul><h3 id="3-2-新频道各坑位细拆分析"><a href="#3-2-新频道各坑位细拆分析" class="headerlink" title="3.2 新频道各坑位细拆分析"></a>3.2 新频道各坑位细拆分析</h3><ol><li><p>对频道中相同功能点进行新旧版本对比, 衡量参数：</p><ul><li>各个坑位点击uv占比访问uv</li><li>各个坑位次7日留存率细拆</li></ul></li><li><p>对1中数据差异较大坑位进行具体原因分析</p><ul><li>对各模块坑位具体原因进行分析说明</li></ul></li></ol><h3 id="3-3-对改版后的某主要功能点的流量结构变化进行分析"><a href="#3-3-对改版后的某主要功能点的流量结构变化进行分析" class="headerlink" title="3.3 对改版后的某主要功能点的流量结构变化进行分析"></a>3.3 对改版后的某主要功能点的流量结构变化进行分析</h3><ul><li>对新旧不同版本的流量结构进行梳理，找出主要流量入口变化，并进行说明。 </li><li>用户究竟是如何使用产品新功能的，是否符合你预期设想的那样，还是说用户自己创造出了新的玩法</li></ul><h3 id="3-4-对产品流程转化率是否有提升"><a href="#3-4-对产品流程转化率是否有提升" class="headerlink" title="3.4 对产品流程转化率是否有提升"></a>3.4 对产品流程转化率是否有提升</h3><ul><li>去观察整个产品的流程转化率是否因为产品迭代改版而有所提升。</li><li>查看转化漏斗，改变前后，流程的转化数据是否发生变化，每个小环节的漏斗转化率有什么变化</li></ul><hr><!-- <!-- ## 其他具的操作只是帮你快速业务流程梳理出关键性的分析和指标体系，那么这些体系和指标的度量和之间的关系就要依靠统计学去界定和规范一个网站改版了，新版的页面没有改变原来的交互操作，只是改变了视觉样式，用户访问量和点击量变化了，这些变化是好是坏?1、我们已知的是改版前后点击量的数据和用户访问量的数据2 、我们想知道这个变化是好是坏要怎么做?算一下改版前后用户的百分比和点击量的百分，如果改版后用户量下降了，点击量下降了是不是改版就不成功?显然我们不能如此简单的看问题。要比较这两个样本，我们可以使用T检验。T检验(Student’s t test)是用于小样本(样本容量小于30，总体标准差σ未知的正态分布)的两个平均值差异程度的检验方法。我的置信区间是95%，所以如果sig<.05就代表差异显著。从表上看，改版前后点击量和用户数两项上差异并不显著，所以我们可以认为这次改版至少没引起什么不良的影响。当然现实问题往往更复杂，仅就改版为例，我们需要考虑很多问题，例如：1、改变了哪些内容? 外观还是交互方式?或者外观+交互方式?布局有什么变化?交互方式的变化对用户完成一个任务所需的步骤或点击次数是否有改变?2、改版前的数据采集了多少天?改版后的数据采集了多少天?3、改版前后的时期在每一年的相应劫夺，用户的访问量是否有显著变化?趋势是怎样的?  ---------------------<!-- # 8.  数据分析方法案例如何提高全站留存率？1. 选择高留存的行为，并选择其中比较容易扩大使用者面积的几个，在产品功能层面放大，让更多的人看到并发生转化，从而提升留存。2. 评估最终效果时，首先评估该功能的使用人群和占比是否有效提升，有则认为改进有效3. 以上主要因为产品在改进期间会同时发生很多其他改进，也会有各种不同的市场，运营活动，单纯用留存来评估，无法有效验证。例如：即刻产品的核心功能之一就是内容的分发，用户绝大多数的时间都在浏览关注、推荐和动态页的内容与评论。按照用户使用这些内容模块的行为，可以按其门槛和深浅分为路人行为（如浏览帖子）、围观行为（点击并查看评论）、普通参与行为（点赞、转发）、深度参与行为（发布评论）等。通过留存分析功能，发现行为深度越深，用户的留存就越高。但由于扩大发生参与行为的门槛过高，落地性也就较差。因此，选择围观行为，通过放大其面积来提升用户全站留存，所以，就在产品信息流列表页露出一条热评，一方面让更多的用户看到最精彩评论，另一方面更有力的引导用户点击查看更多内容。新增热评功能后，成功将阅读评论的用户比例提升，并且成功提高了全站留存 -->]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 改版分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 进阶查询</title>
      <link href="/2019/05/07/%E6%8A%80%E8%83%BD-Hive%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/05/07/%E6%8A%80%E8%83%BD-Hive%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hive查询性能优化-避免数据倾斜"><a href="#Hive查询性能优化-避免数据倾斜" class="headerlink" title="Hive查询性能优化-避免数据倾斜"></a>Hive查询性能优化-避免数据倾斜</h1><ul><li><p>数据倾斜：当我们在Hive上进行查询时，因为数据的分散度不够， 导致大量数据集中在一台或者几台服务器上， 导致数据的计算速度远远低于平均计算速度， 计算过程特别耗时。</p></li><li><p>数据倾斜的表现：任务进度长时间维持在99%，查看任务监控页面，发现只有少量子任务未完成。</p></li></ul><h2 id="如何避免数据倾斜"><a href="#如何避免数据倾斜" class="headerlink" title="如何避免数据倾斜"></a>如何避免数据倾斜</h2><p>  sql优化与业务逻辑优化</p><p>方法1：<br>  <strong>在查询中， 避免使用 select *, 使用条件限制取需要的列。</strong></p><p>方法2：<br> <strong>当数据量特别大时，用 group by 代替 count(distinct)</strong></p><ul><li>count(distinct ),在数据量特别大的情况下，效率较低, 可以用先 group by 再 count 的方式进行代替。  </li><li>因为count(distinct)是按group by 字段分组，按distinct字段排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-02'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>可以转换成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-02'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date, user_account) a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>方法3：<br><strong>join 优化</strong></p><ul><li>在使用 Join 进行外关联时， 将副表的过滤条件写在 where 后面，会先全表关联， 再进行过滤， 这样会耗费资源。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    s.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure><p>正确的写法是将 where 条件写在 on 后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> ( b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol <span class="keyword">and</span> s.symbol = <span class="string">'APPLE'</span>)</span><br></pre></td></tr></table></figure><p>方法4：<br> <strong>避免 union all 子查询中使用 group by</strong> 【替换 count(distinct) 除外】、<strong>count(distinct)、max、min等。</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account,</span><br><span class="line">            hit_date</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-13'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><hr><p>方法5：<br> <strong>避免不同数据类型进行关联</strong></p><p>  使用CAST函数对数据类型进行转换，语法为cast(value AS TYPE)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    a.price_close,</span><br><span class="line">    b.price_close</span><br><span class="line">from</span><br><span class="line">    a join b  on a.user_id = cast(b.user_id as string)</span><br><span class="line">where</span><br><span class="line">    hit_date between &apos;2018-11-01&apos; and &apos;2018-11-02&apos;</span><br><span class="line">    and </span><br><span class="line">    a.symbol = &apos;apple&apos;</span><br></pre></td></tr></table></figure></p><p>方法6：<br> <strong>无效ID在关联时的数据倾斜问题</strong></p><ul><li>把空值的 key 变成一个字符串加上随机数，就能把倾斜的数据分到不同的 reduce 上 ,解决数据倾斜问题。</li><li><p>需要用到Case When … Else…End语法</p><p>写法1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">From</span> </span><br><span class="line">    a <span class="keyword">Join</span>  b</span><br><span class="line"><span class="keyword">On</span></span><br><span class="line">     a.user_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">And</span> </span><br><span class="line">    a.user_id = b.user_id</span><br><span class="line"><span class="keyword">Union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">Select</span></span><br><span class="line">    * </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    a.user_id <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">From</span></span><br><span class="line">    a <span class="keyword">left</span> <span class="keyword">out</span> <span class="keyword">Join</span> b</span><br><span class="line"><span class="keyword">On</span> </span><br><span class="line"><span class="keyword">Case</span> <span class="keyword">when</span> </span><br><span class="line">    a.user_id <span class="keyword">is</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">then</span> </span><br><span class="line">    <span class="keyword">concat</span>(‘dp_hive’,<span class="keyword">rand</span>() ) </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    a.user_id = b.user_id <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure></li></ul><p>Hive的查询注意事项以及优化总结：</p><ol><li><p>尽量尽早过滤数据，减少每个阶段的数据量。对于分区表要加分区，同时只选择需要使用到的字段</p></li><li><p>对历史库的计算经验</p></li><li><p>尽量原子化操作，尽量避免一个SQL包含复杂逻辑，可以使用中间表来完成复杂的逻辑</p></li><li><p>join操作 小表要注意放在join的左边，否则会引起磁盘和内存的大量消耗</p></li><li><p>如果union all的部分个数大于2，或者每个union部分数据量大，应该拆成多个insert into语句，实际测试过程中，执行时间能提升50%</p></li></ol><p><strong>本质是让服务器尽量少做事情，走最优的路径，以资源消耗最少为目标</strong></p><p>参考资料： </p><ul><li><a href="https://blog.csdn.net/yu0_zhang0/article/details/81776459" target="_blank" rel="noopener">https://blog.csdn.net/yu0_zhang0/article/details/81776459</a></li><li><a href="https://blog.csdn.net/young_0609/article/details/84593316" target="_blank" rel="noopener">https://blog.csdn.net/young_0609/article/details/84593316</a></li><li><a href="https://blog.csdn.net/qq_29232943/article/details/79644614" target="_blank" rel="noopener">https://blog.csdn.net/qq_29232943/article/details/79644614</a></li><li><a href="http://lxw1234.com/archives/2015/06/317.htm" target="_blank" rel="noopener">http://lxw1234.com/archives/2015/06/317.htm</a></li><li><a href="https://zenoh.iteye.com/blog/1748592" target="_blank" rel="noopener">https://zenoh.iteye.com/blog/1748592</a></li><li><a href="http://www.lwyyyyyy.cn/getArticleDetailInfo?articleId=89" target="_blank" rel="noopener">http://www.lwyyyyyy.cn/getArticleDetailInfo?articleId=89</a></li></ul><hr><h1 id="求两组数据的交集，-并集，-差集"><a href="#求两组数据的交集，-并集，-差集" class="headerlink" title="求两组数据的交集， 并集， 差集"></a>求两组数据的交集， 并集， 差集</h1><h2 id="并集-union-与-union-all"><a href="#并集-union-与-union-all" class="headerlink" title="并集-union 与 union all"></a>并集-union 与 union all</h2><p><strong>union 与 union all 的不同：</strong></p><ul><li>union, 结果包含所有行， 并删除重复行</li><li>unoin all, 结果包含所有行， 但不删除重复行</li></ul><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"></span><br><span class="line"><span class="comment">--    点击支付宝或者手淘活动的人数总共有 435499 人</span></span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"> <span class="comment">--  点击支付宝或者手淘活动的次数为 665935</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="交集-instersect"><a href="#交集-instersect" class="headerlink" title="交集-instersect"></a>交集-instersect</h2><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">intersect</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-02'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="comment">--  点击支付宝又点击手淘活动的人数为 66174</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="差集-except"><a href="#差集-except" class="headerlink" title="差集-except"></a>差集-except</h2><p>写法1：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span></span><br><span class="line">        <span class="keyword">except</span></span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%手淘%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br></pre></td></tr></table></figure></p><p>写法2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-01'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">            <span class="keyword">and</span></span><br><span class="line">            nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            user_account</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            <span class="keyword">data</span></span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            hit_date <span class="keyword">between</span> <span class="string">'2018-12-20'</span> <span class="keyword">and</span> <span class="string">'2018-12-25'</span></span><br><span class="line">        <span class="keyword">and</span></span><br><span class="line">        nbtn_name <span class="keyword">like</span> <span class="string">"%支付宝%"</span>)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> a2 </span><br><span class="line">    <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line">    <span class="keyword">and</span> a2.user_account <span class="keyword">is</span>  <span class="literal">null</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只参加支付宝活动， 没有参加手淘活动的人数为 369325</span></span><br><span class="line"><span class="comment">--在求差集时， 需要注意前后顺序， 否则会出现逻辑错误</span></span><br><span class="line"><span class="comment">-- 可以发现， 差集 + 交集 =并集， 369325 +  66174 = 435499</span></span><br></pre></td></tr></table></figure></p><p>写法3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--详细列出差集的版本号</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="keyword">distinct</span> two <span class="keyword">as</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.data_csv</span><br><span class="line"><span class="keyword">except</span> </span><br><span class="line"></span><br><span class="line">(<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-03'</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>    </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-03'</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">   a2.six ,</span><br><span class="line">   <span class="keyword">COUNT</span>(a2.two) <span class="keyword">as</span> uv,</span><br><span class="line">   <span class="keyword">count</span>(a1.user_account) <span class="keyword">as</span> uv_1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1, test.data_csv <span class="keyword">as</span> a2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a1.user_account = a2.two</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a2.six</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h1 id="业务问题"><a href="#业务问题" class="headerlink" title="业务问题"></a>业务问题</h1><h2 id="计算留存率"><a href="#计算留存率" class="headerlink" title="计算留存率"></a>计算留存率</h2><p><strong>方法1：</strong> 一次性求次1日，次3日， 次7日留存</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">select</span> </span><br><span class="line">    hit_date,</span><br><span class="line">    user_account</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-04-25'</span> <span class="keyword">and</span> <span class="string">'2019-05-13'</span></span><br><span class="line">    <span class="keyword">and</span> </span><br><span class="line">    btn_information <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a1.hit_date,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) uv,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">1</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) next_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">3</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) three_day,</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="keyword">datediff</span>(a2.hit_date, a1.hit_date) = <span class="number">7</span> <span class="keyword">then</span> a1.user_account <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> ) seven_day</span><br><span class="line"><span class="keyword">from</span> a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> a1.hit_date</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><p><strong>方法2：</strong><br> 步骤1：统计每天的uv</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天uv</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">    hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">BY</span> </span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span> </span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><p>步骤2：使用date_add 函数， 一次性求出10-15号每一天的次1、3、7日留存<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 统计10-15号每天的次日留存数， 统计次3、7日留存只需将1换为3、7</span></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span>  <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-15'</span></span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">        user_account,</span><br><span class="line">        hit_date</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        computer_view.data</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        hit_date <span class="keyword">between</span> <span class="string">'2018-11-10'</span> <span class="keyword">and</span> <span class="string">'2018-11-25'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.hit_date,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> a1.user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1 <span class="keyword">join</span> a2 <span class="keyword">on</span> a1.user_account = a2.user_account</span><br><span class="line"><span class="keyword">WHERE</span>   </span><br><span class="line">    a2.hit_date =  <span class="keyword">date_add</span>(a1.hit_date, <span class="number">1</span>) </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    a1.hit_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">BY</span></span><br><span class="line">    a1.hit_date</span><br></pre></td></tr></table></figure></p><p> 步骤3： 算出留存率</p><p><strong>方法3：</strong> (迷神)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 留存sql优化</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> userid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> t1.userid,</span><br><span class="line">                t1.statdate</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            table1 t1</span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            t1.statdate = $&#123;上<span class="number">30</span>天日期&#125;</span><br><span class="line">            <span class="keyword">and</span> t1.statdate &lt;= $&#123;上一天日期&#125;</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">            t1.userid,</span><br><span class="line">            t1.statdate</span><br><span class="line">        ) s1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        userid</span><br><span class="line">    <span class="keyword">having</span></span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>)  <span class="number">2</span></span><br><span class="line">    ) R1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--此sql为一个样例，计算连续跟任意都适用，至于计算第N天，只需要更改下日期过滤条件，变成=$[上N天日期]，=$&#123;上一天日期&#125;。 </span></span><br><span class="line"><span class="comment">--另外，这种方式适合跑当前周期数据，如果跑历史数据，可以写个循环。当然，最暴力还是直接用userid 关联。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--这种写法，更多是针对现在大部分分布式处理平台的特性，尽可能将数据合理均匀分片，每台服务器各自运算自己的，最后汇总。 尽可能少用 count distinct 这种写法，因为无法利用分片的特性。</span></span><br></pre></td></tr></table></figure><hr><p><strong>方法4：</strong> 计算月留存率的简单方法</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">with a1 as (</span><br><span class="line">    select</span><br><span class="line">        user_account,</span><br><span class="line">        count(distinct month(hit_date)) as c</span><br><span class="line">    from </span><br><span class="line">        data_an</span><br><span class="line">    where </span><br><span class="line">        hit_date between &apos;2019-01-01&apos; and &apos;2019-02-31&apos;</span><br><span class="line">    group by </span><br><span class="line">        user_account</span><br><span class="line">    having </span><br><span class="line">        c = 2</span><br><span class="line">    union</span><br><span class="line">    select</span><br><span class="line">        user_account,</span><br><span class="line">        count(distinct month(hit_date)) as c</span><br><span class="line">    from </span><br><span class="line">        data_ios</span><br><span class="line">    where </span><br><span class="line">        hit_date between &apos;2019-01-01&apos; and &apos;2019-02-31&apos;</span><br><span class="line">    group by </span><br><span class="line">        user_account</span><br><span class="line">    having </span><br><span class="line">        c = 2</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h2 id="计算上一步"><a href="#计算上一步" class="headerlink" title="计算上一步"></a>计算上一步</h2><p><strong>需求1：</strong> 求点击【确认充值】按钮的上一步点击的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">with</span> a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    btn_name,</span><br><span class="line">    lag(btn_name, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> create_timestamp) <span class="keyword">as</span> previous_btn_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-01'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    btn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    btn_name <span class="keyword">like</span> <span class="string">'确认支付'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    previous_btn_name,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    previous_btn_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    c <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span></span><br><span class="line">    <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><strong>需求2：</strong>上一步点击的名称我已经知道了， 现在要想 之前通过上一步点击这些条件之后， 再点击【确认支付】按钮的 去重uv</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">with</span> a <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    btn_name,</span><br><span class="line">    lag(btn_name, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> create_timestamp) <span class="keyword">as</span> previous_btn_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-01'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    btn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    btn_name <span class="keyword">like</span> <span class="string">'确认支付'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> c</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    (previous_btn_name <span class="keyword">like</span> <span class="string">"%10元%"</span> <span class="keyword">or</span> </span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%30元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%50元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%10元%"</span> <span class="keyword">or</span> </span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%30元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%50元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%100元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%200元%"</span> <span class="keyword">or</span></span><br><span class="line">    previous_btn_name <span class="keyword">like</span> <span class="string">"%300元%"</span> )</span><br><span class="line"><span class="comment">-- 125752</span></span><br></pre></td></tr></table></figure><hr><h2 id="创建临时表"><a href="#创建临时表" class="headerlink" title="创建临时表"></a>创建临时表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.nine_android_user_version_10</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    user_account <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    app_version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account,</span><br><span class="line">    app_version</span><br></pre></td></tr></table></figure><h2 id="原始日志中取数"><a href="#原始日志中取数" class="headerlink" title="原始日志中取数"></a>原始日志中取数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test.nine_user_version_10</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>) <span class="keyword">as</span> user_account,</span><br><span class="line">    <span class="keyword">split</span>(url_par(url_query,<span class="string">'AppID'</span>),<span class="string">' '</span>)[<span class="number">1</span>] <span class="keyword">as</span> app_version</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    apache_log.client_ios_sensor</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    dt <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-20'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    url_par(url_query,<span class="string">'AppID'</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    url_par(url_query,<span class="string">'account'</span>),</span><br><span class="line">    <span class="keyword">split</span>(url_par(url_query,<span class="string">'AppID'</span>),<span class="string">' '</span>)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="取-pv-gt-3-的用户量"><a href="#取-pv-gt-3-的用户量" class="headerlink" title="取 pv &gt; 3 的用户量"></a>取 pv &gt; 3 的用户量</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">computer_view.data</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;&#125;'</span></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">computer_view.data</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">nbtn_name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span> </span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'&#123;&#125;'</span> <span class="keyword">and</span> <span class="string">'&#123;&#125;'</span>),</span><br><span class="line">a2 <span class="keyword">as</span> (<span class="keyword">SELECT</span></span><br><span class="line"> user_account,</span><br><span class="line"><span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">user_account</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line"><span class="keyword">count</span>(user_account) &gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br></pre></td></tr></table></figure><h2 id="求连续4个月活跃的用户数"><a href="#求连续4个月活跃的用户数" class="headerlink" title="求连续4个月活跃的用户数"></a>求连续4个月活跃的用户数</h2><p><strong>需求1</strong>：1月活跃的用户数， 在2月、3月、4月一直活跃的用户有多少？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span>  user_account , <span class="keyword">month</span>(hit_date) <span class="keyword">as</span> <span class="keyword">month</span></span><br><span class="line"><span class="keyword">from</span> compu_view.ios_log_view</span><br><span class="line"><span class="keyword">where</span> hit_date <span class="keyword">between</span> <span class="string">'2019-01-01'</span> <span class="keyword">and</span> <span class="string">'2019-04-30'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_account, <span class="keyword">month</span>(hit_date) </span><br><span class="line">),</span><br><span class="line">a2 <span class="keyword">as</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    user_account,a1.month,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  user_account <span class="keyword">order</span> <span class="keyword">by</span> a1.month) <span class="keyword">as</span> px</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    a2.px = <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><!-- https://wing324.github.io/2017/10/20/Hive%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%A7%E5%85%A8/ --><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>count()</td><td>个数统计函数</td></tr><tr><td>count(distinct  )</td><td>统计去重之后的个数</td></tr><tr><td>sum()</td><td>求和</td></tr><tr><td>sum(distinct )</td><td>去重之后的和</td></tr><tr><td>avg()</td><td>平均值</td></tr><tr><td>avg(distinct)</td><td>去重之后的平均值</td></tr><tr><td>min()</td><td>最小值</td></tr><tr><td>max()</td><td>最大值</td></tr><tr><td>corr(A, B)</td><td>相关系数</td></tr><tr><td>var_pop()</td><td>方差</td></tr><tr><td>var_samp()</td><td>样本方差</td></tr><tr><td>stddev_pop()</td><td>标准偏差</td></tr><tr><td>stddev_samp()</td><td>标准样本偏差</td></tr><tr><td>covar_pop(A, B)</td><td>协方差</td></tr><tr><td>covar_samp(A, B)</td><td>样本协方差</td></tr><tr><td>RAND()</td><td>随机数</td></tr></tbody></table><h2 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h2><table><thead><tr><th>函数名</th><th>定义</th><th>语句</th></tr></thead><tbody><tr><td>NOW ( )</td><td>当前时间</td><td>select now()</td></tr><tr><td>extract()</td><td>抽取具体的年、月、日</td></tr><tr><td>date()</td><td>返回时间的日期部分</td></tr><tr><td>year()</td><td>返回时间的年份</td></tr><tr><td>month()</td><td>返回时间的月份</td></tr><tr><td>day()</td><td>返回日期的天</td></tr><tr><td>hour()</td><td>返回时间的小时</td></tr><tr><td>minute()</td><td>返回时间的分钟</td></tr><tr><td>second()</td><td>返回时间的秒</td></tr><tr><td>week ()</td><td>第几周</td></tr><tr><td>dayofweek()</td><td>返回星期几，1为星期天</td></tr><tr><td>dayofyear()</td><td>一年中的第几天</td></tr><tr><td>sec_to_time ( )</td><td>秒数转成时间</td></tr><tr><td>dateadd()</td><td>时间相加</td><td>date_add(dt,interval 1 day )</td></tr><tr><td>date_sub()</td><td>时间相减</td></tr><tr><td>datediff()</td><td>时间的差值</td></tr><tr><td>date_format()</td><td>输出指定时间格式</td><td>date_format(hit_date, “%Y-%m-%d)</td></tr><tr><td>datename()</td><td>返回日期部分的参数</td></tr><tr><td>datepart()</td><td>返回日期、时间的单独部分</td></tr></tbody></table><hr><h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a><a href="http://www.pianshen.com/article/856315136/" target="_blank" rel="noopener">窗口函数</a></h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>rank()</td><td>排名相等的会留下空位</td></tr><tr><td>dense_rank()</td><td>排名相等的不会留下空位</td></tr><tr><td>row_number()</td><td>排名不管数据是否相等</td></tr><tr><td>lag()</td><td>访问相同结果集的先前行中的数据</td></tr><tr><td>lead()</td><td>访问相同结果集的后续行中的数据</td></tr><tr><td>first_value()</td><td>返回组中数据窗口的第一个值</td></tr><tr><td>last_value()</td><td>返回组中数据窗口的最后一个值</td></tr><tr><td>if()</td><td>条件判断函数</td></tr><tr><td>case…when…else…end</td><td>判断各个元素是否满足了某种条件的集合</td></tr><tr><td>over()</td><td>与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能</td></tr><tr><td>split()</td><td>hive字符串分割函数</td></tr><tr><td>intersect</td><td>交集</td></tr><tr><td>except</td><td>差集</td></tr><tr><td>union all</td><td>并集</td></tr><tr><td>round</td><td>把数值字段舍入为指定的小数位数</td></tr><tr><td>difference</td><td>衡量两个值之间的差异</td></tr><tr><td>coalesce</td><td>1、将控制替换成其他值；2、返回第一个非空值</td></tr><tr><td>pivot</td><td>行转换列</td></tr></tbody></table><hr><p><strong>over 函数详解</strong></p><p> 语法： over(partition by ….)<br> 作用： 与聚合函数sum(), count(), avg()等结合使用， 实现分组聚合的功能</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据日期 和 mac_id 进行分组求每组的数量和， 并按日期排序</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date, </span><br><span class="line">    mac_id,</span><br><span class="line">    mac_color,</span><br><span class="line">    day_num,</span><br><span class="line">    <span class="keyword">sum</span>(day_num) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> hit_date, mac_id <span class="keyword">order</span> <span class="keyword">by</span> hit_date) <span class="keyword">as</span> sum_num</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.datas</span><br></pre></td></tr></table></figure><table><thead><tr><th>hit_date</th><th>mac_id</th><th>mac_color</th><th>day_num</th><th>sum_num</th></tr></thead><tbody><tr><td>20171011</td><td>1292</td><td>金色</td><td>11</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>黑色</td><td>19</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>粉金</td><td>58</td><td>89</td></tr><tr><td>20171011</td><td>1292</td><td>金色</td><td>1</td><td>89</td></tr><tr><td>20171011</td><td>2013</td><td>金色</td><td>9</td><td>22</td></tr><tr><td>20171011</td><td>2013</td><td>金色</td><td>3</td><td>22</td></tr><tr><td>20171012</td><td>1292</td><td>金色</td><td>5</td><td>18</td></tr><tr><td>20171012</td><td>1292</td><td>粉金</td><td>1</td><td>18</td></tr><tr><td>20171012</td><td>2013</td><td>粉金</td><td>1</td><td>7</td></tr><tr><td>20171012</td><td>2013</td><td>金色</td><td>6</td><td>7</td></tr><tr><td>20171013</td><td>1292</td><td>黑色</td><td>1</td><td>1</td></tr><tr><td>20171013</td><td>2013</td><td>粉金</td><td>2</td><td>2</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># group by 语句</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    hit_date,</span><br><span class="line">    mac_id,</span><br><span class="line">    <span class="keyword">sum</span>(day_num) </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    test.data</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    hit_date,</span><br><span class="line">    mac_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    hit_date</span><br></pre></td></tr></table></figure><table><thead><tr><th>day_id</th><th>mac_id</th><th>sum_num</th></tr></thead><tbody><tr><td>20171011</td><td>124609</td><td>1</td></tr><tr><td>20171011</td><td>20130</td><td>22</td></tr><tr><td>20171011</td><td>12922</td><td>89</td></tr><tr><td>20171012</td><td>12922</td><td>18</td></tr><tr><td>20171012</td><td>20130</td><td>7</td></tr><tr><td>20171013</td><td>12922</td><td>1</td></tr><tr><td>20171013</td><td>20130</td><td>2</td></tr></tbody></table><ul><li>over(partition by)  与 group by 的区别：<br> grou by 字段只能显示与分组聚合相关的字段， 而 over(partition by) 可以显示所有字段</li></ul><hr><p> <strong>LAG 和 LEAD 函数详解</strong></p><p> 语法： LAG(col,n,DEFAULT) 用于统计窗口内往上第n行值;<br> LEAD(col,n,DEFAULT) 用于统计窗口内往下第n行值</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算11月1-10号， 不同日期同一用户登陆客户端 pv 量对比</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv,</span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account, hit_date)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    user_account,</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.pv,</span><br><span class="line">    lag(a1.pv, <span class="number">1</span>) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv1,</span><br><span class="line">    <span class="keyword">lead</span>(a1.pv, <span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account  <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><p><strong>first_value() 和 last_value() 函数详解</strong></p><ul><li>first_value() ：比较每个用户浏览次数与第一天浏览次数进行比较，查询返回当前浏览次数以及第一天浏览次数</li><li>last_value() ： 比较每个用户浏览次数与最新一天浏览次数进行比较，查询返回当前浏览次数以及最新一天浏览次数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (<span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    <span class="keyword">count</span>(user_account) <span class="keyword">as</span> pv,</span><br><span class="line">    hit_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-11-01'</span> <span class="keyword">and</span><span class="string">'2018-11-10'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    user_account, hit_date)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.pv,</span><br><span class="line">    <span class="keyword">first_value</span>(a1.pv) <span class="keyword">over</span> (<span class="keyword">partition</span> <span class="keyword">by</span> user_account <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv1,</span><br><span class="line">    <span class="keyword">last_value</span>(a1.pv) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_account  <span class="keyword">order</span> <span class="keyword">by</span> user_account, a1.hit_date) <span class="keyword">as</span> pv2</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">limit</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><hr><p><strong>rank、dense_rank、 row_number  排序函数详解</strong></p><ul><li>rank函数， 返回数据项在分组中的排名， 排名相等的会留下空位， 如1、2、2、4</li><li>dense_rank函数， 返回数据项在分组中的排名， 排名相等的不会留下空位， 如1、2、2、3</li><li>row_number函数， 返回数据项在分组中的排名， 排名不管数据是否相等， 如1、2、3、4</li></ul><p><a href="https://docs.microsoft.com/en-us/sql/t-sql/functions/row-number-transact-sql?view=sql-server-2017" target="_blank" rel="noopener">row_number函数说明</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a,</span><br><span class="line">    row_number() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) row_number,</span><br><span class="line">    <span class="keyword">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) <span class="keyword">rank</span>,</span><br><span class="line">    <span class="keyword">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> b) <span class="keyword">dense_rank</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    lijie.test_rank</span><br></pre></td></tr></table></figure><table><thead><tr><th>a</th><th>row_number</th><th>rank</th><th>dense_rank</th></tr></thead><tbody><tr><td>A</td><td>1</td><td>1</td><td>1</td></tr><tr><td>C</td><td>2</td><td>2</td><td>2</td></tr><tr><td>D</td><td>3</td><td>3</td><td>3</td></tr><tr><td>B</td><td>4</td><td>3</td><td>3</td></tr><tr><td>E</td><td>5</td><td>5</td><td>4</td></tr><tr><td>F</td><td>6</td><td>6</td><td>5</td></tr><tr><td>G</td><td>7</td><td>7</td><td>6</td></tr></tbody></table><hr><p><strong>if 函数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">city, count(distinct user_account) as uv </span><br><span class="line">from </span><br><span class="line">an_log_view</span><br><span class="line">where </span><br><span class="line">hit_date = &apos;2019-06-10&apos;</span><br><span class="line">group by </span><br><span class="line">city</span><br><span class="line">having</span><br><span class="line">count(if( nbtn_name like &quot;发现&quot;, 1, null)) = 20</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">city,</span><br><span class="line">count(1),</span><br><span class="line">count(if( nbtn_name like &quot;发现&quot;, 1, null)),</span><br><span class="line">count(if(nbtn_name like &quot;发现&quot;， 1， null)) / count(1)</span><br><span class="line">from</span><br><span class="line">a1</span><br><span class="line">group by </span><br><span class="line">city</span><br></pre></td></tr></table></figure><hr><p><strong>lateral view 函数</strong></p><ul><li>lateral view 用于和 split、explode、collect_set 函数 等一起使用， 能够将一行数据拆成多行数据，在此基础上对拆分后的数据进行聚合。 </li></ul><p><strong>需求1：</strong> 将 表 table 中的 <code>adid_list</code> 转换为单独的行。<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    pageid, adid</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span>  <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable  <span class="keyword">as</span> adid</span><br></pre></td></tr></table></figure></p><p>表-table：</p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>[1,2,3]</td></tr><tr><td>contact_page</td><td>[3,4]</td></tr></tbody></table><p> 输出结果为： </p><table><thead><tr><th>pageid</th><th>adid_list</th></tr></thead><tbody><tr><td>front_page</td><td>1</td></tr><tr><td>front_page</td><td>2</td></tr><tr><td>front_page</td><td>3</td></tr><tr><td>contact_page</td><td>3</td></tr><tr><td>contact_page</td><td>4</td></tr></tbody></table><p><strong>需求2：</strong> 计算特定广告的展现次数</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    adid, <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    <span class="keyword">table</span></span><br><span class="line"><span class="keyword">lateral</span> <span class="keyword">view</span> <span class="keyword">explode</span>(adid_list) adTable <span class="keyword">as</span> adid</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">    adid</span><br></pre></td></tr></table></figure><p>输出结果为： </p><table><thead><tr><th>adid</th><th>count(1)</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>2</td></tr><tr><td>4</td><td>1</td></tr></tbody></table><p><strong>需求3：</strong> 多个 lateral view 查询<br> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    myCol1, myCol2</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    baseTable</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col1) myTable1 <span class="keyword">AS</span> myCol1</span><br><span class="line"><span class="keyword">LATERAL</span> <span class="keyword">VIEW</span> <span class="keyword">explode</span>(col2) myTable2 <span class="keyword">AS</span> myCol2</span><br></pre></td></tr></table></figure></p><p>表： table2</p><table><thead><tr><th>array</th><th>col2</th></tr></thead><tbody><tr><td>[1,2]</td><td>[“a”，”b”]</td></tr><tr><td>[3,4]</td><td>[“c”, “d”]</td></tr></tbody></table><p>输出结果为： </p><table><thead><tr><th>myCol1</th><th>myCol2</th></tr></thead><tbody><tr><td>1</td><td>“a”</td></tr><tr><td>1</td><td>“b”</td></tr><tr><td>2</td><td>“a”</td></tr><tr><td>2</td><td>“b”</td></tr><tr><td>3</td><td>“c”</td></tr><tr><td>3</td><td>“d”</td></tr><tr><td>4</td><td>“c”</td></tr><tr><td>4</td><td>“d”</td></tr></tbody></table><hr><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数名</th><th>定义</th></tr></thead><tbody><tr><td>concat()</td><td>拼接字符串</td></tr><tr><td>length()</td><td>计算字符串的长度，一个汉字算三个字符</td></tr><tr><td>instr (A ,B )</td><td>返回字符B首次在A中出现的位置,不存在返回0</td></tr><tr><td>lcase()</td><td>转换成小写</td></tr><tr><td>left(string2 ,length )</td><td>从string2中的左边起取length个字符</td></tr><tr><td>lower()</td><td>将字串转化为小写</td></tr><tr><td>upper()</td><td>将字符转化为大写</td></tr><tr><td>replace()</td><td>替换字符</td></tr><tr><td>substr()</td><td>返回字符串A从start位置开始，长度为len的字符串</td></tr><tr><td>substring()</td><td>截取字符串</td></tr><tr><td>substring_index()</td><td>通过截取获取不同索引位的字符</td></tr><tr><td>LTRIM (string2 )</td><td>去除前端空格</td></tr><tr><td>RTRIM (string2 )</td><td>去除后端空格</td></tr></tbody></table><p><strong>字符串截取函数：substr,substring, substring_index</strong></p><ul><li><p>语法: substr(string A, int start, int len),substring(string A, int start, int len)</p></li><li><p>返回值: string</p></li><li><p>说明：返回字符串A从start位置开始，长度为len的字符串</p></li></ul><p>举例1：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> computer_view;</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">substring</span>(charge_products,<span class="number">2</span>,<span class="number">30</span>)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    <span class="keyword">data</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-01'</span> <span class="keyword">and</span> <span class="string">'2018-10-05'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    charge_products</span><br><span class="line"><span class="keyword">limit</span> <span class="number">15</span></span><br></pre></td></tr></table></figure><p>举例2：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">     a1.name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    lookup.products_lookup <span class="keyword">as</span>  a1    <span class="keyword">join</span>    computer_view.data   <span class="keyword">as</span> a2</span><br><span class="line">    <span class="keyword">on</span></span><br><span class="line">    a1.product =  <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>)</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-10-07'</span> <span class="keyword">and</span> <span class="string">'2018-10-13'</span></span><br><span class="line">    <span class="keyword">and</span></span><br><span class="line">    mall_events <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    <span class="keyword">substring</span>(a2.charge_products,<span class="number">2</span>,<span class="number">80</span>),</span><br><span class="line">    a1.name</span><br></pre></td></tr></table></figure></p><p>举例3：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--打断</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">substring_index(page_url, <span class="string">'?'</span>, <span class="number">1</span>),</span><br><span class="line"><span class="keyword">count</span>(<span class="keyword">distinct</span> user_tracking_id) <span class="keyword">as</span> uv,</span><br><span class="line"><span class="keyword">count</span>(page_url) <span class="keyword">as</span> pv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    computer_view</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-04-09'</span> <span class="keyword">and</span> <span class="string">'2019-04-09'</span> </span><br><span class="line"><span class="keyword">and</span> </span><br><span class="line">campaign <span class="keyword">like</span> <span class="string">"%scjh-scep-tcnr-9yuanka%"</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">substring_index(page_url, <span class="string">'?'</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    uv <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><hr><h1 id="CASE-表达式"><a href="#CASE-表达式" class="headerlink" title="CASE 表达式"></a>CASE 表达式</h1><h2 id="case-when-的用法"><a href="#case-when-的用法" class="headerlink" title="case when 的用法"></a>case when 的用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">case </span><br><span class="line">        when phone_province like &apos;ah&apos; then &apos;安徽&apos;</span><br><span class="line">        when phone_province like &apos;fj&apos; then &apos;福建&apos;</span><br><span class="line">        when phone_province like &apos;gd&apos; then &apos;广东&apos;</span><br><span class="line">    else &apos;m&apos; </span><br><span class="line">    end as phone_province ,</span><br><span class="line">    count(distinct user_account) uv,count(page_name) pv</span><br><span class="line">from client_android_log</span><br><span class="line">where hit_date between &apos;&#123;&#125;&apos; and &apos;&#123;&#125;&apos;</span><br><span class="line">and page_name like &apos;%Kefujh%&apos;</span><br><span class="line">group by case </span><br><span class="line">        when phone_province like &apos;ah&apos; then &apos;安徽&apos;</span><br><span class="line">        when phone_province like &apos;fj&apos; then &apos;福建&apos;</span><br><span class="line">        when phone_province like &apos;gd&apos; then &apos;广东&apos;</span><br><span class="line">    else &apos;m&apos; </span><br><span class="line">    end </span><br><span class="line">order by case </span><br><span class="line">        when phone_province like &apos;ah&apos; then &apos;安徽&apos;</span><br><span class="line">        when phone_province like &apos;fj&apos; then &apos;福建&apos;</span><br><span class="line">        when phone_province like &apos;gd&apos; then &apos;广东&apos;</span><br><span class="line">    else &apos;m&apos; </span><br><span class="line">    end </span><br><span class="line">limit 1000</span><br></pre></td></tr></table></figure><h1 id="ALTER-TABLE-语句"><a href="#ALTER-TABLE-语句" class="headerlink" title="ALTER TABLE 语句"></a>ALTER TABLE 语句</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--清楚表中数据,删除掉指定分区</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> shphonefeature <span class="keyword">DROP</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="keyword">PARTITION</span>(<span class="keyword">year</span> = <span class="number">2015</span>, <span class="keyword">month</span> = <span class="number">10</span>, <span class="keyword">day</span> = <span class="number">1</span>);</span><br><span class="line"><span class="comment">---lter table test.mon_mau_list drop partition (hit_mon = '&#123;0&#125;')</span></span><br></pre></td></tr></table></figure><h1 id="对用户进行标注"><a href="#对用户进行标注" class="headerlink" title="对用户进行标注"></a>对用户进行标注</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">with a1 as(</span><br><span class="line">select</span><br><span class="line">hit_date,</span><br><span class="line">user_account,</span><br><span class="line">hit_mon,</span><br><span class="line">first_login</span><br><span class="line">from</span><br><span class="line">    test.day_dau</span><br><span class="line">where</span><br><span class="line">hit_date between &apos;&#123;0&#125;-01&apos; and &apos;&#123;0&#125;-31&apos;),</span><br><span class="line">a2 as(</span><br><span class="line">select</span><br><span class="line">    user_account</span><br><span class="line">from</span><br><span class="line">    test.mon_new_user</span><br><span class="line">where</span><br><span class="line">    hit_mon = &apos;&#123;0&#125;&apos;),</span><br><span class="line">a3 as(</span><br><span class="line">select</span><br><span class="line">    a1.hit_date,</span><br><span class="line">    a1.user_account,</span><br><span class="line">    a1.hit_mon,</span><br><span class="line">    a1.first_login,</span><br><span class="line">    a2.user_account as if_new</span><br><span class="line">from</span><br><span class="line">    a1 left join a2 on</span><br><span class="line">    a1.user_account = a2.user_account)</span><br><span class="line">insert into table test.dau_ifnew</span><br><span class="line">select</span><br><span class="line">user_account,</span><br><span class="line">(case when if_new is not null and hit_date = first_login then &apos;new&apos; else &apos;old&apos; end) as user_label,</span><br><span class="line">hit_date,</span><br><span class="line">hit_mon</span><br><span class="line">from</span><br><span class="line">a3</span><br></pre></td></tr></table></figure><!-- #### 2. 作用：* 等值转换* 范围转换* 列转行 -- 2.  等值转换* 有这么一张表 pop ：|area(地区)|population(万)||--|--||    渭南市    |    538    ||    延安市    |    226    ||    商洛市    |    238    ||    昆明市    |    673    ||    曲靖市    |    650||    青岛市    |    769    |* 需要得出如下表的结果：|省|人口（万）||--|--||陕西|1002||云南|1326||其他|769|* sql如下：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将地名转换成省</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">case</span>  area</span><br><span class="line">        <span class="keyword">when</span> <span class="string">"渭南市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"延安市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"商洛市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"昆明市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"曲靖市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">"其他"</span> <span class="keyword">end</span> <span class="keyword">as</span> district,</span><br><span class="line">    <span class="keyword">sum</span>(population)</span><br><span class="line"><span class="keyword">from</span> pop</span><br><span class="line"><span class="comment">-- group by </span></span><br><span class="line"><span class="comment">--     case area</span></span><br><span class="line"><span class="comment">--            when "渭南市" then "陕西"</span></span><br><span class="line"><span class="comment">--             when "延安市" then "陕西"</span></span><br><span class="line"><span class="comment">--             when "商洛市" then "陕西"</span></span><br><span class="line"><span class="comment">--             when "昆明市" then "云南"</span></span><br><span class="line"><span class="comment">--             when "曲靖市" then "云南"</span></span><br><span class="line"><span class="comment">--     else "其他" end</span></span><br></pre></td></tr></table></figure><!-- <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将地名转换成省</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">case</span>  area</span><br><span class="line">        <span class="keyword">when</span> <span class="string">"渭南市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"延安市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"商洛市"</span> <span class="keyword">then</span> <span class="string">"陕西"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"昆明市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">        <span class="keyword">when</span> <span class="string">"曲靖市"</span> <span class="keyword">then</span> <span class="string">"云南"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="string">"其他"</span> <span class="keyword">end</span> <span class="keyword">as</span> district,</span><br><span class="line">    <span class="keyword">sum</span>(population)</span><br><span class="line"><span class="keyword">from</span> pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    district</span><br><span class="line"><span class="string">``</span><span class="string">` --</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 4. 范围转换</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">* 按人口数量等级划分</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="keyword">sql</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> population &lt; <span class="number">250</span> <span class="keyword">then</span> <span class="string">'1'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">250</span> <span class="keyword">and</span> population &lt; <span class="number">500</span> <span class="keyword">then</span> <span class="string">'2'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">500</span> <span class="keyword">and</span> population &lt; <span class="number">750</span> <span class="keyword">then</span> <span class="string">'3'</span></span><br><span class="line">            <span class="keyword">when</span> population = <span class="number">750</span> <span class="keyword">then</span> <span class="string">'4'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="literal">null</span> <span class="keyword">end</span> <span class="keyword">as</span> pop_classs,</span><br><span class="line">        <span class="keyword">count</span>(*) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    pop</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    district;</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">输出结果为：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 省略写法</span><br><span class="line"> <span class="keyword">select</span> 子句 与<span class="keyword">group</span> <span class="keyword">by</span> 子句 两处写法一样，后期修改比较麻烦，可以下下面这样： <span class="comment">--</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*  其他例子</span><br><span class="line"></span><br><span class="line">|area(地区)|population(人口)|sex(性别)|</span><br><span class="line">|<span class="comment">--|--|--|</span></span><br><span class="line">|渭南市|<span class="number">5286077</span>|<span class="number">1</span>|</span><br><span class="line">|渭南市|<span class="number">3286077</span>|<span class="number">2</span>|</span><br><span class="line">|延安市|<span class="number">2187009</span>|<span class="number">1</span>|</span><br><span class="line">|延安市|<span class="number">1187009</span>|<span class="number">2</span>|</span><br><span class="line">|商洛市|<span class="number">3351436</span>|<span class="number">1</span>|</span><br><span class="line">|商洛市|<span class="number">2351436</span>|<span class="number">2</span>|</span><br><span class="line"></span><br><span class="line">按照性别对每个县进行汇总：</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`sql</span></span><br><span class="line"><span class="string">select </span></span><br><span class="line"><span class="string">    area,</span></span><br><span class="line"><span class="string">    sum(case when sex = '1' then population else 0 end) as cnt_m,</span></span><br><span class="line"><span class="string">    sum(case when sex = '2' then population else 0 end) as cnt_f</span></span><br><span class="line"><span class="string">from </span></span><br><span class="line"><span class="string">    pop</span></span><br><span class="line"><span class="string">group by </span></span><br><span class="line"><span class="string">    area</span></span><br></pre></td></tr></table></figure><hr><h1 id="group-by-升级版"><a href="#group-by-升级版" class="headerlink" title="group by 升级版"></a>group by 升级版</h1><h4 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h4><p>通过 a1 明细表，获得每个店铺，每个城市，每个省份，每个大区以及全国5月的份的成交量情况。</p><table><thead><tr><th>order_id</th><th>shop</th><th>city</th><th>province</th><th>area</th><th>hit_date</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>西安</td><td>陕西</td><td>西北大区</td><td>2019-05-04</td></tr><tr><td>2</td><td>B</td><td>上海</td><td>上海</td><td>华东大区</td><td>2019-05-01</td></tr><tr><td>3</td><td>C</td><td>安康</td><td>陕西</td><td>西北大区</td><td>2019-05-02</td></tr><tr><td>4</td><td>D</td><td>北京</td><td>北京</td><td>华中大区</td><td>2019-05-21</td></tr><tr><td>5</td><td>E</td><td>延安</td><td>陕西</td><td>西北大区</td><td>2019-05-03</td></tr><tr><td>6</td><td>F</td><td>成都</td><td>四川</td><td>西南大区</td><td>2019-05-19</td></tr><tr><td>7</td><td>G</td><td>汉中</td><td>陕西</td><td>西北大区</td><td>2019-06-04</td></tr><tr><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td><td>…</td></tr><tr><td>10000</td><td>H</td><td>郑州</td><td>河南</td><td>西北大区</td><td>2019-05-29</td></tr></tbody></table><h2 id="解法1："><a href="#解法1：" class="headerlink" title="解法1："></a>解法1：</h2><p> 分别写5个sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全国成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 大区成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 省成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 城市成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 店铺成交量</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop,</span><br><span class="line"><span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">area,</span><br><span class="line">province,</span><br><span class="line">city,</span><br><span class="line">shop</span><br></pre></td></tr></table></figure><p>这种方法太低效了， 还需要在excel中进行合并，比较麻烦。</p><h2 id="解法2："><a href="#解法2：" class="headerlink" title="解法2："></a>解法2：</h2><p>通过 union 和 union all 对查询结果进行纵向合并<br> union: 对合并后的结果进行去重处理<br> union all : 返回合并后的所有数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="literal">null</span>,<span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, <span class="literal">null</span> , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province , <span class="literal">null</span> ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,<span class="literal">null</span>, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> area, province, city ,shop, <span class="keyword">count</span>(order_id) <span class="keyword">as</span> sales <span class="keyword">from</span>  a1 <span class="keyword">where</span>  hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span> <span class="keyword">group</span> <span class="keyword">by</span> area, province, city, shop</span><br></pre></td></tr></table></figure><p> 上述式中有很多 null, 这是因为 union all 拼接的两个表的列数需要相等。</p><p>结果如下：</p><p><img src="https://i.loli.net/2019/06/10/5cfe6c219ca3f57084.png" alt=""></p><h2 id="解法3："><a href="#解法3：" class="headerlink" title="解法3："></a>解法3：</h2><p>利用 <code>union all</code> 比写出5个sql 再在 Excel 中处理简单很多，但是代码比较冗余。可以用<code>grouping sets</code>来进行优化。 此函数可以根据不同维度组合进行聚合。</p><p>将<code>union all</code> 语句用<code>grouping sets</code> 进行改写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    city,</span><br><span class="line">    shop</span><br><span class="line"><span class="keyword">grouping</span> <span class="keyword">sets</span></span><br><span class="line">    (<span class="literal">null</span>,</span><br><span class="line">    area,</span><br><span class="line">    (area,province),</span><br><span class="line">    (area,province,city),</span><br><span class="line">    (area,province,city,shop)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p>得到结果与利用 <code>union all</code>拼接结果相同。<code>group by</code>后面的字段表示要分组聚合的全部字段， <code>grouping sets</code>后面为 <code>group by</code> 后面各种字段的组合。</p><p><code>grouping_id</code>表示每个分组的序号。 1 表示第一个分组、2表示第二个分组。我们可以根据<code>grouping_id</code> 选取我们需要的组合。如果我们需要全国的成交量，则让 <code>grouping_id = 1</code>, 需要每个省的成交量，让 <code>grouping_id = 3</code>。</p><h2 id="解法4："><a href="#解法4：" class="headerlink" title="解法4："></a>解法4：</h2><p><code>cube</code>函数， 对<code>group by</code>的维度的所有组合进行聚合。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">cube</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe78ba58dfb91072.png" alt=""></p><p>以上代码对区域和省份进行了聚合， <code>cube</code> 会先对全部数据进行聚合，即 <code>null, null</code>， 再对<code>area,null</code>进行聚合，然后再对<code>null, province</code>进行聚合，最后再对<code>area,province</code>进行聚合。</p><h2 id="解法5："><a href="#解法5：" class="headerlink" title="解法5："></a>解法5：</h2><p><code>rollup</code>函数， 和<code>cube</code>类似，是针对 <code>group by</code>所有维度的部分组合。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    area,</span><br><span class="line">    province,</span><br><span class="line">    <span class="keyword">count</span>(orderid) <span class="keyword">as</span> sales,</span><br><span class="line">    <span class="keyword">grouping_id</span></span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2019-05-01'</span> <span class="keyword">and</span> <span class="string">'2019-05-31'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    area,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">with</span> <span class="keyword">rollup</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">grouping_id</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/10/5cfe79320dfb423235.png" alt=""></p><p>对比<code>cube</code>和<code>rollup</code>得到的结果，我们发现<code>rollup</code>少了<code>null province</code> 这个组合，<code>rollup</code> 是以最左侧指标为主进行组合聚合。</p><p>参考资料：<a href="https://mp.weixin.qq.com/s/Xw5DOHHGh838w8YXT9lO5g">讲讲 group 的plus版-张俊红</a></p><hr><h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><p><a href="https://blog.csdn.net/wypblog/article/details/13631649">https://blog.csdn.net/wypblog/article/details/13631649</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><!-- # sql 自定义函数### 自定义标量函数<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Creat function 函数名（参数）</span><br><span class="line">Return 返回值数据类型</span><br><span class="line">[<span class="keyword">with</span> &#123;Encryption | Schemabinding 「将函数绑定到它引用的对象上」&#125;]</span><br><span class="line">[<span class="keyword">as</span>]</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">Return</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><p>例如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Creat FUNCTION</span><br><span class="line">     getNthHighestSalary(N INT)</span><br><span class="line">Returns INT</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span></span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">    <span class="keyword">IFNULL</span>(</span><br><span class="line">          (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">    Salary </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    Employee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    Salary <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">2</span> <span class="keyword">offset</span> <span class="number">1</span>), </span><br><span class="line">    <span class="literal">NULL</span></span><br><span class="line">    ) <span class="keyword">AS</span> getNthHighestSalary(N)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">` --</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1. 多个 like"%%" 语句， 运行比较慢， 有什么优化方法吗？</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">答案：</span></span><br><span class="line"><span class="string">1. 建立索引</span></span><br><span class="line"><span class="string">2. 使用函数来替代 like</span></span><br><span class="line"><span class="string">     mysql： 考虑 locate, position, instr, find_in_set</span></span><br><span class="line"><span class="string">     sql server: charindex, patindex </span></span><br><span class="line"><span class="string">     https://blog.csdn.net/lly983909814/article/details/71642814</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---------------</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 在 spark 中写 hive 循环, 工具 zeppelim</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>s</span><br><span class="line">%spark</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( a &lt;- <span class="number">0</span> <span class="keyword">until</span> <span class="number">30</span>)&#123;</span><br><span class="line">        // val <span class="keyword">sql</span>= s<span class="string">"""use default"""</span></span><br><span class="line">    // spark.sql(<span class="keyword">sql</span>)</span><br><span class="line">    val <span class="keyword">sql</span> = s<span class="string">"""</span></span><br><span class="line"><span class="string">    with a1 as (</span></span><br><span class="line"><span class="string">    select</span></span><br><span class="line"><span class="string">        user_account</span></span><br><span class="line"><span class="string">    from</span></span><br><span class="line"><span class="string">        computer_view.data</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">         hit_date between "</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">" and date_add("</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">",$&#123;a&#125;)</span></span><br><span class="line"><span class="string">    union all </span></span><br><span class="line"><span class="string">        select</span></span><br><span class="line"><span class="string">        user_account</span></span><br><span class="line"><span class="string">    from</span></span><br><span class="line"><span class="string">        computer_view.data</span></span><br><span class="line"><span class="string">    where</span></span><br><span class="line"><span class="string">         hit_date between "</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">" and date_add("</span><span class="number">2018</span><span class="number">-11</span><span class="number">-01</span><span class="string">",$&#123;a&#125;))</span></span><br><span class="line"><span class="string">    select</span></span><br><span class="line"><span class="string">        count(distinct user_account) as uv</span></span><br><span class="line"><span class="string">    from</span></span><br><span class="line"><span class="string">        a1</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    val <span class="keyword">data</span> = spark.sql(<span class="keyword">sql</span>)</span><br><span class="line">    println(<span class="string">"day:"</span>, a, <span class="string">"uv:"</span>, data.show())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.docs4dev.com/docs/zh/apache-hive/3.1.1/reference/LanguageManual_LateralView.html">Hive中文手册</a></p>-->]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive 基础查询</title>
      <link href="/2019/04/18/%E6%8A%80%E8%83%BD-Hive%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/04/18/%E6%8A%80%E8%83%BD-Hive%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是-Hive"><a href="#什么是-Hive" class="headerlink" title="什么是 Hive"></a>什么是 Hive</h1><p>Hive 是一种建立在Hadoop系统上的数据仓库架构, 并对存储的数据进行分析和管理，这样就使得数据开发和分析人员很方便的使用 SQL 来完成海量数据的统计和分析。</p><p>Hive 擅长的是非实时的、离线的、对响应及时性要求不高的海量数据批量计算，统计分析。</p><p>Hive 不适用于在线交易处理</p><h1 id="Hive-的常见查询语句"><a href="#Hive-的常见查询语句" class="headerlink" title="Hive 的常见查询语句"></a>Hive 的常见查询语句</h1><p> Hive 中的 SELECT 基础语法和标准 SQL 语法基本一致，支持 WHERE、DISTINCT、GROUP BY、ORDER BY、HAVING、LIMIT、子查询等</p><h2 id="Hive-脚本如何注释"><a href="#Hive-脚本如何注释" class="headerlink" title="Hive 脚本如何注释"></a><strong>Hive 脚本如何注释</strong></h2><p>可以用 - - 开头的字符串来表示注释， 也可以将需要注释的 sql 选中， 然后用 ctrl + ? 快捷键来进行注释。 </p><hr><h2 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a><strong>切换数据库</strong></h2> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前数据库</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    current_database()</span><br></pre></td></tr></table></figure> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重置默认数据库</span></span><br><span class="line"><span class="keyword">use</span> <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a><strong>查看表</strong></h2><ul><li><p>查看当前使用的数据库中有哪些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看非当前使用的数据库中有哪些表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">in</span> myhive;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库中以 android 开头的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> android;</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span> <span class="keyword">like</span> <span class="string">'android*'</span></span><br></pre></td></tr></table></figure></li><li><p>查看表的详细信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc formatted android</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="select…from-语句"><a href="#select…from-语句" class="headerlink" title="select…from 语句"></a><strong>select…from 语句</strong></h2><ul><li>基本查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询 employee 表中的 name 和 salary。</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, salary <span class="keyword">from</span> employee;</span><br></pre></td></tr></table></figure><ul><li>加入表中一列含有多个元素， 我们可以只查找此列的第一个元素</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, subord[<span class="number">0</span>] <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><ul><li>使用键值进行索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, deductions[<span class="string">"state taxes"</span>] <span class="keyword">from</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用 "点" 符号， 类似：表的别名 . 列名 这样的用法</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">name</span>, address.city </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure><ul><li>使用列值进行计算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">upper</span>(<span class="keyword">name</span>), salary, deductions[<span class="string">"Federal Taxes"</span>], </span><br><span class="line">    rount(salary * (<span class="number">1</span> - salary, deductions[<span class="string">"Federal Taxes"</span>]))</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">     employees;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ZHANGYU   100000.0     0.2      80000</span></span><br></pre></td></tr></table></figure><ul><li>使用正则表达式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选出所有列名以 price 作为前缀的列</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="string">'price.*'</span> </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks;</span><br></pre></td></tr></table></figure><ul><li>常用的关系运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> 等值比较: =</span><br><span class="line"> 等值比较:&lt;=&gt;</span><br><span class="line"> 不等值比较: &lt;&gt;和!=</span><br><span class="line"> 小于比较: &lt;</span><br><span class="line">小于等于比较: &lt;=</span><br><span class="line"> 大于比较: &gt;</span><br><span class="line"> 大于等于比较: &gt;=</span><br><span class="line"> 区间比较</span><br><span class="line"> 空值判断: IS NULL</span><br><span class="line"> 非空判断: IS NOT NULL</span><br><span class="line"> LIKE比较: LIKE</span><br><span class="line"> JAVA的LIKE操作: RLIKE</span><br><span class="line"> REGEXP操作: REGEXP</span><br></pre></td></tr></table></figure><ul><li>数学运算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">加法操作: +</span><br><span class="line">减法操作: –</span><br><span class="line">乘法操作: *</span><br><span class="line">除法操作: /</span><br><span class="line">取余操作: %</span><br><span class="line">与操作: &amp;</span><br><span class="line">或操作: |</span><br><span class="line">异或操作: ^</span><br><span class="line">取反操作: ~</span><br></pre></td></tr></table></figure><ul><li>常用的聚合函数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">count(*)          # 个数统计函数</span><br><span class="line">count(distinct  col) <span class="comment">#  统计去重之后的个数</span></span><br><span class="line">sum(col)          <span class="comment"># 求和</span></span><br><span class="line">sum(distinct col) <span class="comment">#去重之后的和</span></span><br><span class="line">avg(col)          <span class="comment"># 平均值</span></span><br><span class="line">avg(distinct col) <span class="comment"># 去重之后的平均值</span></span><br><span class="line">min(col)          <span class="comment"># 最小值</span></span><br><span class="line">max(col)          <span class="comment"># 最大值</span></span><br><span class="line">corr(col1, col2)  <span class="comment"># 相关系数</span></span><br><span class="line">var_pop(clo)      <span class="comment"># 方差</span></span><br><span class="line">var_samp(col)     <span class="comment"># 样本方差</span></span><br><span class="line">stddev_pop(col)   <span class="comment"># 标准偏差</span></span><br><span class="line">stddev_samp(col)  <span class="comment"># 标准样本偏差</span></span><br><span class="line">covar_pop(col1, col2) <span class="comment"># 协方差</span></span><br><span class="line">covar_samp(col1, col2) <span class="comment"># 样本协方差</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>), <span class="keyword">avg</span>(salary) <span class="keyword">form</span> employees;</span><br></pre></td></tr></table></figure><ul><li>使用别名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> acount) <span class="keyword">as</span> uv </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees;</span><br></pre></td></tr></table></figure><ul><li>使用limit语句限制返回的行数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  只显示 10 行</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">form</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">limit</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li>嵌套 select 语句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    e.name, e.salary</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">upper</span>(<span class="keyword">name</span>)</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">        employees</span><br><span class="line">) <span class="keyword">as</span> e</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     e.salary &gt; <span class="number">500</span>;</span><br></pre></td></tr></table></figure><ul><li>case…when..then句式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span> , salary,</span><br><span class="line">    <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> salary &lt; <span class="number">5000</span> <span class="keyword">then</span> <span class="string">'low'</span></span><br><span class="line">        <span class="keyword">when</span> salary &gt; = <span class="number">5000</span> <span class="keyword">and</span> salary &lt; <span class="number">70000</span> <span class="keyword">then</span> <span class="string">'middle'</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">'high'</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">as</span> bracket <span class="keyword">from</span> employees;</span><br></pre></td></tr></table></figure><h2 id="where-语句-添加条件"><a href="#where-语句-添加条件" class="headerlink" title="where 语句, 添加条件"></a><strong>where 语句, 添加条件</strong></h2><ul><li>常见用法</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> employees <span class="keyword">where</span> country = <span class="string">'us'</span> <span class="keyword">and</span> state = <span class="string">'ca'</span>;</span><br></pre></td></tr></table></figure><ul><li>可以在where条件下计算</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span> , salary, deductions[<span class="string">'first taxes'</span>], salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>])</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">round</span>(salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>]) ) &gt; <span class="number">70000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># zhangyu 100000.0 0.2 80000</span></span><br></pre></td></tr></table></figure><ul><li>对上式进行优化</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">     e.* </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span> , salary, deductions[<span class="string">'first taxes'</span>], salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>])</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">     employees</span><br><span class="line">    ) e</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">round</span>(salary * (<span class="number">1</span>-deductions[<span class="string">'first taxes'</span>]) ) &gt; <span class="number">70000</span>;</span><br></pre></td></tr></table></figure><ul><li>条件中有浮点数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对浮点数进行比较</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">     <span class="keyword">name</span>, salary, duductions[<span class="string">'first taxes'</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     duductions[<span class="string">'first taxes'</span>] &gt; <span class="number">0.2</span>;</span><br><span class="line">     <span class="comment">--出现的结果中会有 0.2， 因为 DOUBL 和 FLOAT 类型不同</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">name</span>, salary, duductions[<span class="string">'first taxes'</span>]</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    employees </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">     duductions[<span class="string">'first taxes'</span>]  &gt; <span class="keyword">cast</span> (<span class="number">0.2</span> <span class="keyword">as</span> <span class="built_in">float</span>);</span><br><span class="line">     <span class="comment">--&gt; 出现的结果中不会有0.2</span></span><br></pre></td></tr></table></figure><ul><li><p>like 和 rlike</p><p>rlike 子句是Hive功能的一个扩展， 可以通过Java的正则表达式来指定匹配条件</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address.street</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">where</span> address.street rlikt <span class="string">'.*(beijing|shanghai).*'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用like</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>, address <span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> address.street <span class="keyword">like</span> <span class="string">'%beijing%'</span> <span class="keyword">or</span> address.street <span class="keyword">like</span> <span class="string">'%shanghai%'</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="group-by-语句-order-by-与-having"><a href="#group-by-语句-order-by-与-having" class="headerlink" title="group by 语句, order by, 与 having"></a>group by 语句, order by, 与 having</h2><ul><li>分类并排序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    stocks</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">     <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><ul><li>having 子句来限制输出结果</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">year</span>(ymd), <span class="keyword">avg</span>(price_close) <span class="keyword">from</span> stocks</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">     <span class="keyword">year</span>(ymd)</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">     <span class="keyword">avg</span>(price_close) &gt; <span class="number">50.0</span> ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子2</span></span><br><span class="line"><span class="keyword">select</span>  </span><br><span class="line">    col1</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    col1</span><br><span class="line"><span class="keyword">having</span></span><br><span class="line">    <span class="keyword">sum</span>(col2) &gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 如果没有having， 将要使用嵌套select子查询</span></span><br><span class="line"><span class="comment"># 例子1</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    s2.year, s2.avg <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="keyword">year</span>(ymd) <span class="keyword">as</span> <span class="keyword">year</span>, <span class="keyword">avg</span>(price_close) <span class="keyword">as</span> <span class="keyword">avg</span> <span class="keyword">from</span> stocks</span><br><span class="line">    <span class="keyword">where</span> </span><br><span class="line">        <span class="keyword">exchange</span> = <span class="string">'nasdaq'</span> <span class="keyword">and</span> symbol = <span class="string">'aapl'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        <span class="keyword">year</span>(ymd)</span><br><span class="line">) s2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    s2.avg &gt; <span class="number">50.0</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 例子2</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    col1 </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> </span><br><span class="line">        col1,</span><br><span class="line">        <span class="keyword">sum</span>(col2) <span class="keyword">as</span> col2sum</span><br><span class="line">    <span class="keyword">from</span>    </span><br><span class="line">        t1</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">        col1 )  <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span>   </span><br><span class="line">     t2.col2sum &gt; <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>having 与 where 的区别<ul><li>Where 是一个约束声明，使用Where约束来自数据库的数据，Where是在结果返回之前起作用的，Where中不能使用聚合函数。</li><li>Having是一个过滤声明，是在查询返回结果集以后对查询结果进行的过滤操作，在Having中可以使用聚合函数。</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找平均工资大于3000的部门</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">avg</span>(salary) <span class="keyword">as</span> average </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment </span><br><span class="line"><span class="keyword">having</span> </span><br><span class="line">    average &gt; <span class="number">3000</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询每个部门工资大于3000的员工个数</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    deparment, <span class="keyword">count</span>(*) <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    salary_info </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    salary &gt; <span class="number">3000</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> </span><br><span class="line">    deparment</span><br></pre></td></tr></table></figure><h2 id="join-语句"><a href="#join-语句" class="headerlink" title="join 语句"></a>join 语句</h2><p> Hive中Join的关联键必须在ON ()中指定，不能在Where中指定,ON 子句指定了两个表间数据进行连接的条件。</p><p><img src="https://i.loli.net/2019/06/11/5cffb911ad8e183153.png" alt></p><ul><li><p>内连接 </p><p>只有进行连接的两个表中都存在与连接标准相匹配的数据才会被保留下来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">     a <span class="keyword">JOIN</span>  b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span> <span class="keyword">and</span> b.symbol = <span class="string">'Ibm'</span></span><br></pre></td></tr></table></figure></li><li><p>对于多张表进行连接查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">---为什么条件内不加表 b 和表 c 进行连接操作， 因为 Hive总是按照从左到右的顺序来执行</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.ymd, a.price_close, b.price_close, c.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> b <span class="keyword">ON</span> a.ymd = b.ymd</span><br><span class="line">      <span class="keyword">JOIN</span> c <span class="keyword">ON</span> a.ymd = c.ymd</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    a. symbol = <span class="string">'Apple'</span>  <span class="keyword">AND</span> b.symbol = <span class="string">'Ibm'</span> <span class="keyword">AND</span> c.symbol = <span class="string">'Google'</span></span><br></pre></td></tr></table></figure></li><li><p>Join 优化</p><ul><li><p>Hive 会假定查询中最后一个表是最大的表， 在对每行记录进行连续操作时， 它会尝试将其他表缓存起来，然后扫描最后那个表进行计算。</p></li><li><p>因此， 我们在查询时， 要保证连续查询中的表的大小从左到右依次是增加的。  </p></li></ul><p>假如，在 a, b 两个表中，b表最小， 则 sql 需要修改为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    b <span class="keyword">JOIN</span> a <span class="keyword">ON</span> b.ymd = a.ymd <span class="keyword">AND</span> b.symbol = a.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'APPLE'</span></span><br></pre></td></tr></table></figure></li><li><p>使用 “标记” 来指定哪张表是大表， 不需要排序</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">/*+Streamtable(a)*/</span> a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a <span class="keyword">JOIN</span> B <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><ul><li>左外连接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><blockquote><p>左边表符合 WHERE 条件的全部返回，右表不符合 ON 条件的返回 NULL</p></blockquote><ul><li>完全外链接</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close, b.price_close</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> b <span class="keyword">on</span> a.ymd = b.ymd <span class="keyword">AND</span> a.symbol = b.symbol</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br></pre></td></tr></table></figure><blockquote><p>返回所有表中符合 WHERE 语句条件的所有记录<br>    Hive 不支持右半开连接</p></blockquote><h3 id="8-排序-ORDER-BY"><a href="#8-排序-ORDER-BY" class="headerlink" title="8. 排序 ORDER BY"></a>8. 排序 ORDER BY</h3><ul><li>Order by   对查询的所有结果进行排序</li></ul><blockquote><p>可在字段加 DESC 关键字， 进行降序排序。 （默认 ASC， 升序）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">     a.price_close,</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    a  </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    a.symbol = <span class="string">'Apple'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">    a.price_close</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    A.PRICE_close <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h3 id="9-子查询"><a href="#9-子查询" class="headerlink" title="9. 子查询"></a>9. 子查询</h3><blockquote><p>Hive中如果是从一个子查询进行SELECT查询，那么子查询必须设置一个别名</p></blockquote><ul><li>From 子句进行子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    dt,     </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"> (<span class="keyword">select</span></span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">    client.android_log_view</span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    dt,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> <span class="keyword">account</span>) <span class="keyword">as</span> uv,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> pv</span><br><span class="line"> <span class="keyword">from</span></span><br><span class="line">    client.ios_log_view  </span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    dt</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    dt</span><br></pre></td></tr></table></figure><ul><li>Hive 0.13 开始， Where 子句也支持子查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">WHERE</span> A.a <span class="keyword">IN</span> (<span class="keyword">SELECT</span> foo <span class="keyword">FROM</span> B);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">SELECT</span> A</span><br><span class="line"><span class="keyword">FROM</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> B <span class="keyword">FROM</span> T2 <span class="keyword">WHERE</span> T1.X = T2.Y)</span><br></pre></td></tr></table></figure><ul><li>将子查询作为一个表的语法，叫做Common Table Expression（CTE）</li></ul><blockquote><p><strong>如果用 distinct, select 后面必须直接跟 distinct</strong></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> a1 <span class="keyword">as</span> (</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">        province</span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    computer_viedata</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> user_account,</span><br><span class="line">    province</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    computer_view.data</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">       hit_date <span class="keyword">between</span> <span class="string">'2018-09-01'</span> <span class="keyword">and</span> <span class="string">'2018-09-30'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    province, </span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> user_account) <span class="keyword">as</span> uv</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    a1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">    province</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    uv <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><hr><h3 id="刷新数据表"><a href="#刷新数据表" class="headerlink" title="刷新数据表"></a>刷新数据表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">refresh table computer_log.client_ios_log</span><br></pre></td></tr></table></figure><h1 id="用python脚本连接数据库"><a href="#用python脚本连接数据库" class="headerlink" title="用python脚本连接数据库"></a>用python脚本连接数据库</h1><p>作为一名数据分析师，日报、周报、月报数据一个也不能少。 相应的， 就要在数据库中提取大量的数据， 并处理大量的Excel表格。 </p><p>在提取和处理数据的过程中， 对于一些重复性的劳动， 写个Python脚本来实现半自动化， 能够大幅提高自己的工作效率。 以下是自己工作中的一点总结经验。</p><ol><li>首先， 用Python连接数据库</li></ol><blockquote><p>对于数据库的ip地址，用户名，密码等， 如果不清楚，或数据库连接不上， 需要和开发人员对接</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyhive <span class="keyword">import</span> hive </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">conn = hive.Connection(host=<span class="string">'ip地址'</span>, port=<span class="number">10000</span>, username=<span class="string">'用户名'</span>, database = <span class="string">'default'</span>, auth=<span class="string">'NOSASL'</span>)</span><br><span class="line"></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"><span class="comment"># 获得连接的游标</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置开始和结束时间</li></ol><blockquote><p>可以用python中的time函数设置时间</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">startdate = <span class="string">'2018-09-01'</span></span><br><span class="line">enddate   = <span class="string">'2018-09-19'</span></span><br></pre></td></tr></table></figure><ol start="3"><li>用Python中的format函数将日期传入{}中</li></ol><blockquote><ul><li>python中写sql脚本时， 需要用\来进行换行符的转换, \后面不能有空格。</li></ul><ul><li>日期用两个{}来代替， 用format函数将开始日期与结束日期传入</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 提取积分类uv,pv数据</span><br><span class="line"></span><br><span class="line">sql_jifenxinxi_an = &quot;&quot;&quot;select </span><br><span class="line">    count(distinct user_account) as uv, </span><br><span class="line">    count(1) as pv </span><br><span class="line">from </span><br><span class="line">    computer_view.data </span><br><span class="line">where </span><br><span class="line">    hit_date between &quot;&#123;&#125;&quot; and &quot;&#123;&#125;&quot; </span><br><span class="line">    and </span><br><span class="line">    (btn_position like &quot;服务-查询-积分信息%&quot; </span><br><span class="line">    or </span><br><span class="line">    btn_home = &quot;积分-扇形左&quot; </span><br><span class="line">    ) </span><br><span class="line">limit 1000&quot;&quot;&quot;.format(startdate,enddate)</span><br><span class="line"># format 插入时间</span><br><span class="line"></span><br><span class="line">cursor.execute(sql_jifenxinxi_an)</span><br><span class="line"># 运行此语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cursor.fetchall()</span><br><span class="line"></span><br><span class="line">#fetchall():接收全部的返回结果行.</span><br></pre></td></tr></table></figure><p>我们可以按照这个格式写工作中需要运行的多个SQL语句。 这样， 当脚本运行的时候， 我们可以腾出时间来去干其他工作， 等过一段时间，所有的SQL语句都跑完了， 我们再进行统一的整理。 </p><hr><p>参考资料：<br><a href="https://book.douban.com/subject/25791255/" target="_blank" rel="noopener">Hive 编程指南</a><br><a href="https://www.iteblog.com/archives/tag/hive-technology/" target="_blank" rel="noopener">Hive的那些事</a><br><a href="https://hive.apache.org/" target="_blank" rel="noopener">Hive 官网</a><br><a href="http://lxw1234.com/archives/2015/06/317.htm" target="_blank" rel="noopener">一起学Hive</a><br><a href="https://blog.csdn.net/MrLevo520/article/details/76339075" target="_blank" rel="noopener">Hive性能优化上的一些总结</a><br><a href="https://www.iteblog.com/archives/category/hive/" target="_blank" rel="noopener">过往记忆——hive</a></p><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类比汇总</title>
      <link href="/2019/03/30/%E9%80%9A%E7%94%A8-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B-%E7%B1%BB%E6%AF%94%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/03/30/%E9%80%9A%E7%94%A8-%E6%B2%9F%E9%80%9A%E8%83%BD%E5%8A%9B-%E7%B1%BB%E6%AF%94%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>类比论证：</strong></p><blockquote><p>一个论证用两件事物之间熟知的相似点作为基础，推导出关于其中一件事物的一个相对未知特征的结论，这样的论证叫做类比论证。</p><p>类比有好有坏，需要区别。</p></blockquote><ol><li>学习一门技能，你需要知道最少必要知识。 这就好像你拿着一张地图，不可能一下子掌握其中所有的细节，但花几分钟搞清楚 “图例”（Legend）部分总是可以的，知道什么样的线标示的是公交车，什么样的线标示的是地铁，什么样的线标示的是桥梁，然后知道上北下南左西右东 —— 这之后，就可以开始慢慢研究地图了……</li></ol><a id="more"></a><hr><ol start="2"><li>在我们使用函数的过程中，我们常常有意忽略它的内部如何完成从输入到输出之间的处理过程 —— 这就好像我们平日里用灯泡一样，大多数情况下，我们只要知道开关的使用方法就够了 —— 至于为什么按到这个方向上灯会亮，为什么按到另外一个方向上灯会灭，并不是我们作为用户必须关心的事情……当然，如果你是设计开关的人就不一样了，你必须知道其中的运作原理；但是，最终，你还是希望你的用户用最简单方便的操作界面，而不是必须搞懂所有原理才能够使用你所设计的产品……</li></ol><hr><ol start="3"><li>在任何一本编程书籍之中，关于字符串的内容总是很长 —— 就好像每本英语语法书中，关于动词的内容总是占全部内容的至少三分之二。</li></ol><hr><ol start="4"><li>教育就像一副眼镜。戴上眼镜之前和之后，我们看到的其实是同样的世界；但是戴上眼镜之后，我们就看得更清楚。</li></ol><hr><ol start="5"><li>我们是这样一台计算机，厂商（我们的父母）并没有为我们提供详尽的说明书，也不负责定期升级我们的操作系统——即使他们并非故意。</li></ol><hr><ol start="6"><li>人与人之间很不一样，就好像计算机和计算机之间也很不一样，有些中央处理器（头脑）更强大一些，有些人的内存容量（记忆力）更大一些，有些人的硬盘空间（笔记与藏书）更大一些，有些人显示器（外表）更漂亮一些。</li></ol><hr><ol start="7"><li>很多人的处理器是落伍的，输入和输出设备常常残缺不全，内存小到没法用的底部，硬盘甚至根本就没有……至于连网设备么，真的很差，甚至真的还不如没有，因为即使连着网也因为缺乏通讯协议而完全无法使用…</li></ol><hr><ol start="8"><li>科学是由信息构成的，正如房子是用砖头盖的一样，可问题在于，正如仅仅一堆砖头放在那里的时候，我们不能称其为房子一样，一堆信息放在一块就叫科学，有点不像话……</li></ol><hr><ol start="9"><li>学习电脑编程的函数时，我把函数想象成铅笔刀，钝铅笔进去，锐利的铅笔出来，这个模型不依赖于图像，但是过程类似。</li></ol><hr><ol start="10"><li>两个自我： 大象和骑象人<blockquote><p>人的感性面就是一头大象，而理智面就是一个骑象人。</p><p>骑象人骑在大象背上，手里握着缰绳，好像是他在指挥大象，但实际上，他的力量微不足道。一旦和大象发生冲突，他想往左，而大象想往右。那他通常是拗不过大象的。</p></blockquote></li></ol><hr><ol start="11"><li>就像人有一套生理免疫系统来排斥不属于身体的微生物一样，人的心理也有一套免疫系统，它会排斥我们采取新的行为方式，以此来维持心理结构的平衡和稳定。</li></ol><hr><ol start="12"><li>我们要验证这些假设对不对，什么时候成立，什么时候不成立。 这就像学习游泳，我们既不能只在岸上熟读《怎么学游泳》的书，也不能一下子要求自己跳到深水区，这样就被淹死了。</li></ol><hr><ol start="13"><li>同一辆车， 在公路上开， 和在泥地上开， 要达到相同的速度， 付出的努力是不同的。 同理， 不同的工作环境和内容， 带来不同的难度， 对采用的技术和努力程度也有不同的要求。 所以只衡量结果却不考虑过程， 有失公平。 考虑过程， 就包括了对工作暖色、环境因素带来的工作复杂度的度量， 也体现了对个人技能、态度的衡量。</li></ol><hr><ol start="14"><li>中国人是椰子文化，擅长熟人社会的交往规则，不擅长与陌生人打交道。西方人是桃子文化， 擅长与陌生人打交道。</li></ol><hr><ol start="15"><li>闭环原则是工作中最常用也是最有效的原则，但很少有人能够一直做到。这就像“运动和良好的饮食可以帮助我们保持健康和身材”一样，几乎所有人都知道， 但很少有人能够做到。</li></ol><hr><ol start="16"><li>“回音壁”效应： 基于数据算法的产品就像是一个回音壁，你发出声音后，应用反馈给你的是与你自己声音相似的回音。你认为自己的“声音”得到了印证，所以你会对自己“声音”的正确性更加坚定不移。由此，你的信息、知识圈层只会更加固话，视野越发狭窄。</li></ol><hr><ol start="17"><li><p>爱因斯坦：事情不会在出现问题的那个层面得到解决，只有上升到更高的层面才会得到解决。这就像你家的羊被狼叼走了一只，你往里面补了一只羊，表面上看这个问题解决了。过些天，又有羊被叼走了，你又得不断的补羊。可出是有一天你登高望远，发现原来是羊圈出现了破损，那么你只要把破损的地方补好就可以了。</p><p>  用大海捞针的方式穷举各种可能进行试验，这其实是一种受限于无法利用更高潜能的“笨方法”。如果人自己可以提升视野和维度，去“补羊圈”，问题往往迎刃而解，并不需要无穷次的实验。</p></li></ol><hr><ol start="18"><li>只要改变的策略和知识得当，以前看似不可能的事情会变得完全可能，而且简单明了，这就好比要打开一扇锁着的门一样–只有拿对钥匙才能轻松打开。</li></ol><hr><ol start="19"><li>建立习惯就好像骑自行车上陡坡： 爬坡，到顶，下坡。 刚开始，你必须用双腿的最大力量蹬自行车，之后会渐渐变得轻松，但是你必须一直蹬到山顶，否则就会倒退回原地，让之前所有的进步付诸东流。</li></ol><hr><ol start="20"><li>你有没有开过不带转向助力装置的汽车？ 方向盘转了好几圈，车的反应却很小。 大脑对改变的反应就像不带转向装置的汽车一样。 每次重复产生的作用可以忽略不计，可是如果不断重复下去，这些微小的变化会给大脑和生活带来巨大的改变。</li></ol><hr><ol start="21"><li>任何事物能成为基础的第一原则就是它必须牢固可靠，而“激发动力”侧率就像是在液体上盖房子。</li></ol><hr><ol start="22"><li>我不喜欢动力不是因为它不好。例如，为了写出这些文字，我需要最基本的动力，但动力论到处都是， 人们将其伪装成个人成长的秘方，虽然这不是它本身的错。 这就好像我告诉你胡萝卜能治愈癌症一样，胡萝卜的确对你有益，但它不可能治好任何得癌症的人，于是这个好东西-胡萝卜，已经被塑造成了真理的敌人，在导出招摇撞骗。这么看来，动力是一根邪恶的胡萝卜。</li></ol><hr><ol start="23"><li>动力偶尔才会产生效果，所以很难评估，对动力策略的长远结果做一番审视，你可能会发现它并不是每次都会奏效。动力也不会轻易改善，因为如果你的狗病死了，你会情绪崩溃，或者你累了或者情绪很差时也会不想锻炼。与此相反的是， 你却能提高克服可能来自感情创伤、缺乏自信、情绪糟糕或者精力不足的抵触情绪，进而采取行动的能力，这种能力就是意志力。</li></ol><hr><ol start="24"><li>相反，他在脑中植入了一个观点，有点像你在DVD播放器里插入了一张DVD.</li></ol><hr><ol start="25"><li>当你努力理解一个人的时候，你的任务在很多方面都好像没有亲眼观看魔术师魔术表演的每个步骤就自己动手去做那个魔术。 你眼看着手帕放进了帽子里，出来的却是一只兔子，而你压根就不知道魔术师暗地里玩的到底是什么把戏。要理解这个魔术，你就得搞清楚魔术师暗地里的那些把戏。同样，在论证当中，你也得找到那些暗藏的把戏。实际上，这些把戏就是没有明说出来的想法。我们把这些没有明说出来的想法称为假设。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 类比 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的分析思维方法</title>
      <link href="/2019/03/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/"/>
      <url>/2019/03/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据分析方法"><a href="#数据分析方法" class="headerlink" title="数据分析方法"></a>数据分析方法</h1><blockquote><p>使用频率按照顺序排列</p></blockquote><h3 id="1-对比分析法"><a href="#1-对比分析法" class="headerlink" title="1.对比分析法"></a>1.对比分析法</h3><blockquote><p>对比分析是给单独的数据一个参考系， 否则孤立的数据毫无意义。 </p><ol><li>时间上的同比环比</li></ol><ul><li>环比、环比增长率</li><li>同比、同比增长率</li></ul><ol start="2"><li>竞争对手对比</li><li>与其他维度结合，进行对比</li></ol><ul><li>活动促销前后的对比</li><li>细拆维度之间的对比</li><li>各渠道之间的对比等</li></ul></blockquote><h3 id="2-多维度拆解法"><a href="#2-多维度拆解法" class="headerlink" title="2.多维度拆解法"></a>2.多维度拆解法</h3><blockquote><p>多维分解是指从业务需求出发，将指标从多个维度进行拆分。</p><p><img src="https://i.loli.net/2019/02/26/5c756008dedc0.png" alt="维度划分"></p><p>说明：</p><blockquote><p>为什么需要进行多维拆解?</p><ul><li><p>有时候一个非常笼统或者最终的指标你是看不出什么问题来的，但是进行拆分之后，很多细节问题就会浮现出来。</p></li><li><p>举个例子，某网站的跳出率是0.47、平均访问深度是4.39、平均访问时长是0.55分钟。如果你要提升用户的参与度，显然这样的数据会让你无从下手;但是你对这些指标进行拆解之后就会发现很多思路。</p></li></ul></blockquote><p>补充：</p><blockquote><p>维度拆解不够， 容易导致<a href="https://wiki.mbalib.com/wiki/%E8%BE%9B%E6%99%AE%E6%A3%AE%E6%82%96%E8%AE%BA" target="_blank" rel="noopener">辛普森悖论</a></p></blockquote></blockquote><h3 id="3-漏斗分析法"><a href="#3-漏斗分析法" class="headerlink" title="3. 漏斗分析法"></a>3. 漏斗分析法</h3><blockquote><p>漏斗分析法， 还原用户转化的路径， 分析每一步的转化率， 针对性的优化和改善</p><p><img src="https://i.loli.net/2019/02/25/5c74047cc3522.jpg" alt="漏斗模型"></p><p>说明：</p><blockquote><p>漏斗分析是一套流程式数据分析，它能够科学反映用户行为状态以及从起点到终点各阶段用户转化率情况的重要分析模型。</p><p>漏斗分析模型已经广泛应用于网站用户行为分析和APP用户行为分析的流量监控、产品目标转化等日常数据运营与数据分析的工作中</p><p>漏斗分析要注意的两个要点：</p><ul><li>不但要看总体的转化率，还要关注转化过程每一步的转化率;</li><li>漏斗分析也需要进行多维度拆解，拆解之后可能会发现不同维度下的转化率也有很大差异。</li></ul></blockquote></blockquote><h3 id="4-留存分析"><a href="#4-留存分析" class="headerlink" title="4. 留存分析"></a>4. 留存分析</h3><blockquote><p>留存分析是一种用来分析用户参与情况/活跃程度的分析模型，考察进行初始行为的用户中，有多少人会进行后续行为。</p><p>衡量留存的常见指标有：次日留存率、7日留存率、30日留存率等等</p><p>说明：</p><blockquote><p>这是用来衡量产品对用户价值高低的重要方法</p><p>留存分析可以帮助回答以下问题：</p><ul><li>一个新客户在未来的一段时间内是否完成了您期许用户完成的行为？如支付订单等；</li><li>某个社交产品改进了新注册用户的引导流程，期待改善用户注册后的参与程度，如何验证？</li><li>想判断某项产品改动是否奏效，如新增了一个邀请好友的功能，观察是否有人因新增功能而多使用产品几个月？</li></ul></blockquote></blockquote><h3 id="5-趋势分析"><a href="#5-趋势分析" class="headerlink" title="5. 趋势分析"></a>5. 趋势分析</h3><blockquote><p>通常我们在数据分析产品中建立一张数据指标的线图或者柱状图，然后持续观察，重点关注异常值。</p><p>说明：</p><blockquote><ul><li><p>在这个过程中，我们要选定第一关键指标，而不要被虚荣指标所迷惑。</p></li><li><p>以社交类APP为例，如果我们将下载量作为第一关键指标，可能就会走偏;因为用户下载APP并不代表他使用了你的产品。在这种情况下，建议将DAU(Daily Active Users，日活跃用户)作为第一关键指标，而且是启动并且执行了某个操作的用户才能算上去;这样的指标才有实际意义，运营人员要核心关注这类指标。</p></li></ul></blockquote></blockquote><h3 id="6-用户分群"><a href="#6-用户分群" class="headerlink" title="6.用户分群"></a>6.用户分群</h3><blockquote><p>用户分群主要有两种分法：维度和行为组合。</p><ul><li><p>第一种根据用户的维度进行分群，比如从地区维度分，有北京、上海、广州、杭州等地的用户;从用户登录平台进行分群，有PC端、平板端和手机移动端用户。</p></li><li><p>第二种根据用户行为组合进行分群，比如说每周在社区签到3次的用户与每周在社区签到少于3次的用户的区别.</p></li></ul></blockquote><h3 id="7-公式法"><a href="#7-公式法" class="headerlink" title="7.公式法"></a>7.公式法</h3><blockquote><p>将一切问题皆可量化，拆解成最小的维度，通过 +、-、*、/ 进行计算</p><p><img src="https://i.loli.net/2019/02/27/5c7698403238e.png" alt="公式法"></p></blockquote><h3 id="8-用户细查"><a href="#8-用户细查" class="headerlink" title="8.用户细查"></a>8.用户细查</h3><blockquote><p>用户行为数据是观察用户在你产品内的行为路径是一种非常直观的分析方法。</p><ul><li><p>在用户分群的基础上，一般抽取3-5个用户进行细查，即可覆盖分群用户大部分行为规律。</p></li><li><p>绝大多数产品都或多或少存在一些反人类的设计或者BUG，通过用户细查可以很好地发现产品中存在的问题并且及时解决。</p></li></ul></blockquote><h3 id="9-A-B测试与A-A测试"><a href="#9-A-B测试与A-A测试" class="headerlink" title="9.A/B测试与A/A测试"></a>9.A/B测试与A/A测试</h3><blockquote><p>A/B测试是为了达到一个目标，采取了两套方案，一组用户采用A方案，一组用户采用B方案。通过实验观察两组方案的数据效果，判断两组方案的好坏。</p><p>说明：</p><blockquote><ul><li>在A/B测试方面，谷歌是不遗余力地尝试;对于搜索结果的显示，谷歌会制定多种不同的方案(包括文案标题，字体大小，颜色等等)，不断来优化搜索结果中广告的点击率。</li></ul><p>这里需要注意的一点，A/B测试之前最好有A/A测试或者类似准备。什么是A/A测试?A/A测试是评估两个实验组是否是处于相同的水平，这样A/B测试才有意义。其实这和学校里面的控制变量法、实验组与对照组、双盲试验本质一样的。</p></blockquote></blockquote><h3 id="10-假设法"><a href="#10-假设法" class="headerlink" title="10.假设法"></a>10.假设法</h3><blockquote><p>假设-验证-判断。 当没有直观数据时， 以假设先行的方式进行推断。<br>说明：</p><blockquote><p>例如： 如果商品提价后， 公司收益会不会变化？</p><ul><li><p>假设流量不会发生变化， 那么商品价格会影响转化率，确定转化率的下降。 </p></li><li><p>计算日常的转化率， 针对不同的用户，如：忠诚用户、普通用户、羊毛用户， 预估各类别用户提价后的转化率变化。</p></li></ul></blockquote></blockquote><h3 id="11-指数法"><a href="#11-指数法" class="headerlink" title="11.指数法"></a>11.指数法</h3><blockquote><p>指定一个标准， 解决衡量的问题</p><ul><li><p>线性加权：</p></li><li><p>反比例： 1-1/n， 范围为0-1</p></li><li>log指数法<blockquote><p>热度公式： log(uv+ 5*评论,2) +(time -初始时间) / 10</p></blockquote></li></ul></blockquote><!-- ### 结构分析### 对比分析### 时间序列分析### 相关性分析### 机器学习 --><hr><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MjM5NjcxMzIwMQ==&amp;mid=2649861486&amp;idx=1&amp;sn=e8c79ae936fc1f04fffed59f6be7e018&amp;chksm=bee00af0899783e64566d7b921b904ba18e5846a3ade62fa48a8ac89d923a517105d6fbc09a0#rd" target="_blank" rel="noopener">数据分析的基本方法论</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的分析思维模型</title>
      <link href="/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/"/>
      <url>/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分析思维模型"><a href="#分析思维模型" class="headerlink" title="分析思维模型"></a>分析思维模型</h1><blockquote><p>使用频率按顺序排列</p></blockquote><h3 id="1-AARRR-模型"><a href="#1-AARRR-模型" class="headerlink" title="1.AARRR 模型"></a>1.AARRR 模型</h3><blockquote><p><img src="https://i.loli.net/2019/02/26/5c75582b87a7c.png" alt="AARRR 模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95c95929a40.jpg" alt="AARRR 模型"></p></blockquote><h3 id="2-基于用户生命周期的数据分析体系"><a href="#2-基于用户生命周期的数据分析体系" class="headerlink" title="2.基于用户生命周期的数据分析体系"></a>2.基于用户生命周期的数据分析体系</h3><blockquote><p><img src="https://i.loli.net/2019/03/23/5c95c9d2e937c.jpg" alt="分析体系"></p></blockquote><blockquote><ul><li>对应的关键指标<blockquote><p><img src="https://i.loli.net/2019/03/23/5c95ca1b5fdc9.jpg" alt="对应的关键指标"></p></blockquote></li></ul></blockquote><h3 id="3-5W2H-分析法"><a href="#3-5W2H-分析法" class="headerlink" title="3. 5W2H 分析法"></a>3. 5W2H 分析法</h3><blockquote><p>什么原因 (why)  导致 什么事情 (what), 需要哪些人 (who) 在什么时间完成 (when),在什么地点 (where) 用什么方法 (how)完成, 预算是多少 (how much)?</p><p><img src="https://i.loli.net/2019/08/19/lIgkeLbfNXtDHOu.jpg" alt="微信图片_20190819003216.jpg"></p><p><img src="https://i.loli.net/2019/02/26/5c7418d10b4c8.png" alt="思维导图"></p></blockquote><h3 id="4-象限法"><a href="#4-象限法" class="headerlink" title="4. 象限法"></a>4. 象限法</h3><blockquote><p>通过象限法， 找到问题的共同原因， 从而建立分组优化策略。 </p><ul><li>内外因素分解法</li></ul><p><img src="https://i.loli.net/2019/02/25/5c7409d9dce08.png" alt="内外因素分解法"></p><ul><li>用户分群</li></ul><p><img src="https://i.loli.net/2019/02/23/5c70f5814cc93.png" alt="用户分群"></p><ul><li>RFM 用户分群</li></ul><p><img src="https://i.loli.net/2019/02/23/5c70f7f128f4c.png" alt="RFM用户分群"></p></blockquote><h3 id="5-二八法则-帕累托法则"><a href="#5-二八法则-帕累托法则" class="headerlink" title="5. 二八法则 / 帕累托法则"></a>5. 二八法则 / 帕累托法则</h3><blockquote><p><img src="https://i.loli.net/2019/08/19/enkqRmf8KzL2vSC.jpg" alt="微信图片_20190819004446.jpg"></p></blockquote><blockquote><ul><li>将对象分为重要和不重要两类， 20%的用户贡献了80%的销售额。 </li><li>数据中， 20% 的变量将直接产生 80% 的效果，数据分析应该围绕这20%的变量来进行。 </li><li>和业务和KPI紧密相关，花费很少的精力就能达到不错的效果。</li><li>在条件允许的状况下， 依旧不能放弃全局，否则会让思维变得狭隘。<br>补充：<blockquote><ul><li><p>升级版本： ABC 分析法</p></li><li><p>与之对应： 长尾理论</p></li></ul></blockquote></li></ul></blockquote><h3 id="6-SWOT方法"><a href="#6-SWOT方法" class="headerlink" title="6. SWOT方法"></a>6. SWOT方法</h3><blockquote><p>指定发展战略前，对自身进行全面的分析及竞争优势定位。</p><ul><li>对自己进行解析</li></ul><p><img src="https://i.loli.net/2019/02/26/5c754bb2536a0.jpg" alt="对自己进行解析"></p><ul><li>指定相应的对策</li></ul><p><img src="https://i.loli.net/2019/02/26/5c754bc095f85.jpg" alt="指定相应的对策"></p></blockquote><h3 id="7-麦肯锡七步分析法"><a href="#7-麦肯锡七步分析法" class="headerlink" title="7.麦肯锡七步分析法"></a>7.麦肯锡七步分析法</h3><blockquote><p><img src="https://i.loli.net/2019/03/23/5c95ca64ce6f6.jpg" alt="七步分析法"></p><ul><li>界定问题</li><li>将问题分解成议题</li><li>去除不重要的议题（优先排序）</li><li>制定详细工作计划 </li><li>分析重要议题 </li><li>汇总研究成果 </li><li>准备你的故事</li></ul></blockquote><h3 id="8-SMART原则"><a href="#8-SMART原则" class="headerlink" title="8.SMART原则"></a>8.SMART原则</h3><blockquote><p><img src="https://i.loli.net/2020/03/02/8EZc2o1QrsdTqbU.jpg" alt="SMART原则"></p><p><img src="https://i.loli.net/2019/08/19/uyaDJnKpQP1Cx9d.jpg" alt="微信图片_20190819003845.jpg"></p><ul><li>意义：人们在制定工作目标或者任务目标时，考虑一下目标与计划是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现。</li></ul><p>说明：</p><blockquote><ul><li><p>S代表具体(Specific)，指绩效考核要切中特定的工作指标，不能笼统；</p></li><li><p>M代表可度量(Measurable)，指绩效指标是数量化或者行为化的，验证这些绩效指标的数据或者信息是可以获得的；</p></li><li><p>A代表可实现(Attainable)，指绩效指标在付出努力的情况下可以实现，避免设立过高或过低的目标；</p></li><li><p>R代表现实性(realistic)，指绩效指标是实实在在的，可以证明和观察；</p></li><li><p>T代表有时限(time bound)，注重完成绩效指标的特定期限。</p></li></ul></blockquote></blockquote><h3 id="9-4P-与-STP-理论"><a href="#9-4P-与-STP-理论" class="headerlink" title="9.4P 与 STP 理论"></a>9.4P 与 STP 理论</h3><blockquote><p>市场营销与市场定位</p><ul><li>4P 理论</li></ul><p><img src="https://i.loli.net/2019/02/26/5c7557f086661.png" alt="4P 理论"></p><ul><li>STP 理论</li></ul><p><img src="https://i.loli.net/2019/02/26/5c755817819c3.png" alt="STP 理论"></p></blockquote><h3 id="10-PEST分析方法"><a href="#10-PEST分析方法" class="headerlink" title="10.PEST分析方法"></a>10.PEST分析方法</h3><blockquote><p>企业的战略外部环境分析。</p><p><img src="https://i.loli.net/2019/02/26/5c75584a86f2c.png" alt="PEST分析方法"></p></blockquote><h3 id="11-PDCA模型"><a href="#11-PDCA模型" class="headerlink" title="11. PDCA模型"></a>11. PDCA模型</h3><blockquote><p><img src="https://i.loli.net/2019/08/19/LiXTcBj5PyGzIhQ.jpg" alt="PDCA"></p><p><img src="https://i.loli.net/2019/03/23/5c95c631c6fe3.png" alt="PDCA模型"></p><p><img src="https://i.loli.net/2019/03/23/5c95cbc1629d7.jpg" alt="PDCA模型"></p></blockquote><h3 id="12-时间管理"><a href="#12-时间管理" class="headerlink" title="12.时间管理"></a>12.时间管理</h3><blockquote><p><img src="https://i.loli.net/2019/08/19/cdlNS3ihf7jKIYa.jpg" alt="微信图片_20190819004205.jpg"></p><p>A、重要且紧急</p><blockquote><p>紧急状况<br>迫切的问题<br>限期完成的工作<br>你不做其他人也不能做</p></blockquote><p>B、重要不紧急</p><blockquote><p>准备工作<br>预防措施<br>价值观的澄清<br>计划<br>人际关系的建立<br>真正的再创造<br>增进自己的能力</p></blockquote><p>C、紧急不重要</p><blockquote><p>造成干扰的事、电话、<br>信件、报告<br>会议<br>许多迫在眉捷的急事<br>符合别人期望的事</p></blockquote><p>D、不重要不紧急</p><blockquote><p>忙碌琐碎的事<br>广告函件<br>电话<br>逃避性活动<br>等待时间</p></blockquote></blockquote><h3 id="13-任务分解法"><a href="#13-任务分解法" class="headerlink" title="13. 任务分解法"></a>13. 任务分解法</h3><blockquote><p><img src="https://i.loli.net/2019/08/19/I74BWGXQ2rFTihj.jpg" alt="微信图片_20190819004339.jpg"></p></blockquote><blockquote><p>目标→任务→工作→活动。</p><ul><li><p>WBS分解的原则：将主体目标逐步细化分解，最底层的任务活动可直接分派到个人去完成；每个任务原则上要求分解到不能再细分为止。</p></li><li><p>WBS分解的方法：至上而下与至下而上的充分沟通；一对一个别交流；小组讨论。</p></li><li><p>WBS分解的标准：分解后的活动结构清晰；逻辑上形成一个大的活动；集成了所有的关键因素包含临时的里程碑和监控点；所有活动全部定义清楚</p></li></ul></blockquote><h3 id="14-AISAS-用户行为决策分析模型"><a href="#14-AISAS-用户行为决策分析模型" class="headerlink" title="14. AISAS-用户行为决策分析模型"></a>14. AISAS-用户行为决策分析模型</h3><blockquote><ul><li>注意- 兴趣-搜索-行动-分享</li></ul><p><img src="https://i.loli.net/2019/03/23/5c95c4f93ba91.jpg" alt="AISAS 模型"></p></blockquote><h3 id="15-延伸：-个人IPO模型"><a href="#15-延伸：-个人IPO模型" class="headerlink" title="15. 延伸： 个人IPO模型"></a>15. 延伸： 个人IPO模型</h3><blockquote><p><img src="https://i.loli.net/2019/03/23/5c95bfee175d6.png" alt="个人IPO模型"></p></blockquote><h3 id="16-波特五种竞争力分析模型"><a href="#16-波特五种竞争力分析模型" class="headerlink" title="16. 波特五种竞争力分析模型"></a>16. 波特五种竞争力分析模型</h3><blockquote><p><img src="https://i.loli.net/2019/03/23/5c95c30761cdc.png" alt="波特五种竞争力分析模型"></p></blockquote><h3 id="17-KANO模型"><a href="#17-KANO模型" class="headerlink" title="17. KANO模型"></a>17. KANO模型</h3><blockquote><p><img src="https://i.loli.net/2019/03/23/5c95c58968dae.jpg" alt="KANO模型"></p><ul><li>对用户需求分类和优先排序</li></ul><p>将影响用户满意度的因素划分为五个类型，包括：</p><blockquote><ul><li><p>魅力因素：用户意想不到的，如果不提供此需求，用户满意度不会降低，但当提供此需求，用户满意度会有很大提升;</p></li><li><p>期望因素(一维因素)：当提供此需求，用户满意度会提升，当不提供此需求，用户满意度会降低;</p></li><li><p>必备因素：当优化此需求，用户满意度不会提升，当不提供此需求，用户满意度会大幅降低;</p></li><li><p>无差异因素：无论提供或不提供此需求，用户满意度都不会有改变，用户根本不在意;</p></li><li><p>反向因素：用户根本都没有此需求，提供后用户满意度反而会下降;</p></li></ul></blockquote></blockquote><h3 id="18-SCP模型"><a href="#18-SCP模型" class="headerlink" title="18. SCP模型"></a>18. SCP模型</h3><blockquote><p><img src="https://wiki.mbalib.com/w/images/d/d8/SCP%E6%A8%A1%E5%9E%8B.gif" alt="SCP模型"></p><ul><li>分析在行业或者企业收到表面冲击时，可能的战略调整及行为变化。</li></ul></blockquote><h3 id="19-SPACE-战略地位与行动评价矩阵"><a href="#19-SPACE-战略地位与行动评价矩阵" class="headerlink" title="19. SPACE-战略地位与行动评价矩阵"></a>19. SPACE-战略地位与行动评价矩阵</h3><blockquote><ul><li>企业的内部因素与外部因素</li></ul><p><img src="https://wiki.mbalib.com/w/images/7/72/SPACEjz.jpg" alt="SPACE"></p></blockquote><!-- ###  7. USED方法针对SWOT分析后的结果，使用USED方法产出解决方案* 如何善用每个优势？ How can we Use each Strength?* 如何停止每个劣势？ How can we Stop each Weakness?* 如何成就每个机会？ How can we Exploit each Opportunity?* 如何抵御每个威胁？ How can we Defend against each Threat? --><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://mp.weixin.qq.com/s/IGsE86BT6CY7hT2uVHmN-g" target="_blank" rel="noopener">分析和解决问题的7种武器</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书档案</title>
      <link href="/2019/02/20/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E6%88%90%E9%95%BF%E4%B9%A6%E5%8D%95/"/>
      <url>/2019/02/20/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E6%88%90%E9%95%BF%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="读书档案"><a href="#读书档案" class="headerlink" title="读书档案"></a>读书档案</h1><h3 id="《麦肯锡精英高效阅读法》"><a href="#《麦肯锡精英高效阅读法》" class="headerlink" title="《麦肯锡精英高效阅读法》"></a>《麦肯锡精英高效阅读法》</h3><blockquote><p>2020年1月11日</p></blockquote><ol><li><p>阅读这本书的目的是什么</p><blockquote><p>阅读这本书的目的是想找到一种读书方法，能够把自己看过的书中知识运用到自己的生活中去， 给自己带来真正的改变。</p></blockquote></li><li><p>读完这本书的感受是什么</p><blockquote><p>读完这本书的感受是书的前半段挺唠叨的，但后面介绍的建立读书档案和看完记录自己的想法，还是对自己挺有启发性的。 </p></blockquote></li><li><p>阅读这本书之后， 自己会采取哪些行动</p><blockquote><p>读完这本书之后，自己会建立自己的读书档案， 对于自己看过的有价值的书籍， 自己会写读书感想，并且经常来反复读，直到自己真正把书中的知识运用到自己的生活中去 </p></blockquote></li><li><p>3个月之后，自己会有什么样的改变？</p><blockquote><p>3个月之后，自己能够把自己的阅读习惯建立起来，对于自己看过的书，自己都能够确实把书中的知识运用到自己的生活中， 建立了自己的读书档案， 对于自己读书笔记与感想自己都能够及时复习更新。 </p></blockquote></li></ol><hr><h3 id="《好好思考》"><a href="#《好好思考》" class="headerlink" title="《好好思考》"></a>《好好思考》</h3><blockquote><p>2020年2月17日</p></blockquote><ol><li><p>阅读这本书的目的是什么？</p><blockquote></blockquote></li><li><p>读完这本书的感受是什么？</p><blockquote></blockquote></li><li><p>阅读完这本书之后，自己会采取哪些行动？</p><blockquote></blockquote></li><li><p>3个月之后，自己会有什么样的改变？</p></li></ol><hr><h1 id="需读书籍"><a href="#需读书籍" class="headerlink" title="需读书籍"></a>需读书籍</h1><h2 id="数据分析："><a href="#数据分析：" class="headerlink" title="数据分析："></a>数据分析：</h2><ol><li><p><a href="https://book.douban.com/subject/20497858/" target="_blank" rel="noopener">《网站分析实战》</a></p></li><li><p><a href="https://book.douban.com/subject/26278639/" target="_blank" rel="noopener">《精益数据分析》</a></p></li></ol><a id="more"></a><ol start="3"><li><p><a href="https://book.douban.com/subject/26873486/" target="_blank" rel="noopener">《运营之光》</a></p></li><li><p><a href="https://book.douban.com/subject/26596778/" target="_blank" rel="noopener">《计算广告》</a></p></li></ol><ol start="5"><li><p><a href="https://book.douban.com/subject/30300335/" target="_blank" rel="noopener">《新零售：低价高效的数据赋能之路》</a></p></li><li><p><a href="https://book.douban.com/subject/26541801/" target="_blank" rel="noopener">《增长黑客》</a></p></li><li><p><a href="https://book.douban.com/subject/1626392/" target="_blank" rel="noopener">《女士品茶》</a></p></li><li><p><a href="https://book.douban.com/subject/25909355/" target="_blank" rel="noopener">《数据化管理》</a></p></li><li><p><a href="https://book.douban.com/subject/30191451/" target="_blank" rel="noopener">《流量池》</a></p></li></ol><h2 id><a href="#" class="headerlink" title></a><iframe width="560" height="315" src="https://www.youtube.com/embed/5HlbV1wKBmo" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></h2><h2 id="麦肯锡："><a href="#麦肯锡：" class="headerlink" title="麦肯锡："></a>麦肯锡：</h2><ol><li><p><a href="https://book.douban.com/subject/25779342/" target="_blank" rel="noopener">《麦肯锡教我的思考武器》</a></p></li><li><p><a href="https://book.douban.com/subject/24745639/" target="_blank" rel="noopener">《麦肯锡教我的写作武器》</a></p></li><li><p><a href="https://book.douban.com/subject/1020671/" target="_blank" rel="noopener">《麦肯锡意识》</a></p></li><li><p><a href="https://book.douban.com/subject/1059490/" target="_blank" rel="noopener">《麦肯锡方法》</a></p></li><li><p><a href="https://book.douban.com/subject/27113480/" target="_blank" rel="noopener">《麦肯锡图表工作法》</a></p></li><li><p><a href="https://book.douban.com/subject/26695338/" target="_blank" rel="noopener">《麦肯锡教我的谈判武器》</a></p></li><li><p><a href="https://book.douban.com/subject/27192171/" target="_blank" rel="noopener">《麦肯锡笔记思考法》</a></p></li><li><p><a href="https://book.douban.com/subject/33444642/" target="_blank" rel="noopener">《麦肯锡精英高效阅读法》</a></p></li></ol><hr><h2 id="批判思维与逻辑思维："><a href="#批判思维与逻辑思维：" class="headerlink" title="批判思维与逻辑思维："></a>批判思维与逻辑思维：</h2><ol><li><p><a href="https://book.douban.com/subject/24697776/" target="_blank" rel="noopener">《批判性思维工具》</a></p></li><li><p><a href="https://book.douban.com/subject/20428922/" target="_blank" rel="noopener">《学会提问》</a></p></li><li><p><a href="https://book.douban.com/subject/1020644/" target="_blank" rel="noopener">《金字塔原理》</a></p></li><li><p><a href="https://book.douban.com/subject/26260187/" target="_blank" rel="noopener">《零秒思考》</a>； <a href="https://zhangandyu.github.io/2019/01/20/%E3%80%8A%E9%9B%B6%E7%A7%92%E6%80%9D%E8%80%83%E3%80%8B-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#more">已写文章</a> </p></li></ol><blockquote><p>行动： 每天问自己的10个问题</p></blockquote><hr><h2 id="如何学习："><a href="#如何学习：" class="headerlink" title="如何学习："></a>如何学习：</h2><ol><li><p><a href="https://book.douban.com/subject/26895988/" target="_blank" rel="noopener">《学习之道》</a></p></li><li><p><a href="https://book.douban.com/subject/27081766/" target="_blank" rel="noopener">《如何学习》</a></p></li><li><p><a href="https://book.douban.com/subject/26895993/" target="_blank" rel="noopener">《刻意练习》</a>；<a href="https://zhangandyu.github.io/2018/04/16/%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/#more">已写文章</a> </p></li><li><p><a href="https://book.douban.com/subject/27071913/" target="_blank" rel="noopener">《刻意学习》</a>；<a href="https://zhangandyu.github.io/2018/02/17/%E3%80%8A%E5%88%BB%E6%84%8F%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%20/#more">读书笔记</a></p></li><li><p><a href="https://book.douban.com/subject/26952718/" target="_blank" rel="noopener">《好好学习-个人成长指南》</a> ；<a href="https://zhangandyu.github.io/2019/01/13/%E5%8F%8D%E6%80%9D%E6%97%A5%E8%AE%B0/#more">已写文章</a> ； <a href="https://zhangandyu.github.io/2018/10/12/%E5%AD%A6%E4%B9%A0%E7%B3%BB%E7%BB%9F/#more">读书笔记</a>  </p><blockquote><p>行动： 反思日记</p></blockquote></li><li><p><a href="https://book.douban.com/subject/34863179/" target="_blank" rel="noopener">《好好思考-如何链接高超学习力</a></p></li></ol><hr><h2 id="如何生活："><a href="#如何生活：" class="headerlink" title="如何生活："></a>如何生活：</h2><ol><li><p><a href="https://book.douban.com/subject/30435330/" target="_blank" rel="noopener">《基本穿搭-适用一生的穿衣法则》</a></p></li><li><p><a href="https://book.douban.com/subject/1115353/" target="_blank" rel="noopener">《奇特的一生》</a></p></li><li><p><a href="https://book.douban.com/subject/30335756/" target="_blank" rel="noopener">《我是个怪圈》</a></p></li><li><p><a href="https://book.douban.com/subject/20507212/" target="_blank" rel="noopener">《习惯的力量-原版》</a></p></li><li><p><a href="https://book.douban.com/subject/26865498/" target="_blank" rel="noopener">《医治受伤的自信》</a></p></li><li><p><a href="https://book.douban.com/subject/26838557/" target="_blank" rel="noopener">《智能时代》</a></p></li><li><p><a href="https://book.douban.com/subject/26877306/" target="_blank" rel="noopener">《微习惯》</a></p></li></ol><hr><h2 id="职场技能："><a href="#职场技能：" class="headerlink" title="职场技能："></a>职场技能：</h2><ol><li><p><a href="https://zhangandyu.github.io/2018/10/14/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/#more">《精准表达：让你的方案在最短的时间内打动人心》</a></p></li><li><p><a href="https://book.douban.com/subject/25852981/" target="_blank" rel="noopener">《小强升职记》</a></p></li><li><p><a href="https://book.douban.com/subject/1867455/" target="_blank" rel="noopener">《像外行一样思考，像专家一样实践》</a></p></li><li><p><a href="https://book.douban.com/subject/26915104/" target="_blank" rel="noopener">《你凭什么做好互联网》</a></p></li><li><p><a href="https://book.douban.com/subject/30317645/" target="_blank" rel="noopener">《关键沟通》</a></p></li><li><p><a href="https://book.douban.com/subject/10586741/" target="_blank" rel="noopener">《关键对话》</a></p></li></ol><hr><h2 id="如何思考："><a href="#如何思考：" class="headerlink" title="如何思考："></a>如何思考：</h2><ol><li><p><a href="https://book.douban.com/subject/11528220/" target="_blank" rel="noopener">《系统之美》</a></p></li><li><p><a href="https://book.douban.com/subject/10785583/" target="_blank" rel="noopener">《思考-快与慢》</a></p></li><li><p><a href="https://book.douban.com/subject/27608239/" target="_blank" rel="noopener">《原则》</a></p></li><li><p><a href="https://book.douban.com/subject/2124114/" target="_blank" rel="noopener">《怎样解题》</a></p></li><li><p><a href="https://book.douban.com/subject/4051739/" target="_blank" rel="noopener">《第五项修炼》</a></p></li><li><p><a href="https://book.douban.com/subject/5346110/" target="_blank" rel="noopener">《穷查理宝典》</a></p></li><li><p><a href="https://book.douban.com/subject/3006742/" target="_blank" rel="noopener">《改变》</a></p></li><li><p><a href="https://book.douban.com/subject/25986341/" target="_blank" rel="noopener">《万万没想到-用理工科思维理解世界》</a>； <a href="https://zhangandyu.github.io/2018/10/10/%E9%98%85%E8%AF%BB%E7%B3%BB%E7%BB%9F/#more">已写文章</a> </p></li></ol><hr><!-- ## 商业数据分析学习思路1. 七周成为数据分析师2. 数据分析思维案例课程3. 统计学、excel、sql、ppt4. 《活用数据》5. 行业报告，多问自己，如果是你来做报告出发点是什么？为什么这样做？6. 《网站分析实战》  《运营之光》， 《计算广告》， 《黑客增长》，7. 做一个自己满意的框架体系报告 --><hr><h2 id="适合产品经理的十本书-俞军"><a href="#适合产品经理的十本书-俞军" class="headerlink" title="适合产品经理的十本书 - 俞军"></a>适合产品经理的十本书 - 俞军</h2><h3 id="入门必读"><a href="#入门必读" class="headerlink" title="入门必读"></a>入门必读</h3><ol><li><p>《社会心理学》</p><blockquote><p>阿伦森 插图第七版：特别好，适合成为“产品经理的第一本书”</p></blockquote></li><li><p>《第一本经济学》</p><blockquote><p>经济学帮助人们洞察世事 </p></blockquote></li><li><p>《学会提问》</p><blockquote><p>学习辨别信息和言论的真假对错</p></blockquote></li></ol><blockquote><ul><li>以上三本都是既可以当做产品经理的入门书读，又可以在职业生涯反复读的书。</li></ul></blockquote><h3 id="思维："><a href="#思维：" class="headerlink" title="思维："></a>思维：</h3><ol><li><p>《认知心理学及其启示》</p><blockquote><p> 人类认知和思维的基本机制</p></blockquote></li><li><p>《 思考快与慢》</p><blockquote><p>人如何有缺陷地思考</p></blockquote></li><li><p>《 超越智商》</p><blockquote><p>如何克服缺陷做理性决策</p></blockquote></li><li><p>《思维与决策》  第四版</p></li></ol><blockquote><p>系统介绍思维与决策领域的研究</p></blockquote><blockquote><ul><li>学习深度思考和决策需要的书籍，以上四本够用很久了，因为仅仅阅读多是没用的，最终还是阅读、思考、实践的最短板决定决策水平。</li></ul></blockquote><h2 id="经济学："><a href="#经济学：" class="headerlink" title="经济学："></a>经济学：</h2><ol><li><p>《经济学原理》  曼昆版 微观分册</p><blockquote><p>最通用的经济学教材</p></blockquote></li><li><p>《错误的行为》</p><blockquote><p>行为经济学离PM最近，但尚无好教材，先用这一本占坑</p></blockquote></li><li><p>《新制度经济学 一个交易费用分析范式》</p><blockquote><p>学习交易费用思考商业模式</p></blockquote></li></ol><ol start="4"><li><p>《魔鬼经济学》 史蒂芬.列维特</p></li><li><p>《统计数据会撒谎》 </p><blockquote><p> 统计陷阱</p></blockquote></li><li><p>《超级数字天才》</p></li><li><p>《女士品茶》</p></li></ol><h2 id="其他推荐"><a href="#其他推荐" class="headerlink" title="其他推荐"></a>其他推荐</h2><p><a href="https://mp.weixin.qq.com/s/UtJ117v5GmtAM5GkLrEZpA" target="_blank" rel="noopener">阳志平：双十一买书指南</a><br><a href="https://mp.weixin.qq.com/s/dkTvhSfG1USLlgWApFCX7A" target="_blank" rel="noopener">认知科学入门书单</a></p><h2 id="专栏"><a href="#专栏" class="headerlink" title="专栏"></a>专栏</h2>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何整理大脑思绪</title>
      <link href="/2019/01/20/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E9%9B%B6%E7%A7%92%E6%80%9D%E8%80%83%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/20/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E9%9B%B6%E7%A7%92%E6%80%9D%E8%80%83%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://i.loli.net/2019/01/20/5c44810e998d3.jpg" alt="如何整理大脑思绪？"><br>自己时常有这种感觉，总觉得自己的大脑反应很迟钝，思绪比较混乱，看一个问题想法很模糊，有时心情急躁却找不到问题的解决方法。工作中和别人沟通时，有时词不达意，表达不够清晰，导致工作中出现很多问题。自己也明白自己需要更加深入的思考，但总是没有找到好的办法。</p><p>最近在看《零秒思考》这本书，书中作者提供了一个解决此类问题的方法：<strong>时刻写下自己的想法</strong>。</p><p>我们每天会接受不同的信息，在脑海中会产生大量的想法与感觉。很多时候，这些想法还没有转换成语言之前，便在含混朦胧、内心纠结的状态下消失了。虽然想法会暂时忘记，但是那种纠结的感觉并没有消解，会导致自己的心情消极的，产生精神上的压力，进而让大脑变得迟钝。</p><p>时刻记录自己想法的好处是，写下来能够将纠结于心的情绪发泄出来，在写的过程中对大脑的思绪进行整理，也能更准确的表达自己的想法。这个方法的关键是：在1分钟的时间限制内，迅速写出大量自己的原始感受。</p><p>具体的做法是这样：</p><blockquote><ul><li>写标题： 写出有关大脑中思绪的一个疑问句。</li><li>写内容：写4-6行文字来写下自己的原始想法。</li><li>字数限制：每行文字字数在10-15字之间。</li><li>时间限制：在2分钟之内完成。</li><li>数量限制：每天写10条。</li></ul></blockquote><p>每个做法对应的原理是这样：</p><blockquote><ul><li>标题，用疑问句可以让自己更有写下去的冲动。</li><li>内容，写4-6行文字，能够将自己大脑中浮现的想法基本都写下来，而不至于重复。</li><li>字数，10-15字，让自己不至于写的太短而不能充分表达想法，也不会字数太长在规定时间内写不完。</li><li>时间，限制时间，避免大脑受环境和周围状况的影响。</li><li>数量，每天写10条，不会过多占用时间，更容易坚持。</li></ul></blockquote><p>书中作者要求在A4纸上写，个人感觉不是很方便，自己目前习惯于通过手机自带的【闪念胶囊】软件来进行记录。记录想法的方法与写<a href="https://mp.weixin.qq.com/s/vCGCMMYgZ2RS6vBouh7gbw" target="_blank" rel="noopener">反思日记</a>有些相似，两者都要求把自己的想法写下来，不同之处在于，反思日记是对自己这一天做的事情进行反思记录，而记笔记是对你时刻产生的想法进行记录。</p><p>目前自己按照这个方法写了10天左右，感觉自己一个很大的变化就是下班回家走在路上，可以通过自问自答的方式来对一个问题进行深入的思考。虽然有时也想着想着就跑偏了，但是自己对于思考这件事情，不再有抵触的情绪。</p><p>书中作者还提供了通过回顾记录来挖掘价值的方法：</p><blockquote><ul><li>回顾自己的笔记， 然后再把笔记的内容当做标题， 每个标题再写4-6行。 这样自己对这类问题的思考会更加的深入。 </li><li>多角度的写一个标题。 让自己对带有个人情感的内容作出更冷静的判断， 能够站在别人的角度去看问题。 </li><li>将笔记按照不同领域来进行分类整理。</li><li>每三个月回顾一次笔记，了解自己面临的问题，探寻自己的成长轨迹。</li></ul></blockquote><p>最后，想说的是，看到一个方法论，我们常常会怀疑这样的方法真的有用吗，但问题本质是看你选择<strong>先相信再看见</strong>，还是<strong>先看见再相信</strong>。 我相信时刻记录想法是一个看似简单却对个人成长大有裨益的方法，所以准备践行100天再看看效果。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反思日记</title>
      <link href="/2019/01/13/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/01/13/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E5%A5%BD%E5%A5%BD%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://i.loli.net/2019/01/13/5c3ae1c08f107.png" alt="反思日记"></p><blockquote><p>“我应该不会拒绝从头到尾把生活再过一遍，只是希望能够获得唯有作家才有的特权——在‘再版’的生活中修正‘初版’的错误，生活的悲哀之处在于我们总是老得太快而又聪明得太晚，等你不再修正的时候，你也就不再了” ——西塞罗《论老年》</p></blockquote><p>在18年下半年，自己有一种感觉特别的强烈，就是总感觉时间过得飞快，而自己还什么都没有做，一周就完了，甚至自己想不到自己上周主要做了哪些事情。于是，自己想了一个办法，来抵抗这种感觉，就是每天写日记。 </p><p>开始的时候，自己主要是记录自己这一天都干了什么，写了一个月之后，自己总感觉自己是在记流水账，刚好那时候，在看一本书《好好学习：个人知识精力管理指南》，里面提到了通过写反思日记的方法来掌握知识，自己按照里面的方法写了 100 多天，感觉还是非常有用的。 </p><p>反思日记主要分为两个部分，反思与日记。反思就是对自己做的事进行思考，对产生结果的原因进行分析。日记则是要每天都要去写，每天都要对自己的生活进行记录。自己现在更加深刻的认识到， 一个人的变化不是突然发生的， 而是发生在每一天做的事情中的。 </p><p>根据自己的实际情况，我给自己制定了反思模板，每天日记的任务主要是回答自己这7个问题。</p><blockquote><ol><li>今天自己做的不好的事情是什么？</li><li>自己当时是怎么想的， 身体是如何反应的</li><li>如果自己再重新来一次， 自己会如何做</li><li>自己今天做的很好的事情是什么</li><li>自己目前最主要的目标是什么</li><li>自己今天任务的完成情况。</li><li>自己明天的计划是什么</li></ol></blockquote><p>这7个问题背后的原理是这样的：</p><ul><li><p>问题1-3，是对自己思考方式的反思。我们平时做一件事情，是基于 <strong>假设-行动-结果</strong> 这样的过程。 而反思，就是通过 <strong>观察结果-研究原来假设-反思校正假设</strong> 这样的顺序对自己思考的再思考。 </p></li><li><p>问题4， 是为了提高自己的自信心。个人认为自己在生活中不够自信，通过每天记录自己做的事情，来让自己增加自信心。 </p></li><li>问题5，提醒自己时刻盯住自己的目标，为了自己的目标而努力。 </li><li>问题6，对比昨天的计划，监督自己今天任务的完成情况。</li><li>问题7，是为明天的事情，做出一个良好的计划。 </li></ul><p>有时候，翻看自己之前的记录，会发现自己当时会面临这样的问题，回过头来再看也是比较有意思的事情，比如, 翻看自己18年10月22号的日记，发现自己是这样想的：<br><img src="https://i.loli.net/2019/01/13/5c3adb19d656f.jpg" alt="反思日记"></p><p>通过写反思日记，自己发现了一些自己反复会犯的问题。比如：</p><blockquote><p>自己下班一回到房子就什么也不想干，总是在刷微博、看美剧，但是自己在看完之后，自己并没有产生放松的愉悦感，在写反思日记的时候，自己总是懊恼自己为什么这样浪费时间，这实际上是自己的精力管理方面出了问题，认识到这个问题之后，现在自己也在尝试各种方式来恢复自己的精力。 </p></blockquote><p>个人认为培养出记反思日记的习惯还是很有必要的，通过记录自己的生活并不断反思， 能够让我更清醒的认识到自己的不足，从而尝试做出改变。</p><p>作者在《好好学习-个人知识精力管理指南》这本书中还提到了通过写反思日记来进行对标管理，把一本书中的知识进行每日的反思等方法。大家可以根据书中的内容，指定自己的个人反思模板。</p><hr><!-- 阅读《好好学习》# 如何写反思日记：1. 什么是反思反思的实质是对假设进行校正做事的顺序：做出假设——采取行动——产生结果反思的顺序： 观察结果——研究原先的假设——反思校正假设2. 反思的作用* 发现知识误区——跳跃性假设> 没有通过深入思考就得出结论，比如：遇到大牛就躲闪一旁。>> 跳跃性假设帮我们选择了思考路径。而缺乏深入思考的过程，又让我们进一步失去了发现解决问题的方法。>> 如何解决：要深入思考如何深入思考：通过提问来放慢思考速度>> 提什么问题>1. 今天我做得不好的事情是什么？>2. 我当时是怎么考虑的？>3. 如果我重新来做会有哪些改进？* 促进已有知识产生新知识>在反思的时候主动的进行知识的联想和联结，将生活中其他经历和经验串联起来， 重新认识和审视自己过往经历，能够将自己分散的生活经验进行重新组织， 从而产生新的知识。>>如何做>>1. 我过去还遇到过这样的事情吗？>2. 我还听过有其他人经历的同样的事情吗？>3. 有什么相关的方法可以应用到这件事情中吗* 检验学习到的新知识是否用了起来> 对标管理：提前设定一个标准， 然后每天反思， 与之比较寻找差距3. 培养反思的额方法* 从小事反思，深入突破* 把生活案例化处理* 培养记反思日记的习惯4. **每日反思问题：*** 今天我做得不好的事情是什么？* 我当时是怎么考虑的， 身体是怎么反应的？* 如果我重新来做会有哪些改进？* 我过去还遇到过这样的事情吗？* 我还听过有其他人经历同样的事情吗？* 有什么相关的方法可以应用到这种事情中吗？* 我今天没有有效控制自己的事情是什么？* 我今天在心理上感觉很好的2件事情是什么？* 我今天学到的新技能时什么？* 我离我的职业目标还差哪些技能？ -->]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
            <tag> 思考方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>统计学学习</title>
      <link href="/2018/10/20/%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/10/20/%E6%8A%80%E8%83%BD-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="统计学网站"><a href="#统计学网站" class="headerlink" title="统计学网站"></a>统计学网站</h1><ol><li><a href="https://seeing-theory.brown.edu/compound-probability/cn.html" target="_blank" rel="noopener">看见统计学</a></li><li><a href="https://www.shuxuele.com/data/index.html" target="_blank" rel="noopener">数学很好玩</a></li><li><a href="https://do.minik.us/" target="_blank" rel="noopener">数据可视化-博客</a></li><li><a href="https://www.codecogs.com/latex/eqneditor.php" target="_blank" rel="noopener">数学公式转换为markdown格式</a></li><li><a href="https://book.douban.com/subject/27038537/" target="_blank" rel="noopener">《写给所有人的极简统计学》</a></li></ol><h1 id="前言：为什么应该学点统计学"><a href="#前言：为什么应该学点统计学" class="headerlink" title="前言：为什么应该学点统计学"></a>前言：为什么应该学点统计学</h1><p>统计学是人类发明用来研究我们自身的科学，它与我们的生活息息相关。 小到支付宝根据用户个人消费数据判断其消费水平，从而有针对性进行限额借贷。大到国家通过国民生产总值这样的统计数据分析，来研究国家经济发展趋势等， 都需要用到统计学知识。</p><p>我们可以从统计大师 Hans Rolling 的演讲中， 来看下 1960 年到 2003 年的世界各国出生率与经济发展是如何变化的。</p><p><a href="https://www.youtube.com/watch?v=RUwS1uAdUcI&amp;t=1065s" target="_blank" rel="noopener">Hans Rolling —— 统计的魅力</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/RUwS1uAdUcI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>有人会问，统计学那么多高深的概念和复杂的算术， 在平时的生活中自己也应用不到。 这种想法其实是错误的。<strong>我们学习统计学， 不光是学习怎么对数据进行统计计算，更重要的是学会运用统计思维去更理性地看待周围的事物。</strong></p><blockquote><p>比如， 最近报道的一名美国公民在 10 月 23 号中了 16 亿美元的彩票， 看到这则消息，你会不会也有点心动， 也想去买个彩票。其实， 关于是否要买彩票，统计学有一个重要的概念来衡量：<strong>期望值</strong></p><p>即同一种行为多次重复之后，所能得到的平均收益</p><p>举例来说， 假如某彩票规则为：每次买张彩票需要 2 元，假设 200 次抽奖可以中奖一次，奖金为 300 元。</p><p>期望值 = 300 <em>(1/200) + 0 </em> (199/200) = 1.5。</p><p>期望值是 1.5 元， 但是每次抽奖成本为 2 元， 于是每次净亏损 0.5 元。如果你偶尔买一次就算了， 但如果你长期买彩票，就肯定会亏很多钱。 况且现实生活中，中奖的概率远远低于 1/200</p></blockquote><p>你可能会觉得，概率那么低， 那我怎么感觉天天有人中奖呢， 这背后其实是媒体的选择性报道， 也就是统计学中的<strong>幸存者偏差问题</strong>。</p><blockquote><p>例如：二战期间，盟军为减少飞机在敌人防空炮火中的损失，军方决定为飞机加装防护，多数人认为，应该在机身中弹多的地方加强防护。但统计学家沃德认为，应该给那些没有中弹的油箱和驾驶部位进行防护，因为这些部位中弹的飞机根本没有机会飞回来。</p></blockquote><p><strong>现实生活中，也往往会存在一些幸存者偏差的数据，我们生活中接触的数据越来越多， 解读数据背后的信息， 辨析数据真伪就显得非常的重要</strong>，这则视频对此有更深入的讲解。</p><p><a href="https://www.youtube.com/watch?v=AbMTG8bzVfY&amp;t=66s" target="_blank" rel="noopener">成功学有用吗？幸存者偏差，一个活着就该明白的事！李永乐老师</a></p><iframe width="560" height="315" src="https://www.youtube.com/embed/AbMTG8bzVfY" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>那么统计学到底要学什么呢？统计学主要学习两个方面</p><ol><li>描述统计， 描述数据的基本情况</li></ol><blockquote><p>通过研究数据的平均值，中位数，标准差等指标， 来了解数据的整体分布状况，从杂乱的数据中得出有用的信息</p></blockquote><ol start="2"><li>推理统计，根据样本数据来对总体进行估计</li></ol><blockquote><p>通过对样本数据的研究， 来对总体数据进行估计，评估推理数据的准确度，统计学中就会通过置信度， 卡方分布等来对总体进行估计。</p></blockquote><p><strong>统计学是我们将客观数据转化成有用信息的一把钥匙， 运用统计概念对一些更为广泛而大致的信息及规律进行思考， 可以改善我们做出的判断和决定。我们当然不能指望这些判断不出错误， 但每一个好的决策都会帮助你更有效的利用这些信息，积少成多，把事情做成的概率会大很多。</strong> </p><p>视频资料补充：<br><a href="https://v.qq.com/x/page/n0146d3s4zj.html" target="_blank" rel="noopener">Hans Rolling —— 东方崛起</a></p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=n0146d3s4zj" allowfullscreen="true"></iframe><p><a href="https://v.qq.com/x/page/l03817zzhl2.html" target="_blank" rel="noopener">为什么应该学点统计学</a></p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=l03817zzhl2" allowfullscreen="true"></iframe><p><a href="https://www.bilibili.com/video/av8225730/?redirectFrom=h5" target="_blank" rel="noopener">数据的乐趣</a></p><h2 id><a href="#" class="headerlink" title=" "></a><iframe src="//player.bilibili.com/player.html?aid=8225730&cid=13540431&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></h2><h1 id="描述统计"><a href="#描述统计" class="headerlink" title="描述统计"></a>描述统计</h1><ol><li><p><a href="https://www.shuxuele.com/mean.html" target="_blank" rel="noopener">平均数</a></p><blockquote><p> 将所有数据进行平均分配</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 均值</span></span><br><span class="line">np.mean(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/central-measures.html" target="_blank" rel="noopener">中位数</a></p><blockquote><p>n个数据由大到小排列时，位于正中间的那个数</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/central-measures.html" target="_blank" rel="noopener">众数</a></p><blockquote><p>n个数据中，出现次数最多的那个数。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment">#方法1</span></span><br><span class="line"><span class="comment"># np.bincount, 计算非负的int数组中，每个值出现的次数</span></span><br><span class="line">counts = np.bincount(a)</span><br><span class="line"><span class="comment">#[0 1 0 2 1 1 0 2 0 0 0 0 0 0 0 3]</span></span><br><span class="line"><span class="comment">#返回沿轴最大值的索引</span></span><br><span class="line">np.argmax(counts)</span><br></pre></td></tr></table></figure></li></ol><blockquote></blockquote> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">stats.mode(a)[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><ol start="4"><li><p>极差</p><blockquote><p>n个数据中，最大数与最小数之差</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">a = [1, 3, 3, 4, 5, 7, 7, 15, 15, 15]</span><br><span class="line">b = max(a) - min(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/quartiles.html" target="_blank" rel="noopener">四分位数</a></p><blockquote><p>将数据从小到大排列并分成4等份后，处于3个分割点上的数。<br><img src="https://i.loli.net/2020/02/23/26ENcS4gVjZfbCh.jpg" alt="微信图片_20200223184342.jpg"><br>箱型图<br><img src="https://i.loli.net/2020/02/23/MneCPUgLXas7Gxi.jpg" alt="微信图片_20200223184334.jpg"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">np.median(a)</span><br><span class="line"><span class="comment"># 45%分位数</span></span><br><span class="line">np.percentile(a, <span class="number">45</span>)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/standard-deviation.html" target="_blank" rel="noopener">方差</a> </p><blockquote><p>度量随机变量与期望值（平均值）之间的偏离程度。</p><p>公式：$\sigma ^{2} = \frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}$</p><p>计算步骤：</p><ol><li>求平均值</li><li>求 (各数值 - 平均值) 的值<blockquote><ul><li>以 (各数值 - 平均值) 的平均数为标准，无法看出以平均数为基准数据的离散程度。因为两数相减结果有正有负，相加之后会互相抵消。</li><li>为使 (各数值 - 平均值) 的差值即使为负也能显示出差值，可以将 (各数值 - 平均值)的值平方之后，再取平均值。</li></ul></blockquote></li><li>求 (各数值 - 平均值)² 的值</li><li>求 (各数值 - 平均值)² 的平均值</li></ol><p>方差问题：</p><blockquote><ul><li>数值时有会过大</li><li>单位为原先单位的平方</li></ul></blockquote></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">np.var(a)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/data/standard-deviation.html" target="_blank" rel="noopener">标准差</a></p><blockquote><p>标准差越小，说明数据大多数集中于平均值附近，偏差不大。<br>公式：$\sigma =  \sqrt{\sigma ^{2}} =\sqrt{\frac{  \sum_{i=1}^{N}(x_{i}-\mu)^{2}}{N}} $<br>计算步骤： 计算出方差后开根号</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>]</span><br><span class="line">np.std(a)</span><br></pre></td></tr></table></figure></li><li><p>常见的因果关系</p><blockquote><p><img src="https://i.loli.net/2020/02/24/aoGEmcSqwdiR6lZ.jpg" alt="微信图片_20200224191209.jpg"></p><ol><li>某个原因导致的结果唯一，导致某个结果的原因也是唯一的。</li><li>某个原因导致的结果唯一，导致某个结果的原因不唯一。</li><li>某个原因导致的结果不唯一，导致某个结果的原因唯一。</li><li>某个原因导致的结果不唯一，导致某个结果的原因也不唯一。</li></ol></blockquote></li><li><p><a href="https://www.shuxuele.com/data/correlation.html" target="_blank" rel="noopener">相关系数</a></p><blockquote><p>表示相关关系的正负与强弱的系数<br>相关系数r的范围是-1≤r≤1<br>判断相关关系强弱的标准：<br><img src="https://i.loli.net/2020/02/24/RIYFqMdjxJKsS2T.jpg" alt="微信图片_20200224192723.jpg"></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写法1</span></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">b = [<span class="number">2</span>,<span class="number">4</span>, <span class="number">6</span>,<span class="number">9</span>]</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">np.corrcoef([a,b])</span><br><span class="line"><span class="comment"># 写法2</span></span><br><span class="line"><span class="keyword">import</span> scipy.stats <span class="keyword">as</span> stats</span><br><span class="line">stats.pearsonr(a,b)</span><br><span class="line"><span class="comment"># 结果的第一个数为相关系数</span></span><br><span class="line"><span class="comment"># 写法3</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">df= pd.DataFrame()</span><br><span class="line">df[<span class="string">'a'</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">df[<span class="string">'b'</span>] = [<span class="number">2</span>,<span class="number">4</span>, <span class="number">6</span>,<span class="number">9</span>]</span><br><span class="line">df.corr()</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h1><ol><li><p><a href="https://www.shuxuele.com/combinatorics/combinations-permutations.html" target="_blank" rel="noopener">排列</a></p><blockquote><p>从N项中任取n项，并进行排列，决策的顺序的结果有影响。<br>公式：$P_{n}^{N} = \frac{N!}{(N-n)!}$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special <span class="keyword">import</span> comb, perm</span><br><span class="line">perm(<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.shuxuele.com/combinatorics/combinations-permutations.html" target="_blank" rel="noopener">组合</a></p><blockquote><p>从N项中任取n项,不考虑顺序。<br>公式：$c_{n}^{N} = \frac{N!}{n!(N-n)!}$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.special  <span class="keyword">import</span> comb, perm</span><br><span class="line">comb(<span class="number">5</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>补充资料： <a href="https://zhuanlan.zhihu.com/p/41855459" target="_blank" rel="noopener">5分钟彻底了解排列组合</a></p></blockquote><ol start="3"><li><a href="https://www.shuxuele.com/data/probability-events-types.html" target="_blank" rel="noopener">事件</a><blockquote><p><img src="https://i.loli.net/2020/02/24/PjsIL6iNYlQzXfR.png" alt="微信截图_20200224195820.png"></p><ul><li>事件的补: $P(A) = 1 - P (A^{c})$</li><li>事件的并：$P(A\bigcup B ) = P(A) + P(A) - P(A\bigcap  B )$</li><li>互斥事件：$P(A\bigcup B ) = P(A) + P(B)$</li><li>独立事件：$P(A\bigcap B) = P(A) *  P(B)$</li></ul></blockquote></li></ol><ol start="4"><li><p>条件概率</p><blockquote><p>在事件B发生的条件下， A条件发生的概率<br>公式： </p><ul><li>$P(A|B ) = \frac{P(A\bigcap B)}{P(B)}$</li><li>$P(A\bigcap B) = P(B) <em> P(A|B) = P(A) </em> P(B|A)$ </li></ul></blockquote></li><li><p><a href="https://www.shuxuele.com/data/binomial-distribution.html" target="_blank" rel="noopener">二项分布</a> </p><blockquote><p><strong>概念：</strong> 成功率为P的实验，独立重复 n 次后的成功次数为 x 的概率分布。</p><p>公式： <img src="https://i.loli.net/2020/02/24/3myYQFjAZ8cRket.png" alt="微信截图_20200224223830.png"></p><p><img src="https://i.loli.net/2020/02/24/AH8cRKzVXZ2moxU.png" alt="微信截图_20200224224006.png"></p><p>案例：在各类促销活动中， 抽奖是一种常见的促销方式。现在希望运营方设计一个抽奖模式。用户能够抽10次，中奖概率是10%。如果用户抽中了3次及以上， 则公司会亏本。那么公司亏本的概率是多少？</p></blockquote></li></ol><ol start="6"><li><p><a href="https://www.shuxuele.com/data/standard-normal-distribution.html" target="_blank" rel="noopener">正态分布</a> </p><blockquote><p><img src="https://www.statisticshowto.datasciencecentral.com/wp-content/uploads/2013/02/standard-normal-distribution.jpg" alt="正态分布"><br>性质：</p><ul><li>均值 = 中位数 = 众数</li><li>沿中心线对称，一半在平均值左侧，一半在平均值右侧。</li></ul><p>特点：</p><ul><li>69%的数值在离平均值一个标准差之内</li><li>95%的数值在离平均值2个标准差之内</li><li>99.7%的数值在离平均值3个标准差之内</li></ul><p>补充资料：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2017/08/normal-distribution.html" target="_blank" rel="noopener">正态分布为什么常见？</a></li><li><a href="https://www.statisticshowto.datasciencecentral.com/probability-and-statistics/normal-distributions/" target="_blank" rel="noopener">正态分布</a></li></ul></blockquote></li><li><p><a href="https://www.shuxuele.com/data/standard-normal-distribution.html" target="_blank" rel="noopener">数据标准化-Z-Score</a></p><blockquote><p>公式： z = (x - u) / 方差<br>目的：消除指标之间的量纲和取值范围差异的影响</p><p>补充资料：<a href="https://blog.csdn.net/weixin_38706928/article/details/80329563" target="_blank" rel="noopener">数据规范化（归一化）、及Z-score标准化</a></p></blockquote></li><li><p><a href="https://zh.wikipedia.org/wiki/%E5%88%87%E6%AF%94%E9%9B%AA%E5%A4%AB%E4%B8%8D%E7%AD%89%E5%BC%8F" target="_blank" rel="noopener">切比雪夫定理</a></p><blockquote><ul><li>至少有75%的数据在两个标准差之内</li><li>至少有89%的数据在三个标准差之内</li><li>至少有95%的数据在5个标准差之内</li></ul><p>举例： 若一班有36个学生，而在一次考试中，平均分是80分，标准差是10分，我们便可得出结论：少于50分（与平均相差3个标准差以上）的人，数目不多于4个（=36*1/9）</p><p>作用： 用于异常值检测</p></blockquote></li></ol><!-- 6. 泊松分布 > 案例：某医院急救中心一天收到呼叫次数服从泊松分布，平均数为20， 那么该急救中心一天收到15次呼叫的概率是多少？ 收到小于15次呼叫的概率是多少？> excel 函数： POISSON.DIST7. 伯努利分布 8. 几何分布10. 幂律分布8. 假设检验>案例：某个APP， 用户购买的平均转化率出25%， 在进行全新的产品设计之后，转化率变成了30%， 这个转化是波动？还是产品改进有效？A/B 测试： Z检验 --><hr><!-- 回归分析：我们假设“某年度首都地区盛夏的天数为x天，这一年度首都地区啤酒的总销售额为y日元”。严格来说，y并非x的函数，但是，在某种程度上可以预测，盛夏的天数越多，啤酒的销量就越高。类似这样在数据上并非严格的函数关系，在统计学上，可以概括为[y是x的函数+误差]按照这个逻辑，了解x与y的关系，就可以预测y（啤酒销售额）的值。这种情况下使用的分析方法，叫作回归分析（回归分析是确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。 --><h1 id="贝叶斯定理"><a href="#贝叶斯定理" class="headerlink" title="贝叶斯定理"></a><a href="https://www.shuxuele.com/data/bayes-theorem.html" target="_blank" rel="noopener">贝叶斯定理</a></h1><ol><li><strong>如何判断她喜欢你的概率</strong><blockquote><p>贝叶斯定理<br>计算方法： 先假定一个概率， 然后根据样本获得新的信息， 根据这些信息对 原先假设的概率进行修正， 得到准确的概率。<br>公式：$P(A|B) = \frac{P(A) * P(B|A)}{P(B)}$</p></blockquote></li></ol><p>假设 你是一名女生， 在情人节这天， 一名男生送给你一盒巧克力， 你可能会有疑问，他是不是喜欢你， 他喜欢你的概率是多大？</p><p>因为你没有证据来说明你就是他喜欢的类型， 所以， 我们假设 你或者是他喜欢的类型， 或者是一名路人。 假设各有50%的概率。 </p><p><img src="https://i.loli.net/2018/11/02/5bdc6bb0a6545.png" alt="a"></p><p>通过调查， 我们发现 一个男生对心意女生送出巧克力的概率为 45%</p><p><img src="https://i.loli.net/2018/11/02/5bdc6be2e46fa.png" alt="a"></p><p>对路人送出巧克力的概率 为 20%， 那他现在送给你一盒巧克力， </p><p><img src="https://i.loli.net/2018/11/02/5bdc6bfeba767.png" alt="b"></p><p>在他已经送你巧克力的这件事情已经确定了， 所以他们现在是一个整体。他喜欢你的概率是多少呢。 </p><blockquote><p>45% / (45% + 20%) = 69.2%<br>当他送你巧克力时，大概有69、2%的概率会喜欢你</p></blockquote><p>当然， 贝叶斯概率 能够计算出这个概率， 但是否要继续， 取决与你。 贝叶斯概率在我们生活中的应用是非常广泛的， 常见的， 比如 在邮件中的反垃圾邮件。 这是一种贝叶斯概率非常好的使用案例。 </p><p>在上面的推理中， 我们总会觉得贝叶斯定理有些“牵强”,牵强的原因主要是因为先验概率。 这种主观上假定或者大概的概率， 会让人感觉牵强。 但也正是由于设定了先验概率， 贝叶斯定理才会有即是只有少量信息， 也能够进行推理。 当然， 贝叶斯定理有另一学习功能， 就是信息越多， 推理结果就越精确。 </p><hr><ol start="2"><li><strong>快速理解贝叶斯定理</strong></li></ol><p>假设一家商城， 顾客分为： 想买商品的顾客，和随便逛逛的顾客。  假设， 随机走进来一个顾客，他为有意愿度的顾客占20%， 为随便逛逛的顾客占80%。 现在增加了一个主动询问店员的动作。 </p><p>假设有意愿度购买的顾客， 向店员询问的概率为70%， 不询问的概率为30%。 随便逛逛的客户， 主动询问店员的购买概率为 10%， 不询问的概率为 90%。 </p><p>现在问 如果一顾客主动向店员询问， 那么他是有意愿购买的顾客的概率是多少。</p><blockquote><p>有意向且询问的概率为  14%。  有意向不询问的概率为  6%</p><p>无意向且询问的概率为 8%， 无意向且不询问的概率为 72%</p><p>现在 主动询问这个动作已经做出了， 所以总体为两部分： 有意向且询问， 和无意向且询问</p><p>14:8 = 7:4。    所以她有意向且愿意购买的概率为   7/11   63.6% </p></blockquote><hr><ol start="3"><li><strong>贝叶斯： 通过结果来反推原因</strong></li></ol><blockquote><p>参加活动的人群中，女性只占30%， 是否说明女性不喜欢参加此类活动？</p></blockquote><blockquote><p>某种疾病的发病率为千分之一。现在有一种试纸，它在患者得病的情况下，有99%的准确率判断患者得病，在患者没有得病的情况下，有5%的可能误判患者得病。现在试纸说一个患者得了病，那么患者真的患病的概率是多少？</p></blockquote><blockquote><p>某城市有两种颜色的出租车，蓝车和绿车市场比率为15:85。 一辆出租车肇事逃逸，当时有一位目击者证人，这位证人认定肇事的出租车是蓝色的。但是他的目击未必可信，公安人员经过在相同环境下对该目击者进行“蓝绿”测试得到：80%的情况下识别正确，20%的情况下不正确。那么实际为蓝车的可能性是多少？</p></blockquote><blockquote><p>我们经常会受到垃圾短信，假设1000条正常短信中，包含【澳门赌场】的短信有2条，而在垃圾短信中，包含澳门短信的短信有400条。<br>现在我们接受到了一条新短信，在不浏览内容的情况下，假定它的正常几率是50%。现在对短信内容进行解析，发现澳门赌场这个词，那么它是垃圾短信的概率有多高。</p></blockquote><p>补充资料：</p><blockquote><ul><li><a href="http://mindhacks.cn/2008/09/21/the-magical-bayesian-method/" target="_blank" rel="noopener">数学之美番外篇：平凡而又神奇的贝叶斯方法</a></li><li><a href="https://book.douban.com/subject/30229508/" target="_blank" rel="noopener">《统计学关我什么事》</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html" target="_blank" rel="noopener">贝叶斯推断及其互联网应用（一）：定理简介</a></li><li><a href="https://www.jiqizhixin.com/articles/2017-09-19-6" target="_blank" rel="noopener">贝叶斯学习与未来人工智能</a><!-- > * 贝叶斯奥卡姆剃刀《数学之美》第24章《决策与判断》 --><!-- [Machine Learning, a Probabilistic Perspective](https://amstat.tandfonline.com/doi/abs/10.1080/09332480.2014.914768?journalCode=ucha20#.W9nMJPkzbIU) --></li></ul></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>思考系统</title>
      <link href="/2018/10/14/%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/10/14/%E9%80%9A%E7%94%A8-%E6%80%9D%E8%80%83%E8%83%BD%E5%8A%9B-%E6%80%9D%E8%80%83%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="批判性思维"><a href="#批判性思维" class="headerlink" title="批判性思维"></a>批判性思维</h1><h2 id="1-图尔敏模型"><a href="#1-图尔敏模型" class="headerlink" title="1.图尔敏模型"></a>1.图尔敏模型</h2><blockquote><p><img src="https://i.loli.net/2020/03/10/PNtsn39cULezuSm.png" alt="未命名文件.png"></p><ul><li>举例：<blockquote><p>小明出生在北京，所以小明是中国人。</p><ul><li>论题： 小明出生在北京</li><li>前提： 在北京出生的是中国人</li><li>支撑： 现有法律规定</li><li>逻辑推理： 在北京出生的是中国人，小明在北京出生，所以小明是中国人。</li><li>反例：小明后来移民加拿大。</li><li>对推理的限定： 小明并非一定就是中国人</li><li>结论：因为小明出生在北京，所以小明可能是中国人。</li></ul></blockquote></li></ul></blockquote><hr><h2 id="2-对各个模块进行解释"><a href="#2-对各个模块进行解释" class="headerlink" title="2. 对各个模块进行解释"></a>2. 对各个模块进行解释</h2><ol><li><p>论题</p><blockquote><p>论题是要讨论的问题或争议。</p><p>论题分为两种形式：</p><ul><li>一种是对事实的讨论，比如：服用中药 <em>是不是</em> 能治好疾病，杨教授的学术研究水平 <em>怎么样</em>？ 人口出生率下降的原因 <em>是什么</em>？</li><li>另一种是对价值主张的讨论， 比如：大学生 <em>应不应该</em> 读研， 对全民医疗 <em>应该</em> 采取什么样的态度？</li></ul><p>不同类型的论题，做出的评价是不同的，我们在讨论一件事情时，<strong>要检查两点</strong>：</p><ul><li><strong>我们是在讨论某个事实，还是讨论价值主张。</strong></li><li><strong>我有没有正面回答问题。</strong></li></ul></blockquote></li><li><p>结论</p><blockquote><p>结论是要让你相信的观点和信息, 必须是有论证支撑的观点。</p><ul><li><strong>没有论据支撑的观点不能叫结论。</strong><blockquote><ul><li>当某人说出他的观点时， 我们应该马上问：你这个看法有什么依据？</li></ul></blockquote></li></ul><p>注意问题：</p><ul><li><p><strong>偷换结论</strong></p><blockquote><p>用一个相关性很强的结论来换掉正面回答问题的结论。<br><strong>原理：默认预设，认为结论只能二选一。</strong></p><ul><li>鱼和熊掌不可兼得，我拿不到鱼，所以我会拿到熊掌。</li><li>年轻人不愿意生孩子，所以养猫的人会越来越多。</li></ul></blockquote></li><li><p><strong>先有结论，再证明合理</strong></p><blockquote><p>人先作了决定，然后给出的理由并不是来推导这个决定，而是想办法维护这个决定。</p><p>在作一些决定和选择时，要先问自己：影响决策的是理性判断还是情绪等影响。</p></blockquote></li></ul></blockquote></li><li><p>论证前应明确的两个问题</p><blockquote><p> <strong>明确对方是在进行论证，还是在进行解释。</strong></p><ul><li>解释并没有证明论证确实成立，而是把结论变成了默认前提。<blockquote><p>论证是指：我还没有相信或者认同你，你得证明你的判断。</p><ul><li>将 <strong>因为</strong> 用 <strong>根据…、基于…、理由是…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>得出…、推断…、证明…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我往嘴里塞食物。</li></ul></li></ul><p>解释是指：我们已经承认了事实，视图说明为什么事实是这样的。</p><ul><li>将 <strong>因为</strong> 用 <strong>归因于…</strong> 来进行替换， 将 <strong>所以</strong> 用 <strong>导致…</strong> 来进行替换，看语句是否通顺。</li><li><ul><li>我在吃饭，因为我饿了。</li></ul></li></ul></blockquote></li></ul><p><strong>识别概念的定义区别</strong></p><ul><li>在论题、论证和结论中出现的概念是一致的吗,这些观念会误导别人吗？</li><li>关键概念的定义准确吗？</li><li>在思考和论证的过程中，把一件事定义清楚。<blockquote><p>参考：《学会提问》第4章</p></blockquote></li></ul></blockquote></li><li><p>挖掘论证中两种隐藏假设</p><blockquote><p><strong>事实判断型的假设</strong>，</p><ul><li>这个世界是什么样的？一个理由是否能证实结论，主要取决于我们能否找到没有明说出来的想法，将理由和结论从逻辑上联系起来。<blockquote><p>比如：每天一个鸡蛋，能补充蛋白质。假定：鸡蛋是富含蛋白质的。 </p></blockquote></li><li>如何找出描述性假设<blockquote><ul><li>不断思考理由和结论之间的关系，寻找支持理由的想法、</li><li>把自己放到相反立场</li></ul></blockquote></li></ul><p><strong>价值判断型的假设</strong>，</p><ul><li>这个世界应该如何选择？价值观假设是认为某些价值观中一个比另一个更重要，并且选择的价值观会对结论产生重大影响，同时也影响他捍卫结论的方式，但是这种价值取向并没有说明。<blockquote><p> 比如价值观冲突： 忠诚-诚实、竞争-合作、媒体自由-国家安全、平等-个人主义、秩序-言论自由、理性-冲动。</p></blockquote></li><li>如何找出价值观假设<blockquote><ul><li>言论者的背景是什么，他代表了哪方的利益？</li><li>注意作者用来证实结论的各种理由，然后判断哪些价值取向会导致作者认为这些理由比另一些理由更可取，而另一些理由其实可以从论题的另一方面进行论证。</li><li>如果我和作者站在相反的立场，我会如何反驳</li></ul></blockquote></li></ul><p><strong>判断假设</strong></p><ul><li>这个假设和我的个人经验冲突不？</li><li>这个假设是来自哪里的，消息来源可靠吗？</li><li>我自己想法，背后的隐藏假设是什么？</li></ul></blockquote></li></ol><ol start="5"><li>支撑<blockquote><ul><li>支撑是双方都公认的法则或常识。<blockquote><ul><li>法律法规</li><li>经检验的科学研究</li><li>注意类比的质量。</li></ul></blockquote></li></ul></blockquote></li></ol><ol start="6"><li><p>反例</p><blockquote><ul><li>对相反观点的论证，以达到论证的全面性。</li></ul></blockquote></li><li><p>常见谬误：</p><blockquote><p>参考下文：常见谬误详解</p></blockquote></li></ol><hr><h2 id="3-用图尔敏模型进行议论文写作"><a href="#3-用图尔敏模型进行议论文写作" class="headerlink" title="3. 用图尔敏模型进行议论文写作"></a>3. 用图尔敏模型进行议论文写作</h2><blockquote><ol><li>对文章主题进行介绍<blockquote><ul><li>介绍能够引起读者注意的内容</li><li>对要表述的问题进行陈述</li><li>表达你的结论，并给出使用范围。</li></ul></blockquote></li></ol><ol start="2"><li>提出证据来支撑论证<blockquote><ul><li>证据1、2</li></ul></blockquote></li></ol></blockquote><!-- >3.  提供保证，表明证据如何支持结论>> * 保证1、2 --><blockquote><ol start="3"><li><p>提供支撑保证的理由和事实，根据个人实践和理论来说明保证的合理性。</p><blockquote><ul><li>支撑1、2</li></ul></blockquote></li><li><p>回答反驳</p><blockquote><ul><li>反驳1</li><li>对反驳1的回答<br>…</li></ul></blockquote></li><li><p>结论</p><blockquote><ul><li>概括论证和结论的要点，指出论证的意义，能够让读者印象深刻。</li></ul></blockquote></li></ol></blockquote><hr><h2 id="4-用图尔敏模型进行分析性写作"><a href="#4-用图尔敏模型进行分析性写作" class="headerlink" title="4. 用图尔敏模型进行分析性写作"></a>4. 用图尔敏模型进行分析性写作</h2><blockquote><p>对某一文章质量进行评判</p><ul><li>理解主题论点，澄清概念的意义。</li><li>审查理由质量，挖掘潜在的假设。</li><li>分析论证结构，评估推理的强弱。</li><li>考虑替代论证， 提出完善的建议。</li></ul></blockquote><h2 id="5-学习资料"><a href="#5-学习资料" class="headerlink" title="5. 学习资料"></a>5. 学习资料</h2><blockquote><ul><li><p>课程-中国青年政治学院：批判性思维（谷振诣教授）</p><iframe src="//player.bilibili.com/player.html?aid=9624662&cid=15907096&page=4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></li><li><p><a href="https://en.wikipedia.org/wiki/Toulmin_method" target="_blank" rel="noopener">Toulmin method</a></p></li><li><p><a href="https://pan.baidu.com/s/1jHFsnFw?fid=154817059834328" target="_blank" rel="noopener">《逻辑新引.怎样辨别是非》</a></p></li><li><p><a href="https://book.douban.com/subject/1863497//" target="_blank" rel="noopener">《beyond feelings》</a></p></li><li><p>《简单的逻辑学》</p></li><li><p>《学会提问》</p></li><li><p>《蔡钰-批判性思维15讲》</p></li><li><a href="https://www.youtube.com/watch?v=kBdfcR-8hEY&amp;list=PL30C13C91CFFEFEA6" target="_blank" rel="noopener">Justice – What’s the right thing to do?</a></li></ul></blockquote><!-- > * [Critical Reasoning for Beginners》](https://www.youtube.com/watch?v=kBlQj5uiOXc&list=PLA795AB5BDDD2B0B3) --><hr><h1 id="结构化思维"><a href="#结构化思维" class="headerlink" title="结构化思维"></a>结构化思维</h1><blockquote><p>对信息进行<strong>识别、归纳、概括、总结和表达。</strong></p><p><img src="https://i.loli.net/2020/03/16/QbL2rwTzn9tcvy8.jpg" alt="微信图片_20200316111654.jpg"></p></blockquote><h2 id="1-识别信息"><a href="#1-识别信息" class="headerlink" title="1. 识别信息"></a>1. 识别信息</h2><blockquote><p>纵向上的总分结构</p><ul><li>识别结论</li><li>识别理由</li><li>识别事实<blockquote><p>参考:上文批判性思维</p></blockquote></li></ul></blockquote><h2 id="2-归纳信息"><a href="#2-归纳信息" class="headerlink" title="2. 归纳信息"></a>2. 归纳信息</h2><blockquote><p>横向上的分类结构</p><ul><li>MECE 分类法： 不重不漏</li><li>二分法</li><li>过程法： 发展时间、运作流程</li><li>要素法：从上到下、从外到内、从整体到局部</li><li>公式法：按照公式的要素去分类。</li><li>矩阵法</li><li>特定场景模型：<a href="https://zhangandyu.github.io/2019/02/26/%E6%96%B9%E6%B3%95-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/">常见的分析思维模型</a></li></ul></blockquote><h2 id="3-总结概括信息"><a href="#3-总结概括信息" class="headerlink" title="3. 总结概括信息"></a>3. 总结概括信息</h2><blockquote><p><img src="https://i.loli.net/2020/03/16/75y3u8AHNkYOoDl.jpg" alt="微信图片_20200316111700.jpg"><br> <strong>归纳法</strong></p><ul><li>根据许多个别事物的特殊性来概括出同类事物的特性。</li></ul><blockquote><p> 描述性概括</p><ul><li><p>找出事物属性上的共同点。</p><p>行动性概括</p></li><li>最终结果是什么，找出事物结果的共性。</li></ul></blockquote><p> <strong>演绎法</strong></p><ul><li>将某一事实与对应的某个规律联系再一起，得出结论。<blockquote><p>注意事项：</p><ul><li>大前提一定要无可争议，避免主观判断，并且罗列不能过长。</li><li>小前提是一个已经发生的事实。</li></ul></blockquote></li></ul></blockquote><h2 id="4-清晰表达"><a href="#4-清晰表达" class="headerlink" title="4. 清晰表达"></a>4. 清晰表达</h2><blockquote><p><strong>1.结论先行</strong> </p><blockquote><p>表达时先说结论</p></blockquote><p><strong>2.以上统下</strong></p><blockquote><p>上一层次要点必须是下一层次的概括</p></blockquote><p> <strong>3.归类分组</strong></p><blockquote><p>每一组要点必须属于同一范畴</p></blockquote><p><strong>4.逻辑递进</strong></p><blockquote><p>每个要点必须按照一定的逻辑顺序排列。</p><ul><li>演绎推理</li><li>时间/步骤顺序</li><li>空间顺序</li><li>重要性顺序</li></ul></blockquote><p> 注意事项：</p><blockquote><ul><li>结论先行，重要的理由说三点。</li></ul></blockquote></blockquote><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5. 参考资料"></a>5. 参考资料</h2><blockquote><ul><li>《得到-有效训练你的结构化思维》</li><li>《金字塔原理》</li></ul></blockquote><hr><h1 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h1><h2 id="1-明确和理解问题"><a href="#1-明确和理解问题" class="headerlink" title="1. 明确和理解问题"></a>1. 明确和理解问题</h2><blockquote><ul><li>明确问题的本质到底是什么</li><li>跟领导确认希望达到的目标</li><li>明确可以利用的资源</li></ul></blockquote><h2 id="2-拆分和定位问题"><a href="#2-拆分和定位问题" class="headerlink" title="2.拆分和定位问题"></a>2.拆分和定位问题</h2><blockquote><ul><li>用公式思维拆解问题</li><li>逻辑树-金字塔原理（mece法则)</li><li>假设驱动-假设问题可能出现在某个细分的问题点上。</li></ul></blockquote><h2 id="3-提出解决方案并总结"><a href="#3-提出解决方案并总结" class="headerlink" title="3.提出解决方案并总结"></a>3.提出解决方案并总结</h2><blockquote><ul><li>结论先行<blockquote><p>参考上文：结构化思维</p></blockquote></li></ul></blockquote><!-- ## 4. 个人目标解决方案>* 熟悉所在领域的业务和常识，不断问自己为什么>* 列一个清单，然后排序做选择>* 假设一种无条件获得的极端情况>* 不断了解你的选择，不断的去试错 --><h2 id="4-工作中解决问题的方法"><a href="#4-工作中解决问题的方法" class="headerlink" title="4. 工作中解决问题的方法"></a>4. 工作中解决问题的方法</h2><blockquote><ol><li>快速按照理解去做拆解，去做思维导图， 能想到多少是多少</li><li>拿着拆解思维导图去跟业务方的人去请教，一定要找到业务方真正关心的点</li><li>结合业务方给出的具体建议， 修改第一步的思维框架， 做完后，请教你的领导</li><li>再改一次， 回报给业务方领导</li><li>遇到坑之后， 一定要文档详细记录下来。<blockquote><ul><li>让团队中其他人知道， 节省团队时间。</li><li>知道自己在哪块花了大量时间，为后续分析节省时间。</li></ul></blockquote></li></ol></blockquote><h2 id="5-生活中问题解决的4个层次"><a href="#5-生活中问题解决的4个层次" class="headerlink" title="5. 生活中问题解决的4个层次"></a>5. 生活中问题解决的4个层次</h2><blockquote><ol><li>有没有找到真正的问题， 人都是有逃避心理的。</li><li>想到了问题的第几层</li><li>想到了最后一层， 并且去执行解决问题</li><li>做到了，并且分享帮助别人</li></ol></blockquote><hr><h1 id="常见谬误详解"><a href="#常见谬误详解" class="headerlink" title="常见谬误详解"></a>常见谬误详解</h1><blockquote><p>1.幸存偏误</p><blockquote><p>在生活中更容易看到成功者的故事，看不到失败， 你会系统性地高估成功的概率。</p></blockquote><p>2.游泳选手身材错觉</p><blockquote><p>你看到游泳选手的身材好，因此你觉得游泳就可以练就这样的身材。你觉得用这个护肤品的模特都好漂亮， 因此你觉得用了这个护肤品自己也可以变漂亮。 </p><p>其实是因为他们有这样的好身材， 所以他们才能被选为游泳运动员。  和游泳能够练就这样的身材没有直接的关系。 </p><p>用这个护肤品的模特好看， 是因为这个模特好看， 所以她才能被选做拍这个护肤品的广告， 和这个护肤品可以让自己更漂亮没有直接关系。 </p></blockquote><p>3.过度自信效应</p><blockquote><p>系统性地高估自己的学识和能力<br>过度自信会令你忽视你真正掌握的能力与你已知的知识之间的区别<br>这个怎么理解呢， 就是你很多知识， 你只是了解， 而并非已经内化成你的能力， 而你会错误的把它归为你能力的一部分。 比如你说你会python, 但当你真正写的时候， 你却写不出来， 其实你没有掌握</p></blockquote><p>4.诉诸结果</p><blockquote><p>依据某观点成立所产生的结果好坏，来判断一个观点是否正确。 </p></blockquote><p>5.稻草人谬误</p><blockquote><p>有意地模仿他人观点，以达到攻击模仿出来的观点而非实际论点的目的。</p></blockquote><p>6.诉诸无关权威</p><blockquote><p>诉诸不是问题专家的人， 其观点更可能是错误的。 例如：信仰中医，而不相信现代医学</p></blockquote><p>7.虚假两难</p><blockquote><p>给出一个有两种范畴组成的有限集合， 并假设讨论范围内的一切事物都必须属于该集合。因此<br>若拒绝其中一个范畴，便只好接受另一个。<br>例如： 世界上只有两种人，男人和女人， 你既然不是女人， 那么你一定是男人。</p></blockquote><p>8.人身攻击</p><blockquote><p> 通过攻击一个人本身，而不是攻击其论点，以转移讨论话题，最终达到诋毁其论点的目的。<br>“侮辱性人身攻击” ： 你又不是专家， 你有什么资格发言<br>“处境类人身攻击” ： 对他们的动机作出判断。 你又不是真正关心降低城市犯罪率， 你只是想要人们投票给你。</p></blockquote><p>9.循环论证</p><blockquote><p>你完全错了， 因为你说得没有道理。<br>你应该相信上帝， 否则你会下地狱。</p></blockquote><p>10.从众心理</p><p>11.纠缠于沉迷成本</p><blockquote><p>我已经买了电影票了， 电影再烂也要看完。<br>我已经在这段恋情中投入了那么多感情， 现在离开她是不明智的。<br>我已经在这支股票中投了那么多钱了， 现在就收手会亏本的， 说不定以后会涨的。</p><ul><li>你应该看的是现在的形势以及你对未来的评估。</li></ul></blockquote><p>12.互惠偏误</p><blockquote><p>先送你一束花， 然后让你捐赠。</p></blockquote><ul><li>诉诸公众</li><li>诉诸感情</li><li>滑坡谬误</li><li>偷换概念</li><li>转移话题</li><li>因果混淆：相关并不能证明因果。</li><li>事后归因<blockquote><p>参考资料：</p><ul><li>《简单的逻辑学》第5章</li><li>《有用的逻辑学》</li></ul></blockquote></li></ul></blockquote><hr><!-- ------------------------------------------------- 《精准表达：让你的方案在最短的时间内打动人心》逻辑思考能力， 语言组织能力1. 为什么说话要讲逻辑为了让任何人都能够听懂并接受我们的方案。 对方与我们的文化背景大不相同， 或者与我们持相反一件， 不注意讲话的逻辑， 对方可能听不懂我们的方案。 2. 什么是逻辑把语言合理的组织起来 3. 有逻辑的讲话分为哪些方面* 纵向逻辑> 因为A， 所以B。 因为B， 所以C。 * 横向逻辑 - MECE 分析法> A包含B和C。 4. 缺乏逻辑性：* 缺乏纵向逻辑 - 真的是这样吗* 缺乏横向逻辑 - 仅仅是这样吗5. 真的是这样吗？纵向逻辑组织的不好， 因果关系比较薄弱。 当对方要求你仔细解释你的纵向逻辑时， 你能回答出来。 做到针对对方的提问能够详细的做出解释。 6. 真的是这样吗？未能合理把握整体思路， 出现了遗漏和重复。 覆盖范围广、分类细致。 7. 纵向逻辑薄弱的原因* 前提条件不同因为A， 所以B。 但是A 包含 A1, A2, A3, A4等隐形前提。 要做到有逻辑性地讲话， 应该先质疑自己的前提条件。 想想一个与自己前提条件大不相同的人， 设想他可能会提出怎么的问题。 发现自己的隐形前提。 * 把不同性质的东西混为一谈因为A, 所以B。 但A的范围里包含了A1、A2、A、3 等不同性质的东西反省自己的额言论， 看自己是否把不同东西混为一谈了。 是否有必要把这件事细致分类， 再进行讨论。 * 偶然的必然化因为A， 所以B。 但是A到B之间原因太过跳跃， 让听众以为是偶然事件。 思考哪些印因素可能会破坏因果关系，先想象一下具体情形， 然后按照顺序想想最坏的情形。 8. 如何加强横向逻辑体会语言中的层次感把不同角度的概念拉拢到同一平面。 然后再讨论遗漏与重复的重复等问题。 如何把不同角度的概念拉到同一平面？* 面对同一概念， 不同的人有不同的看法。 * 面对同一概念， 不同的人会从不同的切入点开始展开联想。 首先， 确认对方是以何种立场还思考问题的。 其次， 确认对方设想的是何种场景。 如何实现MECE状态？* 使用架构5p, 营销理论3c, 战略模型7S模型SPRO, SPCO模型AIDAS原理PDCA循环根据具体情况采用合理架构。* 避免遗漏六维度理论常见的三个维度， 维度4, 时间的流动。 维度5， 信息、电力、交易等物质的流动维度6， 人们的心情和习惯* 消除重复当我们同时具备了 横向逻辑 和 纵向逻辑， 就构建了金字塔结构。  -->]]></content>
      
      
      <categories>
          
          <category> 个人系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-Pandas库学习</title>
      <link href="/2018/09/27/%E6%8A%80%E8%83%BD-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/09/27/%E6%8A%80%E8%83%BD-pandas%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h1><ul><li><p>Pandas是python数据分析中一个非常核心的数据库， 在日常的工作中经常需要使用Pandas库来对数据进行处理分析。Pandas的核心为两大数据结构， Series和DataFrame，Series用于存储一维数据， 而DataFrame存储多维数据。</p></li><li><p>常用的软件-Anaconda是数据分析中运行python的一款利器， 安装教程可参考Anaconda入门使用指南</p></li></ul><h1 id="读取与写入Excel数据"><a href="#读取与写入Excel数据" class="headerlink" title="读取与写入Excel数据"></a>读取与写入Excel数据</h1><ul><li><a href="https://blog.csdn.net/m0_37693335/article/details/81474995" target="_blank" rel="noopener">相对路径与绝对路径</a></li></ul><ol><li>读取文件夹内容<blockquote><p>r（转义符）避免路径中的\被转义。<br>路径中不加 \ 则需要把所有的\写成/。</p></blockquote></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> Series, DataFrame</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_list = os.listdir(<span class="string">r'E:\工作文件\周报\周数据\测试\0902-0908'</span>)</span><br><span class="line">print(file_list, <span class="string">'\t'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取当前文件夹地址</span></span><br><span class="line">os.getwd()</span><br></pre></td></tr></table></figure><ol start="2"><li>读取xls格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_excel(<span class="string">'E:/工作文件/an-商品汇总-uv.xls'</span>)</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xls'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>读取csv格式Excel表</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">'E:/工作文件/周报/周数据/测试/0902-0908/商品汇总.csv'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取csv文件，并用 分隔符分割</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, sep = <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只读取文件前两行</span></span><br><span class="line">df = pd.read_csv(<span class="string">r'E:\商品汇总.csv'</span>, nrows = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>读取显示编码错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示错误为：</span></span><br><span class="line"><span class="comment"># UnicodeDecodeError: 'utf-8' codec can not decode byte 0xb5 in position 0: invalid start byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改方式</span></span><br><span class="line">df = pd.read_csv(path + <span class="string">'登记用户 20191127.csv'</span>,encoding=<span class="string">"gbk"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当文件路径包含中文解析错误时，设置 engine 参数来消除这个错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误原因， 当调用read_csv方法时，默认使用C语言作为解析语言，只需要将默认值c语言更改为python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是  csv usf-8, 那么编码也改为 utf-8-sig</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件格式是 csv格式， 则编码格式为 gbk</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'登记用户 20191127.csv'</span>, engine = <span class="string">'python'</span>, encoding = <span class="string">'utf-8-sig'</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>读取txt格式数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_table(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, sep = <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    df = f.readlines() </span><br><span class="line"></span><br><span class="line">df = np.loadtxt(<span class="string">r'C:\Users\Administrator\Desktop\haha.txt'</span>)  <span class="comment"># 将txt文件存为numpy数组</span></span><br></pre></td></tr></table></figure><ol start="5"><li>读取excel中的sheet名称</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="string">'sheet1'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入sheet的顺序，从0开始计数</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet,并制定文件中的第几行做行索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\an-商品汇总-uv.xlsx'</span>, sheet_name = <span class="number">0</span>, index_col = <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取sheet文件， 并制定文件中的第几列做列索引</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\工作文件\商品汇总.xlsx'</span>, sheet_name = <span class="number">0</span>, head = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当本地文件过多时，可以通过设定 usecols 参数来指定要导入的列</span></span><br><span class="line">df = pd.read_Excel(<span class="string">r'E:\商品汇总.xlsx'</span>, usecols = <span class="number">0</span>)</span><br><span class="line"><span class="comment"># uescols = [0,2]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取excel中所有sheet，并进行合并</span></span><br><span class="line">rbook = []</span><br><span class="line">kong_data = os.listdir(<span class="string">r'F:\省资源位'</span>)</span><br><span class="line"><span class="keyword">for</span> file_name <span class="keyword">in</span> kong_data:</span><br><span class="line">    data_excel = pd.ExcelFile(<span class="string">r'F:\省资源位\\'</span>+file_name)</span><br><span class="line">    sheet = data_excel.sheet_names</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> sheet:</span><br><span class="line">        data_button_rest = pd.read_excel(<span class="string">r'F:\省资源位\\'</span>+file_name, sheet_name= i )</span><br><span class="line">        rbook.append(data_button_rest)</span><br><span class="line">        result_df =pd.concat(rbook)</span><br><span class="line">datas_excel = pd.DataFrame(result_df)</span><br></pre></td></tr></table></figure><ul><li>将运行的所有数据都展现出来， 而不是只展现最后一条</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span>  IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line">InteractiveShell.ast_node_interactivity = <span class="string">"all"</span></span><br></pre></td></tr></table></figure><ol start="6"><li>将数据写入Excel表， 并输出</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 写入数据</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/Administrator/Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop\\'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line">df.to_excel(<span class="string">r'C:\Users\Administrator\Desktop/'</span>+<span class="string">'商品分类.xlsx'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入数据，且不带索引</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置要导出的列</span></span><br><span class="line">df.to_excel(<span class="string">'C:/Users/商品分类.xlsx'</span>, sheet_name = <span class="string">'首页'</span>, index = <span class="keyword">False</span>,</span><br><span class="line">           columns = [<span class="string">'ID'</span>, <span class="string">'销量’])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 设置编码格式</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           encoding = '</span>utf<span class="number">-8</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 缺失值、无穷值处理</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">           na_rep = 0, # 缺失值用0填充</span></span><br><span class="line"><span class="string">           inf_rep = 0 # 无穷之用0填充</span></span><br><span class="line"><span class="string">           )</span></span><br><span class="line"><span class="string"># 导出csv文件，设置分隔符</span></span><br><span class="line"><span class="string">df.to_excel('</span>C:/Users/商品分类.xlsx<span class="string">', sheet_name = '</span>首页<span class="string">', index = False,</span></span><br><span class="line"><span class="string">            sep = '</span>,<span class="string">'</span></span><br><span class="line"><span class="string">           )</span></span><br></pre></td></tr></table></figure><ul><li>将求出的数据存储在excel中的多个sheet中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"> </span><br><span class="line">writer = pd.ExcelWriter(<span class="string">'F:/notebooks/zhoushuju.xlsx'</span>)</span><br><span class="line"></span><br><span class="line">btn_navigation.to_excel(writer, sheet_name = <span class="string">'底部导航'</span>)</span><br><span class="line">shouye_top20.to_excel(writer, sheet_name = <span class="string">'首页top20'</span>)</span><br><span class="line">writer.save()</span><br><span class="line">writer.close()</span><br></pre></td></tr></table></figure><ol start="7"><li>其他数据格式</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从SQL表/库导入数据 </span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">eng = pymysql.connet(host= <span class="string">'100.129'</span>, user = <span class="string">'root'</span>, password = <span class="string">'1234'</span>, df = <span class="string">'db'</span>, charset = <span class="string">'ugf8'</span>)</span><br><span class="line"></span><br><span class="line">query = <span class="string">"""select * from android_log """</span></span><br><span class="line"></span><br><span class="line">df = pd.read_sql(query, eng)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出数据到SQL表 </span></span><br><span class="line">df.to_sql(table_name, eng)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 常见问题</span><br><span class="line"></span><br><span class="line">* 当文件有中文时， 可能会出现错误：Initializing <span class="keyword">from</span> file failed 有中文， 可以用此方法解决</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">f = open(‘我的文件.csv’)</span><br><span class="line">res = pd.read_csv(f)</span><br></pre></td></tr></table></figure><ul><li>查看大文件有多少列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = open(<span class="string">'E:/用户明细.csv'</span>)</span><br><span class="line">data1 = pd.read_csv(data, iterator=<span class="keyword">True</span>)</span><br><span class="line">data2 = data1.get_chunk(<span class="number">5</span>)</span><br><span class="line">print(data2)</span><br></pre></td></tr></table></figure><p><a href="http://wiki.jikexueyuan.com/project/explore-python/Advanced-Features/iterator.html" target="_blank" rel="noopener">迭代器</a></p><h1 id="对输出数据进行处理"><a href="#对输出数据进行处理" class="headerlink" title="对输出数据进行处理"></a>对输出数据进行处理</h1><p><a href="https://www.jianshu.com/p/5c0aa1fa19af" target="_blank" rel="noopener">pandas的数据输出显示设置</a></p><ol><li>对表中某一列元素进行相同操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[&apos;金额&apos;].apply(lambda x:x+1)</span><br><span class="line"></span><br><span class="line">df[&apos;金额&apos;] +2</span><br></pre></td></tr></table></figure><ol start="2"><li>对表中每一个元素进行相同操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.applymap(lambda x:x+1)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">150</span>, <span class="number">150</span>))</span><br><span class="line"><span class="comment"># pd.set_option('expand_frame_repr', False) #数据超过总宽度后，是否折叠显示</span></span><br><span class="line">pd.set_option(<span class="string">'display.width'</span>, <span class="number">100</span>) <span class="comment">#数据显示总宽度</span></span><br><span class="line">pd.set_option(<span class="string">'max_rows'</span>, <span class="number">100</span>) <span class="comment">#显示最多行数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_columns'</span>, <span class="number">100</span>) <span class="comment">#显示最多列数，超出该数以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'max_colwidth'</span>, <span class="number">16</span>) <span class="comment">#设置单列的宽度，用字符个数表示，单个数据长度超出该数时以省略号表示</span></span><br><span class="line">pd.set_option(<span class="string">'large_repr'</span>, <span class="string">'truncate'</span>) <span class="comment">#数据超过设置显示最大行列数时，带省略号显示/若是info则是统计信息显示</span></span><br><span class="line">pd.set_option(<span class="string">'show_dimensions'</span>, <span class="keyword">True</span>) <span class="comment">#当数据带省略号显示时，是否在最后显示数据的维度</span></span><br><span class="line">print(df)</span><br><span class="line"></span><br><span class="line">pd.set_option(<span class="string">'max_info_columns'</span>, <span class="number">100</span>) <span class="comment">#当列数超过这个值时，调用df.info()函数时不会统计每列的非空值。</span></span><br><span class="line">print(df.info())</span><br></pre></td></tr></table></figure><ul><li>将数据变成小数形式<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"> </span><br><span class="line">inputfile = <span class="string">'../data/electricity_data.xls'</span></span><br><span class="line">outputfile = <span class="string">'./electricity_data_analyze1.xls'</span></span><br><span class="line"> </span><br><span class="line">data = pd.read_excel(inputfile)</span><br><span class="line">data[<span class="string">u'线损率'</span>] = (data[<span class="string">u'供入电量'</span>]-data[<span class="string">u'供出电量'</span>])/data[<span class="string">u'供入电量'</span>]    <span class="comment">#data[u'线损率']的类型为series； data[u'线损率']为小数</span></span><br><span class="line">data[<span class="string">u'线损率'</span>] = data[<span class="string">u'线损率'</span>].apply(<span class="keyword">lambda</span> x: format(x, <span class="string">'.2%'</span>))    <span class="comment">#Series.apply()让序列的值依次在lambda函数中执行； data['线损率']由小数转化为百分数</span></span><br><span class="line"> </span><br><span class="line">data.to_excel(outputfile, index=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure></li></ul><h1 id="描述数据"><a href="#描述数据" class="headerlink" title="描述数据"></a>描述数据</h1><ol><li>表信息</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.info()</span><br></pre></td></tr></table></figure><ol start="2"><li>显示数据的行列数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.shape</span><br></pre></td></tr></table></figure><ol start="3"><li>查看数据格式dtpyes</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure><ol start="4"><li>显示列名、元素</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns</span><br><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="5"><li>添加默认列名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果数据没有标题行，可用pandas添加默认的列名</span></span><br><span class="line">df = pd.read_excel(<span class="string">'x.xlsx'</span>, header = <span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ol start="6"><li>显示前数据前5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.head(<span class="number">5</span>)</span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]].head()</span><br></pre></td></tr></table></figure><ol start="7"><li>显示数据后5行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.tail(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><ol start="8"><li>值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.values</span><br></pre></td></tr></table></figure><ol start="9"><li>读取a列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">'a'</span>]</span><br></pre></td></tr></table></figure><ol start="10"><li>找到重复值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.duplicated()</span><br></pre></td></tr></table></figure><ol start="11"><li>显示数据唯一值（unique函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据有0， 是因对缺失值进行了填充</span></span><br><span class="line">df[<span class="string">'经纪人级别'</span>].unique()</span><br></pre></td></tr></table></figure><ol start="12"><li>对第几行数据不读取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不读取哪里数据，可用skiprows=[i]，跳过文件的第i行不读取</span></span><br><span class="line">df = pd.read_excel(<span class="string">'x.xlsx'</span>,skiprows=[<span class="number">2</span>] )</span><br></pre></td></tr></table></figure><ol start="13"><li>对缺失值进行识别</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 所有缺失值显示为True</span></span><br><span class="line">pd.insull(df)  <span class="comment"># df.isnull()</span></span><br></pre></td></tr></table></figure><ol start="14"><li>计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算此data的数量</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts(ascending = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升序计数并分组</span></span><br><span class="line">df[<span class="string">'data'</span>].value_counts(ascending = <span class="keyword">True</span>, bins = <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计数</span></span><br><span class="line">df[<span class="string">'data'</span>].count()</span><br></pre></td></tr></table></figure><ol start="15"><li><p>字符和数值之间的转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int()  <span class="comment"># 转化成整数</span></span><br><span class="line">float() <span class="comment"># 转化成浮点数</span></span><br><span class="line">str() <span class="comment"># 转化成字符</span></span><br><span class="line">type() <span class="comment"># 查看格式</span></span><br></pre></td></tr></table></figure></li><li><p>获取数据分布情况</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data.describe()</span><br></pre></td></tr></table></figure><h1 id="数据清晰"><a href="#数据清晰" class="headerlink" title="数据清晰"></a>数据清晰</h1><ol><li><p>删除空值 （dropna函数）</p><p>  <a href="https://blog.csdn.net/yuanxiang01/article/details/78738812" target="_blank" rel="noopener">DataFrame中的空值处理</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">df.dropna(how=<span class="string">'any'</span>)</span><br><span class="line"></span><br><span class="line">df.dropna(how = <span class="string">'all'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用法：DataFrame.drop(labels=None,axis=0, index=None, columns=None, inplace=False)</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line">labels 就是要删除的行列的名字，用列表给定</span><br><span class="line">axis 默认为0，指删除行，因此删除columns时要指定axis=1；</span><br><span class="line">index 直接指定要删除的行</span><br><span class="line">columns 直接指定要删除的列</span><br><span class="line">inplace=False，默认该删除操作不改变原数据，而是返回一个执行删除操作后的新dataframe；</span><br><span class="line">inplace=True，则会直接在原数据上进行删除操作，删除后无法返回。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 删除包含 集团 二字 的行</span><br><span class="line"></span><br><span class="line">read_data = df[- df[&apos;所属省份名称&apos;].isin([&apos;集团&apos;])]</span><br></pre></td></tr></table></figure><ol start="2"><li>数值删除</li></ol><ul><li>删除列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除列, axis=1表示删除列</span></span><br><span class="line">df.drop([<span class="string">"销售额"</span>, <span class="string">"ID"</span>], axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">df.drop(columns = [<span class="string">"销售额"</span>, <span class="string">"ID"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入列位置</span></span><br><span class="line">df.drop(df.columns[[<span class="number">4</span>,<span class="number">5</span>]], axis =<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ul><li>删除行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 删除行，筛选行名</span><br><span class="line">df.drop([&apos;一&apos;,&apos;二&apos;], axis = 0)</span><br><span class="line"></span><br><span class="line">df.drop(index = [&apos;一&apos;, &apos;二&apos;])</span><br><span class="line"></span><br><span class="line"># 删除行，筛选行索引</span><br><span class="line">df.drop(df.index[[0,1]], axis = 0)</span><br><span class="line"></span><br><span class="line"># 只要年龄小于40的用户</span><br><span class="line"></span><br><span class="line">df[df[&apos;ID&apos;] &lt; 40]</span><br></pre></td></tr></table></figure><ol start="3"><li>填充（fillna函数）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空值用0填充</span></span><br><span class="line">df.fillna(value=<span class="number">0</span>)</span><br><span class="line">df.replace(np.NaN, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用均值对空值进行填充</span></span><br><span class="line">df[<span class="string">'时长'</span>].fillna(df[<span class="string">'时长'</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照不同列进行填充</span></span><br><span class="line">df.fillna(&#123;<span class="string">'性别'</span> : <span class="string">'男'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>更改数据格式，更改数据类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将数据格式int64,改为float格式</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'大区'</span>].astype(<span class="string">'float64'</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>更改列名称, 修改列名。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [[<span class="string">'导航'</span>,<span class="string">'uv'</span>, <span class="string">'pv'</span>,<span class="string">'户均点击'</span>]]</span><br><span class="line"></span><br><span class="line">df.rename(columns=&#123;<span class="string">'IM渠道'</span>: <span class="string">'渠道'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="6"><li>添加修改索引</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加索引</span></span><br><span class="line">df.index = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改索引,重新设置</span></span><br><span class="line">df = df.set_index[<span class="string">'标题'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名索引</span></span><br><span class="line">df.rename (index = &#123;<span class="number">1</span>: <span class="string">'一'</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>重置索引</li></ul><p><img src="https://i.loli.net/2019/12/21/C7cxnGMVfFDeLEX.jpg" alt="微信图片_20191221153932.jpg"><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataFrame.reset_index(level=<span class="keyword">None</span>, drop=<span class="keyword">False</span>, inplace=<span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将所有index转化成columns</span></span><br><span class="line">df.reset_index()</span><br><span class="line"></span><br><span class="line"><span class="comment">#将第0级索引转化为 columns</span></span><br><span class="line">df.reset_index(level=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将原索引删除，不加入columns</span></span><br><span class="line">df.reset_index(drop = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><ol start="7"><li><p>删除重复值</p><p><a href="https://www.cnblogs.com/cocowool/p/8421997.html" target="_blank" rel="noopener">Pandas删除数据的几种情况</a></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认第一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后一次出现的保留，其余删除</span></span><br><span class="line">df[<span class="string">'门店'</span>].drop_duplicates(keep = <span class="string">'last'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多列去重</span></span><br><span class="line">df.drop_duplicates(subset = [<span class="string">'姓名'</span>, <span class="string">'唯一识别码'</span>])</span><br></pre></td></tr></table></figure><ol start="8"><li>对列表内的值进行替换</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 一对一替换</span></span><br><span class="line">df[<span class="string">'ID'</span>].replace(<span class="string">'1053'</span>, <span class="string">'110'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多对一替换</span></span><br><span class="line">df[<span class="string">'ID'</span>].replace(&#123;<span class="string">'1053'</span>: <span class="string">'110'</span>, <span class="string">'230'</span>: <span class="string">'33'</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df.columns.str.replace(<span class="string">' '</span>, <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><h1 id="对数据进行处理"><a href="#对数据进行处理" class="headerlink" title="对数据进行处理"></a>对数据进行处理</h1><ol><li>对两个数据进行合并- merge, join, concat函数</li></ol><ul><li>merge</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照轴把多个对象拼接起来</span></span><br><span class="line">pd.concat(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># join函数适合根据索引进行合并，合并索引相同但列不同的对象</span></span><br><span class="line"><span class="comment"># merge函数，根据一个或多个键连接多行, 相当于excel中的vlookup</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将left和right进行合并</span></span><br><span class="line">pd.merge(left, right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定以key为键进行合并</span></span><br><span class="line">pd.merge(left, right, on = <span class="string">'key'</span>)</span><br><span class="line"> pd.merge(name_3, name_1, left_on = [<span class="string">'ming'</span>], right_on = [<span class="string">'标记'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># key2列不相同的部分会直接舍弃掉</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保留key2列不相同的部分</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>], how = <span class="string">'outer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不相同的部分指定以左表为基准</span></span><br><span class="line">pd.merge(left, right, on = [<span class="string">'key'</span>, <span class="string">'key2'</span>], how = <span class="string">'left'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重复列名处理</span></span><br><span class="line"><span class="comment"># pd.merge()会自动给这些重复名添加后缀_x、_y，也可以自己命名。</span></span><br><span class="line">pd.merge(df1,df2, on = <span class="string">'id'</span>, suffixes= [<span class="string">'_L'</span>, <span class="string">'_R'</span>])</span><br></pre></td></tr></table></figure><ul><li>concat函数, 按照标题进行拼接</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通合并</span></span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引设置</span></span><br><span class="line">pd.concat([df1, df2], ignore_index= <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并后删除重复值</span></span><br><span class="line">pd.concat([df1, df2], ignore_index = <span class="keyword">True</span>).drop_duplicates()</span><br></pre></td></tr></table></figure><ol start="2"><li>对数据进行排序</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照ID进行升序排列</span></span><br><span class="line"><span class="comment"># 按照ID进行降序排列</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>], ascending = <span class="keyword">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在保证销售额列降序的情况下，对ID列进行升序处理</span></span><br><span class="line">data.sort_values(by = [<span class="string">'销售额'</span>, <span class="string">'ID'</span>],ascending = [<span class="keyword">False</span>, <span class="keyword">True</span>], inplace = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认将ID是缺失值的列显示在最后面</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ID是缺失值的列显示在最前面</span></span><br><span class="line">df.sort_values(by = [<span class="string">'ID'</span>], na_position = <span class="string">'first'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数值进行排名</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对应Excel中的 rank.avg函数</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method= <span class="string">'average'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按值在所有的排列数据中出现的先后顺序排名</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'first'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  与Excel中rank.eq 函数的功能一样</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'min'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与min相反，取重复值对应的最大排名</span></span><br><span class="line">df[<span class="string">'ID'</span>].rank(method = <span class="string">'max'</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行分组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 如果price列的值&gt;3000，group列显示high，否则显示low</span><br><span class="line"></span><br><span class="line">df[&apos;group&apos;] = np.where(df[&apos;客户当天发送消息数&apos;] &gt; 5,&apos;high&apos;,&apos;low&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 对符合多个条件进行分组</span><br><span class="line"># 符合经纪人级别为A1且经纪人响应时长&gt;24的在sign列显示为1</span><br><span class="line"></span><br><span class="line">df.loc[(df[&apos;经纪人级别&apos;] == &apos;A1&apos;) &amp; (df[&apos;经纪人响应时长&apos;]&gt;= 24.0), &apos;sign&apos;]=1</span><br></pre></td></tr></table></figure><ol start="4"><li>对数据进行分列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pd.DataFrame((x.split(<span class="string">'网'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> df[<span class="string">'客户注册渠道'</span>]),</span><br><span class="line">                index=df.index,columns=[<span class="string">'客户注册渠道'</span>,<span class="string">'size'</span>])</span><br><span class="line"></span><br><span class="line">&lt;!-- df = pd.DataFrame((x.split(<span class="string">'.'</span>) <span class="keyword">for</span> x <span class="keyword">in</span> 首页jhrj_1[<span class="string">'所属省份编码'</span>]),</span><br><span class="line">                index=df.index,columns=['客户注册渠道','size']) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列完对数据进行合并</span></span><br><span class="line">df1 = pd.merge(首页jhrj_1, df, left_index = <span class="keyword">True</span>, right_index = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>新增一列</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = data.assign(ration = [4, 2, 5, 6, 7, 8, 2, 9, 4])</span><br><span class="line"></span><br><span class="line">data[&apos;rations&apos;] = [5, 2, 5, 6, 7, 8, 2, 9, 4]</span><br></pre></td></tr></table></figure><ol start="6"><li>对数据进行切分</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 指明切分区间</span><br><span class="line">pd.cut(df[&apos;年龄&apos;], bins = [0,3,6,10])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 将数据切成3份</span><br><span class="line">pd.qcut(df[&apos;年龄&apos;],3 )</span><br></pre></td></tr></table></figure><ol start="7"><li>取出的数据， 指定取到小数点几位数？</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 取到小数点后3位</span><br><span class="line">for i in a :</span><br><span class="line">    print(&quot;%.3f&quot;%c)</span><br><span class="line"></span><br><span class="line"># 设置小数点位数，四舍五入</span><br><span class="line">df[&apos;cnts&apos;].round( decimals = 2)</span><br></pre></td></tr></table></figure><ol start="8"><li>将 list 格式转化成 DataFrame 格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(data, columns = [&apos;省份&apos;, &apos;按钮名称&apos;, &apos;uv&apos;, &apos;pv&apos;] )</span><br></pre></td></tr></table></figure><h1 id="数据选择"><a href="#数据选择" class="headerlink" title="数据选择"></a>数据选择</h1><ol><li>选择某一列/ 某几列</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 普通索引- 根据名称进行选择</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'客户端uv'</span>]</span><br><span class="line"></span><br><span class="line">df[[<span class="string">'标题'</span>, <span class="string">'客户端uv'</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引 / 切片索引， 根据所在第几列进行选择</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># : 表示选择所有的行， 逗号后面表示要选择列的位置区域</span></span><br><span class="line">df.iloc[:, [<span class="number">0</span>,<span class="number">2</span>]] <span class="comment"># 获取第1列和第3列的数值</span></span><br></pre></td></tr></table></figure><ol start="2"><li>选择某一行/某几行</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通索引-loc</span></span><br><span class="line"></span><br><span class="line">df.loc[<span class="string">'第一行'</span>]</span><br><span class="line"></span><br><span class="line">df.log[[<span class="string">'第一行'</span>, <span class="string">'第二行'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位置索引，切片索引</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 选择第一行</span></span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择第一行和第二行</span></span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]]</span><br></pre></td></tr></table></figure><ol start="3"><li>根据指定条件进行筛选</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择年龄小于200的数据</span></span><br><span class="line">df[df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>] </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">#年龄小于200，且id小于300</span></span><br><span class="line">df[(df[<span class="string">'年龄'</span>] &lt; <span class="number">200</span>) &amp;   (df[<span class="string">'id'</span>] &lt; <span class="number">300</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_and(df[<span class="string">'年龄'</span>] &gt; <span class="number">10</span>, df[<span class="string">'id'</span>] &gt; <span class="number">5</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># A列值大于10，或 B列值大于5</span></span><br><span class="line">df[(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>) | (df[<span class="string">'C'</span>] &gt;<span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line">df[np.logical_or(df[<span class="string">'A'</span>] &gt; <span class="number">10</span>, df[<span class="string">'C'</span>] &gt; <span class="number">20</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当 A列的值大于13时， 显示B，c列的值</span></span><br><span class="line">df[[<span class="string">'B'</span>,<span class="string">'C'</span>]][df[<span class="string">'A'</span>]&gt;<span class="number">13</span>]</span><br></pre></td></tr></table></figure><ol start="4"><li>行列同时选择</li></ol><ul><li>普通索引+普通索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.loc[[<span class="string">'第一行'</span>, <span class="string">'第三行'</span>], [<span class="string">'订单号’, '</span>ID<span class="string">']]</span></span><br></pre></td></tr></table></figure><ul><li>位置索引 + 位置索引选择指定的行和列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line"></span><br><span class="line">df.iloc[<span class="number">0</span>:<span class="number">2</span>, <span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ul><li>布尔索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[df[<span class="string">'年龄'</span>]&lt; <span class="number">200</span>][[<span class="string">'订单编号'</span>, <span class="string">'ID'</span>]]</span><br></pre></td></tr></table></figure><ul><li>切片索引+ 普通索引</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.ix[<span class="number">0</span>:<span class="number">2</span>, [<span class="string">'订单变化'</span>, <span class="string">'ID'</span>]]</span><br></pre></td></tr></table></figure><ol start="5"><li>按条件进行提取</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 用isin函数进行判断</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用isin函数根据特定值筛选记录。筛选A值等于10或者13的记录</span></span><br><span class="line">df[df.A.isin((<span class="number">10</span>, <span class="number">13</span>))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看这一列是否包含某个值</span></span><br><span class="line">df[<span class="string">'级别'</span>].isin([<span class="string">'A3'</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment"># 先判断是否包含，然后将符合条件的数据提取出来。</span></span><br><span class="line">df.loc[df[<span class="string">'级别'</span>].isin([<span class="string">'A3'</span>,<span class="string">'M4'</span>])]</span><br></pre></td></tr></table></figure><hr><h1 id="数据汇总"><a href="#数据汇总" class="headerlink" title="数据汇总"></a>数据汇总</h1><ol><li>对数据进行分类 - group by函数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照某列分组求和</span></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照多列分组求和</span></span><br><span class="line">df.groupby([<span class="string">'渠道'</span>, <span class="string">'ID'</span>]).sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组后的结果进行重新索引</span></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).sum().reset_index()</span><br></pre></td></tr></table></figure><ol start="2"><li>aggregate方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 对同一列 先做计数汇总运算，再做汇总运算</span></span><br><span class="line"></span><br><span class="line">df.group(<span class="string">'渠道'</span>).aggregate([<span class="string">'count'</span>, <span class="string">'sum'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 针对不同的列做不同的汇总运算</span></span><br><span class="line"></span><br><span class="line">df.groupby(<span class="string">'渠道'</span>).aggregate(&#123;<span class="string">'ID'</span> : <span class="string">'count'</span>,</span><br><span class="line">                              <span class="string">'销量'</span> : <span class="string">'sum'</span>&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>pivot_table-数据透视表</li></ol><p>pd.pivot_table(data, values, index, columns, aggfunc, fill_value, margins, dropna, margins_name = ‘All’)</p><blockquote><p>data: 数据<br>values: 对应的值<br>index: 对应的行<br>columns: 对应的列<br>aggfunc : 对values的计算类型<br>fill_value : 对空值的填充值<br>margins: 是否显示合计列<br>dropna: 是否删除缺失值，如果为真，则一整行全删除<br>margins_name: 合计列的列名</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为方便处理， 一般需要对结果进行重置索引</span></span><br><span class="line">pd.pivot_table(df, values = <span class="string">'ID'</span>, columns = <span class="string">'渠道'</span>,</span><br><span class="line">                index = <span class="string">'客户分类'</span>, aggfun = <span class="string">'count'</span>).reset_index()</span><br></pre></td></tr></table></figure><ol start="3"><li>对数据进行映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用map函数对字典进行映射， 新加一列</span><br><span class="line">data[&apos;upper&apos;] = data[&apos;group&apos;].map(dataUpper)</span><br></pre></td></tr></table></figure><ol><li>数据采样</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 简单随机抽取sample</span><br><span class="line">df.sample(n=3)</span><br><span class="line"></span><br><span class="line"># 设置采样权重</span><br><span class="line"># 需要对每一行进行权重设置，列表行数少可行，过多不可行</span><br><span class="line"></span><br><span class="line"># 假设有4行数据，设置采样权重</span><br><span class="line">weights = [0, 0, 0.5, 0.5]</span><br><span class="line">df.sample(n=4, weights=weights)</span><br><span class="line"></span><br><span class="line">## 确定采样后是否放回</span><br><span class="line"># 采样后放回，True</span><br><span class="line">df.sample(n=6, replace=True)</span><br></pre></td></tr></table></figure><ol start="2"><li>统计计算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算每一列的个数</span></span><br><span class="line">df.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算每一行的个数</span></span><br><span class="line">df.count(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.sum()</span><br><span class="line"></span><br><span class="line">df.sum(axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中位数</span></span><br><span class="line">df.median()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求和</span></span><br><span class="line">df.sum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最大值</span></span><br><span class="line">df.max()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最小值</span></span><br><span class="line">df.min()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求众数</span></span><br><span class="line">df.mode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求方差</span></span><br><span class="line">df.var()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求标准差</span></span><br><span class="line">df.std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求分位数</span></span><br><span class="line">df.quantile(<span class="number">0.75</span>, axis = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述统计 describe函数</span></span><br><span class="line"><span class="comment">#自动生成数据的数量，均值，标准差等数据</span></span><br><span class="line"><span class="comment">#round（2）,显示小数点后面2位数，T转置</span></span><br><span class="line"></span><br><span class="line">df.describe().round(<span class="number">2</span>).T</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准差std()</span></span><br><span class="line">df[<span class="string">'经纪人响应时长'</span>].std()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 协方差cov</span></span><br><span class="line">df[<span class="string">'经纪人当天发送消息数'</span>].cov(df[<span class="string">'客户当天发送消息数'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相关性分析corr</span></span><br><span class="line">df[<span class="string">'客户当天发送消息数'</span>].corr(df[<span class="string">'经纪人当天发送消息数'</span>])</span><br></pre></td></tr></table></figure><ol start="3"><li>数值计数</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看不同值出现的次数， #默认进行排列</span></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比, #默认进行排列</span></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts(normalize = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看不同值出现的占比， 不进行排列</span></span><br><span class="line"></span><br><span class="line">df[<span class="string">'ID'</span>].value_counts(normalize = <span class="keyword">True</span>, sort = <span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>插入数据</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 insert方法中，指明要插入的位置、插入新列的列名，以及要插入的数据</span></span><br><span class="line">df.insert(<span class="number">2</span>, <span class="string">'销售品id'</span>, [<span class="string">'01'</span>, <span class="string">'02'</span>])</span><br></pre></td></tr></table></figure><ol start="5"><li>对数据进行转置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.T</span><br></pre></td></tr></table></figure><ol start="6"><li>索引重塑</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将表格型数据转化成树形数据</span></span><br><span class="line">df.stack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将树形数据转化成表格型数据</span></span><br><span class="line">df.stack().unstack()</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/8dJwIqrSRTLYvnK.jpg" alt="说明"></p><ol start="7"><li>长宽表转换<blockquote><ul><li>宽表<br><img src="https://i.loli.net/2019/12/22/plz94hj3vIuHA2B.jpg" alt="微信图片_20191222025318.jpg"></li><li>长表<br><img src="https://i.loli.net/2019/12/22/6XKpcg2RMoTaPmW.jpg" alt="微信图片_20191222025313.jpg"></li></ul></blockquote></li></ol><ul><li>将长表转化成宽表,对数据进行透视, 相当于Excel中的数据透视表功能。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.pivot_table(index = [<span class="string">'computer'</span>,<span class="string">'name'</span>], columns = <span class="string">'year'</span>, values = <span class="string">'sale'</span>)</span><br></pre></td></tr></table></figure><ul><li>将宽表转换成长表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： melt()</span></span><br><span class="line">df.melt(id_vars = [<span class="string">'company'</span>, <span class="string">'name'</span>], var_name = <span class="string">'year'</span>, value_name = <span class="string">'sale'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1： stack()</span></span><br><span class="line"><span class="comment"># 在保持行索引不变的前提下，将列索引转化成行索引</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/22/4pKoUMivFNIqzXu.jpg" alt="微信图片_20191222025324.jpg"></p><hr><h1 id="对字符串进行操作"><a href="#对字符串进行操作" class="headerlink" title="对字符串进行操作"></a>对字符串进行操作</h1><ol><li>大小写</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.lower()</span><br><span class="line">a.upper()</span><br></pre></td></tr></table></figure><ol start="2"><li>长度</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 长度</span><br><span class="line">a.len()</span><br></pre></td></tr></table></figure><ol start="3"><li>去除空格</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.strip()</span><br><span class="line">a.lstrip()</span><br><span class="line">alrstrip()</span><br></pre></td></tr></table></figure><ol start="5"><li>切分与分列、 合并</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#切分</span></span><br><span class="line">a.split(<span class="string">'_'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分， 且成为新列</span></span><br><span class="line">a.split(<span class="string">'_'</span>, expand = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对切分进行限制, 只切1次</span></span><br><span class="line">a.split(<span class="string">'_'</span>, expand = <span class="keyword">True</span>, n=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否包含</span></span><br><span class="line">a.str.contains(<span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分列</span></span><br><span class="line">s.str.get_dummies(sep= <span class="string">'|'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = 首页jhrj_1[<span class="string">'所属省份编码'</span>].str.split(<span class="string">'.'</span>)  <span class="comment"># expand=True  可以把用分割的内容直接分列</span></span><br><span class="line">首页jhrj_1[<span class="string">"所属省份编码1"</span>]=df[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切分并在原表中进行合并</span></span><br><span class="line">首页jhrj_2 = pd.merge(首页jhrj_1, pd.DataFrame(首页jhrj_1[<span class="string">'所属省份编码'</span>].str.split(<span class="string">'.'</span>, expand = <span class="keyword">True</span>) ),</span><br><span class="line">               how = <span class="string">'left'</span>, left_index = <span class="keyword">True</span>, right_index = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas对dataframe中的某一列使用split做字符串切割：</span></span><br><span class="line"><span class="comment"># words = df['col'].split()</span></span><br><span class="line"><span class="comment"># 报错：</span></span><br><span class="line"><span class="comment"># AttributeError: 'Series' object has no attribute 'split'</span></span><br><span class="line"><span class="comment"># 原因是df['col']返回的是一个Series对象，需要先把Series对象转换为字符串：pandas.Series.str.split</span></span><br><span class="line"><span class="comment"># words = df['col'].str.split()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">对两列数据进行合并</span><br><span class="line">df[<span class="string">'省份_名称'</span>] = df[<span class="string">'省份'</span>].str.cat(df[<span class="string">'名称'</span>],sep = <span class="string">'_'</span>)</span><br><span class="line">首页jdt_1[<span class="string">'省份_标题'</span>] = 首页jdt_1[<span class="string">'所属省份编码'</span>].astype(str).str.cat(首页jdt_1[<span class="string">'标题'</span>],sep = <span class="string">'_'</span>)</span><br></pre></td></tr></table></figure><h1 id="日期-时间"><a href="#日期-时间" class="headerlink" title="日期-时间"></a>日期-时间</h1><ul><li><p>当前日期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time, timedelta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期和时间</span></span><br><span class="line">datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的年</span></span><br><span class="line">datetime.now().year</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的月份</span></span><br><span class="line">datetime.now().month</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前日期的日期</span></span><br><span class="line">datetime.now().day</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时刻在周几</span></span><br><span class="line"><span class="comment"># python周几默认是从0开始的</span></span><br><span class="line">datatime.now.weekeday() + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间所在周的周数</span></span><br><span class="line">datatime.now.isocalendar()[<span class="number">1</span>]</span><br></pre></td></tr></table></figure></li><li><p>返回指定日期</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只展现日期</span></span><br><span class="line">datetime.now.date()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只展示时间</span></span><br><span class="line">datetime.now.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前日期</span></span><br><span class="line">datetime.now().strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment">#2018-12-22</span></span><br><span class="line"></span><br><span class="line">datetime.now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将时间格式转化成字符串格式</span></span><br><span class="line"><span class="string">now=str( datetime.now())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 将字符串格式转化为时间格式</span></span><br><span class="line"><span class="string">parse(str_now)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"># 往后推一天</span></span><br><span class="line"><span class="string">date+ Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往后推一个小时</span></span><br><span class="line"><span class="string">date + Hour(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 往前推一天</span></span><br><span class="line"><span class="string">date - Day(1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 昨天</span></span><br><span class="line"><span class="string">ysd = now - timedelta(days = 1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#本月第一天</span></span><br><span class="line"><span class="string">ysd = now.replace(day = now.day-1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#  上月最后一天</span></span><br><span class="line"><span class="string">lastmonth_end = now.replace(day = now.day-1) - timedelta(days=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 上月第一天</span></span><br><span class="line"><span class="string">lastmonth_first = now.replace(month = now.month-1, day =1)</span></span><br><span class="line"><span class="string">lastmonth_first = lastmonth_end.replace(day=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#提取2016年11月2号的数据</span></span><br><span class="line"><span class="string">df['</span><span class="number">2016</span><span class="number">-11</span><span class="number">-02</span><span class="string">' : '</span><span class="number">2016</span><span class="number">-11</span><span class="number">-02</span><span class="string">']</span></span><br><span class="line"><span class="string">dt_time = dt.datetime(year = 2018, month=9, day = 17, hour = 22, minute = 43)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 构造时间序列， 构造十个日期， 每12分钟一次</span></span><br><span class="line"><span class="string">pd.Series(pd.date_range(start = '</span><span class="number">2018</span><span class="number">-09</span><span class="number">-17</span> <span class="number">22</span>:<span class="number">43</span>:<span class="number">00</span><span class="string">', periods = 10, freq = '</span><span class="number">12</span>min<span class="string">'))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 取所有8点到12点之间的数据, 不包含8点和12点</span></span><br><span class="line"><span class="string">data[(data.index.hour &gt; 8) &amp; (data.index.hour &lt; 12)]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 包含8点到12点</span></span><br><span class="line"><span class="string">data.between_time('</span><span class="number">08</span>:<span class="number">00</span><span class="string">', '</span><span class="number">12</span>:<span class="number">00</span><span class="string">')</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import datetime</span></span><br><span class="line"><span class="string">from dateutil.relativedelta import relativedelta </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">begin = datetime.date(2019,1,1)</span></span><br><span class="line"><span class="string">end = datetime.date(2019,1,31)</span></span><br><span class="line"><span class="string">for i in range(1,10):</span></span><br><span class="line"><span class="string">    first = d + relativedelta(months=i)</span></span><br><span class="line"><span class="string">    last = end + relativedelta(months=i)</span></span><br></pre></td></tr></table></figure><ul><li>处理月与月之间时间不连续问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, time,timedelta</span><br><span class="line"><span class="comment"># 指定昨天</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 月初第一天</span></span><br><span class="line">startdates = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">enddates = (df - timedelta(days = num)).strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line"><span class="comment"># 上月第一天</span></span><br><span class="line">last_moth_f = df.replace(month =df.month<span class="number">-1</span>, day=<span class="number">1</span>).__format__(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line"><span class="comment"># 上月最后一天</span></span><br><span class="line">last_moth_e = df.replace(month = df.month<span class="number">-1</span>, day =<span class="number">1</span>).strftime(<span class="string">'%Y-%m-31'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标值月份</span></span><br><span class="line">mubiao_dates = startdates[<span class="number">0</span>:<span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将字符串转换为日期</span></span><br><span class="line">df = datetime.now() - timedelta(days = <span class="number">1</span>)</span><br><span class="line">day1 = (df.replace(day = <span class="number">1</span>)).strftime(<span class="string">'2019-11-%d'</span>)</span><br><span class="line">first = datetime.strptime(day1, <span class="string">"%Y-%m-%d"</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="自动发送邮件"><a href="#自动发送邮件" class="headerlink" title="自动发送邮件"></a>自动发送邮件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import smtplib</span><br><span class="line">from email import encoders</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/23/uqFn819yGEjWRPQ.jpg" alt="123.jpg"><br><img src="https://i.loli.net/2019/12/23/Druqb2zyHi6ESQV.jpg" alt="456.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个好用的插件</title>
      <link href="/2018/09/25/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/09/25/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="一个好用的插件神器"><a href="#一个好用的插件神器" class="headerlink" title="一个好用的插件神器"></a>一个好用的插件神器</h1><p>最近发现了一个特别能够提高生活幸福感的插件：<a href="https://tampermonkey.net/" target="_blank" rel="noopener">Tampermonkey</a>, 中文翻译过来叫做油猴。 </p><p><img src="https://i.loli.net/2018/09/25/5baa2c1e20259.png" alt="a"></p><p>安装好这个插件最大的作用， 就是我们可以从<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站来安装我们需要的脚本， 从而极大的提高浏览器的使用效率。</p><p>比如：我们在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>网站找到<a href="https://greasyfork.org/zh-CN/scripts/35251-%E6%99%BA%E8%83%BD%E5%88%92%E8%AF%8D%E7%BF%BB%E8%AF%91" target="_blank" rel="noopener">智能划词翻译</a>这个脚本， 然后点击安装脚本即可。<br><img src="https://i.loli.net/2018/09/25/5baa2f1ca7ec9.png" alt="智能划词翻译"><br>安装完成脚本之后， 我们打开一个英文网页，对需要翻译的段落进行框选，点击翻译按钮，就可实现在原网页查看中文翻译， 对于我这种英语不好的人来说，  有很大的帮助。<br> <img src="https://i.loli.net/2018/09/25/5baa2fafa467c.png" alt> </p><p>我们还可以安装<a href="https://greasyfork.org/zh-CN/scripts/3249-yet-another-weibo-filter" target="_blank" rel="noopener">微博过滤设置</a>脚本，来对微博页面进行个性化设置， 自己设置完成后的微博页面是这个样，相对于原版网页来说简洁了不少。<img src="https://i.loli.net/2018/09/25/5baa3127ae4e8.png" alt></p><p>也可安装<a href="https://greasyfork.org/zh-CN/scripts/4233-miniblogimgpop-%E5%BE%AE%E5%8D%9A%E6%B5%AE%E5%9B%BE" target="_blank" rel="noopener">微博浮图</a>脚本， 查看微博图片也比较方便， 只需把鼠标光标放在图片上即可<img src="https://i.loli.net/2018/09/25/5baa316b9fc84.png" alt></p><p>如果想找资料或电影资源的话， 也可以下载<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>, 或<a href="https://greasyfork.org/zh-CN/scripts/39504-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8A%A9%E6%89%8B-%E7%9B%B4%E9%93%BE%E5%8A%A0%E9%80%9F%E7%89%88" target="_blank" rel="noopener">百度网盘直接下载助手</a>等脚本， 当然，有能力还是要支持正版。</p><p>例如：安装<a href="https://greasyfork.org/zh-CN/scripts/329484-%E8%B1%86%E7%93%A3%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E5%A4%A7%E5%B8%88-1%E7%A7%92%E6%90%9E%E5%AE%9A%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1-%E9%9F%B3%E4%B9%90-%E5%9B%BE%E4%B9%A6%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">豆瓣资源下载大师</a>脚本后， 打开豆瓣电影网页， 页面是这个样子。<br><img src="https://i.loli.net/2018/09/25/5baa328561727.png" alt="豆瓣页面"></p><p>在<a href="https://greasyfork.org/zh-CN" target="_blank" rel="noopener">Greasy Fork</a>这个网站还有很多别人写好的脚本， 比如<a href="https://greasyfork.org/zh-CN/scripts/369861-%E7%99%BE%E5%BA%A6%E6%96%87%E5%BA%93%E6%96%87%E5%AD%97%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener">百度文库文字复制</a>、<a href="https://greasyfork.org/zh-CN/scripts/14466-%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7-%E9%A2%86%E5%8F%96%E6%B7%98%E5%AE%9D%E5%86%85%E9%83%A8%E5%88%B8" target="_blank" rel="noopener">购物党自动比价工具</a>、 <a href="https://greasyfork.org/zh-CN/scripts/8426-download-youtube-videos-and-subtitles" target="_blank" rel="noopener">Download Youtube videos and subtitles</a>等好用的脚本， 可以根据自己的需要进行安装。 </p><hr>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人资料收集</title>
      <link href="/2018/08/05/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/"/>
      <url>/2018/08/05/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E8%B5%84%E6%BA%90%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="互联网工具"><a href="#互联网工具" class="headerlink" title="互联网工具"></a>互联网工具</h1><ol><li>指数类</li></ol><ul><li>百度指数 <a href="http://index.baidu.com/v2/index.html#/" target="_blank" rel="noopener">http://index.baidu.com/v2/index.html#/</a></li><li>微博指数 <a href="https://data.weibo.com/index/" target="_blank" rel="noopener">https://data.weibo.com/index/</a></li><li>各种数据指数 <a href="http://data.chongbuluo.com/" target="_blank" rel="noopener">http://data.chongbuluo.com/</a></li></ul><ol start="2"><li>企业类</li></ol><ul><li>企业信用信息公示系统 <a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a></li><li>国家统计局 <a href="http://data.stats.gov.cn/" target="_blank" rel="noopener">http://data.stats.gov.cn/</a></li><li>企查查</li></ul><ol start="3"><li>财报类</li></ol><ul><li>上交所<a href="http://www.sse.com.cn/" target="_blank" rel="noopener">http://www.sse.com.cn/</a></li><li>深交所<a href="http://www.szse.cn/" target="_blank" rel="noopener">http://www.szse.cn/</a></li><li>港交所<a href="https://www.hkexnews.hk/" target="_blank" rel="noopener">https://www.hkexnews.hk/</a></li><li>美国上市公司<a href="https://www.sec.gov/" target="_blank" rel="noopener">https://www.sec.gov/</a></li><li>同花顺财经<a href="http://data.10jqka.com.cn/" target="_blank" rel="noopener">http://data.10jqka.com.cn/</a></li></ul><ol start="4"><li>分析工具</li></ol><ul><li>语义分析系统<a href="http://ictclas.nlpir.org/nlpir/" target="_blank" rel="noopener">http://ictclas.nlpir.org/nlpir/</a></li><li>腾讯文智 <a href="https://nlp.qq.com/semantic.cgi#page2" target="_blank" rel="noopener">https://nlp.qq.com/semantic.cgi#page2</a></li><li>echarts <a href="https://echarts.baidu.com/" target="_blank" rel="noopener">https://echarts.baidu.com/</a></li><li>在线图片识别文字 <a href="https://ocr.wdku.net/" target="_blank" rel="noopener">https://ocr.wdku.net/</a></li><li>问卷调查 <a href="https://www.wjx.cn/" target="_blank" rel="noopener">https://www.wjx.cn/</a></li></ul><h1 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h1><ul><li><p><a href="https://www.bilibili.com/video/av21376839/?p=25" target="_blank" rel="noopener">科普-计算机科学速成课</a></p></li><li><p><a href="https://www.bilibili.com/video/av8717782/?from=search&amp;seid=16602645838444177167" target="_blank" rel="noopener">纪录片-设计的艺术</a></p></li><li><p><a href="https://pan.baidu.com/s/1ge6mejh" target="_blank" rel="noopener">纪录片-小兵小赵</a></p></li><li><p><a href="https://www.youtube.com/watch?v=MCvU61Qoty0" target="_blank" rel="noopener">访谈-子夜.大学之殇</a></p></li><li><p><a href="https://aeon.co/videos/soar-around-the-moon-carried-by-the-music-of-debussy-in-this-breathtaking-space-flight" target="_blank" rel="noopener">月球视频</a></p></li><li><p><a href="https://www.youtube.com/watch?v=V22yKlUt4F4&amp;t=8s" target="_blank" rel="noopener">最后的演讲</a></p></li><li><p><a href="http://open.163.com/movie/2016/6/I/9/MBO0V0FG3_MBO0V9CI9.html" target="_blank" rel="noopener">性，死亡与生命的意义</a></p></li><li><p><a href="https://www.youtube.com/watch?v=sxQaBpKfDRk&amp;index=2&amp;list=PL8dPuuaLjXtNM_Y-bUAhblSAdWRnmBUcr" target="_blank" rel="noopener">统计学：statistics —— CrashCourse</a></p></li><li><p><a href="https://www.youtube.com/channel/UCJqMGrR9fX7Pfw_8JgeRqCA" target="_blank" rel="noopener">锵锵行天下</a></p></li><li><p><a href="https://v.qq.com/x/cover/t6udtxyvbhbbxv2/z0024xgmy6h.html" target="_blank" rel="noopener">蓝色星球</a></p></li><li><p><a href="https://v.qq.com/x/cover/jx7g4sm320sqm7i/b0028lgmlwa.html" target="_blank" rel="noopener">风味人间</a></p></li><li><p><a href="https://v.qq.com/x/page/x073074frri.html" target="_blank" rel="noopener">成功的原则</a></p></li><li><p><a href="https://www.youtube.com/channel/UCvn_XCl_mgQmt3sD753zdJA" target="_blank" rel="noopener">youtube视频：Rachel’s English</a></p></li><li><p><a href="https://www.youtube.com/watch?v=gJ0XxJVhf1Q&amp;list=PLnVWId4y5-smswI2kNgeeS4gbfJTmhIpe" target="_blank" rel="noopener">纪录片-生门</a></p></li><li><p><a href="https://www.youtube.com/watch?v=G_BrFk9i3xQ&amp;t=717s" target="_blank" rel="noopener">电影-生门</a></p></li><li><p><a href="https://movie.douban.com/subject/26874505/" target="_blank" rel="noopener">纪录片-人生果实</a></p></li></ul><p>《人类星球》<br>梦与狂想的王国<br>《尘与雪》<br>《人生七年》<br>《身份的焦虑》</p><p>《铁西区》<br>《和凤鸣》<br>《原油》</p><h1 id="书："><a href="#书：" class="headerlink" title="书："></a>书：</h1><ul><li><p><a href="https://book.douban.com/subject/2995759/" target="_blank" rel="noopener">The Non-Designer’s Design Book (4th Edition)</a></p></li><li><p><a href="http://www.freetechbooks.com/" target="_blank" rel="noopener">英文原版免费编程书籍</a></p></li></ul><h1 id="网站："><a href="#网站：" class="headerlink" title="网站："></a>网站：</h1><ul><li><p><a href="https://feedly.com/i/my" target="_blank" rel="noopener">RSS收集网站</a></p></li><li><p><a href="http://www.zhibimo.com/" target="_blank" rel="noopener">知笔墨</a></p></li><li><p><a href="https://natick.research.microsoft.com/" target="_blank" rel="noopener">微软海底机房摄像头直播</a></p></li><li><p><a href="https://www.earthcam.com/" target="_blank" rel="noopener">全球免费摄像头直播</a></p></li><li><p><a href="https://dribbble.com/" target="_blank" rel="noopener">设计类网站</a></p></li><li><p><a href="https://www.artstation.com/about" target="_blank" rel="noopener">漫画-海报</a></p></li><li><p><a href="https://ourworldindata.org/" target="_blank" rel="noopener">Our the in World</a></p></li><li><p><a href="http://cnki.net/" target="_blank" rel="noopener">中国知网</a></p></li><li><p><a href="https://www.gapminder.org/tools/#$chart-type=bubbles" target="_blank" rel="noopener">统计学可视化</a></p></li><li><p><a href="https://b-ok.org/" target="_blank" rel="noopener">各种书籍下载</a></p></li></ul><p>cnki免费下载文献：账号：hqwytsg015 密码：cnki015</p><ul><li><p><a href="https://www.douban.com/note/376297328/" target="_blank" rel="noopener">北京值得去的地方</a></p></li><li><p><a href="https://www.youtube.com/watch?v=dKOuUo3pZSE" target="_blank" rel="noopener">纪录片——AlphaGo</a></p></li><li><p><a href="https://www.bestyoutubechannels.info/" target="_blank" rel="noopener">youtube最受欢迎的频道</a></p></li><li><p><a href="http://md.aclickall.com/" target="_blank" rel="noopener">写作网站</a></p></li><li><p><a href="https://www.webdesignrankings.com/resources/lolcolors/" target="_blank" rel="noopener">颜色选择</a></p></li></ul><h1 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h1><ul><li><p><a href="https://ayearofreadingtheworld.com/" target="_blank" rel="noopener">TED:阅读全世界</a></p></li><li><p><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰的个人网站</a></p></li><li><p><a href="https://betterexplained.com/" target="_blank" rel="noopener">追求对知识概念和原理进行更合适的描述</a></p></li><li><p><a href="http://www.storytellingwithdata.com/" target="_blank" rel="noopener">《用数据讲故事》作者博客</a></p></li><li><p><a href="https://www.geekonomics10000.com/" target="_blank" rel="noopener">万维钢的博客</a></p></li><li><p><a href="http://w4lle.com/" target="_blank" rel="noopener">w4lle’s Notes = android技术博客</a></p></li><li><p><a href="http://stormzhang.com/posts/" target="_blank" rel="noopener">stormzhang</a></p></li><li><p><a href="https://www.liaohuqiu.net/" target="_blank" rel="noopener">廖祜秋的博客</a></p></li><li><p><a href="https://www.blendo.co/blog/the-best-blogs-every-data-analyst-should-follow/" target="_blank" rel="noopener">最好的数据分析博客汇总</a></p></li><li><p><a href="https://thelongestway.com/" target="_blank" rel="noopener">what’s up - The Longest Way</a></p></li></ul><h1 id="数据分析类网站"><a href="#数据分析类网站" class="headerlink" title="数据分析类网站"></a>数据分析类网站</h1><ul><li><p><a href="https://www.kaggle.com/" target="_blank" rel="noopener">Kaggle</a></p></li><li><p><a href="https://cosx.org/archives/" target="_blank" rel="noopener">统计之都</a></p></li><li><p><a href="http://jiyang.me/" target="_blank" rel="noopener">纪杨的网站数据分析笔记</a></p></li><li><p><a href="http://bluewhale.cc/" target="_blank" rel="noopener">蓝鲸的网站分析笔记</a></p></li><li><p><a href="http://cloga.info/" target="_blank" rel="noopener">Cloga的互联网笔记</a></p></li><li><p><a href="https://www.hellobi.com/u/chenlaoshi/articles" target="_blank" rel="noopener">陈老师的天善智能博客文章</a></p></li><li><p><a href="http://www.woshipm.com/u/159343" target="_blank" rel="noopener">秦路-文章</a></p></li><li><p><a href="https://datavizproject.com/" target="_blank" rel="noopener">数据可视化网站</a></p></li><li><p><a href="http://www.17bigdata.com/" target="_blank" rel="noopener">一起大数据</a></p></li><li><p><a href="http://www.datathinking.com/index.php" target="_blank" rel="noopener">数据分析问答</a></p></li><li><p><a href="https://www.codecogs.com/latex/eqneditor.php?lang=zh-cn" target="_blank" rel="noopener">数学公式转换MD格式</a></p></li><li><p><a href="https://infogram.com/" target="_blank" rel="noopener">信息图制作</a></p></li><li><p><a href="https://flowcv.io/app/content" target="_blank" rel="noopener">简历制作网站</a></p></li><li><p><a href="https://trello.com" target="_blank" rel="noopener">多人协同任务清单</a></p></li><li><p><a href="https://www.ichdata.com/" target="_blank" rel="noopener">GA小站-一个Google Analytics 和Adobe Analytics 经验分享平台 </a></p></li><li><p><a href>数据可视化网站</a></p></li></ul><p><a href="https://datavizcatalogue.com/ZH/%E6%90%9C%E7%B4%A2.html" target="_blank" rel="noopener">https://datavizcatalogue.com/ZH/%E6%90%9C%E7%B4%A2.html</a></p><p><a href="https://plot.ly/python/" target="_blank" rel="noopener">https://plot.ly/python/</a></p><p><a href="https://datavizproject.com/#" target="_blank" rel="noopener">https://datavizproject.com/#</a></p><h1 id="TED"><a href="#TED" class="headerlink" title="TED"></a>TED</h1><ul><li><p><a href="http://open.163.com/movie/2016/12/I/B/MC82BCQAN_MC8U8L3IB.html" target="_blank" rel="noopener">如何掌控你的自由时间 —— 时间=选择</a></p></li><li><p><a href="http://open.163.com/movie/2016/6/4/J/MBOR278SK_MBP8E2U4J.html" target="_blank" rel="noopener">提升自信的技巧 —— 除非你做到了，否则没有人相信你</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/J/G/MDQLF803V_MDQLQ6BJG.html" target="_blank" rel="noopener">【TED】科技公司如何控制你的注意力</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/C/J/MDR9R6RCV_MDR9RFPCJ.html" target="_blank" rel="noopener">我从生活和写作中学到了12个真理 - 一个一个写，改初稿， 如果不知道写什么，就写你自己经历的事情</a></p></li></ul><ul><li><p><a href="http://open.163.com/movie/2018/9/R/Q/MDQJ11FL3_MDQJ2Q6RQ.html" target="_blank" rel="noopener">收入如何影响人们的生活方式——世界各国， 收入水平导致的生活条件改变都差不多</a><br><a href="http://lectures.dollarstreet.org/matrix?thing=Families&amp;countries=World&amp;regions=World&amp;zoom=4&amp;row=1&amp;lowIncome=26&amp;highIncome=15000&amp;lang=en" target="_blank" rel="noopener">官方网站</a></p></li><li><p><a href="http://open.163.com/movie/2018/9/G/I/MDRK5FS99_MDRK5KCGI.html" target="_blank" rel="noopener">图表的魔力——图表能够让人更快的理解信息</a></p></li><li><p><a href="http://open.163.com/movie/2016/1/E/V/MBCBMP41R_MBCBN6SEV.html" target="_blank" rel="noopener">如何利用大数据做出正确的判断-用大量数据去做分析， 去深入了解， 但要想成功， 就需要冒一定的风险</a></p></li><li><p><a href="http://open.163.com/movie/2018/8/I/P/MDO5I27P8_MDO5J0AIP.html" target="_blank" rel="noopener">大数据时代：如何避免数据迷信？-不光要依靠大数据， 也要依靠厚数据，让解决问题的方法更加多元化</a></p></li><li><p><a href="http://open.163.com/movie/2018/8/3/H/MDO81R1TR_MDO820N3H.html" target="_blank" rel="noopener">李开复：人工智能如何拯救人类-ai让我们明白我们为何为人</a></p></li><li><p><a href="http://open.163.com/movie/2016/1/O/9/MB9RVGAJ5_MBA4K69O9.html" target="_blank" rel="noopener">开启情绪识别的大门-用算法来识别人类情绪</a></p></li></ul><!-- * []()* []()* []()* []()* []()* []()* []()* []()* []()* []()* []()* []()* []() --><h1 id="有趣的故事"><a href="#有趣的故事" class="headerlink" title="有趣的故事"></a>有趣的故事</h1><ol><li><p><a href="https://www.zhihu.com/question/29443142/answer/79172653" target="_blank" rel="noopener">盗醉猴</a></p></li><li><p><a href="https://www.zhihu.com/question/47959258/answer/109182642?f3fb8ead20=6c218ad9a813d4ae7365017d9f348828" target="_blank" rel="noopener">植物修炼成精之后还有没有细胞壁？</a></p></li></ol><ol start="3"><li><p><a href="https://www.zhihu.com/question/30620066/answer/49084704" target="_blank" rel="noopener">NBA 感人的比赛或者画面有哪些？</a></p></li><li><p><a href="https://www.zhihu.com/question/37206525/answer/72868899" target="_blank" rel="noopener">有没有一部电影让你在深夜中痛哭？</a></p></li><li><p><a href="https://www.zhihu.com/question/20127634/answer/33490470" target="_blank" rel="noopener">为什么法海要阻止白素贞和许仙在一起？</a></p></li><li><p><a href="https://www.quora.com/What-are-some-amazing-pictures-one-has-to-see-twice-to-understand/answer/Shimmy-He?srid=uXPOL&amp;share=6b286c9a" target="_blank" rel="noopener">What are some amazing pictures one has to see twice to understand?</a></p></li></ol><ol start="7"><li><a href="http://www.bbc.com/culture/story/20160819-the-21st-centurys-100-greatest-films" target="_blank" rel="noopener">21世界100部伟大的电影</a></li></ol><!-- # 幽默段子-银教授什么时候有空？也没什么事，就是想占用你一辈子的时间，想和你过过日子。我这人特别不实在，除了实在想你。 ​​​​你这日子一天天过的，没什么两样，都是喜欢我的一天我把电脑抱在怀里安慰了很久，因为它的系统崩溃了。 ​​​​没钱真的会被人看不起。今天叫朋友还我一千块钱，朋友说：“借我一万的人都没找我要，你哪来的脸开口？”  我羞愧无比，暗暗发誓等我有钱了，一定要多借点给他。总觉得自己过了18岁就能慢慢成熟起来，没想到我每年都是十八岁 --><h1 id="世界运行的潜在规律"><a href="#世界运行的潜在规律" class="headerlink" title="世界运行的潜在规律"></a>世界运行的潜在规律</h1><ol><li><p>这个世界要改变你，会潜移默化的改变你，如果你这一天不去努力，那么你两年之后再看回头看你自己，会发现自己并没有取得什么成就。</p></li><li><p>如果你要理解某些知识，你就要结合你自己的情况去理解学习，不管你觉得作者说的怎么好，你都要切合你自己的实际情况，不管你的实际情况是多么的烂。 </p></li><li><p>人类的进化是有一定的规律的，你要认清这些规律，并利用好它。 比如： 人的大脑是有适应性的，你每天去刻苦练习就是会进步。   人都是有恐惧心理的。  人都是要吃饭穿衣服的。 人都是善于遗忘的。  人就是佩服逻辑清晰的人，逻辑清晰的人就是能两三句让你理解到事物的本质。  人都是喜欢有自己主见的人，而不是人云亦云的人，不是只会复述别人话的人。  让你坚持每天都做一件事情的时候，人们就是会对你产生佩服之情。  当你去学习，去面对的时候，你就不会感受到那么的恐惧与难受。 你一直拖延下去，你自己只会更加的难受。  人就是喜欢整洁，干净有序的环境，因为潜意识里人是向往健康的。 </p></li><li><p>人的身体总体是喜欢稳定的， 你一运动就会心跳加速，一读书就会让脑细胞大量活跃，这些是身体尽量避免的， 但正因为身体有稳定性，所以你坚持一段时间，突破了临界点，人的身体会变得更加强壮，以便达到一个新的舒适区。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础学习</title>
      <link href="/2018/07/25/%E6%8A%80%E8%83%BD-python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/07/25/%E6%8A%80%E8%83%BD-python%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数"><a href="#数" class="headerlink" title="数"></a>数</h1><ol><li>整数-int</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = 1</span><br><span class="line"># 查看变量的类型</span><br><span class="line">type(i)</span><br></pre></td></tr></table></figure><hr><ol start="2"><li>浮点数-float</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.2 * 0.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0.020000000000000004</span><br></pre></td></tr></table></figure><blockquote><p>浮点数在计算机中表输入的十进制浮点数仅由实际存储在计算机中的近似的二进制浮点数表示,二进制来表达 1/10 是一个无限循环小数:0.0001100110011001100110011001100110011001100110011…,Python 只打印机器中存储的二进制值的十进制近似值。</p></blockquote><blockquote><p>如何限制显示的小数点个数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;&#123;:.4f&#125;&quot;.format(0.1*0.4))</span><br></pre></td></tr></table></figure><hr><ol start="3"><li>字符串-str</li></ol><p>字符串的表示方式：</p><ul><li><p>python中有3种表示字符串的方式——单引号，双引号，三引号。</p></li><li><p>单引号和双引号的作用是相同的, 但双引号中可以将包含的特殊字符单引号输出，而单引号要输出’需要/转义</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos; \&apos;hello world\&apos; &apos;</span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line">str = &quot;&apos;hello python&apos;&quot;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><ul><li>三引号的用法特殊，三引号中可以输入单引号、双引号或换行符等字符,也可用作制作文档字符串</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">str = &apos;&apos;&apos;&apos;hello&apos;/&quot;world&quot;&apos;&apos;&apos;</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure><p>常用的字符串处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 重复字符串</span><br><span class="line">sta = &apos;hi&apos;</span><br><span class="line">print (sta * 2)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 切片</span><br><span class="line">sta = &apos;1234567890&apos;</span><br><span class="line">print(sta[2:9:2])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#去除空格</span><br><span class="line">name = &apos;   zhang yu    &apos;</span><br><span class="line"># 去除左侧空格</span><br><span class="line">print(name.lstrip())</span><br><span class="line"># 去除右侧空格</span><br><span class="line">print(name.rstrip())</span><br><span class="line"># 去除两侧空格</span><br><span class="line">print(name.strip())</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 分割字符串</span><br><span class="line"></span><br><span class="line">#split()函数通过制定分隔符对字符串进行切片</span><br><span class="line">name = &quot;zhang  and  yu  and  han&quot;</span><br><span class="line">print(name.split())</span><br><span class="line">print(name.split(&apos;  &apos;,2))</span><br><span class="line">print(name.split(&apos;  and  &apos;))</span><br><span class="line"></span><br><span class="line"># partition()函数将目标字符串分割为两个部分，返回一个三元元组（head,sep,tail），包含分割符</span><br><span class="line">url = &quot;https://zhangandyu.github.io//2018&quot;</span><br><span class="line">print( url.partition(&quot;//&quot;))</span><br><span class="line">print(url.rpartition(&quot;//&quot;))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 替换字符串</span><br><span class="line"></span><br><span class="line">#str.replace(old, new,max)</span><br><span class="line"># max 可选字符串不能超过max次</span><br><span class="line">str = &quot;this is a apple&quot;</span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;))     </span><br><span class="line">print (str.replace(&quot;is&quot;, &quot;was&quot;, 1))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 拼接字符串</span><br><span class="line">a = &apos;_&apos;</span><br><span class="line">name = (&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br><span class="line">print(a.join(name))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查找字符串是否包含子字符串</span><br><span class="line">#str.find(str, beg=0, end=len(string))</span><br><span class="line">a = &apos; this is a apple&apos;</span><br><span class="line">b = &apos;is&apos;</span><br><span class="line"></span><br><span class="line">#从下标3开始，查找在字符串里第一个出现的子串，返回结果：3</span><br><span class="line">print(a.find(b,2)) </span><br><span class="line"></span><br><span class="line">#从下标5开始，查找在字符串里第一个出现的子串，返回结果：6</span><br><span class="line">print(a.find(b,5))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#判断字符串是否以指定的前后缀结尾</span><br><span class="line"># str.startswith(str, beg=0,end=len(string))</span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;th&apos;</span><br><span class="line">c = &apos;is&apos;</span><br><span class="line">print(a.startswith(b))</span><br><span class="line">print(a.startswith(c,2))</span><br><span class="line"></span><br><span class="line">a = &apos;this is a apple&apos;</span><br><span class="line">b = &apos;le&apos;</span><br><span class="line">c = &apos;app&apos;</span><br><span class="line">print(a.endswith(b))</span><br><span class="line">print(a.endswith(b,10))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#其他函数</span><br><span class="line"># 检测数字</span><br><span class="line">str.isdigit()    # 检测字符串是否只由数字组成</span><br><span class="line">str.isnumeric()  # 检测字符串是否只由数字组成,这种方法是只针对unicode对象</span><br><span class="line">str.isdecimal()  # 检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</span><br><span class="line"># 检测字母</span><br><span class="line">str.isalpha()   # 检测字符串是否只由字母组成</span><br><span class="line"># 检测字母和数字</span><br><span class="line">str.isalnum()   # 检测字符串是否由字母和数字组成</span><br><span class="line"># 检测其他</span><br><span class="line">str.isspace()   # 检测字符串是否只由空格组成</span><br><span class="line">str.islower()   # 检测字符串是否由小写字母组成</span><br><span class="line">str.isupper()   # 检测字符串中所有的字母是否都为大写</span><br><span class="line">str.istitle()   # 检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写</span><br><span class="line"></span><br><span class="line">str.capitalize()   # 将字符串的第一个字母变成大写,其他字母变小写</span><br><span class="line">str.lower()        # 转换字符串中所有大写字符为小写</span><br><span class="line">str.upper()        # 将字符串中的小写字母转为大写字母</span><br><span class="line">str.swapcase()     # 对字符串的大小写字母进行转换</span><br><span class="line">max(str)    # 返回字符串 str 中最大的字母</span><br><span class="line">min(str)    # 返回字符串 str 中最小的字母</span><br><span class="line">len(str)    # 返回字符串的长度</span><br><span class="line">str(arg) # 将 arg 转换为 string</span><br></pre></td></tr></table></figure><hr><ol start="4"><li>布尔值</li></ol><ul><li>and-逻辑与</li><li>or-逻辑或</li><li>not-逻辑非</li></ul><blockquote><p> not的优先级大于and和or的优先级，而and和or的优先级相等。<br> 逻辑运算符的优先级低于关系运算符，必须先计算关系运算符，再计算逻辑运算符。</p></blockquote><hr><ol start="5"><li>变量命名规则</li></ol><ul><li>只能包含字母、数字和下划线</li><li>不能包含空格</li><li>不能将python关键字和函数名用作变量名</li><li>变量名应简短又具有描述性</li><li>慎用小写字母l和大写字母O</li></ul><hr><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><ol><li>什么是序列</li></ol><ul><li>序列是Python中最基本的数据结构。</li><li>python中有6个序列的内置类型,包括列表、元组、字符串、Unicode字符串、buffer对象和xrange对象。</li></ul><p>对于序列，都可以使用一下操作：</p><ul><li>索引</li><li>切片</li><li>加</li><li>乘</li><li>成员检查<br>in和not in</li><li>计算序列的长度<br>len()</li><li>取序列中的最大、最小值<br>max()和min()</li></ul><hr><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><blockquote><ul><li>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现</li><li>列表适合用于存储在程序运行期间可能变化的数据集。 列表是可以修改的， 这对处理网站的用户列表或游戏中的角色列表至关重要。</li></ul></blockquote><ul><li>列表对象方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.append(x)</span><br><span class="line"># 把一个元素添加到列表的结尾</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.extend(x)</span><br><span class="line"># 将一个给定列表中的所有元素都添加到另一个列表中</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.insert(i,x)</span><br><span class="line"># 在指定位置插入一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.remove(x)</span><br><span class="line"># 删除列表中值为 x 的第一个元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.pop(i)</span><br><span class="line"># 从列表的指定位置删除元素，并将其返回</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.clear()</span><br><span class="line"># 从列表中删除所有元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.index(x)</span><br><span class="line"># 返回列表中第一个值为 x 的元素的索引</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.count(x)</span><br><span class="line"># 返回 x 在列表中出现的次数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> list.sort()</span><br><span class="line"># 对列表中的元素进行排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.sorted()</span><br><span class="line"># 对列表中的元素进行临时排序</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.reverse()</span><br><span class="line"># 倒排列表中的元素</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.copy()</span><br><span class="line"># 返回列表的一个浅拷贝</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list.len(x)</span><br><span class="line">#返回列表的长度</span><br></pre></td></tr></table></figure><ol start="3"><li>用列表实现栈和列队</li></ol><ul><li>栈是一种后进先出的数据结构，我们可以使用列表的append()和pop()方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [1,2]</span><br><span class="line">a.append(3)  #入栈</span><br><span class="line">a.pop() # 最后一个元素出栈</span><br></pre></td></tr></table></figure><ul><li>队列是一种先进先出的数据结构，我们可以使用列表的append()和pop(0)方法了实现</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [2,1]</span><br><span class="line">a.append(1)  # 入队列</span><br><span class="line">a.pop(0) # 第0个元素出队列</span><br></pre></td></tr></table></figure><ol start="4"><li>列表推导式</li></ol><ul><li><p>为从序列中创建列表提供了一个简单的方法。</p></li><li><p>普通方法</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">for i in range(20):</span><br><span class="line">    a.append(i ** 2)</span><br><span class="line">print(a)</span><br><span class="line"># i 依然存在</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">b = []</span><br><span class="line">for x in [1,2,3,4]:</span><br><span class="line">    for y in [2,3,4]:</span><br><span class="line">        if x !=y:</span><br><span class="line">            b.append((x,y))</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><ul><li>推导式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = [i**2 for i in range(20)]</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(x,y) for x in [1,2,3,4] for y in [2,3,4] if x !=y]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from math import pi</span><br><span class="line">[str(round(pi, i)) for i in range(1, 16)]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">    [1, 2, 3, 4],</span><br><span class="line">    [5, 6, 7, 8],</span><br><span class="line">    [9, 10, 11, 12]]</span><br><span class="line">[[row[i] for row in matrix] for i in range(4)]</span><br></pre></td></tr></table></figure><hr><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><blockquote><p>元组为不可变得列表， 在需要创建一系列不可修改的元素时使用。 </p></blockquote><ol><li>只有一个元素<br>元组中只包含一个元素时， 需要在元素后面添加逗号，否则括号会被当做运算符使用</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zy = (2,)</span><br><span class="line">zy[0]</span><br></pre></td></tr></table></figure><ol start="2"><li>修改元组</li></ol><ul><li>对元组进行连接组合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;z&apos;, &apos;y&apos;)</span><br><span class="line">me = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">name = na + me</span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><ul><li>给元组变量赋值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">na = (&apos;zy&apos;, &apos;yu&apos;)</span><br><span class="line">na = (&apos;y&apos;, &apos;u&apos;)</span><br><span class="line">print(na)</span><br></pre></td></tr></table></figure><ul><li>元组运算符</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 计算元组个数</span><br><span class="line">len((2,45, 67, 8, 9))</span><br><span class="line"></span><br><span class="line"># 连接</span><br><span class="line">(1,2,3, 4) + (4, 5, 6)</span><br><span class="line"></span><br><span class="line"># 复制</span><br><span class="line">(1,2,3, 4)* 3</span><br><span class="line"></span><br><span class="line">#迭代</span><br><span class="line"> for i in (12, 3,4 , 5):</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure><ul><li>将列表转换为元组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list = [ &apos;z&apos;, 1, 2, 3, 4, &apos;u&apos;]</span><br><span class="line">tup = tuple(list)</span><br><span class="line">print(tup)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="映射和集合"><a href="#映射和集合" class="headerlink" title="映射和集合"></a>映射和集合</h1><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><blockquote><p>字典：将相关信息关联起来</p></blockquote><ul><li>访问字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">print(man[&apos;name&apos;])</span><br></pre></td></tr></table></figure><ul><li>添加键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">man[&apos;home&apos;] = &apos;xian&apos;</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>修改字典中的值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">man[&apos;hige&apos;] = 170</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>删除键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;xingbie&apos;:&apos;man&apos;, &apos;hige&apos;:165&#125;</span><br><span class="line">del man[&apos;xingbie&apos;]</span><br><span class="line">man</span><br></pre></td></tr></table></figure><ul><li>遍历所有的键-值对</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key, value in man.items():</span><br><span class="line">    print( key,&quot;:&quot; ,  value)</span><br></pre></td></tr></table></figure><ul><li>分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line"></span><br><span class="line">for key in man.keys():</span><br><span class="line">    print( key)</span><br><span class="line">    </span><br><span class="line">for value in man.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><ul><li>按倒序顺序遍历分别遍历所有的键-值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for key in sorted(man.keys()):</span><br><span class="line">    print( key)</span><br></pre></td></tr></table></figure><ul><li>字典列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">man = &#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;</span><br><span class="line">alien = &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;:5&#125;</span><br><span class="line">computer = &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 40&#125;</span><br><span class="line"></span><br><span class="line">alients = [man, alien, computer]</span><br><span class="line"></span><br><span class="line">for i in alients:</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;name&apos;:[&apos;zhangyu&apos;, &apos;han&apos;, &apos;dou&apos;],</span><br><span class="line">    &apos;home&apos;:[&apos;xian&apos;, &apos;beijing&apos;],</span><br><span class="line">    &apos;hige&apos;:[165, 170, 370, 2389]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for na, las in province.items():</span><br><span class="line">    for la in las:</span><br><span class="line">        print(na, la)</span><br></pre></td></tr></table></figure><ul><li>在字典中存储字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">province = &#123;</span><br><span class="line">    &apos;man&apos; :&#123;&apos;name&apos;:&apos;zhangyu&apos;, &apos;home&apos;:&apos;xian&apos;, &apos;hige&apos;:165, &apos;girfriend&apos;:&apos;null&apos;&#125;,</span><br><span class="line">    &apos;alien&apos; : &#123;&apos;color&apos;:&apos;green&apos;, &apos;points&apos;: 5&#125;,</span><br><span class="line">    &apos;computer&apos; : &#123;&apos;name&apos;:&apos;wangzhou&apos;, &apos;num&apos;: 10&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i, a  in province.items():</span><br><span class="line">    print(i, a)</span><br></pre></td></tr></table></figure><ul><li>字典键的特性<blockquote><p>不允许同一键出现两次，创建时如果同一键被赋值两次， 后一个值会被记住。<br>键必须不可变， 可以用数字，字符串，或元组充当，但不能用列表</p></blockquote></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict = &#123;&apos;name&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict</span><br></pre></td></tr></table></figure><ul><li>python中关于字典的函数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"># 删除字典内所有元素</span><br><span class="line">dict.clear()</span><br><span class="line"></span><br><span class="line">#返回一个字典的浅复制</span><br><span class="line">dict.copy()</span><br><span class="line"></span><br><span class="line"># 创建字典</span><br><span class="line">seq = (&apos;Google&apos;, &apos;Runoob&apos;, &apos;Taobao&apos;)</span><br><span class="line">dict = dict.fromkeys(seq,10)</span><br><span class="line">dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#返回指定键的值，如果值不在字典中返回设定值</span><br><span class="line">dict1.get(&apos;Google&apos;, 40)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#和get()类似, 但如果键不存在于字典中，将会添加键并将值设为设定值</span><br><span class="line">dict1.setdefault(&apos;google&apos;, &apos;20&apos;)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#把字典dict2的键/值对更新到dict里</span><br><span class="line">dict1=&#123;&apos;Google&apos;: 10, &apos;Runoob&apos;: 10, &apos;Taobao&apos;: 10&#125;</span><br><span class="line">dict2 =&#123;&apos;na&apos;: &apos;zhang&apos;, &apos;name&apos;:&apos;yu&apos;&#125;</span><br><span class="line">dict1.update(dict2)</span><br><span class="line">dict1</span><br><span class="line"></span><br><span class="line">#以列表返回可遍历的(键, 值) 元组数组</span><br><span class="line">dict.items()</span><br><span class="line"></span><br><span class="line">#以列表返回一个字典所有的键</span><br><span class="line">dict.keys()</span><br><span class="line"></span><br><span class="line">#以列表返回字典中的所有值</span><br><span class="line">dict.values()</span><br></pre></td></tr></table></figure><h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><blockquote><p>集合是一个无序的，不重复的数据集合。集合作用有以下两点：</p></blockquote><ol><li>去重： 把一个还有重复元素的列表或元组等数据类型变成集合， 其中的重复元素只出现一次，用set()方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#使用大括号之间创建集合</span><br><span class="line">f = &#123;1, 2, 2, 2, &apos;a&apos;&#125;</span><br><span class="line">print(f)</span><br><span class="line">print(type(f))</span><br><span class="line"></span><br><span class="line"># 用set()方法</span><br><span class="line">a = [1, 2, 2, &apos;a&apos;, &apos;a&apos;]</span><br><span class="line">b = (1,2,2, &apos;a&apos;, &apos;a&apos;)</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line">e = set()</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure><ol start="2"><li>进行关系测试：测试两组数据之间的交集，差集，并集等数据关系</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 查看集合的相关函数</span><br><span class="line">help(set)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;d&apos;,&apos;e&apos;]</span><br><span class="line">b = [1,2,2,&apos;a&apos;,&apos;a&apos;,&apos;b&apos;,&apos;b&apos;]</span><br><span class="line">c = set(a)</span><br><span class="line">d = set(b)</span><br><span class="line"></span><br><span class="line"># 取交集</span><br><span class="line">e = c.intersection(d)</span><br><span class="line">print(e)</span><br><span class="line"></span><br><span class="line"># 取并集</span><br><span class="line">f = c.union(d)</span><br><span class="line">print(f)</span><br><span class="line"></span><br><span class="line"># 取差集（无重复）</span><br><span class="line">g = c.difference(d)</span><br><span class="line">print(g)</span><br><span class="line"></span><br><span class="line">#对称差集&quot;（不同时在c,d中存在）</span><br><span class="line">h = c.symmetric_difference(d)</span><br><span class="line">print(h)</span><br><span class="line"></span><br><span class="line">#判读是否为子集</span><br><span class="line">i = c.issubset(d)</span><br><span class="line">print(i)</span><br><span class="line"></span><br><span class="line"># &quot;判读是否为超集&quot;</span><br><span class="line">j = c.issuperset(d) </span><br><span class="line"></span><br><span class="line">#检查是否有相同元素,没有返回True</span><br><span class="line">k = c.isdisjoint(d)</span><br></pre></td></tr></table></figure><h1 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h1><h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><ol><li>if-else语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age = 17</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">    print( &quot;you can seee six video&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li>if-elif-else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = 18</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif age&gt; 18:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>多个elif</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">age = 80</span><br><span class="line">if age == 18:</span><br><span class="line">    print( &quot;you should find girlfriend&quot;)</span><br><span class="line">elif 18&lt;age&lt;30:</span><br><span class="line">    print(&quot;you can see six video&quot;) </span><br><span class="line">elif 30&lt; age &lt; 60:</span><br><span class="line">    print( &quot;you should go to work&quot;)</span><br><span class="line">elif age&gt; 60:</span><br><span class="line">    print(&quot;you should go to tourism&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot; you should study&quot;)</span><br></pre></td></tr></table></figure><ol start="4"><li>if语句中的and和or</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = 9</span><br><span class="line">if num &gt;= 0 and num &lt;= 10: </span><br><span class="line">    print (&apos;hello&apos;)</span><br><span class="line"></span><br><span class="line">num = 10</span><br><span class="line">if num &lt;= 0 or num &gt;= 10:</span><br><span class="line">    print(&apos;zy&apos;)</span><br></pre></td></tr></table></figure><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><ol><li>for循环主要用于遍历迭代的对象， while循环主要用于条件判断</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="2"><li>continue 用于跳过该次循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br></pre></td></tr></table></figure><ol start="3"><li>break 用于退出循环</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">numbers = [12, 21, 48, 8, 1230, 5, 7]</span><br><span class="line">even =[]</span><br><span class="line">odd = []</span><br><span class="line"></span><br><span class="line">while len(numbers) &gt; 0 :</span><br><span class="line">    number = numbers.pop()</span><br><span class="line">    if(number % 2 == 0):</span><br><span class="line">        even.append(number)</span><br><span class="line">    else:</span><br><span class="line">        odd.append(number)</span><br><span class="line">        continue</span><br><span class="line">    print(even)</span><br><span class="line">    break</span><br></pre></td></tr></table></figure><ol start="4"><li>循环使用 else 语句</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">count = 0</span><br><span class="line">while count &lt; 5:</span><br><span class="line">   print (count, &quot; is  less than 5&quot;)</span><br><span class="line">   count = count + 1</span><br><span class="line">else:</span><br><span class="line">   print (count,&quot; is not less than 5&quot; )</span><br></pre></td></tr></table></figure><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><p>for 循环可以遍历任何序列的项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for letter in &apos;python&apos;:</span><br><span class="line">    print(letter)</span><br></pre></td></tr></table></figure><hr><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>函数是组织好， 可重复使用的，用来实现有关功能的代码段。函数能提高应用的模块行，和代码的重复利用率。</li></ul><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def zhangyu():</span><br><span class="line">    &quot;&quot;&quot;显示名称&quot;&quot;&quot;</span><br><span class="line">    print(&quot;zhangandyu&quot;)</span><br><span class="line"> #   return[&apos;a&apos;]</span><br><span class="line"></span><br><span class="line"> zhangyu()</span><br></pre></td></tr></table></figure><ul><li>向函数传入参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def zy(name):</span><br><span class="line">    print(&apos;Hello, &apos; + name.title() + &apos;!&apos;)</span><br><span class="line"></span><br><span class="line">zy(&apos;zhangyu&apos;)</span><br><span class="line"></span><br><span class="line"># name 为形参</span><br><span class="line">#&apos;zhangyu&apos;为实参</span><br></pre></td></tr></table></figure><ul><li>位置实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(&apos;dog&apos;, &apos;huabao&apos;)</span><br><span class="line"># 警惕位置混淆</span><br><span class="line">describe_pet(&apos;huabao&apos;, &apos;dog&apos;)</span><br></pre></td></tr></table></figure><ul><li>关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, name):</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line">describe_pet(name = &apos;huabao&apos;, animal_type = &apos;dog&apos;)</span><br><span class="line"># 位置混淆也没有关系</span><br></pre></td></tr></table></figure><ul><li>设置默认值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(name,animal_type=&apos;dog&apos;):</span><br><span class="line">    &quot;&quot;&quot;设置animal_type的默认参数是dog&quot;&quot;&quot;</span><br><span class="line">    print(&apos;I have a  &apos; + animal_type)</span><br><span class="line">    print(&apos;My &apos; + animal_type + &apos;is name is &apos; + name.title() + &apos;.&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数不改变</span><br><span class="line">describe_pet(name = &apos;huabao&apos;)</span><br><span class="line"></span><br><span class="line"># 默认参数改变</span><br><span class="line">describe_pet(&apos;huxbao&apos;, &apos;cat&apos;)</span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数返回的值可以使用return语句将值返回到调用函数的代码行中。从而将程序的大部分繁重工作移到函数中取完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name):</span><br><span class="line">    name = first_name + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>让实参变成可选的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def zy_name(first_name, last_name, middle_name =&apos; &apos;):</span><br><span class="line">    if middle_name:</span><br><span class="line">        name = first_name +&apos; &apos;+ last_name +&apos; &apos; +  middle_name</span><br><span class="line">    else:</span><br><span class="line">        name = first_name + &apos; &apos; + last_name</span><br><span class="line">    return name.title()</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;yu&apos;)</span><br><span class="line"></span><br><span class="line">zy_name(&apos;zhang&apos;, &apos;and&apos;, &apos;yu&apos;)</span><br></pre></td></tr></table></figure><ul><li>返回字典</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def build_person(first_name, last_name, age=&apos;&apos;):</span><br><span class="line">    person = &#123;&apos;first&apos; : first_name, &apos;last&apos;: last_name&#125;</span><br><span class="line">    if age:</span><br><span class="line">        person[&apos;age&apos;] = age</span><br><span class="line">    return person</span><br><span class="line"></span><br><span class="line">build_person(&apos;zhang&apos;, &apos;yu&apos;, age=25)</span><br></pre></td></tr></table></figure><ul><li>传递列表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_user(names):</span><br><span class="line">    for name in names:</span><br><span class="line">        print(name.title())</span><br><span class="line">zy = [&apos;a&apos;, &apos;b&apos;, &apos;v&apos;]</span><br><span class="line">get_user(zy)</span><br></pre></td></tr></table></figure><ul><li>传递任意数据的实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def get_world(* names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(i)</span><br><span class="line"></span><br><span class="line">get_world(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用位置实参和任意数量实参</li></ul><p>必须将接纳任意数量实参的形参放到最后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def get_world(size, *names):</span><br><span class="line">    for i in names:</span><br><span class="line">        print(str(size) + i)</span><br><span class="line">get_world( 1,&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos;)</span><br></pre></td></tr></table></figure><ul><li>使用任意数量的关键字实参</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def get_user(**user_info):</span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    for key, value in user_info.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    return profile</span><br><span class="line">user_profile = get_user(location = &apos;princeton&apos;, field = &apos;physics&apos;, home = &apos;xian&apos;)</span><br><span class="line">print(user_profile)</span><br></pre></td></tr></table></figure><h2 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h2><p>如果一个函数在函数内部，调用自己本身，这个函数就是递归函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def fan(n):</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    else:</span><br><span class="line">        return n * fan (n-1)</span><br></pre></td></tr></table></figure><p>但递归函数在数特别大的情况下会导致栈溢出， 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fan(10000)</span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li>局部作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def func():</span><br><span class="line">    name = &quot;zhangyu&quot;</span><br><span class="line"></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure><p>运行报错， 因为name变量只在func()函数中生效，而在全局无法调用。</p><ul><li>作用域链</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = &quot;lzl&quot;</span><br><span class="line">def f1():</span><br><span class="line">    name = &quot;Eric&quot;</span><br><span class="line">    def f2():</span><br><span class="line">        name = &quot;Snor&quot;</span><br><span class="line">        print(name)</span><br><span class="line">    f2()</span><br><span class="line">f1()</span><br></pre></td></tr></table></figure><p>f1()函数执行，最后输出snor，Python中有作用域链， 变量会由内到外找，先去自己作用域找，自己没有再去上级找，直到找不到报错。</p><ul><li>终极作用域</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;zhang&apos;</span><br><span class="line"></span><br><span class="line">def f1():</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line">def f2():</span><br><span class="line">    name = &apos;yu&apos;</span><br><span class="line">    return f1</span><br><span class="line">    </span><br><span class="line">ret = f2()</span><br><span class="line">ret()</span><br></pre></td></tr></table></figure><p>输出结果为zhang, 分析可知， f2()函数执行结果为函数f1的内存地址。执行ret()就是执行f1()，name =’zhang’与fi()在一个作用域链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 新浪面试题</span><br><span class="line">li  = [lambda : x for x in range(10)]</span><br><span class="line">print(type(li))</span><br><span class="line">print(type(li[0]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#lambada 面试题 </span><br><span class="line">li = [lambda :x for x in range(10)]</span><br><span class="line">res = li[0]()</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure><h3 id="Numpy库"><a href="#Numpy库" class="headerlink" title="Numpy库"></a>Numpy库</h3><blockquote><p>Numpy是科学计算库,特点是有N维数组对象ndarray，是Scipy、Pandas等的基础</p></blockquote><ol><li>array结构</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"># 给列表每个元素增加1</span><br><span class="line">zy = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">zy = zy + 1</span><br><span class="line"># 错误， 因为列表不支持这样的错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 用array函数</span><br><span class="line">zy = np.array(zy)</span><br><span class="line">zy += 1</span><br><span class="line">zy</span><br><span class="line"></span><br><span class="line"># 计算</span><br><span class="line">by = np.array([ 2, 3, 4, 5, 6])</span><br><span class="line">zy + by</span><br><span class="line">zy * by</span><br><span class="line">zy ** by</span><br><span class="line"></span><br><span class="line"># 取值</span><br><span class="line">zy[0]  </span><br><span class="line">zy[2:]</span><br></pre></td></tr></table></figure><ol start="2"><li>底层为创建ndarray对象，有丰富的可选参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zy.shape    # 多维数组的形状</span><br><span class="line">type(zy)    # 类型</span><br><span class="line">zy.dtype    # 数组中元素的类型, array内部必须为同一类型， 不同类型会默认进行转换</span><br><span class="line">zy.size     # 数组中元素个数</span><br><span class="line">zy.ndim     # 数组的维度</span><br></pre></td></tr></table></figure><ol start="3"><li>索引</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tang_array = np.array([[1, 2, 3],</span><br><span class="line">                        [3, 4, 5],</span><br><span class="line">                        [6, 7, 8]])</span><br><span class="line"></span><br><span class="line">tang_array[1]</span><br><span class="line">tang_array[1, 1]</span><br><span class="line">tang_array[:,1]</span><br><span class="line">tang_array[1,0:2]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tang_array2 = tang_array</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line"># 将tang_array2中的4 改为10</span><br><span class="line">tang_array2[1,1] = 10</span><br><span class="line">tang_array2</span><br><span class="line"></span><br><span class="line">tang_array</span><br><span class="line"># tang_array 中的4也改为了10， 修改tang_array2,实际是指向了tang_array中的内存</span><br><span class="line"></span><br><span class="line"># 要想修改tang_array2 而不改tang_arra, 需要用copy()</span><br></pre></td></tr></table></figure><ol start="4"><li>巧用布尔类型</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 构造等差数组</span><br><span class="line">zy = np.arange(0, 100, 10)</span><br><span class="line">zy</span><br><span class="line"># array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 构造布尔类型</span><br><span class="line">by = np.array([0, 0, 1, 0, 1, 1, 1, 0, 1, 0], dtype=bool)</span><br><span class="line">by</span><br><span class="line"># array([False, False,  True, False,  True,  True,  True, False,  True,False])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy[by]</span><br><span class="line"># array([20, 40, 50, 60, 80])</span><br></pre></td></tr></table></figure><ol start="5"><li>array数组的数值计算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">zy = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">#所有数据求和 </span><br><span class="line">np.sum(zy)</span><br><span class="line"></span><br><span class="line"># 指定要按什么维度进行计算</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 0)</span><br><span class="line"></span><br><span class="line">np.sum(zy,axis = 1)</span><br><span class="line"></span><br><span class="line"># 所有数据乘积</span><br><span class="line">zy.prod()</span><br><span class="line"></span><br><span class="line">zy.prod(axis = 0)</span><br><span class="line">zy.prod(axis = -1)</span><br><span class="line"></span><br><span class="line"># 最小最大值</span><br><span class="line">zy.min(axis = 0)</span><br><span class="line">zy.max()</span><br><span class="line"></span><br><span class="line"># 最大值的索引</span><br><span class="line">zy.argmax()</span><br><span class="line"></span><br><span class="line"># 均值</span><br><span class="line">zy.mean()</span><br><span class="line">zy.mean(axis = 0)</span><br><span class="line"></span><br><span class="line"># 标准差</span><br><span class="line">zy.std(axis = 1)</span><br><span class="line"></span><br><span class="line"># 方差</span><br><span class="line">zy.var()</span><br><span class="line"></span><br><span class="line"># 进行限制， 小于3的值都变成3， 大于7的值都变成7</span><br><span class="line">zy.clip(3, 7)</span><br><span class="line"></span><br><span class="line"># 进行四舍五入</span><br><span class="line">zy.round()</span><br><span class="line"></span><br><span class="line"># 进行四舍五入到第一个小数点</span><br><span class="line">zy.round(decimals = 1)</span><br></pre></td></tr></table></figure><ol start="6"><li>排序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">tang_array = np.array([[1.1, 4.3, 5.2 , 5.1],</span><br><span class="line">                      [5.2, 6.4, 2.3, 4.6]])</span><br><span class="line"></span><br><span class="line"># 排序</span><br><span class="line">np.sort(tang_array)</span><br><span class="line"></span><br><span class="line">np.sort(tang_array, axis = 0)</span><br></pre></td></tr></table></figure><ol start="7"><li>数组形状操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num</span><br><span class="line"># array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2, 5</span><br><span class="line">zy_num</span><br><span class="line"></span><br><span class="line"># array([[0, 1, 2, 3, 4],[5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num.reshape(1,10)</span><br><span class="line">#array([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]])</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"># 增加维度</span><br><span class="line"></span><br><span class="line">zy_num = np.arange(10)</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line">zy_num = zy_num[np.newaxis, :]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(1, 10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zy_num = zy_num[ :, np.newaxis]</span><br><span class="line">zy_num.shape</span><br><span class="line">#(10, 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 压缩维度</span><br><span class="line"></span><br><span class="line">zy_num = zy_num.squeeze()</span><br><span class="line">zy_num</span><br><span class="line">#array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])</span><br><span class="line"></span><br><span class="line">zy_num.shape</span><br><span class="line">#(10,)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 转置</span><br><span class="line"></span><br><span class="line">zy_num.shape = 2,5</span><br><span class="line"></span><br><span class="line">zy_num</span><br><span class="line">#array([[0, 1, 2, 3, 4],</span><br><span class="line">       [5, 6, 7, 8, 9]])</span><br><span class="line"></span><br><span class="line">zy_num.transpose()   # zy_num.T</span><br><span class="line">#array([[0, 5],[1, 6], [2, 7], [3, 8], [4, 9]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数组的连接</span><br><span class="line"></span><br><span class="line">a = np.array([[1,2, 3, 4], [5, 6, 7, 8]])</span><br><span class="line">b = np.array([[0, 3, 5, 7], [8, 0, 10, 21]])</span><br><span class="line"></span><br><span class="line">c = np.concatenate((a, b))</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"># array([[ 1,  2,  3,  4], [ 5,  6,  7,  8],[ 0,  3,  5,  7], [ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = np.confatenate((a, b), axis = 1)</span><br><span class="line">c</span><br><span class="line"></span><br><span class="line">np.vstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4],[ 5,  6,  7,  8],[ 0,  3,  5,  7],[ 8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line">np.hstack((a,b))</span><br><span class="line"># array([[ 1,  2,  3,  4,  0,  3,  5,  7],[ 5,  6,  7,  8,  8,  0, 10, 21]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a</span><br><span class="line"># array([[1, 2, 3, 4],[5, 6, 7, 8]])</span><br><span class="line"></span><br><span class="line">a.flatten()</span><br><span class="line">a.ravel()</span><br><span class="line"># array([1, 2, 3, 4, 5, 6, 7, 8])</span><br></pre></td></tr></table></figure><ol start="8"><li>生成数组</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">np.arange(10)</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2)</span><br><span class="line"># array([ 2,  4,  6,  8, 10, 12, 14, 16, 18])</span><br><span class="line"></span><br><span class="line">np.arange(2,20,2, dtype= np.float32)</span><br><span class="line"># array([ 2.,  4.,  6.,  8., 10., 12., 14., 16., 18.], dtype=float32)</span><br><span class="line"></span><br><span class="line"># 构造等距数组</span><br><span class="line">np.linspace(0, 10, 5)</span><br><span class="line"># array([ 0. ,  2.5,  5. ,  7.5, 10. ])</span><br><span class="line"></span><br><span class="line"># 构造行向量，列向量</span><br><span class="line">np.r_[0:10:1]</span><br><span class="line">np.c_[0:10:1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">np.zeros(3)</span><br><span class="line"># array([0., 0., 0.])</span><br><span class="line"></span><br><span class="line">np.zeros((3,3))</span><br><span class="line"></span><br><span class="line">np.ones(3)</span><br><span class="line"># array([1., 1., 1.])</span><br><span class="line"></span><br><span class="line">np.ones((3,3)) * 8</span><br><span class="line"></span><br><span class="line">zy_num = np.array([1,2,3, 4])</span><br><span class="line">np.zeros_like(zy_num)</span><br><span class="line"># array([0, 0, 0, 0])</span><br></pre></td></tr></table></figure><ol start="9"><li>运算</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># 乘法</span><br><span class="line">x = np.array([5,5])</span><br><span class="line">y = np.array([2,3])</span><br><span class="line"></span><br><span class="line">np.multiply(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">np.dot(x,y)</span><br><span class="line"># array([10, 15])</span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 1])</span><br><span class="line">y = np.array([[1, 2, 3],[4, 5, 6]])</span><br><span class="line"></span><br><span class="line">print(x * y)</span><br><span class="line">#[[1 2 3] [4 5 6]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.array([1, 1, 2])</span><br><span class="line">y = np.array([1, 1, 1])</span><br><span class="line">x == y</span><br><span class="line"># array([ True,  True, False])</span><br><span class="line"></span><br><span class="line">np.logical_and(x,y)</span><br><span class="line">np.logical_or(x,y)</span><br><span class="line">np.logical_not(x,y)</span><br></pre></td></tr></table></figure><ol start="10"><li>随机模块</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 随机浮点数</span><br><span class="line">np.random.rand(3,2)</span><br><span class="line"></span><br><span class="line"># 随机整数</span><br><span class="line">np.random.randint(10, size = (2,4))</span><br><span class="line"># array([[4, 6, 7, 8], [7, 6, 2, 3]])</span><br><span class="line"></span><br><span class="line"># 随机数</span><br><span class="line">np.random.rand()</span><br><span class="line">np.random.random_sample()</span><br><span class="line"></span><br><span class="line"># 0-10中随机找三个数</span><br><span class="line">np.random.randint(0, 10, 3)</span><br><span class="line"># array([8, 6, 9])</span><br><span class="line"></span><br><span class="line"># 随机高斯分布</span><br><span class="line">mu, sigma = 0, 0.2</span><br><span class="line">np.random.normal(mu, sigma, 5)</span><br><span class="line"></span><br><span class="line"># 设置数字精度, 输出数精度为小数点后3位</span><br><span class="line">np.set_printoptions(precision = 3 )</span><br><span class="line"></span><br><span class="line"># 洗牌， 打乱排列顺序</span><br><span class="line">zy_num = np.arange(15)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])</span><br><span class="line"></span><br><span class="line">np.random.shuffle(zy_num)</span><br><span class="line">zy_num</span><br><span class="line"># array([ 1,  5,  4, 11, 14,  9,  8,  6,  7,  3,  0,  2, 10, 12, 13])</span><br></pre></td></tr></table></figure><ol start="11"><li>读取写入文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># 写一个名为tang的txt文件</span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1 2 3 4 5 6 </span><br><span class="line">2 3 4 5 5 7</span><br><span class="line"></span><br><span class="line"># 读取tang文件</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;)</span><br><span class="line">data</span><br><span class="line"></span><br><span class="line"># array([[1., 2., 3., 4., 5., 6.],[2., 3., 4., 5., 5., 7.]])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">%%writefile tang.txt</span><br><span class="line">a, b, c, d, e, f</span><br><span class="line">1, 2, 3, 4, 5, 6 </span><br><span class="line">2, 3, 4, 5, 5, 7</span><br><span class="line"></span><br><span class="line"># 不读取第一行</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1)</span><br><span class="line"></span><br><span class="line"># 指定使用哪几列</span><br><span class="line">data = np.loadtxt(&apos;tang.txt&apos;, delimiter = &apos;,&apos;, skiprows =1, usecols = (0,1, 4))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写入数组文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num)</span><br><span class="line"></span><br><span class="line"># 保存成指定格式</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;)</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%.2f&apos;)</span><br><span class="line"></span><br><span class="line"># 指定分隔符</span><br><span class="line">np.savetxt(&apos;tang.txt&apos;, zy_num, fmt= &apos;%d&apos;, delimiter = &apos;,&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 读写文件</span><br><span class="line"></span><br><span class="line">zy_num = np.array([[1, 2, 3], [4, 5, 6]])</span><br><span class="line">np.save(&apos;zy_num.npy&apos;, zy_num)</span><br><span class="line"></span><br><span class="line">zy_num = np.load(&apos;zy_num.npy&apos;)</span><br><span class="line"></span><br><span class="line"># 将两个文件保存在同一文件夹，并进行读写</span><br><span class="line">zy_num2 = np.arange(10)</span><br><span class="line">np.savez(&apos;zy_npz&apos;, a = zy_num, b = zy_num2)</span><br><span class="line"></span><br><span class="line">data = np.load(&apos;zy.npz&apos;)</span><br><span class="line">data.keys()</span><br><span class="line"># [&apos;a&apos;, &apos;b&apos;]</span><br><span class="line"></span><br><span class="line">data[&apos;a&apos;]</span><br><span class="line"># array([[1, 2, 3],[4, 5, 6]])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫学习</title>
      <link href="/2018/07/12/%E6%8A%80%E8%83%BD-python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/"/>
      <url>/2018/07/12/%E6%8A%80%E8%83%BD-python%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="爬取英雄联盟-英雄皮肤图片"><a href="#爬取英雄联盟-英雄皮肤图片" class="headerlink" title="爬取英雄联盟-英雄皮肤图片"></a>爬取英雄联盟-英雄皮肤图片</h1><ol><li><p>前言</p><blockquote><p>最近自己在学爬虫， 有天朋友问我能否爬取英雄联盟的皮肤图片到本地，好实现快速浏览，折腾了半个小时，终于成功了。</p></blockquote></li><li><p>过程</p></li></ol><ul><li>分析过程<blockquote><p>找到皮肤图片链接， 研究规律。</p><blockquote><p>在抓取图片之前，我们需要分析网址链接的构成， 以便找到其中的规律。</p></blockquote><blockquote><p><img src="https://i.loli.net/2018/07/17/5b4e086d05abd.png" alt="英雄联盟图片"></p></blockquote><p>打开英雄联盟网站, 点击其中的一个英雄， 我们可以看到一个英雄有1-6个皮肤甚至更多，且我们很容易从每个皮肤链接中找到规律。</p><p><img src="https://i.loli.net/2018/07/17/5b4e09769c56a.png" alt="英雄皮肤"></p><p><img src="https://i.loli.net/2018/07/17/5b4e0ac67e187.png" alt="狐狸皮肤"></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 英雄1</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small266002.jpg</span><br><span class="line"></span><br><span class="line"># 英雄2</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103000.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103001.jpg</span><br><span class="line">http://ossweb-img.qq.com/images/lol/web201310/skin/small103002.jp</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>从以上的链接中，我们可以知道英雄皮肤的链接规律为：</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;http://ossweb-img.qq.com/images/lol/web201310/skin/small&quot; + &quot;英雄代号&quot; + &quot;0&quot; + &quot;01-10&quot;</span><br></pre></td></tr></table></figure><ul><li>找到每个英雄对应的数字代号<blockquote><p>那么我们需要解决的问题就变成了到每个英雄对应的代号是多少？</p><p>通过搜索，我们发现每个英雄对应的代号存在champion.js文件中</p><p><img src="https://i.loli.net/2018/07/17/5b4e0df090d6c.png" alt="英雄对应的代号"></p><p>从Headers中， 我们可以看到champion.js 对应的url为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;我们通过正则表达式， 把js中对应的英雄代号提取出来。</span><br><span class="line">&gt;</span><br><span class="line">&gt; 通过以上把链接拼凑起来，我们就可以把链接对应的图片皮肤下载到本地了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>import requests<br>import re<br>import json<br>import urllib<br>url = “<a href="http://lol.qq.com/biz/hero/champion.js&quot;" target="_blank" rel="noopener">http://lol.qq.com/biz/hero/champion.js&quot;</a><br>hd ={‘User-Agent’:”Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0”}<br>data = requests.get(url,headers = hd).content<br>datas = data.decode()<br>pat = ‘“keys”:(.*?),”data”‘<br>imglist = re.findall(pat,datas)<br>datass = json.loads(imglist[0])<br>for i in datass:<br>    try:<br>        for j in range(12):<br>            try:<br>                num = str(j)</p><pre><code>            # print(num)            if len(num) == 1:                hero_num = &quot;00&quot; + num            elif len(num) ==2:                hero_num = &quot;0&quot; + num            numstr = i + hero_num            urls = &apos;http://ossweb-img.qq.com/images/lol/web201310/skin/big&apos;+ numstr +&apos;.jpg&apos;            localfile = &quot;E:/张宇个人文件/英雄联盟/&quot; + str(i) + str(num) +  &quot;.jpg&quot;            urllib.request.urlretrieve(urls, filename = localfile)        except Exception as err:            passexcept Exception as err:    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 爬取王者荣耀-英雄图片</span><br><span class="line"></span><br><span class="line">1. 代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="用python爬取王者荣耀皮肤"><a href="#用python爬取王者荣耀皮肤" class="headerlink" title="用python爬取王者荣耀皮肤"></a>用python爬取王者荣耀皮肤</h1><p>import requests<br>import re<br>import urllib</p><p>url = “<a href="http://pvp.qq.com/web201605/herolist.shtml&quot;" target="_blank" rel="noopener">http://pvp.qq.com/web201605/herolist.shtml&quot;</a><br>hd ={‘User-Agent’:”Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/14.0.802.30 Safari/535.1 SE 2.X MetaSr 1.0”}<br>data = requests.get(url,headers = hd)<br>pat = ‘a href=”herodetail/(.*?).shtml’<br>imglist = re.compile(pat, re.S).findall(data.text)</p><p>for i in imglist:</p><pre><code># print(i)try:    for j in [1,2,3,4,5,6]:        try:            numstr = str(i)+&apos;/&apos; +str(i)+&apos;-mobileskin-&apos;+ str(j)            # print(numstr)            urls = &apos;https://game.gtimg.cn/images/yxzj/img201606/heroimg/&apos;+numstr+&apos;.jpg&apos;            print(urls)            localfile = &quot;E:/张宇个人文件/官网图片/&quot; + str(i)+ str(j)+  &quot;.jpg&quot;            urllib.request.urlretrieve(urls, filename = localfile)        except Exception as err:             passexcept Exception as err:    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line"># 爬取网站图片</span><br><span class="line">1. 代码</span><br><span class="line">* 构建用户代理池</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="这里可以随意加多个浏览器"><a href="#这里可以随意加多个浏览器" class="headerlink" title="这里可以随意加多个浏览器"></a>这里可以随意加多个浏览器</h1><p>uapools = [<br>    “Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)”,<br>    “Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)”,<br>    “Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko”,<br>    “Mozilla/5.0 (compatible; MSIE 10.0; Windows Phone 8.0; Trident/6.0; IEMobile/10.0; ARM; Touch; NOKIA; Lumia 920)”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64; rv:6.0.2) Gecko/20100101 Firefox/6.0.2”,<br>    “Opera/9.80 (Windows NT 6.1; WOW64) Presto/2.12.388 Version/12.12”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0 Safari/537.36 OPR/15.0”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.57 Safari/537.17”,<br>    “Mozilla/5.0 (X11; CrOS armv7l 3428.193.0) AppleWebKit/537.22 (KHTML, like Gecko) Chrome/25.0.1364.126 Safari/537.22”,<br>    “Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2”,<br>    “Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/533.9 (KHTML, like Gecko) Maxthon/3.0 Safari/533.9”,<br>]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 爬取并下载图片</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import re<br>import requests<br>import urllib.request</p><h1 id="uapools-如上所示"><a href="#uapools-如上所示" class="headerlink" title="uapools 如上所示"></a>uapools 如上所示</h1><p>for ua in uapools:<br>    hd ={‘User-Agent’:ua}<br>    i = uapools.index(ua)</p><pre><code># 限制爬取页数， 我们爬取前10页if i &gt; 10:    breaktry:    url = &quot;http://www.iyuanqi.com/home/funimg/fun_list/m/Home/cp_uid/all/sort/30hot/p/&quot;+str(i)+&quot;.html&quot;    data = requests.get(url, headers = hd)    pat = &apos;class=&quot;lazy-img&quot; src=&quot;(.*?)&quot; data-original=&quot;&apos;    imglist = re.compile(pat, re.S).findall(data.text)    for j in range(0, len(imglist)):        try:            thisimg = imglist[j]            thisimgurl = thisimg            localfile = &quot;E:/张宇个人文件/网络图片/&quot; + str(i) + str(j) + &quot;.jpg&quot;            urllib.request.urlretrieve(thisimgurl, filename = localfile)        except Exception as err:            passexcept Exception as err:    pass</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 爬取天善课程数据表存储到MYSQL</span><br><span class="line"></span><br><span class="line">1. 前言</span><br><span class="line">&gt; 天善智能是一个商业智能与大数据在线社区，有很多很好的学习课程。我们用爬虫来爬取网站的所有课程并存储到MYSQL数据库中， 以便于进一步的分析。</span><br><span class="line"></span><br><span class="line">2. 用python在MYSQL中创建名为zhanhyu的数据库</span><br><span class="line"></span><br><span class="line"> * 用python连接MYSQL数据库</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import pymysql</p><h1 id="因为本地mysql没有设置密码，-所以没有加password参数"><a href="#因为本地mysql没有设置密码，-所以没有加password参数" class="headerlink" title="因为本地mysql没有设置密码， 所以没有加password参数"></a>因为本地mysql没有设置密码， 所以没有加password参数</h1><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306)</p><h1 id="用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句"><a href="#用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句" class="headerlink" title="用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句"></a>用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</h1><p>cursor = db.cursor()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> * 创建一个新的数据库， 名字叫做zhangyu</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h1 id="cursor-execute-执行真正的sql语句-DEFAULT-指定默认值"><a href="#cursor-execute-执行真正的sql语句-DEFAULT-指定默认值" class="headerlink" title="cursor.execute 执行真正的sql语句, DEFAULT 指定默认值"></a>cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</h1><p>cursor.execute(“CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8”)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3.  在zhangyu库中创建tianshan2_datas的数据表</span><br><span class="line"></span><br><span class="line"> * 指定在zhangyu这个数据库中运行</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306, db=’zhangyu’)<br>cursor = db.cursor()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* 用sql语句创建名为tianshan2_datas的表</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>sql = ‘CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))’</p><p>curosr.exectute(sql)</p><p>db.close()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">4. 爬取天善智能网站的数据</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import re<br>import requests</p><p>for i in range(1,5):</p><pre><code># 观察天善课程链接， 找出规律thisurl = &quot;https://edu.hellobi.com/course/&quot; + str(i+1)# 用requests库抓取数据hd ={&quot;user-agent&quot;: &quot;Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36&quot;}data = requests.get(thisurl, headers = hd)#用正则表达式进行解析title_pat = &apos;&lt;li class=&quot;active&quot;&gt;(.*?)&lt;/li&gt;&apos;price_pat = &apos;class=&quot;price-expense&quot;&gt;&lt;sub&gt;￥&lt;/sub&gt;(.*?)&lt;/span&gt;&apos;numb_pat = &apos;class=&quot;course-view&quot;&gt;(.*?)&lt;/span&gt;&apos;title = re.compile(title_pat, re.S).findall(data.text)if(len(title)&gt;0):    title = title[0]else:    continueprice = re.compile(price_pat, re.S).findall(data.text)if(len(price)&gt;0):    price = price[0]else:    price = &apos;免费&apos;numb = re.compile(numb_pat, re.S).findall(data.text)if(len(numb)&gt;0):    numb = numb[0]else:    numb = &apos;缺失&apos;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. 将爬取的数据存储到名为zhangyu数据库的tianshan2_datas表中</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><pre><code>con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)cursor = con.cursor()sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;try:    cursor.execute(sql, (title, price, numb))    con.commit()except:    con.rollback()con.close()</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----</span><br><span class="line">&gt; 这样，我们就成功的把爬取的数据保存到mysql数据库中，方便我们查询使用。</span><br><span class="line"></span><br><span class="line">6. 完整代码</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>import pymysql</p><h1 id="因为本地mysql没有设置密码，-所以没有加password参数-1"><a href="#因为本地mysql没有设置密码，-所以没有加password参数-1" class="headerlink" title="因为本地mysql没有设置密码， 所以没有加password参数"></a>因为本地mysql没有设置密码， 所以没有加password参数</h1><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306)</p><h1 id="用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句-1"><a href="#用cursor-方法获取MYSQL的操作游标，-利用游标来执行SQL语句-1" class="headerlink" title="用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句"></a>用cursor()方法获取MYSQL的操作游标， 利用游标来执行SQL语句</h1><p>cursor = db.cursor()</p><h1 id="cursor-execute-执行真正的sql语句-DEFAULT-指定默认值-1"><a href="#cursor-execute-执行真正的sql语句-DEFAULT-指定默认值-1" class="headerlink" title="cursor.execute 执行真正的sql语句, DEFAULT 指定默认值"></a>cursor.execute 执行真正的sql语句, DEFAULT 指定默认值</h1><p>cursor.execute(“CREATE DATABASE zhangyu DEFAULT CHARACTER SET utf8”)</p><p>db = pymysql.connect(host = ‘localhost’, user = ‘root’,  port = 3306, db=’zhangyu’)<br>cursor = db.cursor()<br>sql = ‘CREATE TABLE IF NOT EXISTS tianshan2_datas (name VARCHAR(255) NOT NULL, pirce VARCHAR(255) NOT NULL,numbers VARCHAR(255), PRIMARY KEY (name))’<br>cursor.execute(sql)<br>db.close()</p><p>import re<br>import pymysql<br>import requests</p><p>for i in range(0,284):<br>    thisurl = “<a href="https://edu.hellobi.com/course/&quot;" target="_blank" rel="noopener">https://edu.hellobi.com/course/&quot;</a> + str(i+1)<br>    hd ={“user-agent”: “Mozilla/5.0 AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36”}<br>    data = requests.get(thisurl, headers = hd)<br>    title_pat = ‘<li class="active">(.<em>?)</em></li>‘<br>    price_pat = ‘class=”price-expense”&gt;<sub>￥</sub>(.?)‘<br>    numb_pat = ‘class=”course-view”&gt;(.*?)‘<br>    title = re.compile(title_pat, re.S).findall(data.text)<br>    if(len(title)&gt;0):<br>        title = title[0]<br>    else:<br>        continue<br>    price = re.compile(price_pat, re.S).findall(data.text)<br>    if(len(price)&gt;0):<br>        price = price[0]<br>    else:<br>        price = ‘免费’<br>    numb = re.compile(numb_pat, re.S).findall(data.text)<br>    if(len(numb)&gt;0):<br>        numb = numb[0]<br>    else:<br>        numb = ‘缺失’</p><pre><code>con = pymysql.connect(host = &apos;localhost&apos;, user = &apos;root&apos;, port = 3306, db = &apos;zhangyu&apos;)cursor = con.cursor()sql = &apos;insert into  tianshan2_datas(name, pirce, numbers) values(%s,%s,%s)&apos;try:    cursor.execute(sql, (title, price, numb))    con.commit()except:    con.rollback()con.close()</code></pre><p><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> 数据分析技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/2018/04/23/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E9%9F%B3%E4%B9%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/04/23/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E9%9F%B3%E4%B9%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="李志-回答"><a href="#李志-回答" class="headerlink" title="李志-回答"></a>李志-回答</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/Xys5wvaDUnQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>卑鄙是卑鄙者的通行证，<br>高尚是高尚者的墓志铭。<br>看吧，在那镀金的天空中，<br>飘满了死者弯曲的倒影。<br>冰川季过去了，<br>为什么到处都是冰棱？<br>好望角发现了，<br>为什么死海里千帆向竞？</p><p>我来到这个世界上，<br>只带着纸、绳索和背影，<br>为了在审判之前，<br>宣读那些被判决了的声音：<br>告诉你吧，世界，<br>我不相信！<br>纵使你脚下有一千名挑战者，<br>那就把我算作那第一千零一名。</p><p>我不相信天是蓝的，<br>我不相信雷的回声；<br>我不相信梦是假的，<br>我不相信死无报应。<br>如果海洋注定要决堤，<br>就让所有的苦水都注入我心中；<br>如果陆地注定要上升，<br>就让人类重新选择生存的峰顶。<br>新的转机和闪闪的星斗，<br>正在缀满没有遮拦的天空，<br>那是五千年的象形文字，<br>那是未来人们凝视的眼睛。</p><h1 id="李志-忽然"><a href="#李志-忽然" class="headerlink" title="李志-忽然"></a>李志-忽然</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/5lcAFJ7iUV0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-这个世界会好吗？"><a href="#李志-这个世界会好吗？" class="headerlink" title="李志-这个世界会好吗？"></a>李志-这个世界会好吗？</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/zFhMB-kc5Q4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-热河"><a href="#李志-热河" class="headerlink" title="李志-热河"></a>李志-热河</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/l74opoCRxqc" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-黑色信封"><a href="#李志-黑色信封" class="headerlink" title="李志-黑色信封"></a>李志-黑色信封</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/FG8mD7HIJn0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/1Pv8SNZh1uI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-梵高先生"><a href="#李志-梵高先生" class="headerlink" title="李志-梵高先生"></a>李志-梵高先生</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/gciZl8TC2TE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-关于郑州的回忆"><a href="#李志-关于郑州的回忆" class="headerlink" title="李志-关于郑州的回忆"></a>李志-关于郑州的回忆</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/eNQxLud6WNw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-人民不需要自由"><a href="#李志-人民不需要自由" class="headerlink" title="李志-人民不需要自由"></a>李志-人民不需要自由</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/fKYfH3N9KzA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-墙上的向日葵"><a href="#李志-墙上的向日葵" class="headerlink" title="李志-墙上的向日葵"></a>李志-墙上的向日葵</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/iEasfCQVjVE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/KA2AIuwydqE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-光阴路的夏天"><a href="#李志-光阴路的夏天" class="headerlink" title="李志-光阴路的夏天"></a>李志-光阴路的夏天</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/px39IB42q-k" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-动静"><a href="#李志-动静" class="headerlink" title="李志-动静"></a>李志-动静</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/TXuLHJm9wsU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-看见"><a href="#李志-看见" class="headerlink" title="李志-看见"></a>李志-看见</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/fK6--sNLE-s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="李志-14跨年演唱会"><a href="#李志-14跨年演唱会" class="headerlink" title="李志-14跨年演唱会"></a>李志-14跨年演唱会</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/rkM-dTr89kQ" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="左小祖咒-陈升-爱情的枪"><a href="#左小祖咒-陈升-爱情的枪" class="headerlink" title="左小祖咒/陈升-爱情的枪"></a>左小祖咒/陈升-爱情的枪</h1> <iframe width="560" height="315" src="https://www.youtube.com/embed/Lzc2rHbmymM" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="Pink-Floyd-Wish-You-Were-Here"><a href="#Pink-Floyd-Wish-You-Were-Here" class="headerlink" title="Pink Floyd - Wish You Were Here"></a>Pink Floyd - Wish You Were Here</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/IXdNnw99-Ic" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/EodytPmki5s" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="Queen-Love-Of-My-Life"><a href="#Queen-Love-Of-My-Life" class="headerlink" title="Queen - Love Of My Life"></a>Queen - Love Of My Life</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/sUJkCXE4sAA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><iframe width="560" height="315" src="https://www.youtube.com/embed/v3xwCkhmies" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="轻音乐-Cello-Collection-with-Calcifer"><a href="#轻音乐-Cello-Collection-with-Calcifer" class="headerlink" title="轻音乐-Cello Collection with Calcifer"></a>轻音乐-Cello Collection with Calcifer</h1><iframe width="560" height="315" src="https://www.youtube.com/embed/JpnpZH_IY8I" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刻意练习</title>
      <link href="/2018/04/16/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/16/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E3%80%8A%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="读后笔记与文章"><a href="#读后笔记与文章" class="headerlink" title="读后笔记与文章"></a>读后笔记与文章</h1><p>–2018-04-16 </p><h2 id="1-什么是刻意练习"><a href="#1-什么是刻意练习" class="headerlink" title="1. 什么是刻意练习"></a>1. <strong>什么是刻意练习</strong></h2><ul><li>刻意练习是一个在已经有明确方法论的行业内， 个人通过制定一系列明确的目标， 不断进行刚好超出他们能力范围的练习， 并通过检验反馈不断地对练习进行调整， 从而创建有效的知识晶体， 保存在长时记忆中， 以便以后遇到问题及时响应。</li></ul><h2 id="2-刻意练习背后的原理是什么"><a href="#2-刻意练习背后的原理是什么" class="headerlink" title="2. 刻意练习背后的原理是什么"></a>2. <strong>刻意练习背后的原理是什么</strong></h2><ul><li><p><strong>利用身体偏爱稳定的倾向，进行刚好超出能力范围的练习</strong><br>我们人类的身体天生偏爱稳定性， 我们的身体通过各种各样的反馈机制来保持身体各项指标的稳定性。当身体系统长时间的感受到压力，原来的平衡再无法保持时， 身体便会开始响应那些变化，让那些变化更加容易，  进而达到重新的平衡。但在过长的时间内过分的逼迫自己， 可能导致倦怠和低效。 </p><blockquote><p>例如：<br>对于跑步锻炼来说， 如果你短时间剧烈的运动，导致身体中的能量与氧气下降， 身体就会通过心跳加速以提高氧气供给，并将储存在不同部位的能量拿来给肌肉供给，以达到平衡状态。只要体育锻炼并未让身体平衡机制无法正常运转，就很难引起身体上的生理变化。</p><p>因此， 你需要足够努力的锻炼并保持足够长的时间，才能让身体形成新的平衡。要想要改变不断地进行下去， 你就需要不断地加码：跑的更远，更快，负重跑等。 一旦你不给自己在跑步方面施加压力， 你将停止改进的脚步，停留在新的平衡内。 但如果你一上来玩命的跑， 可能只让自己受伤。 </p><p>同理，对大脑进行长时间的锻炼， 大脑也会以各种不同的方式来重新布置神经元之间的连接，以达到快速地相应。 </p></blockquote></li><li><p><strong>为了创建有效的知识晶体</strong></p><p><code>知识晶体就是我们思考某件事物时心理所创建的知识结构。</code></p><p>刻意练习的目的之一就是<strong>创建有效的知识晶体</strong>。 信息预先存在这些晶体中，并长时间保存在记忆之中，当生活中遇到类似的情况可快速地进行响应。</p><p>行业内的杰出人物正式由于他们经过多年的积累，针对行业中可能遇到的不同局面，创建了高度复杂和精密的知识晶体。反过来这些知识晶体让他们更好地在一系列事物中找到规律，更好地理解信息，指定计划，高效的学习。</p><blockquote><p>比如： 你听到‘猫’这个词就会想到毛茸茸可爱的猫，它的样子，叫声等具体的内容。你在生活中对‘猫’这个词创建了包括图像， 气味，声音等一系列的晶体结构。</p><p>同理，我们要想更好地创建对某一动物的知识晶体，最好的方法就是花一点点的时间来了解它们，摸摸它的毛发，和它玩耍，并且细心地观察它的一举一动。 </p></blockquote></li></ul><h2 id="3-如何在一个行业中进行刻意练习"><a href="#3-如何在一个行业中进行刻意练习" class="headerlink" title="3. 如何在一个行业中进行刻意练习"></a>3. <strong>如何在一个行业中进行刻意练习</strong></h2><ul><li><p>找到一位好的导师</p><p> 如果可以的话， 找到一个好的导师能够让自己的练习事半功倍。 好的导师能够了解什么样的行为会带来进步，能带来及时的反馈。 </p></li></ul><ul><li><p>找行业中的大牛</p><p>  我们在现实中很难找到一个好的导师， 但我们在互联网中可以很容易找到行业中的大牛。 我们<strong>首先确定大牛的指标都有哪些， 然后调查思考谁符合这些指标</strong>，算的上是真正的大牛。</p><blockquote><p>在数据分析行业， 称为大牛的特征有：有多年的行业积累，  有大厂的工作经历。 有较大的行业影响力， 愿意传播教授 技能。 通过搜索，我们可以知道：数据挖掘与数据分析博主-邓凯是数据分析里的大牛， 他在数据分析行业工作多年， 并在京东这样的大厂担任数据负责人， 微信公众号有数十万粉丝，现在成立了爱数圈这样的学习团体。 </p></blockquote></li><li><p>观察大牛都做了什么</p><p><strong>观察他们是做了什么让他们如此的杰出，运用了哪些方法让他们如此的卓越</strong>。 </p><blockquote><ul><li>不断的通过工作业务磨练自己的数据分析思维，建立了良好的互联网分析能力。</li><li>他不断地写数据分析的相关文章，总结输出，让自己不断扩大影响力。<br>这些方法途径，也是自己在进行技能学习时可以学习借鉴的方法。</li></ul></blockquote></li><li><p>学会分解目标</p><p><strong>找到一种适合自己的练习方法，并将漫长的目标分解成一个一个的小目标</strong>，每次练习都只专注于这一个目标，当达到目标时， 给自己一个小小的奖赏</p><blockquote><p>最重要的是盯紧自己的目标。</p></blockquote></li><li><p>找到自己的练习规律</p><p><strong>保证自己在短的时间内能够集中全部的注意力去练习</strong>。 一旦自己发现自己不能够保持专注力，就停下来休息。 </p><blockquote><p>经过自己这段时间的统计发现，自己能够保持专注学习的时间为一个小时， 超过一个小时自己就看不进去了。 这个时候，自己停下来放松10分钟再看，效果会好的多。 </p></blockquote></li></ul><ul><li><p>在工作中需要必要的反馈</p><p> 给自己设计某种必要的反馈， 让自己能够随着时间的推移， 不断的纠正错误和精进技巧。 </p><blockquote><p>如何创建反馈， 我觉得可以通过写作来给自己提供反馈，通过输出来倒逼输入， 在写作中发现自己的问题， 比如自己在写这篇读书笔记时就发现自己有很多的概念没有理解。 </p></blockquote></li></ul><ul><li><p>创建自己对于这个技能的知识晶体</p><p> 将工作中的项目经验和学到的知识相结合，构成强大的晶体结构。培养自己能够遇到问题迅速的响应能力。多培养自己遇到问题的解决思路。 </p><blockquote><p>隐形知识</p></blockquote></li><li><p>寻求建议</p><p>  当遇到停滞阶段时， 稍微给自己加强练习的强度，找出到底是在哪里让你停滞不前， 然后<strong>尝试换一种方法专门针对这个缺点来进行练习，或向大牛寻求建议</strong>。 </p><blockquote><p>自己的打字速度现在停滞不前</p></blockquote></li><li><p>在练习的过程中保持动机</p><p>给自己制定一个专门的时间点来进行练习，并想办法把干扰你的事物控制到最小。坚定自己可以通过刻意练习可以进步的信念。有可能的话， 加入一个社区进行学习比自己单独学习更容易坚持 </p><blockquote><p>比如：把手机调静音，去图书馆学习防止网络对自己的影响。 保持充足的睡眠，加入一个数据分析的圈子进行学习。 </p></blockquote></li><li><p>保证错误是低风险的。这样自己才能敢于犯错。 </p><blockquote><p>练习， 试错， 反馈，修正</p></blockquote></li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>当自己在进行学习时， 自己总是会想到刻意练习里的一个观点， 就是在学习过程中必须脱离自己的舒适区，让学习的内容稍微难一点， 这样的学习才会让自己进步。 每当这样想， 自己就不会抵触学习的过程了， 也让自己能够长久的坚持。</li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>–2018-12-08</p><h2 id="刻意练习区别与其他练习的特征是什么"><a href="#刻意练习区别与其他练习的特征是什么" class="headerlink" title="刻意练习区别与其他练习的特征是什么"></a>刻意练习区别与其他练习的特征是什么</h2><ol><li><p>有定义明确的特定目标<br>把大目标分解成每一个小目标，制定计划，在达成每一个小目标的过程中，纠正自己的行为方式，解决面临的问题。</p></li><li><p>具有专注的练习状态<br>尽力保持专注，集中精力，不会走神</p></li><li><p>练习包含反馈<br>你必须知道自己做的对不对，如果不对，又错在哪里。</p></li><li><p>走出舒适区</p></li></ol><h2 id="刻意练习的原则"><a href="#刻意练习的原则" class="headerlink" title="刻意练习的原则"></a>刻意练习的原则</h2><p>专注、反馈、纠正、足够的重复次数</p><hr><h1 id="延伸："><a href="#延伸：" class="headerlink" title="延伸："></a>延伸：</h1><ul><li>TED演讲： <a href="https://www.ted.com/talks/eduardo_briceno_how_to_get_better_at_the_things_you_care_about" target="_blank" rel="noopener">《how to get better at the things you care about》</a></li><li><a href="http://www.yangzhiping.com/column/deliberate-practice.html" target="_blank" rel="noopener">刻意练习的本质-阳志平</a><br>公众号：心智工具箱<br>网站：<a href="http://www.yangzhiping.com/" target="_blank" rel="noopener">http://www.yangzhiping.com/</a></li><li>论文：<a href="https://scholar.google.com.tw/scholar?q=the+role+of+Deliberate+Practice+in+the+Acquisition+of+Expert+Performance&amp;hl=zh-CN&amp;as_sdt=0&amp;as_vis=1&amp;oi=scholart" target="_blank" rel="noopener">the role of Deliberate Practice in the Acquisition of Expert Performance</a></li></ul><hr><h1 id="第二次读书笔记"><a href="#第二次读书笔记" class="headerlink" title="第二次读书笔记"></a>第二次读书笔记</h1><p>–2020年2月26</p><p>在2018年自己就看完了此书，但是自己并没有按照书中的内容践行过，自己也没有任何质的改变。这也让我明白了一个深刻的道理：读书不应该把读完作为目标，而应该能把书中的知识真正应用到生活中为目标。 要不读也是白读。 </p><p>那么在书中讲的刻意练习的方法是什么呢，总结如下：</p><ol><li><p>自己应该找到和行业大牛的差距，从而给自己设立清晰的目标。</p></li><li><p>将目标拆解成 N 个可完成的小目标，每次只盯住一个目标练习。</p></li><li><p>在练习时跳出舒适区，在短时间内注意力高度集中， 完成目标进行奖励。</p></li><li><p>每次练习时都必须有反馈，对暴露的问题进行纠正。</p></li><li><p>必须坚持去做，保持持续去做的动力。</p></li></ol><p>关键词： 目标、专注、反馈、纠正、持续。</p><p>自己在技能中为什么没有进步，原因有以下三点：</p><ol><li>自己没有一个清晰的目标，不知道自己与高手之间的差距应该怎样弥补？</li><li>自己没有持续的动力，总是躲在自己的舒适圈里。</li><li>自己的学习不能很好的用在工作中，在工作中没有体现。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习方法 </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双拼输入法</title>
      <link href="/2017/09/17/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>/2017/09/17/%E7%94%9F%E6%B4%BB-%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93-%E5%8F%8C%E6%8B%BC%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-怎么接触到双拼的？"><a href="#1-怎么接触到双拼的？" class="headerlink" title="1. 怎么接触到双拼的？"></a>1. 怎么接触到双拼的？</h1><p>自己第一次接触双拼，是看到李笑来老师的《把时间当朋友》第二章中的“盲打究竟是否值得学会”,里面提到了盲打与双拼帮助他快速进行记录笔记和文字。 于是自己就试着在网上找双拼的学习方法。</p><h1 id="2-什么是双拼？"><a href="#2-什么是双拼？" class="headerlink" title="2. 什么是双拼？"></a>2. 什么是双拼？</h1><blockquote><p>维基百科：双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文单字了。</p></blockquote><p>理解起来也很简单，比如你要拼写 <code>张</code> <code>红</code> 这两个字， 用全拼的话可能你得输入 <code>zhang</code> <code>hong</code>， 而用小鹤双拼的话， 你只需要输入<code>vh</code> <code>hs</code> 就可以显示。 <code>v</code> 代表<code>zh</code> , <code>h</code> 代表<code>ang</code> , <code>s</code>代表<code>ong</code></p><p>双拼的语法也有很多种，比如小鹤双拼、自然码双拼、紫光拼音双拼、<br>搜狗拼音双拼、微软拼音双拼、智能ABC双拼。 每种双拼对应的语法也都不一样。</p><p>自己学习的是小鹤双拼，语法图是这样的：<br><img src="http://static.zybuluo.com/zhangyu756897669/ge8055q1u83xn00n84korx3y/%E5%B0%8F%E9%B9%A4%E5%8F%8C%E6%8B%BC.png" alt="小鹤双拼.png-156kB"></p><p>在搜狗输入法上点击 <code>设置</code>—— <code>属性设置</code> —— <code>常用</code> —— <code>特殊习惯</code>—— <code>双拼</code>  就可以使用了。 </p><h1 id="3-学习的过程"><a href="#3-学习的过程" class="headerlink" title="3. 学习的过程"></a>3. 学习的过程</h1><p>刚开始学习小鹤双拼的时候， 自己是完全不习惯的， 因为想要使用小鹤双拼进行文字输入，就得记住每个字母对应的韵母， 自己每输入一个字， 就得想一下这个字的韵母是什么， 对应到按键上的那个字母又是什么。 再去输入，说实话当时输入字的效率低下到令人发指，而且往往记不住，自己只好打印了一张语法表贴在自己的电脑旁， 忘了就在表上找。 好几次忍不住偷偷换成了全拼， 特别是在工作着急的情况下。 </p><p>就这样别别扭扭用了一周之后， 才发现自己已经能够慢慢不看语法表了。 （这让我都有点怀疑自己的智商，因为网上说基本一周就可以很熟练了）<br>一个月过后自己才做到了输入基本不卡壳，但如果旁边有人一紧张还是会忘掉如何输入了。 现在用了一年多， 自己已经能够无意识的使用双拼了。 如果你现在问我键盘上的字母在双拼中代表哪个韵母，自己可能真的答不上来，但只要自己在键盘上打字，自己就能够无意识的打出来。 </p><h1 id="4-学习双拼的优点与缺点"><a href="#4-学习双拼的优点与缺点" class="headerlink" title="4. 学习双拼的优点与缺点"></a>4. 学习双拼的优点与缺点</h1><p>( 1 ). 优点</p><ul><li><p>简洁，同样一个词全拼要五六下，双拼只需要两下</p></li><li><p>感觉节省了时间，更喜欢在键盘上敲字了。 （至于是否真正节省了时间，自己没有做过对比）</p></li></ul><p>( 2 ). 缺点</p><ul><li>全拼不会用了， 有时在别人的电脑上输入文字总是很别扭，老出错，总想着把输入法改成双拼</li><li>有时大脑短路会想不起来双拼的语法</li></ul><h1 id="5-感悟"><a href="#5-感悟" class="headerlink" title="5. 感悟"></a>5. 感悟</h1><ul><li><p>任何学习都是不可逆的，当你学了到了一项技能，你就不可能再像从前没学过一样生活。 </p></li><li><p>最可怕的不是自己知道自己不知道，而是不知道自己不知道。 </p><blockquote><p>比如自己学习双拼，自己以前根本不知道还有双拼这么一种输入法，就更不会产生要学习这种输入法的冲动。</p><p><strong>如何解决自己不知道自己不知道的知识</strong>，自己目前能够想到的方法是：多读书，多关注大牛，多了解别人是怎么工作、生活。</p></blockquote></li><li><p>有些东西只有自己亲身经历过后才能有所体会，哪怕是坏的体验。</p><blockquote><p>如果只是看别人推荐而不去坚持使用双拼， 我就不能体会到大脑下意识使用双拼输入的快感。当然，也许会出现这种情况， 你付出了时间，付出了精力，而这项技能对你的生活影响并不大。这就需要你前期做一些搜索调查。</p></blockquote><p>延伸到生活上，要是我不来北京生活，不来北京工作，我就没有机会知道来北京到底会面临什么困难，到底对自己的职业发展是否有益。也许最后自己会失败，可那又怎么样，自己的人生自己做主。</p><blockquote><p>2020年2月26：现在在北京已经呆了马上快3年了，自己虽然已经转行做数据分析了，但是现在自己的职业发展并不好，甚至犹豫自己是否还应呆在北京。</p></blockquote></li><li><p>学会一项技能，不是只是了解它，而是能够在生活中无意识的使用它</p><blockquote><p> 一项技能，只是了解是远远不够的， 你要去不断的磨练，打磨，直到它成为你大脑的一部分。 学会的标准就是：你能否不需要专门思考就能够调用它。 </p></blockquote></li><li><p>要学习那些你通过短时间学会,就能够一辈子用的上的知识。</p><h1 id="6-延伸"><a href="#6-延伸" class="headerlink" title="6. 延伸"></a>6. 延伸</h1><blockquote><ul><li><p>总是听很多的牛人说，写作是非常重要的一项技能，对一个人清晰思考问题是非常有帮助的，然而自己却迟迟没有行动，主要还是觉得自己语言词汇匮乏， 缺乏独立思考，怕自己语无伦次。</p></li><li><p>其实又想想，写作这东西这就和自己刚开始学习双拼时一样，开始你觉得自己没有可能学会，也许过一段时间你就能够发现自己的进步， 你不去坚持写又怎么能够证明自己一定学不会呢？</p></li><li><p>自己认为学习是一个自我验证的过程：你认为自己不可能学会，你就不会坚持去学；你不坚持去学，你就不会有进步， 从而你就不会看到到自己能够学会的结果，也就证明了自己确实学不会。<strong>相反</strong>， 你认为自己能学会，你就坚持去学，看到自己的进步，最终的确学会了，也证明了自己确实能够学会。</p></li></ul></blockquote></li></ul><h1 id="7-未解决问题"><a href="#7-未解决问题" class="headerlink" title="7. 未解决问题"></a>7. 未解决问题</h1><ul><li>如何运用心智的力量在还没有机会亲身体验的情况下，仅凭心智就可以像真实经历过一样深刻体会？</li><li>如何解决 害怕自己付出了时间，付出了精力，而没有一个好的结果</li></ul><hr><p>参考资料： <a href="https://book.douban.com/subject/3609132/" target="_blank" rel="noopener">《把时间当朋友》</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
